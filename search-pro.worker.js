const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const l of e.keys())if(l===F){const a=o[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=u;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=o[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=o[f+y]+ +b,A=o[f+y+1]+1,w=o[p+y]+1,L=o[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}W(e.get(l),t,s,n,o,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const l=new Map;l.set(u.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(u),e=l}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const l of Object.keys(u)){const a=u[l],h=e._fieldIds[l],m=o.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f==null||f.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,o,u,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,o,u,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(u),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=k(u),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(u,d)),u=l,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),l=u.includes("#"),[a,h]=u.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>o.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(o.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in o)for(const c of o.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":1462,\"nextId\":1462,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-5ac1f67a\",\"2\":\"v-5ac1f67a#简介\",\"3\":\"v-5ac1f67a#核心\",\"4\":\"v-5ac1f67a#优点\",\"5\":\"v-5ac1f67a#缺点\",\"6\":\"v-5ac1f67a#http-协议\",\"7\":\"v-5ac1f67a#请求报文\",\"8\":\"v-5ac1f67a#响应报文\",\"9\":\"v-5ac1f67a#ajax-基本操作-原生\",\"10\":\"v-5ac1f67a#设置-query-参数的方式\",\"11\":\"v-5ac1f67a#post-设置请求体的方式\",\"12\":\"v-5ac1f67a#设置请求头信息\",\"13\":\"v-5ac1f67a#服务端响应-json-数据\",\"14\":\"v-5ac1f67a#get-请求-ajax-不会自动刷新\",\"15\":\"v-5ac1f67a#超时设置\",\"16\":\"v-5ac1f67a#取消请求\",\"17\":\"v-5ac1f67a#jquery-的-ajax-方法\",\"18\":\"v-5ac1f67a#axios-的-ajax-方法\",\"19\":\"v-5ac1f67a#express-服务端\",\"20\":\"v-5ac1f67a#客户端\",\"21\":\"v-5ac1f67a#通用型方法\",\"22\":\"v-5ac1f67a#fetch-函数\",\"23\":\"v-5ac1f67a#跨域-重要\",\"24\":\"v-5ac1f67a#同源策略\",\"25\":\"v-5ac1f67a#如何解决跨域\",\"26\":\"v-5ac1f67a#jsonp\",\"27\":\"v-5ac1f67a#cors\",\"28\":\"v-5ac1f67a#反向代理-重要\",\"29\":\"v-1d21b559\",\"30\":\"v-1d21b559#发送请求\",\"31\":\"v-1d21b559#响应结构\",\"32\":\"v-1d21b559#_1-config\",\"33\":\"v-1d21b559#_2-data\",\"34\":\"v-1d21b559#_3-headers\",\"35\":\"v-1d21b559#_4-request\",\"36\":\"v-1d21b559#_5-status\",\"37\":\"v-1d21b559#_6-statustext\",\"38\":\"v-1d21b559#配置对象\",\"39\":\"v-1d21b559#_1-url\",\"40\":\"v-1d21b559#_2-method\",\"41\":\"v-1d21b559#_3-baseurl\",\"42\":\"v-1d21b559#_4-transformrequest\",\"43\":\"v-1d21b559#_5-transformresponse\",\"44\":\"v-1d21b559#_6-headers\",\"45\":\"v-1d21b559#_7-params\",\"46\":\"v-1d21b559#_8-paramsserializer\",\"47\":\"v-1d21b559#_9-data\",\"48\":\"v-1d21b559#_10-timeout\",\"49\":\"v-1d21b559#_11-withcredentials\",\"50\":\"v-1d21b559#_12-adapter\",\"51\":\"v-1d21b559#_13-auth\",\"52\":\"v-1d21b559#_14-responsetype\",\"53\":\"v-1d21b559#_15-responseencoding\",\"54\":\"v-1d21b559#_16-xsrfcookiename\",\"55\":\"v-1d21b559#_17-xsrfheadername\",\"56\":\"v-1d21b559#_18-onuploadprogress\",\"57\":\"v-1d21b559#_19-ondownloadprogress\",\"58\":\"v-1d21b559#_20-maxcontentlength\",\"59\":\"v-1d21b559#_21-validatestatus\",\"60\":\"v-1d21b559#_22-maxredirects\",\"61\":\"v-1d21b559#_23-socketpath\",\"62\":\"v-1d21b559#_24-httpagent-httpsagent\",\"63\":\"v-1d21b559#_25-proxy\",\"64\":\"v-1d21b559#_26-canceltoken\",\"65\":\"v-1d21b559#创建实例对象\",\"66\":\"v-1d21b559#interceptors-拦截器\",\"67\":\"v-1d21b559#取消请求\",\"68\":\"v-1d21b559#发送请求工作原理\",\"69\":\"v-1d21b559#发送请求模拟实现\",\"70\":\"v-1d21b559#拦截器模拟实现\",\"71\":\"v-1d21b559#取消请求工作原理\",\"72\":\"v-1d21b559#取消请求模拟实现\",\"73\":\"v-1d21b559#axios-源码总结\",\"74\":\"v-1d21b559#_1-axios-和-axios-的关系\",\"75\":\"v-1d21b559#_2-instance-axios-create-创建的对象-与-axios-的区别\",\"76\":\"v-144b92b6\",\"77\":\"v-1455d425\",\"78\":\"v-72ed1761\",\"79\":\"v-72ed1761#官网\",\"80\":\"v-72ed1761#介绍描述\",\"81\":\"v-72ed1761#特点\",\"82\":\"v-72ed1761#高效的原因\",\"83\":\"v-dd66f27a\",\"84\":\"v-dd66f27a#逻辑复用\",\"85\":\"v-dd66f27a#已废弃的-mixins\",\"86\":\"v-dd66f27a#hoc\",\"87\":\"v-dd66f27a#render-props模式\",\"88\":\"v-dd66f27a#最新方案-hooks\",\"89\":\"v-dd66f27a#为什么要有hooks\",\"90\":\"v-dd66f27a#控制反转\",\"91\":\"v-dd66f27a#案例\",\"92\":\"v-dd66f27a#分析\",\"93\":\"v-52b9d8b5\",\"94\":\"v-52b9d8b5#虚拟滚动\",\"95\":\"v-52b9d8b5#参考库\",\"96\":\"v-52b9d8b5#原理\",\"97\":\"v-52b9d8b5#rerender-优化\",\"98\":\"v-52b9d8b5#shouldcomponentupdate\",\"99\":\"v-52b9d8b5#purecomponent\",\"100\":\"v-52b9d8b5#memo\",\"101\":\"v-52b9d8b5#usememo\",\"102\":\"v-52b9d8b5#usecallback\",\"103\":\"v-52b9d8b5#不可变数据操作\",\"104\":\"v-1b56752c\",\"105\":\"v-1b56752c#提前总结\",\"106\":\"v-1b56752c#_1-props\",\"107\":\"v-1b56752c#_2-instance-methods\",\"108\":\"v-1b56752c#_3-callback-functions\",\"109\":\"v-1b56752c#_4-event-bubbling\",\"110\":\"v-1b56752c#_5-parent-component\",\"111\":\"v-1b56752c#_6-context\",\"112\":\"v-1b56752c#_7-portals\",\"113\":\"v-1b56752c#_8-global-variables\",\"114\":\"v-1b56752c#_9-observer-pattern\",\"115\":\"v-1b56752c#改良通信模块\",\"116\":\"v-1b56752c#手动实现\",\"117\":\"v-1b56752c#_10-redux-等\",\"118\":\"v-07b1fbde\",\"119\":\"v-07b1fbde#基础-js-库\",\"120\":\"v-07b1fbde#虚拟-dom-和真实-dom\",\"121\":\"v-07b1fbde#react-jsx\",\"122\":\"v-07b1fbde#写法\",\"123\":\"v-07b1fbde#语法规则\",\"124\":\"v-07b1fbde#区分代码与表达式\",\"125\":\"v-07b1fbde#babel-的作用\",\"126\":\"v-07b1fbde#渲染函数\",\"127\":\"v-2e0d3947\",\"128\":\"v-2e0d3947#模块\",\"129\":\"v-2e0d3947#组件\",\"130\":\"v-2e0d3947#模块化\",\"131\":\"v-2e0d3947#组件化\",\"132\":\"v-2e0d3947#功能界面的组件化编码流程-通用\",\"133\":\"v-2e0d3947#组件书写规范\",\"134\":\"v-2e0d3947#渲染类组件标签基本流程\",\"135\":\"v-db860e90\",\"136\":\"v-db860e90#react-脚手架\",\"137\":\"v-db860e90#创建项目并启动\",\"138\":\"v-db860e90#脚手架项目结构\",\"139\":\"v-db860e90#cssmodule\",\"140\":\"v-4401de67\",\"141\":\"v-4401de67#state\",\"142\":\"v-4401de67#描述\",\"143\":\"v-4401de67#注意\",\"144\":\"v-4401de67#更新\",\"145\":\"v-4401de67#component-组件示例\",\"146\":\"v-4401de67#props\",\"147\":\"v-4401de67#描述-1\",\"148\":\"v-4401de67#注意-1\",\"149\":\"v-4401de67#操作\",\"150\":\"v-4401de67#component-组件示例-1\",\"151\":\"v-4401de67#refs\",\"152\":\"v-4401de67#描述-2\",\"153\":\"v-4401de67#注意-2\",\"154\":\"v-4401de67#操作-1\",\"155\":\"v-4401de67#component-组件示例-2\",\"156\":\"v-4401de67#三大属性执行次数\",\"157\":\"v-761773cf\",\"158\":\"v-761773cf#事件处理\",\"159\":\"v-761773cf#高阶函数\",\"160\":\"v-761773cf#jsx-循环\",\"161\":\"v-761773cf#key-的原理\",\"162\":\"v-761773cf#组件树更新原理\",\"163\":\"v-2b21d79f\",\"164\":\"v-2b21d79f#生命周期流程-旧\",\"165\":\"v-2b21d79f#简述\",\"166\":\"v-2b21d79f#旧生命周期流程图\",\"167\":\"v-2b21d79f#流程分析\",\"168\":\"v-2b21d79f#生命周期流程-新\",\"169\":\"v-2b21d79f#简述-1\",\"170\":\"v-2b21d79f#新生命周期流程图\",\"171\":\"v-2b21d79f#流程分析-1\",\"172\":\"v-2b21d79f#父子附件渲染顺序\",\"173\":\"v-2b21d79f#重要的钩子\",\"174\":\"v-4f559850\",\"175\":\"v-4f559850#简介\",\"176\":\"v-4f559850#特点\",\"177\":\"v-4f559850#动机\",\"178\":\"v-4f559850#使用规则\",\"179\":\"v-4f559850#状态机-hook-state-hook\",\"180\":\"v-4f559850#语法\",\"181\":\"v-4f559850#说明\",\"182\":\"v-4f559850#写法\",\"183\":\"v-4f559850#副作用监听-hook-effect-hook\",\"184\":\"v-4f559850#副作用与操作\",\"185\":\"v-4f559850#语法-1\",\"186\":\"v-4f559850#说明-1\",\"187\":\"v-4f559850#额外的-hook-uselayouteffect\",\"188\":\"v-4f559850#引用容器-hook-ref-hook\",\"189\":\"v-4f559850#语法-2\",\"190\":\"v-4f559850#作用\",\"191\":\"v-4f559850#额外的-hook-useimperativehandle\",\"192\":\"v-4f559850#祖孙环境-hookcontext-hook\",\"193\":\"v-4f559850#惰性取值-hook-usememo\",\"194\":\"v-4f559850#语法-3\",\"195\":\"v-4f559850#说明-2\",\"196\":\"v-4f559850#惰性函数-hook-usecallback\",\"197\":\"v-4f559850#语法-4\",\"198\":\"v-4f559850#自定义-hook\",\"199\":\"v-4f559850#useprevious\",\"200\":\"v-4f559850#usedidupdateeffect\",\"201\":\"v-4f559850#useinterval\",\"202\":\"v-4f559850#useresizeobserver\",\"203\":\"v-4f559850#usemount\",\"204\":\"v-4f559850#usedebounce\",\"205\":\"v-64cb565a\",\"206\":\"v-64cb565a#懒加载lazy\",\"207\":\"v-64cb565a#语法\",\"208\":\"v-64cb565a#过渡效果\",\"209\":\"v-64cb565a#context\",\"210\":\"v-64cb565a#使用时机与考虑\",\"211\":\"v-64cb565a#api\",\"212\":\"v-64cb565a#react-createcontext\",\"213\":\"v-64cb565a#context-provider\",\"214\":\"v-64cb565a#class-contexttype\",\"215\":\"v-64cb565a#context-consumer\",\"216\":\"v-64cb565a#context-displayname\",\"217\":\"v-64cb565a#写法\",\"218\":\"v-64cb565a#fragments\",\"219\":\"v-64cb565a#短语法\",\"220\":\"v-64cb565a#带-key-的情况\",\"221\":\"v-64cb565a#portals\",\"222\":\"v-64cb565a#语法-1\",\"223\":\"v-64cb565a#事件冒泡\",\"224\":\"v-64cb565a#render-props\",\"225\":\"v-64cb565a#语法-2\",\"226\":\"v-64cb565a#应用\",\"227\":\"v-64cb565a#_1-建立鼠标跟踪组件\",\"228\":\"v-64cb565a#_2-普通的组件复用\",\"229\":\"v-64cb565a#_3-render-props\",\"230\":\"v-64cb565a#简写方式\",\"231\":\"v-64cb565a#注意事项\",\"232\":\"v-64cb565a#高阶组件\",\"233\":\"v-64cb565a#语法-3\",\"234\":\"v-64cb565a#应用场景\",\"235\":\"v-64cb565a#注意事项-1\",\"236\":\"v-64cb565a#refs-转发\",\"237\":\"v-64cb565a#语法-4\",\"238\":\"v-64cb565a#注意\",\"239\":\"v-64cb565a#高阶函数转发-refs\",\"240\":\"v-64cb565a#显示自定义名称\",\"241\":\"v-64cb565a#错误边界\",\"242\":\"v-64cb565a#语法及注意事项\",\"243\":\"v-64cb565a#应用场景-1\",\"244\":\"v-64cb565a#组件树卸载\",\"245\":\"v-64cb565a#事件处理\",\"246\":\"v-dc3b2a6e\",\"247\":\"v-1112c6e4\",\"248\":\"v-1112c6e4#babel\",\"249\":\"v-1112c6e4#转译过程\",\"250\":\"v-1112c6e4#源码\",\"251\":\"v-1112c6e4#jsx-dev-runtime-js\",\"252\":\"v-1112c6e4#reactjsxelement-js\",\"253\":\"v-1112c6e4#main-jsx\",\"254\":\"v-1112c6e4#输出结果\",\"255\":\"v-1112c6e4#手写源码仓库\",\"256\":\"v-451beb20\",\"257\":\"v-451beb20#react-与-vue-的区别\",\"258\":\"v-451beb20#帧率与优化\",\"259\":\"v-451beb20#性能瓶颈\",\"260\":\"v-451beb20#屏幕刷新率\",\"261\":\"v-451beb20#帧\",\"262\":\"v-451beb20#requestidlecallback\",\"263\":\"v-451beb20#fiber-架构\",\"264\":\"v-451beb20#_1-fiber-是一个执行单元\",\"265\":\"v-451beb20#_2-fiber-是一种数据结构\",\"266\":\"v-451beb20#_3-树的遍历\",\"267\":\"v-451beb20#_4-递归构建-fiber-树\",\"268\":\"v-451beb20#fiber-源码\",\"269\":\"v-451beb20#fiberrootnode\",\"270\":\"v-451beb20#fibernode\",\"271\":\"v-451beb20#updatequeue\",\"272\":\"v-451beb20#beginwork\",\"273\":\"v-451beb20#completework\",\"274\":\"v-451beb20#commitwork\",\"275\":\"v-451beb20#手写源码仓库\",\"276\":\"v-e10da23e\",\"277\":\"v-e10da23e#原理简述\",\"278\":\"v-e10da23e#事件注册\",\"279\":\"v-e10da23e#domplugineventsystem-js\",\"280\":\"v-e10da23e#simpleeventplugin-js\",\"281\":\"v-e10da23e#domeventproperties-js\",\"282\":\"v-e10da23e#eventregistry-js\",\"283\":\"v-e10da23e#事件监听\",\"284\":\"v-e10da23e#reactdomroot-js\",\"285\":\"v-e10da23e#eventsystemflags-js\",\"286\":\"v-e10da23e#domplugineventsystem-js-1\",\"287\":\"v-e10da23e#事件派发\",\"288\":\"v-e10da23e#reactdomeventlistener-js\",\"289\":\"v-e10da23e#reactdomcomponenttree-js\",\"290\":\"v-e10da23e#domplugineventsystem-js-2\",\"291\":\"v-e10da23e#getlistener-js\",\"292\":\"v-e10da23e#simpleeventplugin-js-1\",\"293\":\"v-e10da23e#syntheticevent-js\",\"294\":\"v-e10da23e#事件处理\",\"295\":\"v-e10da23e#domplugineventsystem-js-3\",\"296\":\"v-e10da23e#容易忽略的点\",\"297\":\"v-e10da23e#reactdomhostconfig-js\",\"298\":\"v-e10da23e#accumulatesinglephaselisteners-js\",\"299\":\"v-e10da23e#getlistener-js-1\",\"300\":\"v-e10da23e#流程图\",\"301\":\"v-e10da23e#最终输出结果\",\"302\":\"v-e10da23e#手写源码仓库\",\"303\":\"v-84f37908\",\"304\":\"v-84f37908#mountreducer\",\"305\":\"v-84f37908#main-jsx\",\"306\":\"v-84f37908#reactfiberhooks-js\",\"307\":\"v-84f37908#react-index-js\",\"308\":\"v-84f37908#react-js\",\"309\":\"v-84f37908#reacthooks-js\",\"310\":\"v-84f37908#reactcurrentdispatcher-js\",\"311\":\"v-84f37908#reactsharedinternals-js\",\"312\":\"v-84f37908#reactsharedinternals-js-1\",\"313\":\"v-84f37908#mountreducer-小结\",\"314\":\"v-84f37908#updatereducer\",\"315\":\"v-84f37908#reactfiberhooks-js-1\",\"316\":\"v-84f37908#reactfiberconcurrentupdates-js\",\"317\":\"v-84f37908#reactfiberworkloop-js\",\"318\":\"v-84f37908#reactfiberbeginwork-js\",\"319\":\"v-84f37908#reactchildfiber-js\",\"320\":\"v-84f37908#reactfibercompletework-js\",\"321\":\"v-84f37908#reactdomhostconfig-js\",\"322\":\"v-84f37908#reactdomcomponent-js\",\"323\":\"v-84f37908#updatereducer-小结\",\"324\":\"v-84f37908#commitreducer\",\"325\":\"v-84f37908#reactfibercompletework-js-1\",\"326\":\"v-84f37908#reactfibercommitwork-js\",\"327\":\"v-84f37908#reactdomhostconfig-js-1\",\"328\":\"v-84f37908#reactdomcomponent-js-1\",\"329\":\"v-84f37908#main-jsx-更新\",\"330\":\"v-84f37908#commitreducer-小结\",\"331\":\"v-84f37908#手写源码仓库\",\"332\":\"v-4f2f3798\",\"333\":\"v-4f2f3798#src-main-jsx\",\"334\":\"v-4f2f3798#react-index-js\",\"335\":\"v-4f2f3798#react-js\",\"336\":\"v-4f2f3798#reacthooks-js\",\"337\":\"v-4f2f3798#objectis-js\",\"338\":\"v-4f2f3798#reactfiberhooks-js\",\"339\":\"v-4f2f3798#usestate-源码小结\",\"340\":\"v-4f2f3798#手写源码仓库\",\"341\":\"v-08d2b8d6\",\"342\":\"v-08d2b8d6#单节点-diff\",\"343\":\"v-08d2b8d6#key-不同-type-相同\",\"344\":\"v-08d2b8d6#main-jsx\",\"345\":\"v-08d2b8d6#reactfiberflags-js\",\"346\":\"v-08d2b8d6#reactfiber-js\",\"347\":\"v-08d2b8d6#reactdomhostconfig-js\",\"348\":\"v-08d2b8d6#reactchildfiber-js\",\"349\":\"v-08d2b8d6#reactfibercommitwork-js\",\"350\":\"v-08d2b8d6#key-相同-type-不同\",\"351\":\"v-08d2b8d6#main-jsx-1\",\"352\":\"v-08d2b8d6#reactchildfiber-js-1\",\"353\":\"v-08d2b8d6#多节点剩一个节点\",\"354\":\"v-08d2b8d6#多节点-diff\",\"355\":\"v-08d2b8d6#前两轮遍历\",\"356\":\"v-08d2b8d6#src-main-jsx\",\"357\":\"v-08d2b8d6#reactchildfiber-js-2\",\"358\":\"v-08d2b8d6#第三轮遍历\",\"359\":\"v-08d2b8d6#src-main-jsx-1\",\"360\":\"v-08d2b8d6#reactfiberworkloop-js\",\"361\":\"v-08d2b8d6#reactchildfiber-js-3\",\"362\":\"v-08d2b8d6#控制台打印结果\",\"363\":\"v-08d2b8d6#手写源码仓库\",\"364\":\"v-78ea2b76\",\"365\":\"v-78ea2b76#副作用的意义\",\"366\":\"v-78ea2b76#useeffect\",\"367\":\"v-78ea2b76#src-main-jsx\",\"368\":\"v-78ea2b76#react-index-js\",\"369\":\"v-78ea2b76#react-js\",\"370\":\"v-78ea2b76#reacthooks-js\",\"371\":\"v-78ea2b76#reacthookeffecttags-js\",\"372\":\"v-78ea2b76#reactfiberflags-js\",\"373\":\"v-78ea2b76#reactfiberhooks-js\",\"374\":\"v-78ea2b76#reactfiberworkloop-js\",\"375\":\"v-78ea2b76#reactfibercommitwork-js\",\"376\":\"v-78ea2b76#uselayouteffect\",\"377\":\"v-78ea2b76#src-main-jsx-1\",\"378\":\"v-78ea2b76#react-index-js-1\",\"379\":\"v-78ea2b76#react-js-1\",\"380\":\"v-78ea2b76#reacthooks-js-1\",\"381\":\"v-78ea2b76#reacthookeffecttags-js-1\",\"382\":\"v-78ea2b76#reactfiberflags-js-1\",\"383\":\"v-78ea2b76#reactfiberhooks-js-1\",\"384\":\"v-78ea2b76#reactfiberworkloop-js-1\",\"385\":\"v-78ea2b76#reactfibercommitwork-js-1\",\"386\":\"v-78ea2b76#手写源码仓库\",\"387\":\"v-0e9ae1bb\",\"388\":\"v-0e9ae1bb#messagechannel\",\"389\":\"v-0e9ae1bb#最小堆\",\"390\":\"v-0e9ae1bb#二叉树简介\",\"391\":\"v-0e9ae1bb#最小堆机制\",\"392\":\"v-0e9ae1bb#schedulerminheap-js\",\"393\":\"v-0e9ae1bb#时间调度与优先级\",\"394\":\"v-0e9ae1bb#schedulerpriorities-js\",\"395\":\"v-0e9ae1bb#scheduler-js\",\"396\":\"v-0e9ae1bb#reactfiberworkloop-js\",\"397\":\"v-0e9ae1bb#手写源码仓库\",\"398\":\"v-6c4202f0\",\"399\":\"v-06323260\",\"400\":\"v-06323260#官网\",\"401\":\"v-06323260#介绍与作者\",\"402\":\"v-06323260#特点\",\"403\":\"v-06323260#与其他js框架的关联\",\"404\":\"v-06323260#周边生态\",\"405\":\"v-0f375e23\",\"406\":\"v-0f375e23#理解\",\"407\":\"v-0f375e23#搭建-vuex-环境\",\"408\":\"v-0f375e23#核心属性\",\"409\":\"v-0f375e23#state\",\"410\":\"v-0f375e23#actions\",\"411\":\"v-0f375e23#mutations\",\"412\":\"v-0f375e23#getters\",\"413\":\"v-0f375e23#map-方法\",\"414\":\"v-0f375e23#mapstate\",\"415\":\"v-0f375e23#mapgetters\",\"416\":\"v-0f375e23#mapactions\",\"417\":\"v-0f375e23#mapmutations\",\"418\":\"v-0f375e23#module-命名空间\",\"419\":\"v-57f5b826\",\"420\":\"v-57f5b826#理解\",\"421\":\"v-57f5b826#spa\",\"422\":\"v-57f5b826#路由\",\"423\":\"v-57f5b826#分类\",\"424\":\"v-57f5b826#基本使用\",\"425\":\"v-57f5b826#注意点\",\"426\":\"v-57f5b826#嵌套路由\",\"427\":\"v-57f5b826#路由命名\",\"428\":\"v-57f5b826#路由传参\",\"429\":\"v-57f5b826#query\",\"430\":\"v-57f5b826#params\",\"431\":\"v-57f5b826#props\",\"432\":\"v-57f5b826#编程式路由导航\",\"433\":\"v-57f5b826#缓存路由组件\",\"434\":\"v-57f5b826#新生命周期钩子\",\"435\":\"v-57f5b826#路由守卫\",\"436\":\"v-57f5b826#全局守卫\",\"437\":\"v-57f5b826#独享守卫\",\"438\":\"v-57f5b826#组件内守卫\",\"439\":\"v-57f5b826#路由器两种工作模式\",\"440\":\"v-57f5b826#history-模式在生产环境的问题\",\"441\":\"v-6bf2d844\",\"442\":\"v-6bf2d844#模板\",\"443\":\"v-6bf2d844#插值语法\",\"444\":\"v-6bf2d844#指令语法\",\"445\":\"v-6bf2d844#数据绑定\",\"446\":\"v-6bf2d844#单向绑定\",\"447\":\"v-6bf2d844#双向绑定\",\"448\":\"v-6bf2d844#写法示例\",\"449\":\"v-6bf2d844#计算与监视属性\",\"450\":\"v-6bf2d844#computed\",\"451\":\"v-6bf2d844#watch\",\"452\":\"v-6bf2d844#计算与监视对比\",\"453\":\"v-6bf2d844#样式绑定\",\"454\":\"v-6bf2d844#class-绑定\",\"455\":\"v-6bf2d844#style-绑定\",\"456\":\"v-6bf2d844#条件渲染\",\"457\":\"v-6bf2d844#条件渲染指令\",\"458\":\"v-6bf2d844#比较-v-if-与-v-show\",\"459\":\"v-6bf2d844#列表渲染\",\"460\":\"v-6bf2d844#列表显示指令\",\"461\":\"v-6bf2d844#key-原理\",\"462\":\"v-6bf2d844#收集表单数据\",\"463\":\"v-6bf2d844#text\",\"464\":\"v-6bf2d844#radio\",\"465\":\"v-6bf2d844#checkbox\",\"466\":\"v-6bf2d844#过滤器-vue3-已删除\",\"467\":\"v-6bf2d844#mvvm-模型\",\"468\":\"v-6bf2d844#数据代理\",\"469\":\"v-e384e568\",\"470\":\"v-e384e568#事件绑定\",\"471\":\"v-e384e568#事件修饰符\",\"472\":\"v-e384e568#按键修饰符\",\"473\":\"v-0985d78e\",\"474\":\"v-0985d78e#常用内置指令\",\"475\":\"v-0985d78e#自定义指令\",\"476\":\"v-916e1948\",\"477\":\"v-916e1948#流程图\",\"478\":\"v-916e1948#分析\",\"479\":\"v-916e1948#初始化显示\",\"480\":\"v-916e1948#更新状态\",\"481\":\"v-916e1948#销毁实例\",\"482\":\"v-916e1948#常用周期\",\"483\":\"v-69f6c4de\",\"484\":\"v-69f6c4de#模块与组件\",\"485\":\"v-69f6c4de#模块\",\"486\":\"v-69f6c4de#组件\",\"487\":\"v-69f6c4de#非单文件组件\",\"488\":\"v-69f6c4de#组件名\",\"489\":\"v-69f6c4de#vuecomponent构造函数\",\"490\":\"v-69f6c4de#单文件组件\",\"491\":\"v-5e9c18f6\",\"492\":\"v-5e9c18f6#初始化脚手架\",\"493\":\"v-5e9c18f6#初始化步骤\",\"494\":\"v-5e9c18f6#模板项目结构\",\"495\":\"v-5e9c18f6#请求代理\",\"496\":\"v-0277415c\",\"497\":\"v-0277415c#ref\",\"498\":\"v-0277415c#props\",\"499\":\"v-0277415c#混入\",\"500\":\"v-0277415c#插件\",\"501\":\"v-0277415c#插槽\",\"502\":\"v-0277415c#作用\",\"503\":\"v-0277415c#分类\",\"504\":\"v-0277415c#使用方式\",\"505\":\"v-0277415c#nexttick\",\"506\":\"v-0277415c#过渡与动画\",\"507\":\"v-0277415c#过渡\",\"508\":\"v-0277415c#包裹\",\"509\":\"v-43028b0f\",\"510\":\"v-43028b0f#_1-单向-props\",\"511\":\"v-43028b0f#_2-双向-v-model\",\"512\":\"v-43028b0f#_3-sync\",\"513\":\"v-43028b0f#_4-ref\",\"514\":\"v-43028b0f#_5-emit-v-on\",\"515\":\"v-43028b0f#_6-attrs-listeners\",\"516\":\"v-43028b0f#_7-children-parent\",\"517\":\"v-43028b0f#_8-provide-inject-祖孙通信\",\"518\":\"v-43028b0f#_9-eventbus-全局事件总线\",\"519\":\"v-43028b0f#_10-vuex-通信\",\"520\":\"v-43028b0f#_11-具名插槽-作用域插槽\",\"521\":\"v-43028b0f#_12-root\",\"522\":\"v-157886ea\",\"523\":\"v-3f834321\",\"524\":\"v-3f834321#相比-vue2-的提升\",\"525\":\"v-3f834321#新特性\",\"526\":\"v-000cd62e\",\"527\":\"v-000cd62e#使用-vue-cli-创建\",\"528\":\"v-000cd62e#使用-vite-创建\",\"529\":\"v-000cd62e#初始化步骤\",\"530\":\"v-000cd62e#优秀的冷启动\",\"531\":\"v-000cd62e#与-webpack-比较\",\"532\":\"v-b95aa274\",\"533\":\"v-b95aa274#composition-api-组合式-api\",\"534\":\"v-b95aa274#setup\",\"535\":\"v-b95aa274#setup-执行时机\",\"536\":\"v-b95aa274#ref-函数\",\"537\":\"v-b95aa274#reactive-函数\",\"538\":\"v-b95aa274#计算与监视属性\",\"539\":\"v-b95aa274#computed\",\"540\":\"v-b95aa274#watch\",\"541\":\"v-b95aa274#watcheffect\",\"542\":\"v-b95aa274#生命周期\",\"543\":\"v-b95aa274#自定义-hook-函数\",\"544\":\"v-b95aa274#组合式-api-的优势\",\"545\":\"v-b95aa274#options-api-存在的问题\",\"546\":\"v-b95aa274#composition-api-的优势\",\"547\":\"v-b95aa274#响应式原理\",\"548\":\"v-b95aa274#vue2-响应式\",\"549\":\"v-b95aa274#vue3-响应式\",\"550\":\"v-b95aa274#ref-与-reactive-对比\",\"551\":\"v-4d4bca2d\",\"552\":\"v-4d4bca2d#响应式数据转化-api\",\"553\":\"v-4d4bca2d#toref\",\"554\":\"v-4d4bca2d#shallowreactive-与-shallowref\",\"555\":\"v-4d4bca2d#readonly-与-shallowreadonly\",\"556\":\"v-4d4bca2d#toraw-与-markraw\",\"557\":\"v-4d4bca2d#customref\",\"558\":\"v-4d4bca2d#响应式数据判断\",\"559\":\"v-4d4bca2d#other-api\",\"560\":\"v-4d4bca2d#provide-与-inject\",\"561\":\"v-4d4bca2d#全局-api-的转移\",\"562\":\"v-4d4bca2d#过渡类名更改\",\"563\":\"v-4d4bca2d#事件处理\",\"564\":\"v-4d4bca2d#移除过滤器\",\"565\":\"v-0070343e\",\"566\":\"v-0070343e#fragment\",\"567\":\"v-0070343e#teleport\",\"568\":\"v-0070343e#suspense\",\"569\":\"v-e00ed572\",\"570\":\"v-e00ed572#创建项目\",\"571\":\"v-e00ed572#vite-配置\",\"572\":\"v-e00ed572#resolve\",\"573\":\"v-e00ed572#sass-配置\",\"574\":\"v-e00ed572#开启服务\",\"575\":\"v-e00ed572#预构建依赖优化\",\"576\":\"v-e00ed572#optimizedeps-include\",\"577\":\"v-e00ed572#optimizedeps-exclude\",\"578\":\"v-e00ed572#eslint-配置\",\"579\":\"v-e00ed572#typescript\",\"580\":\"v-e00ed572#类型-接口-泛型\",\"581\":\"v-e00ed572#类型声明\",\"582\":\"v-e00ed572#全局类型声明\",\"583\":\"v-e00ed572#全局变量声明\",\"584\":\"v-e00ed572#语法糖\",\"585\":\"v-e00ed572#生命周期\",\"586\":\"v-e00ed572#响应式-ref\",\"587\":\"v-e00ed572#props-emit\",\"588\":\"v-e00ed572#v-model-双向绑定\",\"589\":\"v-e00ed572#可能遇到的报错-警告\",\"590\":\"v-e00ed572#vite-打包-charset-警告\",\"591\":\"v-e00ed572#去除-typescript-全局变量的-eslint-报错\",\"592\":\"v-15788709\",\"593\":\"v-6868d6d1\",\"594\":\"v-6868d6d1#前言\",\"595\":\"v-6868d6d1#mvvm-模式\",\"596\":\"v-6868d6d1#非侵入式变化\",\"597\":\"v-6868d6d1#上帝的钥匙\",\"598\":\"v-6868d6d1#_1-实现完整的数据劫持\",\"599\":\"v-6868d6d1#方法简介\",\"600\":\"v-6868d6d1#隐藏属性\",\"601\":\"v-6868d6d1#getter-setter\",\"602\":\"v-6868d6d1#递归侦测对象属性-实现-observer-类\",\"603\":\"v-6868d6d1#数组的响应式处理\",\"604\":\"v-6868d6d1#完整的数据劫持源码参考\",\"605\":\"v-6868d6d1#_2-实现订阅-发布模式的依赖收集\",\"606\":\"v-6868d6d1#初始化订阅-发布系统\",\"607\":\"v-6868d6d1#watcher-类初步实现\",\"608\":\"v-6868d6d1#dep-类初步实现\",\"609\":\"v-6868d6d1#订阅-发布初步实现\",\"610\":\"v-6868d6d1#订阅系统完善\",\"611\":\"v-6868d6d1#最终完整源码\",\"612\":\"v-6868d6d1#util-js\",\"613\":\"v-6868d6d1#definereactive-js\",\"614\":\"v-6868d6d1#array-js\",\"615\":\"v-6868d6d1#dep-js\",\"616\":\"v-6868d6d1#watcher-js\",\"617\":\"v-6868d6d1#observer-js\",\"618\":\"v-6868d6d1#observe-js\",\"619\":\"v-6868d6d1#太长不看-总结\",\"620\":\"v-6868d6d1#响应式数据声明\",\"621\":\"v-6868d6d1#订阅-发布系统\",\"622\":\"v-a9161776\",\"623\":\"v-a9161776#前言\",\"624\":\"v-a9161776#initwatch-js\",\"625\":\"v-a9161776#createwatcher-js\",\"626\":\"v-a9161776#watcher-js\",\"627\":\"v-a9161776#deep-js\",\"628\":\"v-a9161776#太长不看-总结\",\"629\":\"v-f102a860\",\"630\":\"v-f102a860#前言\",\"631\":\"v-f102a860#initcomputed-js\",\"632\":\"v-f102a860#watcher-js\",\"633\":\"v-f102a860#definecomputed-js\",\"634\":\"v-f102a860#仍未解决的问题-多重嵌套-watcher\",\"635\":\"v-f102a860#嵌套-watcher-解决方案\",\"636\":\"v-f102a860#太长不看-总结\",\"637\":\"v-4a0435b4\",\"638\":\"v-4a0435b4#模板引擎历史\",\"639\":\"v-4a0435b4#mustache-基本使用\",\"640\":\"v-4a0435b4#循环模式\",\"641\":\"v-4a0435b4#数组嵌套\",\"642\":\"v-4a0435b4#不循环\",\"643\":\"v-4a0435b4#布尔值\",\"644\":\"v-4a0435b4#mustache-底层核心机理\",\"645\":\"v-4a0435b4#手写实现-mustache\",\"646\":\"v-4a0435b4#实现扫描器类-scanner\",\"647\":\"v-4a0435b4#生成-tokens\",\"648\":\"v-4a0435b4#实现-tokens-嵌套\",\"649\":\"v-4a0435b4#解析-dom-字符串\",\"650\":\"v-4a0435b4#定义-lookup-函数\",\"651\":\"v-4a0435b4#定义-parsearray-函数\",\"652\":\"v-4a0435b4#最终完整源码\",\"653\":\"v-4a0435b4#index-js\",\"654\":\"v-4a0435b4#parsetemplatetotokens-js\",\"655\":\"v-4a0435b4#scanner-js\",\"656\":\"v-4a0435b4#nesttokens-js\",\"657\":\"v-4a0435b4#rendertemplate-js\",\"658\":\"v-4a0435b4#太长不看-总结\",\"659\":\"v-5536c578\",\"660\":\"v-5536c578#前言\",\"661\":\"v-5536c578#ast-形成\",\"662\":\"v-5536c578#识别-attrs\",\"663\":\"v-5536c578#太长不看-总结\",\"664\":\"v-5c16a54e\",\"665\":\"v-5c16a54e#源头-snabbdom\",\"666\":\"v-5c16a54e#真实-dom-与虚拟-dom\",\"667\":\"v-5c16a54e#snabbdom-库实现\",\"668\":\"v-5c16a54e#创建虚拟节点-vnode\",\"669\":\"v-5c16a54e#虚拟节点上树\",\"670\":\"v-5c16a54e#h-函数嵌套\",\"671\":\"v-5c16a54e#diff-触发时机\",\"672\":\"v-5c16a54e#diff-核心逻辑\",\"673\":\"v-5c16a54e#简易源码实现\",\"674\":\"v-5c16a54e#基础-h函数\",\"675\":\"v-5c16a54e#递归-遍历生成-dom-对象\",\"676\":\"v-5c16a54e#比较-同一节点的更新策略-逻辑\",\"677\":\"v-5c16a54e#新前-newstart-与旧前-oldstart\",\"678\":\"v-5c16a54e#新后-newend-与旧后-oldend\",\"679\":\"v-5c16a54e#新后-newend-与旧前-oldstart\",\"680\":\"v-5c16a54e#新前-newstart-与旧后-oldend\",\"681\":\"v-5c16a54e#四种都没命中-遍历旧节点\",\"682\":\"v-5c16a54e#循环结束之后\",\"683\":\"v-5c16a54e#比较-同一节点的更新策略-代码\",\"684\":\"v-5c16a54e#最终完整源码\",\"685\":\"v-5c16a54e#index-js\",\"686\":\"v-5c16a54e#h-js\",\"687\":\"v-5c16a54e#vnode-js\",\"688\":\"v-5c16a54e#patch-js\",\"689\":\"v-5c16a54e#createelement-js\",\"690\":\"v-5c16a54e#patchvnode-js\",\"691\":\"v-5c16a54e#updatechildren-js\",\"692\":\"v-5c16a54e#太长不看-总结\",\"693\":\"v-470ebec0\",\"694\":\"v-470ebec0#class-vue-的创建\",\"695\":\"v-470ebec0#compile-编译类的创建\",\"696\":\"v-470ebec0#太长不看-总结\",\"697\":\"v-b4aeaae0\",\"698\":\"v-b4aeaae0#流程图\",\"699\":\"v-b4aeaae0#流程详解\",\"700\":\"v-b4aeaae0#初始化\",\"701\":\"v-b4aeaae0#compile-模板编译\",\"702\":\"v-b4aeaae0#render-渲染函数\",\"703\":\"v-b4aeaae0#生命周期\",\"704\":\"v-12e4f121\",\"705\":\"v-71dcd4fc\",\"706\":\"v-71dcd4fc#概述\",\"707\":\"v-71dcd4fc#三个不同类型的-npm-包\",\"708\":\"v-71dcd4fc#与5-x版本的区别\",\"709\":\"v-71dcd4fc#组件\",\"710\":\"v-71dcd4fc#browserrouter\",\"711\":\"v-71dcd4fc#hashrouter\",\"712\":\"v-71dcd4fc#routes-与-route\",\"713\":\"v-71dcd4fc#link\",\"714\":\"v-71dcd4fc#navlink\",\"715\":\"v-71dcd4fc#navigate\",\"716\":\"v-71dcd4fc#outlet\",\"717\":\"v-71dcd4fc#hooks\",\"718\":\"v-71dcd4fc#useroutes\",\"719\":\"v-71dcd4fc#usenavigate\",\"720\":\"v-71dcd4fc#useparams\",\"721\":\"v-71dcd4fc#usesearchparams\",\"722\":\"v-71dcd4fc#uselocation\",\"723\":\"v-71dcd4fc#usematch\",\"724\":\"v-71dcd4fc#useinroutercontext\",\"725\":\"v-71dcd4fc#usenavigationtype\",\"726\":\"v-71dcd4fc#useoutlet\",\"727\":\"v-71dcd4fc#useresolvedpath\",\"728\":\"v-71dcd4fc#withrouter\",\"729\":\"v-71dcd4fc#动态添加路由\",\"730\":\"v-71dcd4fc#默认路由表\",\"731\":\"v-71dcd4fc#store\",\"732\":\"v-71dcd4fc#开启监听入口\",\"733\":\"v-71dcd4fc#路由拦截\",\"734\":\"v-71dcd4fc#路由配置\",\"735\":\"v-71dcd4fc#入口配置\",\"736\":\"v-71dcd4fc#全局路由拦截\",\"737\":\"v-71dcd4fc#_1-封装工具函数\",\"738\":\"v-71dcd4fc#_2-路由容器组件-guard\",\"739\":\"v-71dcd4fc#_3-配置文件\",\"740\":\"v-71dcd4fc#_4-最后引入守卫函数\",\"741\":\"v-5c52abb8\",\"742\":\"v-5c52abb8#flux架构\",\"743\":\"v-5c52abb8#redux\",\"744\":\"v-5c52abb8#redux使用三原则\",\"745\":\"v-5c52abb8#redux工作流\",\"746\":\"v-5c52abb8#store\",\"747\":\"v-5c52abb8#action\",\"748\":\"v-5c52abb8#reducer\",\"749\":\"v-5c52abb8#示例代码\",\"750\":\"v-5c52abb8#reducer命名空间\",\"751\":\"v-5c52abb8#react-redux\",\"752\":\"v-5c52abb8#容器组件与-ui-组件\",\"753\":\"v-5c52abb8#react-redux流程\",\"754\":\"v-659ed5d0\",\"755\":\"v-659ed5d0#redux-thunk\",\"756\":\"v-659ed5d0#redux-promise\",\"757\":\"v-659ed5d0#redux-saga\",\"758\":\"v-659ed5d0#特点\",\"759\":\"v-659ed5d0#运行流程图\",\"760\":\"v-659ed5d0#示例代码\",\"761\":\"v-659ed5d0#核心-api\",\"762\":\"v-659ed5d0#_1-tackevery\",\"763\":\"v-659ed5d0#_2-takelatest\",\"764\":\"v-659ed5d0#_3-call\",\"765\":\"v-659ed5d0#_4-fork\",\"766\":\"v-659ed5d0#_5-put\",\"767\":\"v-659ed5d0#_6-select\",\"768\":\"v-659ed5d0#_7-tack\",\"769\":\"v-659ed5d0#_8-cancel\",\"770\":\"v-659ed5d0#_9-race-effects\",\"771\":\"v-659ed5d0#_10-all-effects\",\"772\":\"v-659ed5d0#使用案例\",\"773\":\"v-659ed5d0#index-js入口文件\",\"774\":\"v-659ed5d0#app-js入口组件\",\"775\":\"v-659ed5d0#actions文件\",\"776\":\"v-659ed5d0#reducers文件\",\"777\":\"v-659ed5d0#sagas文件\",\"778\":\"v-659ed5d0#案例效果图\",\"779\":\"v-659ed5d0#总结\",\"780\":\"v-659ed5d0#redux-observable\",\"781\":\"v-659ed5d0#核心概念-epic\",\"782\":\"v-659ed5d0#特点-1\",\"783\":\"v-659ed5d0#响应用例\",\"784\":\"v-659ed5d0#安装依赖\",\"785\":\"v-659ed5d0#index-js入口文件-1\",\"786\":\"v-659ed5d0#actions-js文件\",\"787\":\"v-659ed5d0#rootreducer-js文件\",\"788\":\"v-659ed5d0#rootepic-js文件\",\"789\":\"v-659ed5d0#视图组件\",\"790\":\"v-659ed5d0#总结-1\",\"791\":\"v-22ea0c44\",\"792\":\"v-22ea0c44#介绍\",\"793\":\"v-22ea0c44#与-redux-的区别\",\"794\":\"v-22ea0c44#基本用法\",\"795\":\"v-22ea0c44#state\",\"796\":\"v-22ea0c44#computed\",\"797\":\"v-22ea0c44#reactions\",\"798\":\"v-22ea0c44#actions\",\"799\":\"v-22ea0c44#异步-actions\",\"800\":\"v-22ea0c44#加入装饰器\",\"801\":\"v-22ea0c44#在类组件中使用\",\"802\":\"v-22ea0c44#store\",\"803\":\"v-22ea0c44#入口文件\",\"804\":\"v-22ea0c44#视图组件\",\"805\":\"v-22ea0c44#在函数组件中使用\",\"806\":\"v-22ea0c44#store-1\",\"807\":\"v-22ea0c44#context\",\"808\":\"v-22ea0c44#usecontext\",\"809\":\"v-1b954120\",\"810\":\"v-1b954120#入口文件\",\"811\":\"v-1b954120#store-js\",\"812\":\"v-1b954120#actions-reducers\",\"813\":\"v-1b954120#视图组件调用\",\"814\":\"v-1b954120#进阶1-副作用处理\",\"815\":\"v-1b954120#进阶2-使用-selector-缓存\",\"816\":\"v-1b954120#进阶3-范式化state\",\"817\":\"v-1b954120#总结\",\"818\":\"v-127fec25\",\"819\":\"v-127fec25#介绍\",\"820\":\"v-127fec25#最简结构\",\"821\":\"v-127fec25#配置-antd\",\"822\":\"v-127fec25#dva-router\",\"823\":\"v-127fec25#dva-model\",\"824\":\"v-c0524d8e\",\"825\":\"v-c0524d8e#redux-未能做到的事\",\"826\":\"v-c0524d8e#入口组件\",\"827\":\"v-c0524d8e#视图组件\",\"828\":\"v-c0524d8e#usequery\",\"829\":\"v-c0524d8e#状态值\",\"830\":\"v-c0524d8e#参数\",\"831\":\"v-c0524d8e#并行查询\",\"832\":\"v-c0524d8e#依赖查询\",\"833\":\"v-c0524d8e#usemutation\",\"834\":\"v-c0524d8e#状态值-1\",\"835\":\"v-c0524d8e#参数-1\",\"836\":\"v-c0524d8e#缓存\",\"837\":\"v-c0524d8e#窗口聚焦自动查询\",\"838\":\"v-c0524d8e#模型分析\",\"839\":\"v-c0524d8e#网络请求\",\"840\":\"v-c0524d8e#状态变化\",\"841\":\"v-c0524d8e#中止请求\",\"842\":\"v-c0524d8e#观察者管理\",\"843\":\"v-c0524d8e#垃圾回收\",\"844\":\"v-c0524d8e#原理与本质\",\"845\":\"v-c0524d8e#场景假设\",\"846\":\"v-c0524d8e#探讨本质\",\"847\":\"v-c0524d8e#唯一标识\",\"848\":\"v-c0524d8e#缓存管理\",\"849\":\"v-c0524d8e#触发更新渲染\",\"850\":\"v-73512544\",\"851\":\"v-cf363ba2\",\"852\":\"v-cf363ba2#简介\",\"853\":\"v-cf363ba2#html-的局限性\",\"854\":\"v-cf363ba2#css-网页的美容师\",\"855\":\"v-cf363ba2#css-语法规范\",\"856\":\"v-cf363ba2#书写样式\",\"857\":\"v-cf363ba2#建议展开格式\",\"858\":\"v-cf363ba2#样式大小写\",\"859\":\"v-cf363ba2#空格规范\",\"860\":\"v-cf363ba2#基础选择器\",\"861\":\"v-cf363ba2#标签选择器\",\"862\":\"v-cf363ba2#类选择器\",\"863\":\"v-cf363ba2#id-选择器\",\"864\":\"v-cf363ba2#通配符选择器\",\"865\":\"v-cf363ba2#css-的引入方式\",\"866\":\"v-cf363ba2#内部样式表\",\"867\":\"v-cf363ba2#行内样式表\",\"868\":\"v-cf363ba2#外部样式表\",\"869\":\"v-cf363ba2#复合选择器\",\"870\":\"v-cf363ba2#后代选择器-重要\",\"871\":\"v-cf363ba2#子选择器-重要\",\"872\":\"v-cf363ba2#并集选择器\",\"873\":\"v-cf363ba2#伪类选择器\",\"874\":\"v-3b92d676\",\"875\":\"v-3b92d676#显示属性\",\"876\":\"v-3b92d676#块元素\",\"877\":\"v-3b92d676#行内元素\",\"878\":\"v-3b92d676#行内块元素\",\"879\":\"v-3b92d676#元素显示模式转换\",\"880\":\"v-3b92d676#小技巧-单行文字垂直居中代码\",\"881\":\"v-3b92d676#字体属性\",\"882\":\"v-3b92d676#字体系列-font-family\",\"883\":\"v-3b92d676#字体大小-font-size\",\"884\":\"v-3b92d676#字体粗细-font-weight\",\"885\":\"v-3b92d676#文本风格-font-style\",\"886\":\"v-3b92d676#大小写显示-font-variant\",\"887\":\"v-3b92d676#font-属性复合使用\",\"888\":\"v-3b92d676#文本属性\",\"889\":\"v-3b92d676#文本颜色-color\",\"890\":\"v-3b92d676#对齐文本-text-align\",\"891\":\"v-3b92d676#装饰文本-text-decoration\",\"892\":\"v-3b92d676#文本缩进-text-indent\",\"893\":\"v-3b92d676#行间距-line-height\",\"894\":\"v-3b92d676#文本转换-text-transform\",\"895\":\"v-3b92d676#单词间距-word-spacing\",\"896\":\"v-3b92d676#字符间距-letter-spacing\",\"897\":\"v-3b92d676#文本溢出-text-overflow\",\"898\":\"v-3b92d676#元素间距-white-space\",\"899\":\"v-3b92d676#单词换行-word-wrap\",\"900\":\"v-3b92d676#单词断行-word-break\",\"901\":\"v-3b92d676#背景属性\",\"902\":\"v-3b92d676#背景颜色-background-color\",\"903\":\"v-3b92d676#背景图片-background-image\",\"904\":\"v-3b92d676#背景平铺-background-repeat\",\"905\":\"v-3b92d676#背景图片位置-background-position\",\"906\":\"v-3b92d676#背景图像固定-background-attachment\",\"907\":\"v-3b92d676#背景复合写法\",\"908\":\"v-3b92d676#背景色半透明\",\"909\":\"v-3b92d676#边框属性\",\"910\":\"v-3b92d676#边框扩展与阴影属性\",\"911\":\"v-3b92d676#圆角边框-border-radius\",\"912\":\"v-3b92d676#盒子阴影-box-shadow\",\"913\":\"v-3b92d676#文字阴影-text-shadow\",\"914\":\"v-3b92d676#元素显示与隐藏\",\"915\":\"v-7fc01456\",\"916\":\"v-7fc01456#精灵图\",\"917\":\"v-7fc01456#字体图标iconfont-重要\",\"918\":\"v-7fc01456#unicode-引用\",\"919\":\"v-7fc01456#font-class-引用\",\"920\":\"v-7fc01456#symbol-引用\",\"921\":\"v-7fc01456#css-三角\",\"922\":\"v-7fc01456#等腰三角\",\"923\":\"v-7fc01456#直角三角\",\"924\":\"v-7fc01456#行内-块-垂直属性-vertical-align\",\"925\":\"v-7fc01456#溢出文字省略号显示\",\"926\":\"v-7fc01456#单行文本溢出显示省略号\",\"927\":\"v-7fc01456#多行文本溢出显示省略号\",\"928\":\"v-7fc01456#元素绝对居中方式\",\"929\":\"v-61b0de00\",\"930\":\"v-61b0de00#层叠性\",\"931\":\"v-61b0de00#继承性\",\"932\":\"v-61b0de00#优先级\",\"933\":\"v-e0f80f9e\",\"934\":\"v-36ba12b4\",\"935\":\"v-36ba12b4#浏览器私有前缀\",\"936\":\"v-36ba12b4#emmet-语法\",\"937\":\"v-36ba12b4#快速生成-html-结构语法\",\"938\":\"v-36ba12b4#快速生成-css-样式语法\",\"939\":\"v-36ba12b4#快速格式化代码\",\"940\":\"v-36ba12b4#chrome-调试工具\",\"941\":\"v-0c3b3a6d\",\"942\":\"v-0c3b3a6d#现状\",\"943\":\"v-0c3b3a6d#浏览器现状\",\"944\":\"v-0c3b3a6d#手机屏幕\",\"945\":\"v-0c3b3a6d#移动端调试方法\",\"946\":\"v-0c3b3a6d#视口\",\"947\":\"v-0c3b3a6d#布局视口-layout-viewport\",\"948\":\"v-0c3b3a6d#视觉视口-visual-viewport\",\"949\":\"v-0c3b3a6d#理想视口-ideal-viewport\",\"950\":\"v-0c3b3a6d#视口标签-meta\",\"951\":\"v-0c3b3a6d#二倍图\",\"952\":\"v-0c3b3a6d#物理像素-物理像素比\",\"953\":\"v-0c3b3a6d#多倍图\",\"954\":\"v-0c3b3a6d#背景缩放-background-size\",\"955\":\"v-0c3b3a6d#其他图片格式\",\"956\":\"v-0c3b3a6d#移动端开发选择\",\"957\":\"v-0c3b3a6d#单独制作移动端页面-主流\",\"958\":\"v-0c3b3a6d#响应式页面兼容移动端-其次\",\"959\":\"v-0c3b3a6d#移动端常见布局\",\"960\":\"v-0c3b3a6d#流式布局\",\"961\":\"v-0c3b3a6d#flex-布局\",\"962\":\"v-0c3b3a6d#rem-适配布局-重要\",\"963\":\"v-0c3b3a6d#rem\",\"964\":\"v-0c3b3a6d#媒体查询\",\"965\":\"v-0c3b3a6d#less-变量转换-rem\",\"966\":\"v-0c3b3a6d#实时响应式适配方案实现\",\"967\":\"v-581e051c\",\"968\":\"v-581e051c#盒子模型\",\"969\":\"v-581e051c#内边距-padding\",\"970\":\"v-581e051c#外边距-margin\",\"971\":\"v-581e051c#外边距合并与塌陷-重要\",\"972\":\"v-581e051c#清除内外边距\",\"973\":\"v-581e051c#怪异盒模型-border-box\",\"974\":\"v-581e051c#浮动\",\"975\":\"v-581e051c#标准流\",\"976\":\"v-581e051c#浮动-1\",\"977\":\"v-581e051c#定义\",\"978\":\"v-581e051c#浮动特性-重难点\",\"979\":\"v-581e051c#浮动元素应用场景\",\"980\":\"v-581e051c#浮动布局注意点\",\"981\":\"v-581e051c#清除浮动\",\"982\":\"v-581e051c#为什么需要清除浮动\",\"983\":\"v-581e051c#本质\",\"984\":\"v-581e051c#语法\",\"985\":\"v-581e051c#清除浮动四方法\",\"986\":\"v-581e051c#定位\",\"987\":\"v-581e051c#为什么需要定位\",\"988\":\"v-581e051c#定位组成\",\"989\":\"v-581e051c#定位模式-position\",\"990\":\"v-581e051c#位置属性\",\"991\":\"v-581e051c#静态定位-statics\",\"992\":\"v-581e051c#相对定位-relative-重要\",\"993\":\"v-581e051c#绝对定位-absolute-重要\",\"994\":\"v-581e051c#固定定位-fixed-重要\",\"995\":\"v-581e051c#粘性定位-sticky-了解\",\"996\":\"v-581e051c#叠放次序-z-index\",\"997\":\"v-581e051c#子绝父相\",\"998\":\"v-581e051c#定位特殊性\",\"999\":\"v-581e051c#定位总结\",\"1000\":\"v-581e051c#css-属性书写顺序-重要\",\"1001\":\"v-581e051c#页面布局整体思路\",\"1002\":\"v-581e051c#网页布局总结\",\"1003\":\"v-8086e4aa\",\"1004\":\"v-8086e4aa#预编译语言\",\"1005\":\"v-8086e4aa#sass\",\"1006\":\"v-8086e4aa#less\",\"1007\":\"v-8086e4aa#stylus\",\"1008\":\"v-8086e4aa#特性\",\"1009\":\"v-8086e4aa#基本使用\",\"1010\":\"v-8086e4aa#嵌套\",\"1011\":\"v-8086e4aa#变量\",\"1012\":\"v-8086e4aa#作用域\",\"1013\":\"v-8086e4aa#混入\",\"1014\":\"v-8086e4aa#计算\",\"1015\":\"v-8086e4aa#条件判断\",\"1016\":\"v-8086e4aa#循环\",\"1017\":\"v-8086e4aa#模块化-import\",\"1018\":\"v-1496f116\",\"1019\":\"v-1496f116#新增-input-特性\",\"1020\":\"v-1496f116#新增结构化标签\",\"1021\":\"v-1496f116#视频标签-video\",\"1022\":\"v-1496f116#音频标签-audio\",\"1023\":\"v-09d3be37\",\"1024\":\"v-09d3be37#html-与浏览器基础\",\"1025\":\"v-09d3be37#掌握网页基本组成\",\"1026\":\"v-09d3be37#html-是什么\",\"1027\":\"v-09d3be37#常用浏览器\",\"1028\":\"v-09d3be37#web标准的三大组成部分\",\"1029\":\"v-09d3be37#html-标签\",\"1030\":\"v-09d3be37#标签书写注意规范\",\"1031\":\"v-09d3be37#html-骨架标签\",\"1032\":\"v-09d3be37#_1-doctype-文档类型声明标签\",\"1033\":\"v-09d3be37#_2-html-lang-语言种类-全局属性\",\"1034\":\"v-09d3be37#_3-meta-charset-字符集\",\"1035\":\"v-09d3be37#_4-标题标签-h1-h6-重要\",\"1036\":\"v-09d3be37#_5-段落和换行标签-重要\",\"1037\":\"v-09d3be37#_6-文本格式化标签\",\"1038\":\"v-09d3be37#_7-div-和-span-标签\",\"1039\":\"v-09d3be37#_8-sup-和-sub-标签\",\"1040\":\"v-09d3be37#_9-注释\",\"1041\":\"v-09d3be37#超链接标签-a\",\"1042\":\"v-09d3be37#链接的语法格式\",\"1043\":\"v-09d3be37#链接的分类\",\"1044\":\"v-09d3be37#图片标签-img\",\"1045\":\"v-09d3be37#相对路径的三种形式\",\"1046\":\"v-09d3be37#表格标签\",\"1047\":\"v-09d3be37#表格的主要作用\",\"1048\":\"v-09d3be37#表格的基本语法\",\"1049\":\"v-09d3be37#表格结构标签\",\"1050\":\"v-09d3be37#合并单元格\",\"1051\":\"v-09d3be37#列表标签\",\"1052\":\"v-09d3be37#无序列表-重点\",\"1053\":\"v-09d3be37#有序列表-理解\",\"1054\":\"v-09d3be37#自定义列表\",\"1055\":\"v-09d3be37#表单标签\",\"1056\":\"v-09d3be37#form-标签\",\"1057\":\"v-09d3be37#表单控件-表单元素\",\"1058\":\"v-6141e8df\",\"1059\":\"v-2783bd56\",\"1060\":\"v-2783bd56#bom-对象\",\"1061\":\"v-2783bd56#window\",\"1062\":\"v-2783bd56#事件\",\"1063\":\"v-2783bd56#方法\",\"1064\":\"v-2783bd56#navigator\",\"1065\":\"v-2783bd56#location\",\"1066\":\"v-2783bd56#从输入-url-到页面加载的全过程\",\"1067\":\"v-2783bd56#history\",\"1068\":\"v-2783bd56#screen\",\"1069\":\"v-2783bd56#总结\",\"1070\":\"v-2783bd56#定时器应用\",\"1071\":\"v-2783bd56#思想\",\"1072\":\"v-2783bd56#设置\",\"1073\":\"v-2783bd56#两个及以上元素调用同一个定时器响应函数\",\"1074\":\"v-2783bd56#执行机制\",\"1075\":\"v-2783bd56#js是单线程\",\"1076\":\"v-2783bd56#同步和异步\",\"1077\":\"v-1173d1d8\",\"1078\":\"v-1173d1d8#节点介绍\",\"1079\":\"v-1173d1d8#文档节点-document\",\"1080\":\"v-1173d1d8#html-结构相关\",\"1081\":\"v-1173d1d8#url-相关\",\"1082\":\"v-1173d1d8#元素节点-element\",\"1083\":\"v-1173d1d8#属性节点-attr\",\"1084\":\"v-1173d1d8#文本节点-text\",\"1085\":\"v-1173d1d8#元素节点\",\"1086\":\"v-1173d1d8#获取节点属性\",\"1087\":\"v-1173d1d8#获取子节点\",\"1088\":\"v-1173d1d8#获取父节点和兄弟节点\",\"1089\":\"v-1173d1d8#元素拷贝\",\"1090\":\"v-1173d1d8#inner\",\"1091\":\"v-1173d1d8#outer\",\"1092\":\"v-1173d1d8#获取节点方法\",\"1093\":\"v-1173d1d8#其余节点方法\",\"1094\":\"v-1173d1d8#增删改节点方法\",\"1095\":\"v-1173d1d8#动态创建元素\",\"1096\":\"v-1173d1d8#属性节点\",\"1097\":\"v-1173d1d8#classlist\",\"1098\":\"v-1173d1d8#add\",\"1099\":\"v-1173d1d8#contains\",\"1100\":\"v-1173d1d8#item\",\"1101\":\"v-1173d1d8#remove\",\"1102\":\"v-1173d1d8#toggle\",\"1103\":\"v-1173d1d8#dataset\",\"1104\":\"v-1173d1d8#css-操作\",\"1105\":\"v-1173d1d8#读取设置内联样式\",\"1106\":\"v-1173d1d8#获取元素样式\",\"1107\":\"v-1173d1d8#元素宽高移动属性\",\"1108\":\"v-1173d1d8#元素偏移量-offset-系列\",\"1109\":\"v-1173d1d8#元素可视区系列\",\"1110\":\"v-1173d1d8#clienttop、clientleft\",\"1111\":\"v-1173d1d8#clientwidth、clientheight\",\"1112\":\"v-1173d1d8#元素滚动系列\",\"1113\":\"v-1173d1d8#scrollwidth、scrollheight\",\"1114\":\"v-1173d1d8#scrollleft、scrolltop\",\"1115\":\"v-1173d1d8#滚动到底\",\"1116\":\"v-1173d1d8#三大系列对比\",\"1117\":\"v-1173d1d8#事件\",\"1118\":\"v-1173d1d8#弃用写法\",\"1119\":\"v-1173d1d8#代码加载\",\"1120\":\"v-1173d1d8#for-异步执行\",\"1121\":\"v-1173d1d8#滚动条事件-onscroll\",\"1122\":\"v-1173d1d8#clientx、clienty\",\"1123\":\"v-1173d1d8#pagex、pagey\",\"1124\":\"v-1173d1d8#页面被卷去的头部\",\"1125\":\"v-1173d1d8#事件冒泡\",\"1126\":\"v-1173d1d8#新增-mouseenter\",\"1127\":\"v-1173d1d8#事件委派\",\"1128\":\"v-1173d1d8#事件绑定\",\"1129\":\"v-1173d1d8#传统绑定\",\"1130\":\"v-1173d1d8#事件监听器\",\"1131\":\"v-1173d1d8#定义绑定函数\",\"1132\":\"v-1173d1d8#事件传播\",\"1133\":\"v-1173d1d8#_1、捕获阶段\",\"1134\":\"v-1173d1d8#_2、目标阶段\",\"1135\":\"v-1173d1d8#_3、冒泡阶段\",\"1136\":\"v-1173d1d8#_4、捕获阶段触发\",\"1137\":\"v-1173d1d8#拖拽事件\",\"1138\":\"v-1173d1d8#拖拽流程\",\"1139\":\"v-1173d1d8#鼠标与元素的相对位移量\",\"1140\":\"v-1173d1d8#拖拽异常\",\"1141\":\"v-1173d1d8#ie-setcapture\",\"1142\":\"v-1173d1d8#ondrag\",\"1143\":\"v-1173d1d8#滚轮事件\",\"1144\":\"v-1173d1d8#滚轮流程\",\"1145\":\"v-1173d1d8#事件名称\",\"1146\":\"v-1173d1d8#获取滚轮长度\",\"1147\":\"v-1173d1d8#浏览器滚动条滚动\",\"1148\":\"v-1173d1d8#注意\",\"1149\":\"v-1173d1d8#键盘事件\",\"1150\":\"v-1173d1d8#事件名称-1\",\"1151\":\"v-1173d1d8#onkeydown\",\"1152\":\"v-1173d1d8#键盘属性\",\"1153\":\"v-1173d1d8#key\",\"1154\":\"v-1173d1d8#键盘移动元素\",\"1155\":\"v-1173d1d8#断点调试方法\",\"1156\":\"v-0b80baae\",\"1157\":\"v-0b80baae#es6\",\"1158\":\"v-0b80baae#_1-let\",\"1159\":\"v-0b80baae#_2-const\",\"1160\":\"v-0b80baae#_3-解构赋值\",\"1161\":\"v-0b80baae#_4-模板字符串\",\"1162\":\"v-0b80baae#_5-简化对象写法\",\"1163\":\"v-0b80baae#_6-箭头函数\",\"1164\":\"v-0b80baae#_7-函数参数默认值\",\"1165\":\"v-0b80baae#_8-rest-剩余参数\",\"1166\":\"v-0b80baae#_9-扩展运算符\",\"1167\":\"v-0b80baae#_10-symbol-第七种数据类型\",\"1168\":\"v-0b80baae#特点\",\"1169\":\"v-0b80baae#语法\",\"1170\":\"v-0b80baae#应用\",\"1171\":\"v-0b80baae#内置值\",\"1172\":\"v-0b80baae#_11-迭代器\",\"1173\":\"v-0b80baae#原理\",\"1174\":\"v-0b80baae#_12-生成器\",\"1175\":\"v-0b80baae#_13-promise\",\"1176\":\"v-0b80baae#语法-1\",\"1177\":\"v-0b80baae#方法\",\"1178\":\"v-0b80baae#_14-set\",\"1179\":\"v-0b80baae#_15-map\",\"1180\":\"v-0b80baae#_16-类\",\"1181\":\"v-0b80baae#_17-数值扩展\",\"1182\":\"v-0b80baae#_18-对象扩展\",\"1183\":\"v-0b80baae#_1-object-is\",\"1184\":\"v-0b80baae#_2-object-assign\",\"1185\":\"v-0b80baae#_3-object-setprototypeof\",\"1186\":\"v-0b80baae#_19-模块化\",\"1187\":\"v-0b80baae#_1-好处\",\"1188\":\"v-0b80baae#_2-模块化规范\",\"1189\":\"v-0b80baae#_3-模块化语法\",\"1190\":\"v-0b80baae#_4-暴露模块数据语法\",\"1191\":\"v-0b80baae#_5-引入模块数据语法\",\"1192\":\"v-0b80baae#_6-babel-转换器模块化流程-node-vue\",\"1193\":\"v-0b80baae#es7\",\"1194\":\"v-0b80baae#_1-指数操作符\",\"1195\":\"v-0b80baae#_2-array-from\",\"1196\":\"v-0b80baae#_3-数组方法-重要\",\"1197\":\"v-0b80baae#foreach\",\"1198\":\"v-0b80baae#filter\",\"1199\":\"v-0b80baae#some\",\"1200\":\"v-0b80baae#map\",\"1201\":\"v-0b80baae#every\",\"1202\":\"v-0b80baae#_4-字符串方法\",\"1203\":\"v-0b80baae#es8\",\"1204\":\"v-0b80baae#_1-async-await\",\"1205\":\"v-0b80baae#_1-async-函数\",\"1206\":\"v-0b80baae#_2-await-表达式\",\"1207\":\"v-0b80baae#_3-发送-ajax-请求\",\"1208\":\"v-0b80baae#_2-对象方法扩展\",\"1209\":\"v-0b80baae#object-keys-object-values\",\"1210\":\"v-0b80baae#object-entries\",\"1211\":\"v-0b80baae#object-getownpropertydescriptors\",\"1212\":\"v-0b80baae#object-create-proto-propertiesobject\",\"1213\":\"v-0b80baae#es9\",\"1214\":\"v-0b80baae#_1-扩展运算符与-rest-参数\",\"1215\":\"v-0b80baae#_2-正则命名分组捕获\",\"1216\":\"v-0b80baae#_3-正则反向断言\",\"1217\":\"v-0b80baae#_4-dotall-模式\",\"1218\":\"v-0b80baae#_5-object-fromentries\",\"1219\":\"v-0b80baae#es10\",\"1220\":\"v-0b80baae#_1-trimstart-trimend\",\"1221\":\"v-0b80baae#_2-flat-flatmap\",\"1222\":\"v-0b80baae#_3-symbol-prototype-description\",\"1223\":\"v-0b80baae#es11\",\"1224\":\"v-0b80baae#_1-私有属性\",\"1225\":\"v-0b80baae#_2-promise-allsettled\",\"1226\":\"v-0b80baae#_3-promise-all\",\"1227\":\"v-0b80baae#_4-matchall-方法\",\"1228\":\"v-0b80baae#_5-可选链操作符\",\"1229\":\"v-0b80baae#_6-动态创建-import\",\"1230\":\"v-0b80baae#_7-bigint-第八种数据类型\",\"1231\":\"v-0b80baae#_8-绝对全局对象-globalthis\",\"1232\":\"v-3b5b9252\",\"1233\":\"v-3b5b9252#js-历史介绍\",\"1234\":\"v-3b5b9252#基础语法\",\"1235\":\"v-3b5b9252#写入方式\",\"1236\":\"v-3b5b9252#执行顺序\",\"1237\":\"v-3b5b9252#基础输出语句\",\"1238\":\"v-3b5b9252#书写规范\",\"1239\":\"v-3b5b9252#字面量与变量\",\"1240\":\"v-3b5b9252#标识符\",\"1241\":\"v-3b5b9252#数据类型-重要\",\"1242\":\"v-3b5b9252#转义字符\",\"1243\":\"v-3b5b9252#number\",\"1244\":\"v-3b5b9252#null\",\"1245\":\"v-3b5b9252#undefined\",\"1246\":\"v-3b5b9252#string\",\"1247\":\"v-3b5b9252#object\",\"1248\":\"v-3b5b9252#强制类型转换\",\"1249\":\"v-3b5b9252#_1-转换-string\",\"1250\":\"v-3b5b9252#_2-转换-number\",\"1251\":\"v-3b5b9252#_3-转换-boolean\",\"1252\":\"v-3b5b9252#其他进制数字\",\"1253\":\"v-3b5b9252#运算符\",\"1254\":\"v-3b5b9252#算数运算符\",\"1255\":\"v-3b5b9252#_1-加号\",\"1256\":\"v-3b5b9252#_2-减乘除模\",\"1257\":\"v-3b5b9252#一元运算符\",\"1258\":\"v-3b5b9252#自增和自减\",\"1259\":\"v-3b5b9252#逻辑运算符\",\"1260\":\"v-3b5b9252#赋值运算符\",\"1261\":\"v-3b5b9252#关系运算符\",\"1262\":\"v-3b5b9252#unicode-编码\",\"1263\":\"v-3b5b9252#三元运算符\",\"1264\":\"v-3b5b9252#空值合并操作符\",\"1265\":\"v-3b5b9252#逗号操作符\",\"1266\":\"v-3b5b9252#隐式类型转换\",\"1267\":\"v-3b5b9252#流程控制语句\",\"1268\":\"v-3b5b9252#条件判断语句-if\",\"1269\":\"v-3b5b9252#条件分支语句-switch\",\"1270\":\"v-3b5b9252#循环语句\",\"1271\":\"v-3b5b9252#_1-while-循环\",\"1272\":\"v-3b5b9252#_2-do-while-循环\",\"1273\":\"v-3b5b9252#_3-for-循环\",\"1274\":\"v-3b5b9252#_4-for-in-循环\",\"1275\":\"v-3b5b9252#_5-for-of-循环\",\"1276\":\"v-3b5b9252#_6-foreach-循环\",\"1277\":\"v-3b5b9252#_7-循环控制语句\",\"1278\":\"v-1a1db9de\",\"1279\":\"v-1a1db9de#概述\",\"1280\":\"v-1a1db9de#基本使用\",\"1281\":\"v-1a1db9de#版本\",\"1282\":\"v-1a1db9de#入口函数\",\"1283\":\"v-1a1db9de#顶级对象\",\"1284\":\"v-1a1db9de#jquery-对象和-dom-对象\",\"1285\":\"v-1a1db9de#常用-api\",\"1286\":\"v-1a1db9de#基础选择器\",\"1287\":\"v-1a1db9de#层级选择器\",\"1288\":\"v-1a1db9de#隐式迭代-重要\",\"1289\":\"v-1a1db9de#筛选选择器\",\"1290\":\"v-1a1db9de#筛选方法\",\"1291\":\"v-1a1db9de#排他思想\",\"1292\":\"v-1a1db9de#样式操作\",\"1293\":\"v-1a1db9de#操作-css-方法\",\"1294\":\"v-1a1db9de#只写-属性名-返回属性值\",\"1295\":\"v-1a1db9de#参数是-属性名-属性值-逗号分隔\",\"1296\":\"v-1a1db9de#参数可以是对象形式\",\"1297\":\"v-1a1db9de#设置类样式方法\",\"1298\":\"v-1a1db9de#添加类\",\"1299\":\"v-1a1db9de#删除类\",\"1300\":\"v-1a1db9de#切换类\",\"1301\":\"v-1a1db9de#类操作与-classname-区别\",\"1302\":\"v-1a1db9de#动画效果\",\"1303\":\"v-1a1db9de#显示隐藏\",\"1304\":\"v-1a1db9de#滑动效果\",\"1305\":\"v-1a1db9de#事件切换\",\"1306\":\"v-1a1db9de#动画队列及停止\",\"1307\":\"v-1a1db9de#淡入淡出效果\",\"1308\":\"v-1a1db9de#自定义动画-animate\",\"1309\":\"v-1a1db9de#属性操作\",\"1310\":\"v-1a1db9de#prop\",\"1311\":\"v-1a1db9de#attr\",\"1312\":\"v-1a1db9de#数据缓存-data\",\"1313\":\"v-1a1db9de#checked-选择器\",\"1314\":\"v-1a1db9de#内容文本值\",\"1315\":\"v-1a1db9de#html\",\"1316\":\"v-1a1db9de#text\",\"1317\":\"v-1a1db9de#val\",\"1318\":\"v-1a1db9de#元素操作\",\"1319\":\"v-1a1db9de#遍历元素\",\"1320\":\"v-1a1db9de#创建元素\",\"1321\":\"v-1a1db9de#添加元素\",\"1322\":\"v-1a1db9de#删除元素\",\"1323\":\"v-1a1db9de#尺寸位置操作\",\"1324\":\"v-1a1db9de#尺寸操作\",\"1325\":\"v-1a1db9de#位置操作\",\"1326\":\"v-1a1db9de#事件操作\",\"1327\":\"v-1a1db9de#事件注册\",\"1328\":\"v-1a1db9de#事件处理-on\",\"1329\":\"v-1a1db9de#事件处理-off\",\"1330\":\"v-1a1db9de#自动触发事件\",\"1331\":\"v-1a1db9de#事件对象\",\"1332\":\"v-1a1db9de#对象拷贝\",\"1333\":\"v-1a1db9de#多库共存\",\"1334\":\"v-1a1db9de#插件封装\",\"1335\":\"v-1a1db9de#局部封装\",\"1336\":\"v-1a1db9de#全局封装\",\"1337\":\"v-93c02aaa\",\"1338\":\"v-93c02aaa#对象\",\"1339\":\"v-93c02aaa#内建对象\",\"1340\":\"v-93c02aaa#宿主对象\",\"1341\":\"v-93c02aaa#自定义对象\",\"1342\":\"v-93c02aaa#函数\",\"1343\":\"v-93c02aaa#语法\",\"1344\":\"v-93c02aaa#参数\",\"1345\":\"v-93c02aaa#返回值\",\"1346\":\"v-93c02aaa#iife-立即执行函数\",\"1347\":\"v-93c02aaa#方法\",\"1348\":\"v-93c02aaa#作用域\",\"1349\":\"v-93c02aaa#全局作用域\",\"1350\":\"v-93c02aaa#函数作用域\",\"1351\":\"v-93c02aaa#数组-array\",\"1352\":\"v-93c02aaa#常见特性\",\"1353\":\"v-93c02aaa#字面量\",\"1354\":\"v-93c02aaa#常用数组方法\",\"1355\":\"v-93c02aaa#_1-push\",\"1356\":\"v-93c02aaa#_2-pop\",\"1357\":\"v-93c02aaa#_3-unshift\",\"1358\":\"v-93c02aaa#_4-shift\",\"1359\":\"v-93c02aaa#_5-slice\",\"1360\":\"v-93c02aaa#_6-splice\",\"1361\":\"v-93c02aaa#_7-concat\",\"1362\":\"v-93c02aaa#_8-join\",\"1363\":\"v-93c02aaa#_9-reverse\",\"1364\":\"v-93c02aaa#_10-sort\",\"1365\":\"v-93c02aaa#_11-indexof\",\"1366\":\"v-93c02aaa#_12-lastindexof\",\"1367\":\"v-93c02aaa#日期-date\",\"1368\":\"v-93c02aaa#数学-math\",\"1369\":\"v-93c02aaa#对象属性\",\"1370\":\"v-93c02aaa#对象方法\",\"1371\":\"v-93c02aaa#包装类\",\"1372\":\"v-93c02aaa#字符串-string\",\"1373\":\"v-93c02aaa#字符串获取\",\"1374\":\"v-93c02aaa#字符串拼接\",\"1375\":\"v-93c02aaa#目录查找\",\"1376\":\"v-93c02aaa#字符串截取\",\"1377\":\"v-93c02aaa#字符串拆分\",\"1378\":\"v-293c31c6\",\"1379\":\"v-293c31c6#javascript\",\"1380\":\"v-0b17da46\",\"1381\":\"v-0b17da46#描述功能\",\"1382\":\"v-0b17da46#描述字符范围\",\"1383\":\"v-0b17da46#选择匹配\",\"1384\":\"v-0b17da46#重复匹配\",\"1385\":\"v-0b17da46#惰性匹配\",\"1386\":\"v-0b17da46#边界量词\",\"1387\":\"v-0b17da46#声明词量\",\"1388\":\"v-0b17da46#正向声明\",\"1389\":\"v-0b17da46#反向声明\",\"1390\":\"v-0b17da46#表达式分组\",\"1391\":\"v-0b17da46#反向引用\",\"1392\":\"v-0b17da46#禁止引用\",\"1393\":\"v-3f7e24fc\",\"1394\":\"v-3f7e24fc#值类型和引用类型\",\"1395\":\"v-3f7e24fc#判断方式\",\"1396\":\"v-3f7e24fc#存储机制\",\"1397\":\"v-3f7e24fc#实例对象创建方法\",\"1398\":\"v-3f7e24fc#代码块解析\",\"1399\":\"v-3f7e24fc#静态方法\",\"1400\":\"v-3f7e24fc#点表示法和方括号表示法\",\"1401\":\"v-3f7e24fc#in-运算符\",\"1402\":\"v-3f7e24fc#hasownproperty\",\"1403\":\"v-3f7e24fc#属性遍历\",\"1404\":\"v-3f7e24fc#属性查看\",\"1405\":\"v-3f7e24fc#属性名获取\",\"1406\":\"v-3f7e24fc#属性删除\",\"1407\":\"v-3f7e24fc#get-set\",\"1408\":\"v-3f7e24fc#其他静态方法\",\"1409\":\"v-3f7e24fc#实例方法\",\"1410\":\"v-3f7e24fc#tostring-valueof\",\"1411\":\"v-3f7e24fc#总结\",\"1412\":\"v-3f7e24fc#数据类型转换\",\"1413\":\"v-3f7e24fc#强制转换\",\"1414\":\"v-3f7e24fc#自动转换\",\"1415\":\"v-3f7e24fc#基本包装类型\",\"1416\":\"v-3f7e24fc#设计目的\",\"1417\":\"v-3f7e24fc#实例方法-1\",\"1418\":\"v-3f7e24fc#原始类型与实例对象自动转换\",\"1419\":\"v-3f7e24fc#执行机制分析\",\"1420\":\"v-3f7e24fc#语法分析\",\"1421\":\"v-3f7e24fc#预编译阶段\",\"1422\":\"v-3f7e24fc#_1-运行环境\",\"1423\":\"v-3f7e24fc#_2-执行环境\",\"1424\":\"v-3f7e24fc#执行环境的作用\",\"1425\":\"v-3f7e24fc#执行流和执行环境\",\"1426\":\"v-3f7e24fc#执行环境的生命周期\",\"1427\":\"v-3f7e24fc#执行阶段\",\"1428\":\"v-3f7e24fc#解释阶段\",\"1429\":\"v-3f7e24fc#执行阶段-1\",\"1430\":\"v-3f7e24fc#class-类\",\"1431\":\"v-3f7e24fc#继承\",\"1432\":\"v-3f7e24fc#类的继承\",\"1433\":\"v-3f7e24fc#方法重写\",\"1434\":\"v-3f7e24fc#super\",\"1435\":\"v-3f7e24fc#本质\",\"1436\":\"v-3f7e24fc#构造函数\",\"1437\":\"v-3f7e24fc#实例成员和静态成员\",\"1438\":\"v-3f7e24fc#构造函数原型-prototype\",\"1439\":\"v-3f7e24fc#对象原型-proto\",\"1440\":\"v-3f7e24fc#constructor-构造函数\",\"1441\":\"v-3f7e24fc#原型链-重要\",\"1442\":\"v-3f7e24fc#成员查找规则\",\"1443\":\"v-3f7e24fc#扩展内置对象须知\",\"1444\":\"v-3f7e24fc#函数进阶\",\"1445\":\"v-3f7e24fc#调用方式\",\"1446\":\"v-3f7e24fc#this-指向-重要\",\"1447\":\"v-3f7e24fc#改变-this-指向\",\"1448\":\"v-3f7e24fc#call\",\"1449\":\"v-3f7e24fc#apply\",\"1450\":\"v-3f7e24fc#bind\",\"1451\":\"v-3f7e24fc#小结\",\"1452\":\"v-3f7e24fc#严格模式\",\"1453\":\"v-3f7e24fc#开启严格模式\",\"1454\":\"v-3f7e24fc#严格模式简要规则\",\"1455\":\"v-3f7e24fc#闭包-重要\",\"1456\":\"v-3f7e24fc#定义\",\"1457\":\"v-3f7e24fc#作用\",\"1458\":\"v-3f7e24fc#递归\",\"1459\":\"v-3f7e24fc#对象拷贝\",\"1460\":\"v-3f7e24fc#浅拷贝-单层\",\"1461\":\"v-3f7e24fc#深拷贝\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,9],\"1\":[1,8],\"2\":[1,17],\"3\":[1,14],\"4\":[1,5],\"5\":[1,9],\"6\":[2,7],\"7\":[1,32],\"8\":[1,23],\"9\":[4,80],\"10\":[3,6],\"11\":[2,6],\"12\":[1,21],\"13\":[3,5],\"14\":[4,8],\"15\":[1,12],\"16\":[1,3],\"17\":[4,36],\"18\":[4],\"19\":[2,26],\"20\":[1,52],\"21\":[1,36],\"22\":[2,45],\"23\":[3],\"24\":[1,15],\"25\":[1],\"26\":[1,122],\"27\":[1,23],\"28\":[3,58],\"29\":[1,22],\"30\":[1,19],\"31\":[1],\"32\":[2,8],\"33\":[2,1],\"34\":[2,1],\"35\":[2,5],\"36\":[2,1],\"37\":[2,1],\"38\":[1],\"39\":[2,1],\"40\":[2,1],\"41\":[2,3],\"42\":[2,20],\"43\":[2,12],\"44\":[2,7],\"45\":[2,13],\"46\":[2,14],\"47\":[2,22],\"48\":[2,7],\"49\":[2,3],\"50\":[2,5],\"51\":[2,11],\"52\":[2,9],\"53\":[2,4],\"54\":[2,11],\"55\":[2,8],\"56\":[2,1],\"57\":[2,1],\"58\":[2,1],\"59\":[2,25],\"60\":[2,13],\"61\":[2,8],\"62\":[3,11],\"63\":[2,14],\"64\":[2,3],\"65\":[1,11],\"66\":[2,35],\"67\":[1,45],\"68\":[1,42],\"69\":[1,77],\"70\":[1,79],\"71\":[1,57],\"72\":[1,93],\"73\":[2],\"74\":[5,16],\"75\":[7,22],\"76\":[1,2],\"77\":[1,3],\"78\":[1],\"79\":[1,8],\"80\":[1,5],\"81\":[1,5],\"82\":[1,4],\"83\":[1,3],\"84\":[1,23],\"85\":[2,13],\"86\":[1,29],\"87\":[3,17],\"88\":[2,1],\"89\":[2,26],\"90\":[1],\"91\":[1,39],\"92\":[1,64],\"93\":[1,6],\"94\":[1],\"95\":[1,3],\"96\":[1,61],\"97\":[2,15],\"98\":[1,44],\"99\":[1,32],\"100\":[1,30],\"101\":[1,1],\"102\":[1,1],\"103\":[1,107],\"104\":[1],\"105\":[1,22],\"106\":[2,30],\"107\":[3,31],\"108\":[3,32],\"109\":[3,29],\"110\":[3,37],\"111\":[2,39],\"112\":[2,71],\"113\":[3,20],\"114\":[3,41],\"115\":[1,22],\"116\":[1,40],\"117\":[3,12],\"118\":[1],\"119\":[3,15],\"120\":[3,22],\"121\":[2,18],\"122\":[1,20],\"123\":[1,42],\"124\":[1,23],\"125\":[2,18],\"126\":[1,25],\"127\":[1,5],\"128\":[1,14],\"129\":[1,12],\"130\":[1,4],\"131\":[1,2],\"132\":[3,13],\"133\":[1,5],\"134\":[1,25],\"135\":[1],\"136\":[2,24],\"137\":[1,16],\"138\":[1,43],\"139\":[1,66],\"140\":[1,5],\"141\":[1],\"142\":[1,13],\"143\":[1,15],\"144\":[1,10],\"145\":[2,34],\"146\":[1],\"147\":[1,6],\"148\":[1,5],\"149\":[1,60],\"150\":[2,62],\"151\":[1],\"152\":[1,3],\"153\":[1,10],\"154\":[1,18],\"155\":[2,36],\"156\":[1,30],\"157\":[1],\"158\":[1,17],\"159\":[1,29],\"160\":[2,48],\"161\":[2,68],\"162\":[1,67],\"163\":[1,7],\"164\":[3],\"165\":[1,32],\"166\":[1,1],\"167\":[1,33],\"168\":[3],\"169\":[1,15],\"170\":[1,1],\"171\":[1,19],\"172\":[1,23],\"173\":[1,11],\"174\":[1,12],\"175\":[1],\"176\":[1,13],\"177\":[1,8],\"178\":[1,18],\"179\":[3,6],\"180\":[1,8],\"181\":[1,10],\"182\":[1,44],\"183\":[3],\"184\":[1,25],\"185\":[1,12],\"186\":[1,27],\"187\":[3,8],\"188\":[3,3],\"189\":[1,30],\"190\":[1,5],\"191\":[3,30],\"192\":[3,75],\"193\":[3,4],\"194\":[1,27],\"195\":[1,8],\"196\":[3,19],\"197\":[1,59],\"198\":[2,11],\"199\":[1,23],\"200\":[1,25],\"201\":[1,35],\"202\":[1,26],\"203\":[1,11],\"204\":[1,26],\"205\":[1],\"206\":[2,8],\"207\":[1,34],\"208\":[1,49],\"209\":[1,12],\"210\":[1,12],\"211\":[1],\"212\":[2,24],\"213\":[2,22],\"214\":[2,28],\"215\":[2,23],\"216\":[2,10],\"217\":[1,61],\"218\":[1,21],\"219\":[1,16],\"220\":[3,35],\"221\":[1,11],\"222\":[1,26],\"223\":[1,19],\"224\":[2,6],\"225\":[1,10],\"226\":[1,4],\"227\":[2,32],\"228\":[2,43],\"229\":[3,72],\"230\":[1,22],\"231\":[1,41],\"232\":[1,7],\"233\":[1,11],\"234\":[1,64],\"235\":[1,18],\"236\":[2,22],\"237\":[1,46],\"238\":[1,16],\"239\":[2,47],\"240\":[1,35],\"241\":[1,12],\"242\":[1,66],\"243\":[1,4],\"244\":[1,7],\"245\":[1,42],\"246\":[1,14],\"247\":[1],\"248\":[1,69],\"249\":[1,75],\"250\":[1,15],\"251\":[4,6],\"252\":[2,58],\"253\":[2,15],\"254\":[1,1],\"255\":[1,11],\"256\":[1],\"257\":[4,38],\"258\":[1],\"259\":[1,27],\"260\":[1,25],\"261\":[1,11],\"262\":[1,27],\"263\":[2,22],\"264\":[3,7],\"265\":[3,15],\"266\":[2,28],\"267\":[4,1],\"268\":[2,7],\"269\":[1,50],\"270\":[1,150],\"271\":[1,130],\"272\":[1,557],\"273\":[1,217],\"274\":[1,161],\"275\":[1,11],\"276\":[1],\"277\":[1,31],\"278\":[1,12],\"279\":[2,7],\"280\":[2,8],\"281\":[2,46],\"282\":[2,34],\"283\":[1,9],\"284\":[2,14],\"285\":[2,11],\"286\":[2,64],\"287\":[1,22],\"288\":[2,51],\"289\":[2,34],\"290\":[2,47],\"291\":[2,27],\"292\":[2,78],\"293\":[2,65],\"294\":[1,8],\"295\":[2,52],\"296\":[1,32],\"297\":[2,44],\"298\":[2,34],\"299\":[2,22],\"300\":[1,6],\"301\":[1,49],\"302\":[1,11],\"303\":[2,16],\"304\":[1,1],\"305\":[2,44],\"306\":[2,65],\"307\":[3,19],\"308\":[2,22],\"309\":[2,23],\"310\":[2,11],\"311\":[2,12],\"312\":[2,25],\"313\":[2,33],\"314\":[1,1],\"315\":[2,76],\"316\":[2,54],\"317\":[2,127],\"318\":[2,98],\"319\":[2,141],\"320\":[2,102],\"321\":[2,21],\"322\":[2,56],\"323\":[2,205],\"324\":[1],\"325\":[2,104],\"326\":[2,108],\"327\":[2,62],\"328\":[2,68],\"329\":[3,51],\"330\":[2,41],\"331\":[1,11],\"332\":[2,22],\"333\":[3,51],\"334\":[3,20],\"335\":[2,23],\"336\":[2,21],\"337\":[2,11],\"338\":[2,97],\"339\":[2,50],\"340\":[1,11],\"341\":[1,14],\"342\":[2,16],\"343\":[4,6],\"344\":[2,42],\"345\":[2,19],\"346\":[2,29],\"347\":[2,6],\"348\":[2,142],\"349\":[2,139],\"350\":[4,11],\"351\":[2,42],\"352\":[2,149],\"353\":[1,53],\"354\":[2,45],\"355\":[1,18],\"356\":[3,53],\"357\":[2,178],\"358\":[1,26],\"359\":[3,65],\"360\":[2,165],\"361\":[2,210],\"362\":[1,1],\"363\":[1,12],\"364\":[2],\"365\":[1,52],\"366\":[1,20],\"367\":[3,43],\"368\":[3,21],\"369\":[2,24],\"370\":[2,24],\"371\":[2,24],\"372\":[2,15],\"373\":[2,160],\"374\":[2,179],\"375\":[2,165],\"376\":[1,23],\"377\":[3,44],\"378\":[3,22],\"379\":[2,25],\"380\":[2,25],\"381\":[2,24],\"382\":[2,51],\"383\":[2,42],\"384\":[2,45],\"385\":[2,174],\"386\":[1,11],\"387\":[1],\"388\":[1,48],\"389\":[1],\"390\":[1,8],\"391\":[1,25],\"392\":[2,81],\"393\":[1,9],\"394\":[2,20],\"395\":[2,182],\"396\":[2,200],\"397\":[1,11],\"398\":[1,1],\"399\":[1],\"400\":[1,7],\"401\":[1,5],\"402\":[1,15],\"403\":[1,9],\"404\":[1,14],\"405\":[1],\"406\":[1,20],\"407\":[3,55],\"408\":[1],\"409\":[1,13],\"410\":[1,36],\"411\":[1,38],\"412\":[1,18],\"413\":[2],\"414\":[1,17],\"415\":[1,15],\"416\":[1,22],\"417\":[1,29],\"418\":[2,68],\"419\":[1],\"420\":[1],\"421\":[1,14],\"422\":[1,10],\"423\":[1,16],\"424\":[1,64],\"425\":[1,21],\"426\":[1,32],\"427\":[1,51],\"428\":[1],\"429\":[1,34],\"430\":[1,88],\"431\":[1,34],\"432\":[1,45],\"433\":[1,19],\"434\":[1,28],\"435\":[1,8],\"436\":[1,36],\"437\":[1,32],\"438\":[1,17],\"439\":[1,49],\"440\":[2,1],\"441\":[1],\"442\":[1,13],\"443\":[1,38],\"444\":[1,13],\"445\":[1],\"446\":[1,11],\"447\":[1,18],\"448\":[1,28],\"449\":[1],\"450\":[1,54],\"451\":[1,84],\"452\":[1,32],\"453\":[1],\"454\":[2,42],\"455\":[2,27],\"456\":[1],\"457\":[1,40],\"458\":[5,11],\"459\":[1],\"460\":[1,25],\"461\":[2,66],\"462\":[1],\"463\":[1,7],\"464\":[1,7],\"465\":[1,28],\"466\":[4,29],\"467\":[2,29],\"468\":[1,30],\"469\":[1],\"470\":[1,31],\"471\":[1,23],\"472\":[1,62],\"473\":[1,10],\"474\":[1,85],\"475\":[1,90],\"476\":[1],\"477\":[1,1],\"478\":[1],\"479\":[1,37],\"480\":[1,25],\"481\":[1,14],\"482\":[1,29],\"483\":[1],\"484\":[1],\"485\":[1,14],\"486\":[1,22],\"487\":[1,47],\"488\":[1,22],\"489\":[1,38],\"490\":[1,8],\"491\":[1,4],\"492\":[1,14],\"493\":[1,28],\"494\":[1,1],\"495\":[1,33],\"496\":[1],\"497\":[1,50],\"498\":[1,31],\"499\":[1,43],\"500\":[1,44],\"501\":[1],\"502\":[1,8],\"503\":[1,4],\"504\":[1,61],\"505\":[1,95],\"506\":[1],\"507\":[1,15],\"508\":[1,29],\"509\":[1,6],\"510\":[3,47],\"511\":[4,64],\"512\":[2,51],\"513\":[2,54],\"514\":[4,51],\"515\":[3,101],\"516\":[3,57],\"517\":[4,65],\"518\":[3,67],\"519\":[3,56],\"520\":[2,62],\"521\":[2,39],\"522\":[1,14],\"523\":[1,8],\"524\":[3,60],\"525\":[1,30],\"526\":[1],\"527\":[4,31],\"528\":[3,12],\"529\":[1,15],\"530\":[1,18],\"531\":[3,18],\"532\":[1],\"533\":[4],\"534\":[1,79],\"535\":[2,27],\"536\":[2,38],\"537\":[2,26],\"538\":[1],\"539\":[1,33],\"540\":[1,42],\"541\":[1,32],\"542\":[1,29],\"543\":[3,49],\"544\":[3],\"545\":[3,9],\"546\":[3,4],\"547\":[1],\"548\":[2,21],\"549\":[2,44],\"550\":[4,28],\"551\":[1],\"552\":[2],\"553\":[1,20],\"554\":[3,14],\"555\":[3,8],\"556\":[3,16],\"557\":[1,56],\"558\":[1,16],\"559\":[2],\"560\":[3,65],\"561\":[3,48],\"562\":[1,12],\"563\":[1,29],\"564\":[1,10],\"565\":[1],\"566\":[1,12],\"567\":[1,27],\"568\":[1,39],\"569\":[1],\"570\":[1,21],\"571\":[2,5],\"572\":[1,15],\"573\":[2,19],\"574\":[1,32],\"575\":[1,12],\"576\":[2,14],\"577\":[2,2],\"578\":[2,79],\"579\":[1],\"580\":[3,34],\"581\":[1,24],\"582\":[1,29],\"583\":[1,41],\"584\":[1,57],\"585\":[1,40],\"586\":[2,32],\"587\":[2,54],\"588\":[3,74],\"589\":[2],\"590\":[4,34],\"591\":[5,44],\"592\":[1,6],\"593\":[1,57],\"594\":[1],\"595\":[2,15],\"596\":[1,19],\"597\":[1,14],\"598\":[2,5],\"599\":[1,16],\"600\":[1,25],\"601\":[2,66],\"602\":[5,128],\"603\":[1,125],\"604\":[1,215],\"605\":[3,49],\"606\":[2],\"607\":[2,50],\"608\":[2,131],\"609\":[2,264],\"610\":[1,197],\"611\":[1],\"612\":[2,19],\"613\":[2,63],\"614\":[2,71],\"615\":[2,43],\"616\":[2,77],\"617\":[2,74],\"618\":[2,52],\"619\":[2],\"620\":[1,45],\"621\":[2,118],\"622\":[1],\"623\":[1,33],\"624\":[2,26],\"625\":[2,112],\"626\":[2,135],\"627\":[2,83],\"628\":[2,109],\"629\":[1],\"630\":[1,20],\"631\":[2,96],\"632\":[2,114],\"633\":[2,83],\"634\":[3,149],\"635\":[3,263],\"636\":[2,165],\"637\":[1,9],\"638\":[1,18],\"639\":[2,36],\"640\":[1,43],\"641\":[1,52],\"642\":[1,1],\"643\":[1,1],\"644\":[2,79],\"645\":[2,10],\"646\":[2,57],\"647\":[2,67],\"648\":[3,105],\"649\":[3,47],\"650\":[3,53],\"651\":[3,40],\"652\":[1],\"653\":[2,67],\"654\":[2,48],\"655\":[2,51],\"656\":[2,54],\"657\":[2,73],\"658\":[2,51],\"659\":[1],\"660\":[1,26],\"661\":[2,160],\"662\":[2,107],\"663\":[2,47],\"664\":[1,28],\"665\":[2,24],\"666\":[3,42],\"667\":[2,26],\"668\":[2,26],\"669\":[1,32],\"670\":[2,13],\"671\":[2,10],\"672\":[2,34],\"673\":[1,8],\"674\":[3,93],\"675\":[4,133],\"676\":[4,133],\"677\":[4,9],\"678\":[4,9],\"679\":[4,7],\"680\":[4,13],\"681\":[2,11],\"682\":[1,22],\"683\":[4,170],\"684\":[1,6],\"685\":[2,30],\"686\":[2,62],\"687\":[2,13],\"688\":[2,47],\"689\":[2,53],\"690\":[2,56],\"691\":[2,109],\"692\":[2,102],\"693\":[1,3],\"694\":[3,53],\"695\":[2,129],\"696\":[2,23],\"697\":[1,4],\"698\":[1,30],\"699\":[1],\"700\":[1,53],\"701\":[2,36],\"702\":[2,79],\"703\":[1,35],\"704\":[1,14],\"705\":[1,7],\"706\":[1],\"707\":[3,16],\"708\":[4,15],\"709\":[1,43],\"710\":[1,5],\"711\":[1,4],\"712\":[4,57],\"713\":[1,25],\"714\":[1,25],\"715\":[1,46],\"716\":[1,8],\"717\":[1],\"718\":[1,8],\"719\":[1,25],\"720\":[1,15],\"721\":[1,65],\"722\":[1,26],\"723\":[1,25],\"724\":[1,5],\"725\":[1,9],\"726\":[1,1],\"727\":[1,12],\"728\":[1,35],\"729\":[1,10],\"730\":[1,58],\"731\":[1,108],\"732\":[1,68],\"733\":[1,17],\"734\":[1,21],\"735\":[1,33],\"736\":[1,5],\"737\":[2,73],\"738\":[3,57],\"739\":[2,65],\"740\":[2,43],\"741\":[1,5],\"742\":[2,27],\"743\":[1,15],\"744\":[2,10],\"745\":[2,1],\"746\":[1,17],\"747\":[1,31],\"748\":[1,22],\"749\":[1,111],\"750\":[2,32],\"751\":[2,10],\"752\":[3,21],\"753\":[3,46],\"754\":[1,14],\"755\":[2,51],\"756\":[2,65],\"757\":[2,7],\"758\":[1,24],\"759\":[1,13],\"760\":[1,55],\"761\":[2],\"762\":[2,19],\"763\":[2,16],\"764\":[2,32],\"765\":[2,45],\"766\":[2,9],\"767\":[2,17],\"768\":[2,20],\"769\":[2,10],\"770\":[4,33],\"771\":[4,27],\"772\":[1],\"773\":[2,45],\"774\":[2,57],\"775\":[1,24],\"776\":[1,36],\"777\":[1,77],\"778\":[1,3],\"779\":[1,44],\"780\":[2,13],\"781\":[2,26],\"782\":[1,4],\"783\":[1],\"784\":[1,8],\"785\":[2,35],\"786\":[2,23],\"787\":[2,55],\"788\":[2,81],\"789\":[1,63],\"790\":[1,41],\"791\":[1],\"792\":[1,13],\"793\":[3,18],\"794\":[1],\"795\":[1,16],\"796\":[1,19],\"797\":[1,26],\"798\":[1,14],\"799\":[2,32],\"800\":[1,20],\"801\":[1],\"802\":[1,17],\"803\":[1,25],\"804\":[1,30],\"805\":[1],\"806\":[1,20],\"807\":[1,21],\"808\":[1,26],\"809\":[2,23],\"810\":[1,29],\"811\":[2,49],\"812\":[2,55],\"813\":[1,43],\"814\":[2,41],\"815\":[4,47],\"816\":[2,96],\"817\":[1,16],\"818\":[1,14],\"819\":[1,17],\"820\":[1,41],\"821\":[2,19],\"822\":[2,88],\"823\":[2,215],\"824\":[2,13],\"825\":[2,19],\"826\":[1,42],\"827\":[1,72],\"828\":[1,11],\"829\":[1,43],\"830\":[1,58],\"831\":[1,37],\"832\":[1,21],\"833\":[1,6],\"834\":[1,3],\"835\":[1,19],\"836\":[1,28],\"837\":[1,21],\"838\":[1,8],\"839\":[1,20],\"840\":[1,87],\"841\":[1,49],\"842\":[1,71],\"843\":[1,93],\"844\":[1],\"845\":[1,32],\"846\":[1],\"847\":[1,37],\"848\":[1,20],\"849\":[1,17],\"850\":[1,7],\"851\":[1],\"852\":[1,4],\"853\":[2,3],\"854\":[2,33],\"855\":[2,16],\"856\":[1],\"857\":[1,7],\"858\":[1,5],\"859\":[1,7],\"860\":[1,7],\"861\":[1,13],\"862\":[1,42],\"863\":[2,39],\"864\":[1,35],\"865\":[2,15],\"866\":[1,15],\"867\":[1,30],\"868\":[1,56],\"869\":[1,11],\"870\":[3,16],\"871\":[3,15],\"872\":[1,17],\"873\":[1,71],\"874\":[1],\"875\":[1,6],\"876\":[1,28],\"877\":[1,26],\"878\":[1,37],\"879\":[1,7],\"880\":[2,10],\"881\":[1,5],\"882\":[3,21],\"883\":[3,17],\"884\":[3,23],\"885\":[3,14],\"886\":[3,17],\"887\":[2,49],\"888\":[1,8],\"889\":[2,13],\"890\":[3,8],\"891\":[3,18],\"892\":[3,8],\"893\":[3,5],\"894\":[3,22],\"895\":[3,15],\"896\":[3,16],\"897\":[3,22],\"898\":[3,30],\"899\":[3,13],\"900\":[3,45],\"901\":[1,8],\"902\":[3,8],\"903\":[3,12],\"904\":[3,8],\"905\":[3,25],\"906\":[3,10],\"907\":[1,9],\"908\":[1,54],\"909\":[1,84],\"910\":[1],\"911\":[3,17],\"912\":[3,26],\"913\":[3,23],\"914\":[1,36],\"915\":[1],\"916\":[1,31],\"917\":[4,27],\"918\":[2,67],\"919\":[3,52],\"920\":[2,75],\"921\":[2],\"922\":[1],\"923\":[1],\"924\":[5,59],\"925\":[1],\"926\":[1,14],\"927\":[1,35],\"928\":[1],\"929\":[1],\"930\":[1,11],\"931\":[1,20],\"932\":[1,45],\"933\":[2,14],\"934\":[1],\"935\":[1,18],\"936\":[2,12],\"937\":[3,36],\"938\":[3,13],\"939\":[1,12],\"940\":[2,29],\"941\":[1],\"942\":[1],\"943\":[1,16],\"944\":[1,26],\"945\":[1,14],\"946\":[1,3],\"947\":[3,13],\"948\":[3,7],\"949\":[3,11],\"950\":[2,40],\"951\":[1],\"952\":[2,66],\"953\":[1,13],\"954\":[3,22],\"955\":[1,16],\"956\":[1],\"957\":[3,9],\"958\":[3,6],\"959\":[1,18],\"960\":[1,52],\"961\":[2,5],\"962\":[4,13],\"963\":[1,25],\"964\":[1,101],\"965\":[3,23],\"966\":[1,129],\"967\":[3,12],\"968\":[1,19],\"969\":[2,58],\"970\":[2,36],\"971\":[3,37],\"972\":[1,12],\"973\":[3,27],\"974\":[1,7],\"975\":[1,13],\"976\":[1,10],\"977\":[1,15],\"978\":[3,23],\"979\":[1,6],\"980\":[1,16],\"981\":[1],\"982\":[1,8],\"983\":[1,7],\"984\":[1,17],\"985\":[1,57],\"986\":[1],\"987\":[1,13],\"988\":[1,5],\"989\":[2,14],\"990\":[1,8],\"991\":[2,11],\"992\":[4,13],\"993\":[4,18],\"994\":[4,25],\"995\":[4,41],\"996\":[3,25],\"997\":[1,16],\"998\":[1,19],\"999\":[1,33],\"1000\":[4,38],\"1001\":[1,17],\"1002\":[1,11],\"1003\":[1,13],\"1004\":[1,23],\"1005\":[1,23],\"1006\":[1,20],\"1007\":[1,25],\"1008\":[1,3],\"1009\":[1,9],\"1010\":[1,13],\"1011\":[1,32],\"1012\":[1,43],\"1013\":[1,86],\"1014\":[1,35],\"1015\":[1,79],\"1016\":[1,126],\"1017\":[2,14],\"1018\":[1],\"1019\":[3,66],\"1020\":[1,56],\"1021\":[2,38],\"1022\":[2],\"1023\":[1],\"1024\":[2],\"1025\":[1,28],\"1026\":[2,14],\"1027\":[1,34],\"1028\":[2,51],\"1029\":[2,14],\"1030\":[1,29],\"1031\":[2,82],\"1032\":[4,18],\"1033\":[6,10],\"1034\":[4,22],\"1035\":[6,16],\"1036\":[4,14],\"1037\":[2,26],\"1038\":[5,12],\"1039\":[5,4],\"1040\":[2,15],\"1041\":[2,3],\"1042\":[1,25],\"1043\":[1,38],\"1044\":[2,46],\"1045\":[1,26],\"1046\":[1,2],\"1047\":[1,11],\"1048\":[1,59],\"1049\":[1,5],\"1050\":[1,18],\"1051\":[1,11],\"1052\":[3,29],\"1053\":[3,16],\"1054\":[1,19],\"1055\":[1,11],\"1056\":[2,23],\"1057\":[3,122],\"1058\":[2,5],\"1059\":[1,12],\"1060\":[2],\"1061\":[2,9],\"1062\":[1,39],\"1063\":[1,46],\"1064\":[1,22],\"1065\":[2,51],\"1066\":[3,22],\"1067\":[1,33],\"1068\":[2,4],\"1069\":[1,4],\"1070\":[1],\"1071\":[1,8],\"1072\":[1,24],\"1073\":[1,6],\"1074\":[1],\"1075\":[1,12],\"1076\":[1,52],\"1077\":[1,15],\"1078\":[1,32],\"1079\":[2,12],\"1080\":[2,5],\"1081\":[2,5],\"1082\":[2,4],\"1083\":[2,7],\"1084\":[2,15],\"1085\":[1,39],\"1086\":[1],\"1087\":[1,21],\"1088\":[1,13],\"1089\":[1,6],\"1090\":[1,7],\"1091\":[1,28],\"1092\":[1,32],\"1093\":[1,18],\"1094\":[1,40],\"1095\":[1,19],\"1096\":[1,13],\"1097\":[1,10],\"1098\":[2,6],\"1099\":[2,10],\"1100\":[2,8],\"1101\":[2,8],\"1102\":[2,19],\"1103\":[1,17],\"1104\":[2],\"1105\":[1,27],\"1106\":[1,47],\"1107\":[1],\"1108\":[3,43],\"1109\":[1],\"1110\":[2,7],\"1111\":[2,10],\"1112\":[1],\"1113\":[2,1],\"1114\":[2,2],\"1115\":[1,23],\"1116\":[1,14],\"1117\":[1,30],\"1118\":[1,14],\"1119\":[1,30],\"1120\":[2,6],\"1121\":[2],\"1122\":[2,2],\"1123\":[2,4],\"1124\":[1,46],\"1125\":[1,10],\"1126\":[2,19],\"1127\":[1,12],\"1128\":[1],\"1129\":[1,22],\"1130\":[1,36],\"1131\":[1,25],\"1132\":[1,12],\"1133\":[2,4],\"1134\":[2,3],\"1135\":[2,2],\"1136\":[2,9],\"1137\":[1],\"1138\":[1,12],\"1139\":[1,11],\"1140\":[1,12],\"1141\":[2,13],\"1142\":[1,36],\"1143\":[1],\"1144\":[1,5],\"1145\":[1,10],\"1146\":[1,14],\"1147\":[1,8],\"1148\":[1,13],\"1149\":[1],\"1150\":[1,8],\"1151\":[1,15],\"1152\":[1,25],\"1153\":[1,7],\"1154\":[1,13],\"1155\":[1,38],\"1156\":[1],\"1157\":[1],\"1158\":[2,8],\"1159\":[2,11],\"1160\":[2,26],\"1161\":[2,12],\"1162\":[2,16],\"1163\":[3,22],\"1164\":[2,18],\"1165\":[3,18],\"1166\":[2,7],\"1167\":[4,7],\"1168\":[1,17],\"1169\":[1,18],\"1170\":[1,12],\"1171\":[1,53],\"1172\":[2,19],\"1173\":[1,48],\"1174\":[2,39],\"1175\":[2,8],\"1176\":[1,8],\"1177\":[1,32],\"1178\":[2,35],\"1179\":[2,9],\"1180\":[2,15],\"1181\":[2,50],\"1182\":[2],\"1183\":[3,9],\"1184\":[3,3],\"1185\":[3,5],\"1186\":[2,4],\"1187\":[3,6],\"1188\":[3,8],\"1189\":[3,23],\"1190\":[2,11],\"1191\":[2,19],\"1192\":[6,22],\"1193\":[1],\"1194\":[2,10],\"1195\":[3,25],\"1196\":[4,17],\"1197\":[1,9],\"1198\":[1,12],\"1199\":[1,15],\"1200\":[1,5],\"1201\":[1,11],\"1202\":[2,30],\"1203\":[1],\"1204\":[3,5],\"1205\":[3,18],\"1206\":[3,37],\"1207\":[4,44],\"1208\":[2],\"1209\":[3,5],\"1210\":[2,6],\"1211\":[3,1],\"1212\":[5,2],\"1213\":[1],\"1214\":[4,27],\"1215\":[2,25],\"1216\":[2,14],\"1217\":[3,24],\"1218\":[3,10],\"1219\":[1],\"1220\":[3,3],\"1221\":[3,27],\"1222\":[4,3],\"1223\":[1],\"1224\":[2,23],\"1225\":[3,27],\"1226\":[3,9],\"1227\":[3,5],\"1228\":[2,30],\"1229\":[3,23],\"1230\":[4,21],\"1231\":[3,43],\"1232\":[1],\"1233\":[2,32],\"1234\":[1],\"1235\":[1,22],\"1236\":[1,1],\"1237\":[1,10],\"1238\":[1,5],\"1239\":[1,17],\"1240\":[1,48],\"1241\":[3,20],\"1242\":[1,6],\"1243\":[1,21],\"1244\":[1,7],\"1245\":[1,3],\"1246\":[1,1],\"1247\":[1,1],\"1248\":[1],\"1249\":[3,14],\"1250\":[3,26],\"1251\":[3,22],\"1252\":[1,11],\"1253\":[1,3],\"1254\":[1],\"1255\":[3,7],\"1256\":[3,8],\"1257\":[1,7],\"1258\":[1,23],\"1259\":[1,15],\"1260\":[1,16],\"1261\":[1,33],\"1262\":[2,12],\"1263\":[1,12],\"1264\":[1,17],\"1265\":[1,20],\"1266\":[1,1],\"1267\":[1],\"1268\":[2,22],\"1269\":[2,42],\"1270\":[1,11],\"1271\":[3,49],\"1272\":[4,29],\"1273\":[3,44],\"1274\":[4,39],\"1275\":[4,52],\"1276\":[3,33],\"1277\":[2,31],\"1278\":[1],\"1279\":[1,45],\"1280\":[1],\"1281\":[1,11],\"1282\":[1,25],\"1283\":[2,15],\"1284\":[4,22],\"1285\":[2],\"1286\":[1,24],\"1287\":[1,19],\"1288\":[3,10],\"1289\":[1,25],\"1290\":[1,38],\"1291\":[1,15],\"1292\":[1],\"1293\":[3,7],\"1294\":[3,5],\"1295\":[4,9],\"1296\":[1,14],\"1297\":[1,5],\"1298\":[1,5],\"1299\":[1,5],\"1300\":[1,5],\"1301\":[3,9],\"1302\":[1],\"1303\":[1,30],\"1304\":[1,29],\"1305\":[1,12],\"1306\":[1,6],\"1307\":[1,35],\"1308\":[2,30],\"1309\":[1],\"1310\":[2,6],\"1311\":[2,9],\"1312\":[3,17],\"1313\":[3,1],\"1314\":[1],\"1315\":[2,6],\"1316\":[2,7],\"1317\":[2,6],\"1318\":[1],\"1319\":[1,33],\"1320\":[1,5],\"1321\":[1,17],\"1322\":[1,10],\"1323\":[1],\"1324\":[1,15],\"1325\":[1,22],\"1326\":[1],\"1327\":[1,9],\"1328\":[2,44],\"1329\":[2,17],\"1330\":[1,20],\"1331\":[1,13],\"1332\":[1,31],\"1333\":[1,24],\"1334\":[1],\"1335\":[1,9],\"1336\":[1,8],\"1337\":[1],\"1338\":[1,6],\"1339\":[1,11],\"1340\":[1,6],\"1341\":[1,29],\"1342\":[1,5],\"1343\":[1,15],\"1344\":[1,20],\"1345\":[1,11],\"1346\":[2,7],\"1347\":[1,12],\"1348\":[1,1],\"1349\":[1,50],\"1350\":[1,39],\"1351\":[2,4],\"1352\":[1,16],\"1353\":[1,12],\"1354\":[1],\"1355\":[2,5],\"1356\":[2,2],\"1357\":[2,4],\"1358\":[2,2],\"1359\":[2,15],\"1360\":[2,11],\"1361\":[2,3],\"1362\":[2,11],\"1363\":[2,4],\"1364\":[2,34],\"1365\":[2,8],\"1366\":[2,17],\"1367\":[2,54],\"1368\":[2,5],\"1369\":[1,35],\"1370\":[1,67],\"1371\":[1,14],\"1372\":[2,4],\"1373\":[1,14],\"1374\":[1,7],\"1375\":[1,14],\"1376\":[1,164],\"1377\":[1,6],\"1378\":[2],\"1379\":[1,11],\"1380\":[1,18],\"1381\":[1,124],\"1382\":[1,101],\"1383\":[1,32],\"1384\":[1,70],\"1385\":[1,72],\"1386\":[1,31],\"1387\":[1,3],\"1388\":[1,35],\"1389\":[1,31],\"1390\":[1,31],\"1391\":[1,130],\"1392\":[1,22],\"1393\":[1],\"1394\":[1],\"1395\":[1,4],\"1396\":[1,12],\"1397\":[1,6],\"1398\":[1,6],\"1399\":[1],\"1400\":[1,7],\"1401\":[2,13],\"1402\":[1,29],\"1403\":[1,24],\"1404\":[1,11],\"1405\":[1,42],\"1406\":[1,22],\"1407\":[2,76],\"1408\":[1,34],\"1409\":[1],\"1410\":[2,51],\"1411\":[1,16],\"1412\":[1],\"1413\":[1,76],\"1414\":[1,34],\"1415\":[1,42],\"1416\":[1,8],\"1417\":[1,9],\"1418\":[1,8],\"1419\":[1,24],\"1420\":[1,15],\"1421\":[1,4],\"1422\":[2,27],\"1423\":[2,125],\"1424\":[1,23],\"1425\":[1,25],\"1426\":[1,20],\"1427\":[1],\"1428\":[1,25],\"1429\":[1,37],\"1430\":[2],\"1431\":[1,23],\"1432\":[1,5],\"1433\":[1,43],\"1434\":[1,13],\"1435\":[1,24],\"1436\":[1,49],\"1437\":[1,8],\"1438\":[2,36],\"1439\":[3,12],\"1440\":[2,20],\"1441\":[3,2],\"1442\":[1,18],\"1443\":[1,8],\"1444\":[1],\"1445\":[1,7],\"1446\":[4,42],\"1447\":[3],\"1448\":[1,17],\"1449\":[1,16],\"1450\":[1,15],\"1451\":[1,29],\"1452\":[1,34],\"1453\":[1,23],\"1454\":[1,6],\"1455\":[3],\"1456\":[1,35],\"1457\":[1,2],\"1458\":[1,52],\"1459\":[1],\"1460\":[3,23],\"1461\":[1,41]},\"averageFieldLength\":[1.6415868673050602,31.20401766622981],\"storedFields\":{\"0\":{\"h\":\"首页\",\"t\":[\"善用Ctrl + k 或者点击右上角搜索按钮可以获得更好的阅读体验\",\"相关信息\",\"目前学习路线推荐b站大厂程序猿up objtube的卢克儿  干就完事了！！！\"]},\"1\":{\"h\":\"AJAX\",\"t\":[\"全称：Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）\"]},\"2\":{\"h\":\"简介\",\"t\":[\"AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分页面内容的新方法。\",\"局部刷新技术：\",\"1.JavaScript\",\"2.DOM\",\"3.CSS\",\"4.servlet\",\"5.json，之前是 xml。\",\"上面技术的综合使用叫做 AJAX\"]},\"3\":{\"h\":\"核心\",\"t\":[\"Ajax 核心是 javascript 和 xml（json）：使用 JS 操作异步对象 XMLHttpRequest，和服务器交换使用 json 数据格式，使用 Ajax 实现局部更新。\"]},\"4\":{\"h\":\"优点\",\"t\":[\"1）可以无需刷新页面与服务器端进行通信。\",\"2）允许你根据用户事件来更新部分页面内容。\"]},\"5\":{\"h\":\"缺点\",\"t\":[\"1）没有浏览历史，不能回退\",\"2）存在跨域问题（同源）\",\"3）SEO 不友好\"]},\"6\":{\"h\":\"HTTP 协议\",\"t\":[\"Hypertext transport protocol 协议（超文本传输协议），协议详细规定了浏览器和万维网服务器之间互相通信的规则。\"]},\"7\":{\"h\":\"请求报文\",\"t\":[\"结构\",\"描述\",\"行\",\"请求方式（GET/POST）url 路径 协议版本 HTTP/1.1\",\"头\",\"Host：atguigu.comCookie：name=guiguContent-type：application/x-www-form-urlencodedUser-Agent：chrome 83……\",\"空行\",\"体\",\"请求数据 data（?id=xxx&name=xxx）\"]},\"8\":{\"h\":\"响应报文\",\"t\":[\"结构\",\"描述\",\"行\",\"HTTP/1.1 200 OK\",\"头\",\"Content-Type：text/html;charset=utf-8Content-length：2048Content-encoding：gzip……\",\"空行\",\"体\",\"<html><head>****xxx</html>\"]},\"9\":{\"h\":\"AJAX 基本操作（原生）\",\"t\":[\"<div id=\\\"result\\\"></div> <button id=\\\"btn\\\">点点点</button> <script> const res = document.getElementById(\\\"result\\\"); const btn = document.getElementById(\\\"btn\\\"); btn.onclick = function () { //1.创建对象 const xhr = new XMLHttpRequest(); //2.初始化，设置请求方法和url xhr.open(\\\"GET\\\", \\\"http://127.0.0.1:6060/server\\\"); //3.发送 xhr.send(); //4.事件绑定 处理服务端返回的结果 //readystate 是xhr对象中的属性，状态0 1 2 3 4 xhr.onreadystatechange = function () { //判断 服务端返回了所有的结果 状态4 if (xhr.readyState === 4) { //判断响应状态码 200 404 403 401 500 //2xx 表示成功 if (xhr.status >= 200 && xhr.status <= 300) { //处理结果 行 头 空行 体 //1.响应行 console.log(xhr.status); //状态码 console.log(xhr.statusText); //状态字符串 console.log(xhr.getAllResponseHeaders()); //所有响应头 console.log(xhr.response); //响应体 //设置res的文本 res.innerHTML = xhr.response; } } }; }; </script> \"]},\"10\":{\"h\":\"设置 query 参数的方式\",\"t\":[\"url 后面添加 \\\"?\\\" + \\\"key=value\\\" & \\\"key=value\\\"，以此类推。\"]},\"11\":{\"h\":\"POST 设置请求体的方式\",\"t\":[\"xhr.send(\\\"a=100&b=200&c=300\\\"); \"]},\"12\":{\"h\":\"设置请求头信息\",\"t\":[\"xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/x-www-form-urlencoded\\\"); \",\"自定义请求头信息，需要服务端配置 all 请求方式，以及\",\"response.setHeader(\\\"Access-Control-Allow-Headers\\\", \\\"*\\\"); \"]},\"13\":{\"h\":\"服务端响应 JSON 数据\",\"t\":[\"xhr.responseType = \\\"json\\\"; \"]},\"14\":{\"h\":\"get 请求 ajax 不会自动刷新\",\"t\":[\"请求行 url 后缀加上 Date.now() 添加时间戳，保证 url 不重复\"]},\"15\":{\"h\":\"超时设置\",\"t\":[\"xhr.timeout = 2000;\",\"2s 后若没有无响应数据返回，则 Status 变为 canceled\",\"xhr.onTimeout 超时响应事件\"]},\"16\":{\"h\":\"取消请求\",\"t\":[\"xhr.abort();\"]},\"17\":{\"h\":\"jQuery 的 AJAX 方法\",\"t\":[\"通用型\",\"$(\\\"#btn\\\").click(function () { $.ajax({ //url url: \\\"http://127.0.0.1:6060/delay\\\", //参数 data: { a: 100, b: 200 }, //请求类型 type: \\\"GET\\\", //响应数据类型 dataType: \\\"json\\\", //成功的回调 success: function (data) { console.log(data.name); }, error: function (err) { console.log(err); }, headers: { a: 200, b: 300, }, }); }); \",\"常用方法见上。\"]},\"18\":{\"h\":\"axios 的 AJAX 方法\"},\"19\":{\"h\":\"express 服务端\",\"t\":[\"app.all(\\\"/axios-server\\\", (request, response) => { //允许跨域 response.setHeader(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\"); response.setHeader(\\\"Access-Control-Allow-Headers\\\", \\\"*\\\"); //设置响应体 response.send({ name: \\\"axios 欢迎\\\" }); }); //4.监听端口启动服务 app.listen(6060, () => { console.log(\\\"服务已启动\\\"); }); \"]},\"20\":{\"h\":\"客户端\",\"t\":[\"<body> <button>GET</button> <button>POST</button> <button>AJAX</button> <script> const btns = document.getElementsByTagName(\\\"button\\\"); //配置baseURL axios.defaults.baseURL = 'http://127.0.0.1:6060'; btns[0].onclick = function () { axios.get('/axios-server', { //参数 params: { id: 100, vip: 7 }, //请求头 headers: { name: \\\"YZH\\\", age: 18 } //then方法返回响应体 }).then(value => { console.log(value.data); }); }; btns[1].onclick = function () { axios.post('/axios-server', { username: 'admin', password: 'admin' }, { //参数 params: { id: 100, vip: 7 }, //请求头 headers: { name: \\\"YZH\\\", age: 18 } //then方法返回响应体 }).then(value => { console.log(value.data); }); }; </script> </body> \"]},\"21\":{\"h\":\"通用型方法\",\"t\":[\"btns[2].onclick = function () { axios({ method: \\\"POST\\\", url: \\\"/axios-server\\\", params: { vip: 10, level: 30, }, headers: { a: 100, b: 200, }, data: { username: \\\"admin\\\", password: \\\"admin\\\", }, }).then((response) => { console.log(response); //响应状态码 console.log(response.status); //响应状态字符串 console.log(response.statusText); //响应头信息 console.log(response.headers); //响应体 console.log(response.data); }); }; \"]},\"22\":{\"h\":\"fetch 函数\",\"t\":[\"<body> <button>AJAX请求</button> <script> const btn = document.querySelector(\\\"button\\\"); btn.onclick = function (){\\\" \\\"} {fetch(\\\"http://127.0.0.1:6060/fetch-server\\\", { //方法 method: \\\"POST\\\", //请求头 headers: { name: \\\"YZH\\\", }, body: \\\"username=admin&password=admin\\\", }) .then((response) => { return response.json(); }) .then((response) => { console.log(response); })} ; </script> </body> \",\"需要注意的是 fetch()请求方法和 response.json()返回值均为 Promise 对象。\"]},\"23\":{\"h\":\"跨域（重要）\"},\"24\":{\"h\":\"同源策略\",\"t\":[\"同源策略（Same-Origin Policy）最早由 Netscape 公司提出，是浏览器的一种安全策略。\",\"同源：协议、域名、端口号 必须完全相同。\",\"违背同源策略就是跨域。\"]},\"25\":{\"h\":\"如何解决跨域\"},\"26\":{\"h\":\"JSONP\",\"t\":[\"JSON with Padding，是一个非官方的跨域解决方案，只支持 get 请求。\",\"工作原理\",\"网页中一些标签天生具有跨域能力，如 img link iframe script\",\"​JSONP 是利用 script 标签的跨域能力来发送请求的。\",\"使用\",\"动态创建一个 script 标签\",\"​- 设置 script 的 src，设置回调函数\",\"​- JSONP 返回结果的形式是函数调用，函数的参数就是服务器给客户端返回的响应数据，函数需要提前声明（原生写法）\",\"代码\",\"客户端\",\"<body> <input type=\\\"text\\\"> <p></p> <script> const input = document.querySelector(\\\"input\\\"); const p = document.querySelector(\\\"p\\\"); function handle(data) { input.style.border = '1px solid #f00'; p.innerHTML = data.msg; } input.onblur = function () { let username = this.value; const script = document.createElement(\\\"script\\\"); script.src = 'http://127.0.0.1:6060/check-username'; document.body.appendChild(script); }; </script> </body> \",\"服务端\",\"app.all(\\\"/check-username\\\", (request, response) => { const data = { exist: 1, msg: \\\"用户名已存在\\\", }; const str = JSON.stringify(data); response.send(`handle(${str})`); }); \",\"jQuery 的 JSONP 写法\",\"客户端\",\"<script src=\\\"./jQuery-3.6.0.js\\\"></script> <body> <button>jQuery的jsonp</button> <p id=\\\"name\\\"></p> <p id=\\\"msg\\\"></p> <script> $(\\\"button\\\").click(function () { $.getJSON('http://127.0.0.1:6060/jquery-jsonp-server?callback=?', function (data) { $(\\\"#name\\\").html(data.name); $(\\\"#msg\\\").html(data.msg); }); }); </script> </body> \",\"注意：url 最后必须加上 ?callback=? 的后缀，服务端需要识别并提取该回调函数的字符串值，用于传回客户端。\",\"服务端\",\"app.all(\\\"/jquery-jsonp-server\\\", (request, response) => { const data = { name: \\\"YZH\\\", msg: \\\"欢迎\\\", }; const callBack = request.query.callback; //提取query字符串的回调函数字符串编码 const str = JSON.stringify(data); response.send(`${callBack}(${str})`); }); \"]},\"27\":{\"h\":\"CORS\",\"t\":[\"Cross-Origin Resource Sharing，跨域资源共享。CORS是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get和post请求。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源\",\"CORS是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应后对响应放行。\",\"服务端设置：\",\"response.setHeader('Access-Control-Allow-Origin', '*'); response.setHeader('Access-Control-Allow-Headers', '*'); response.setHeader('Access-Control-Allow-Method', '*'); \"]},\"28\":{\"h\":\"反向代理（重要）\",\"t\":[\"实际项目中常用web服务器(tomcat、nginx)的反向代理实现跨域\",\"nginx代理\",\"首先我们用nginx作为代理服务器和用户交互，这样用户就只需要在80端口上进行交互就可以了，这样就避免了跨域问题，因为我们都是在80端口上进行交互的\",\"server { listen 80; #监听80端口，可以改成其他端口 server_name localhost; # 当前服务的域名 #charset koi8-r; #access_log logs/host.access.log main; location / { proxy_pass http://localhost:81; proxy_redirect default; } location /apis { #添加访问目录为/apis的代理配置 rewrite ^/apis/(.*)$ /$1 break; proxy_pass http://localhost:82; } #以下配置省略 \",\"1.当用户发送localhost:80/时会被nginx转发到http://localhost:81服务；\",\"2.当界面请求接口数据时，只要以/apis 为开头，就会被nginx转发到后端接口服务器上；\",\"总结：nginx实现跨域的原理，实际就是把web项目和后端接口项目放到一个域中，这样就不存在跨域问题，然后根据请求地址去请求不同服务器（真正干活的服务器）；\"]},\"29\":{\"h\":\"axios\",\"t\":[\"Promise based HTTP client for the browser and node.js\",\"特点：\",\"拦截请求和响应 （就是有 interceptor）\",\"转换请求数据和响应数据\",\"取消请求\",\"自动转换 JSON 数据\",\"客户端支持防御 XSRF 攻击\"]},\"30\":{\"h\":\"发送请求\",\"t\":[\"为方便起见，为所有支持的请求方法提供了别名\",\"axios.request(config)\",\"axios.get(url[, config])\",\"axios.delete(url[, config])\",\"axios.head(url[, config])\",\"axios.options(url[, config])\",\"axios.post(url[, data[ ,config]])\",\"axios.put(url[, data[ ,config]])\",\"axios.patch(url[, data[ ,config]])\",\"注意：在使用别名方法时，url、method、data 这些属性都不必在配置中指定。\"]},\"31\":{\"h\":\"响应结构\"},\"32\":{\"h\":\"1.config\",\"t\":[\"axios 的配置对象，method、url、timeout、data 之类。\"]},\"33\":{\"h\":\"2.data\",\"t\":[\"响应体数据\"]},\"34\":{\"h\":\"3.headers\",\"t\":[\"响应头信息\"]},\"35\":{\"h\":\"4.request\",\"t\":[\"当前 axios 请求创建的原生 XMLHttpRequest 对象\"]},\"36\":{\"h\":\"5.status\",\"t\":[\"响应状态码\"]},\"37\":{\"h\":\"6.statusText\",\"t\":[\"响应状态字符串\"]},\"38\":{\"h\":\"配置对象\"},\"39\":{\"h\":\"1.url\",\"t\":[\"请求地址\"]},\"40\":{\"h\":\"2.method\",\"t\":[\"请求方法\"]},\"41\":{\"h\":\"3.baseURL\",\"t\":[\"url 的基础结构，通常包含协议+基础域名\"]},\"42\":{\"h\":\"4.transformRequest\",\"t\":[\"允许在向服务器发送前，修改请求数据\",\"只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法\",\"后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream\",\"transformRequest: [function (data, headers) { // 对 data 进行任意转换处理 return data; }], \"]},\"43\":{\"h\":\"5.transformResponse\",\"t\":[\"在传递给 then/catch 前，允许修改响应数据\",\" transformResponse: [function (data) { // 对 data 进行任意转换处理 return data; }], \"]},\"44\":{\"h\":\"6.headers\",\"t\":[\"是即将被发送的自定义请求头\",\"headers: {'X-Requested-With': 'XMLHttpRequest'}, \"]},\"45\":{\"h\":\"7.params\",\"t\":[\"params 是即将与请求一起发送的 URL 参数 必须是一个无格式对象(plain object)或 URLSearchParams 对象\",\"params: { ID: 12345 }, \"]},\"46\":{\"h\":\"8.paramsSerializer\",\"t\":[\"paramsSerializer 是一个负责 params 序列化的函数\",\"需要 qs 组件进行序列化？\",\" paramsSerializer: function(params) { return Qs.stringify(params, {arrayFormat: 'brackets'}) }, \"]},\"47\":{\"h\":\"9.data\",\"t\":[\"作为请求主体被发送的数据\",\"只适用于 PUT POST PATCH\",\"在没有设置 transformRequest 时，必须是以下类型之一：\",\"string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\",\"浏览器专属：FormData File Blob\",\"Node 专属：Stream\"]},\"48\":{\"h\":\"10.timeout\",\"t\":[\"指定请求超时的毫秒数(0 表示无超时时间)\",\"如果请求花费了超过 timeout 的时间，请求将被中断\"]},\"49\":{\"h\":\"11.withCredentials\",\"t\":[\"表示跨域请求时是否需要使用凭证\",\"默认为 false\"]},\"50\":{\"h\":\"12.adapter\",\"t\":[\"允许自定义处理请求，以使测试更轻松\",\"返回一个 promise 并应用一个有效的响应\"]},\"51\":{\"h\":\"13.auth\",\"t\":[\"表示应该使用 HTTP 基础验证，并提供凭据\",\"这将设置一个 Authorization 头，覆写掉现有的任意使用 headers 设置的自定义 Authorization头\"]},\"52\":{\"h\":\"14.responseType\",\"t\":[\"表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\",\"默认 json\"]},\"53\":{\"h\":\"15.responseEncoding\",\"t\":[\"响应结果编码，默认 utf-8\"]},\"54\":{\"h\":\"16.xsrfCookieName\",\"t\":[\"用作 xsrf token 的值的 cookie 的名称\",\"跨站请求的 cookie 名称设置\",\"默认 XSRF-TOKEN\"]},\"55\":{\"h\":\"17.xsrfHeaderName\",\"t\":[\"http 请求头的 token 值设置\",\"默认 X-XSRF-TOKEN\"]},\"56\":{\"h\":\"18.onUploadProgress\",\"t\":[\"允许为上传处理进度事件\"]},\"57\":{\"h\":\"19.onDownloadProgress\",\"t\":[\"允许为下载处理进度事件\"]},\"58\":{\"h\":\"20.maxContentLength\",\"t\":[\"定义允许的响应内容的最大尺寸\"]},\"59\":{\"h\":\"21.validateStatus\",\"t\":[\"定义对于给定的 HTTP 响应状态码是 resolve 或 reject promise 。如果 validateStatus 返回 true (或者设置为 null 或 undefined)，promise 将被 resolve; 否则，promise 将被 rejected\",\"默认值 return status >= 200 && status < 300;\"]},\"60\":{\"h\":\"22.maxRedirects\",\"t\":[\"定义在 node.js 中 follow 的最大重定向数目（请求跳转的最大次数） 如果设置为 0，将不会 follow 任何重定向\",\"默认为 5\"]},\"61\":{\"h\":\"23.socketPath\",\"t\":[\"与 proxy 代理类似，做数据转发代理。如果和 proxy 都设置了，那么优先使用 socketPath\"]},\"62\":{\"h\":\"24.httpAgent httpsAgent\",\"t\":[\"分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理\",\"{ keepAlive: true } 默认没有启用\"]},\"63\":{\"h\":\"25.proxy\",\"t\":[\"定义代理服务器的主机名称和端口\",\"auth 表示 HTTP 基础验证应当用于连接代理，并提供凭据。\",\"这将会设置一个 Proxy-Authorization 头，覆写掉已有的通过使用 header 设置的自定义 Proxy-Authorization 头。\"]},\"64\":{\"h\":\"26.cancelToken\",\"t\":[\"指定用于取消请求的 cancel token\"]},\"65\":{\"h\":\"创建实例对象\",\"t\":[\"const obj = axios.create(); \",\"可借助于 get post 等方法来发送请求获取 Promise 对象\"]},\"66\":{\"h\":\"Interceptors 拦截器\",\"t\":[\"在请求或响应被 then 或 catch 处理前拦截它们。\",\"示例：\",\"// 添加请求拦截器 axios.interceptors.request.use( function (config) { // 在发送请求之前做些什么 return config; }, function (error) { // 对请求错误做些什么 return Promise.reject(error); } ); // 添加响应拦截器 axios.interceptors.response.use( function (response) { // 对响应数据做点什么 return response; }, function (error) { // 对响应错误做点什么 return Promise.reject(error); } ); \",\"多个拦截器设置，执行顺序：请求拦截器后进先出，响应拦截器先进先出。\",\"请求拦截器函数参数 config：对请求方法 config 各项参数做配置，最终返回 config\",\"响应拦截器函数参数 response：对响应数据进行修改限制，如只返回响应体数据，不返回状态码等\"]},\"67\":{\"h\":\"取消请求\",\"t\":[\"const CancelToken = axios.CancelToken; const source = CancelToken.source(); axios .get(\\\"/user/12345\\\", { cancelToken: source.token, }) .catch(function (thrown) { if (axios.isCancel(thrown)) { console.log(\\\"Request canceled\\\", thrown.message); } else { // 处理错误 } }); axios.post( \\\"/user/12345\\\", { name: \\\"new name\\\", }, { cancelToken: source.token, } ); // 取消请求（message 参数是可选的） source.cancel(\\\"Operation canceled by the user.\\\"); \",\"还可以通过传递一个 executor 函数到 CancelToken 的构造函数来创建 cancel token：\",\"const CancelToken = axios.CancelToken; let cancel; axios.get(\\\"/user/12345\\\", { cancelToken: new CancelToken(function executor(c) { // executor 函数接收一个 cancel 函数作为参数 cancel = c; }), }); // cancel the request cancel(); \",\"对 cancel 的判断以及 cancel()设置可以实现 axios 防抖。\"]},\"68\":{\"h\":\"发送请求工作原理\",\"t\":[\"Axios.prototype.request：判断传入参数\",\"config：mergeConfig（this.defaults, config）：合并默认配置与 config\",\"Set config method\",\"创建拦截器中间件 chain ：dispatchRequest，调适配器 adapter 与 HTTP\",\"创建一个成功的 promise，成功的值为合并后的请求 config\",\"遍历请求拦截器与响应拦截器\",\"依次取出 chain 的元素进行 promise 回调\",\"dispatchRequst：\",\"判断请求是否取消，抛出错误\",\"确保头信息存在\",\"对请求数据进行初始化转化\",\"合并一切其他头信息的配置项\",\"将配置项中关于方法的配置项全部删除\",\"获取适配器对象\",\"通过 adapter 适配器方法发送请求，返回 promise 对象\",\"对响应结果进行转换处理\",\"转换处理的 promise 对象返回给 axios 方法\"]},\"69\":{\"h\":\"发送请求模拟实现\",\"t\":[\"<script> function Axios(config) { this.config = config; } //request原型方法，返回最终结果 Axios.prototype.request = function (config) { let promise = Promise.resolve(config); let chains = [dispatchRequest, undefined]; let result = promise.then(chains[0], chains[1]); return result; }; const context = new Axios({}); const axios = Axios.prototype.request.bind(context); //被request调用，返回响应数据或报错 function dispatchRequest(config) { return xhrAdapter(config).then( (response) => { /* 此处转换处理略 * */ return response; }, (error) => { throw error; } ); } //被dispatchRequest调用，发起ajax请求，返回带响应数据的promise或失败值的promise function xhrAdapter(config) { return new Promise((resolve, reject) => { let xhr = new XMLHttpRequest(); //初始化 xhr.open(config.method, config.url); //发送 xhr.send(); //绑定事件 xhr.onreadystatechange = function () { //判断条件 if (xhr.readyState === 4) { if (xhr.status >= 200 && xhr.status < 300) { resolve({ config: config, data: xhr.response, headers: xhr.getAllResponseHeaders(), request: xhr, status: xhr.status, statusText: xhr.statusText, }); } else { reject(new Error(\\\"请求失败 失败状态码为\\\" + xhr.status)); } } }; }); } axios({ method: \\\"GET\\\", url: \\\"http://localhost:3000/posts\\\", }).then((response) => { console.log(response); }); </script> \"]},\"70\":{\"h\":\"拦截器模拟实现\",\"t\":[\"<script> //构造函数 function Axios(config) { this.config = config; this.interceptors = { request: new InterceptorManager(), response: new InterceptorManager(), }; } //发送一个简单请求 Axios.prototype.request = function (config) { //核心1：创建一个resolve返回的promise对象 let promise = Promise.resolve(config); //核心2：创建链条数组 const chains = [dispatchRequest, undefined]; //核心3：处理拦截器，unshift push this.interceptors.request.handlers.forEach((item) => { chains.unshift(item.fulfilled, item.rejected); }); this.interceptors.response.handlers.forEach((item) => { chains.push(item.fulfilled, item.rejected); }); while (chains.length) { promise = promise.then(chains.shift(), chains.shift()); } return promise; }; function dispatchRequest() { return new Promise((resolve, reject) => { resolve({ status: 200, statusText: \\\"OK\\\", }); }); } //创建实例 let context = new Axios({}); //创建axios函数 let axios = Axios.prototype.request.bind(context); //将context属性config interceptors添加到axios函数身上 Object.keys(context).forEach((key) => { axios[key] = context[key]; }); //拦截管理器构造函数 function InterceptorManager() { this.handlers = []; } InterceptorManager.prototype.use = function (fulfilled, rejected) { this.handlers.push({ fulfilled, rejected, }); }; axios.interceptors.request.use( function one(config) { console.log(\\\"请求拦截器1\\\"); return config; }, function one(error) { console.log(\\\"请求拦截器1失败\\\"); return Promise.reject(error); } ); axios.interceptors.request.use( function two(config) { console.log(\\\"请求拦截器2\\\"); return config; }, function two(error) { console.log(\\\"请求拦截器2失败\\\"); return Promise.reject(error); } ); axios.interceptors.response.use( function one(config) { console.log(\\\"响应拦截器1\\\"); return config; }, function one(error) { console.log(\\\"请求拦截器1失败\\\"); return Promise.reject(error); } ); axios.interceptors.response.use( function two(config) { console.log(\\\"响应拦截器2\\\"); return config; }, function two(error) { console.log(\\\"请求拦截器2失败\\\"); return Promise.reject(error); } ); axios({ method: \\\"GET\\\", url: \\\"http://localhost:3000/posts\\\", }).then((response) => { console.log(response); }); </script> \"]},\"71\":{\"h\":\"取消请求工作原理\",\"t\":[\"创建 cancelToken 的值\",\"cancelToken 的执行器参数必须是一个函数\",\"核心：声明一个变量 resolvePromise，同时声明 this.promise 为 promise 对象，将 this.resolvePromise 赋值为成功的 Promise resolve 值返回给 this.promise\",\"token 指向当前的 this 对象\",\"调用执行器参数函数，函数的参数也是一个函数：如果 token.reason 不存在则将 token.reason 赋值为\",\"new Cancel(message)，同时调用 this.resolvePromise(token.reason)使上面的 promise 返回 resolve 的 promise 对象\",\"返回到 axios 方法中，如果方法中声明了一个属性名 cancelToken，则会去调用该属性的 this.promise 方法，\",\"如果上面通过调用执行器函数的参数函数，调用了 resolvePromise 函数，则 this.promise 会返回成功的 promise 对象，通过 then 方法去调用 request.abort()来取消 ajax 请求\",\"简单总结：将取消请求的 abort 方法放在了成功的 promise 对象的 then 方法中，promise 对象返回成功的时机取决于何时去调用方法实现。\"]},\"72\":{\"h\":\"取消请求模拟实现\",\"t\":[\"<body> <button id=\\\"send\\\">发送请求</button> <button id=\\\"cancel\\\">取消请求</button> <script> function Axios(config) { this.config = config; } Axios.prototype.request = function (config) { return dispatchRequest(config); }; function dispatchRequest(config) { return xhrAdapter(config).then( (response) => { /* 此处转换处理略 * */ return response; }, (error) => { return error; } ); } //CancelToken构造函数 function CancelToken(executor) { let resolvePromise; this.promise = new Promise((resolve) => { //关键！将resolve赋值给resolvePromise resolvePromise = resolve; }); //调用executor函数 executor(function () { //执行resolvePromise函数 resolvePromise(); }); } function xhrAdapter(config) { return new Promise((resolve, reject) => { let xhr = new XMLHttpRequest(); //初始化 xhr.open(config.method, config.url); //发送 xhr.send(); //绑定事件 xhr.onreadystatechange = function () { //判断条件 if (xhr.readyState === 4) { if (xhr.status >= 200 && xhr.status < 300) { resolve({ config: config, data: xhr.response, headers: xhr.getAllResponseHeaders(), request: xhr, status: xhr.status, statusText: xhr.statusText, }); } else { reject(new Error(\\\"请求失败 失败状态码为\\\" + xhr.status)); } } }; //取消请求的处理 if (config.cancelToken) { config.cancelToken.promise.then((response) => { xhr.abort(); reject(new Error(\\\"请求取消\\\")); }); } }); } const context = new Axios({}); const axios = Axios.prototype.request.bind(context); const btn1 = document.querySelector(\\\"#send\\\"); const btn2 = document.querySelector(\\\"#cancel\\\"); //取消请求的变量cancel let cancel = null; btn1.onclick = function () { if (cancel !== null) { cancel(); } let cancelToken = new CancelToken(function (c) { cancel = c; }); axios({ method: \\\"GET\\\", url: \\\"http://localhost:3000/posts\\\", cancelToken: cancelToken, }).then((response) => { console.log(response); cancel = null; }); }; btn2.onclick = function () { cancel && cancel(); }; </script> </body> \"]},\"73\":{\"h\":\"axios 源码总结\"},\"74\":{\"h\":\"1.axios 和 Axios 的关系\",\"t\":[\"从语法上来说：axios 不是 Axios 的实例\",\"从功能上来说：axios 是 Axios 的实例\",\"axios 是 Axios.prototype.request 函数 bind()返回的函数\",\"axios 作为对象有 Axios 原型对象上的所有方法，有 Axios 对象上所有属性\"]},\"75\":{\"h\":\"2.instance（axios.create 创建的对象 ）与 axios 的区别\",\"t\":[\"相同点：\",\"​- 都是一个能发任意请求的函数：request(config)\",\"​- 都有发特定请求的各种方法：get post put delete\",\"​- 都有默认配置和拦截器的属性：defaults interceptors\",\"不同点：\",\"​- 默认配置很可能不一样\",\"​- instance 没有 axios 后面添加的一些方法：create CancelToken all\"]},\"76\":{\"h\":\"AJAX\",\"t\":[\"AJAX\",\"axios\"]},\"77\":{\"h\":\"前端三剑客\",\"t\":[\"HTML\",\"CSS\",\"Javascript\"]},\"78\":{\"h\":\"简介\"},\"79\":{\"h\":\"官网\",\"t\":[\"英文官网: https://reactjs.org/\",\"中文官网: https://react.docschina.org/\"]},\"80\":{\"h\":\"介绍描述\",\"t\":[\"用于动态构建用户界面的 JavaScript 库(只关注于视图)\",\"由Facebook开源\"]},\"81\":{\"h\":\"特点\",\"t\":[\"声明式编码\",\"组件化编码\",\"React Native编写原生应用\",\"高效优秀的diff算法\"]},\"82\":{\"h\":\"高效的原因\",\"t\":[\"使用虚拟DOM，不总是直接操作页面真实DOM\",\"采用diff算法，最小化页面重绘\"]},\"83\":{\"h\":\"逻辑复用\",\"t\":[\"继进阶技巧记录之后，再起一篇，专门记录逻辑复用的技巧与跨组件通信方法\"]},\"84\":{\"h\":\"逻辑复用\",\"t\":[\"复用的目标：组件状态逻辑\",\"复用的内容：state 状态、操作 state 状态的方法\",\"在 Hooks 推出之前，组件的状态逻辑复用经历了：mixins、HOC、render-props 等模式\",\"注意：这几种方式不是 API，而是利用 React 自身特点的编码技巧，演化而成的固定写法模式\"]},\"85\":{\"h\":\"已废弃的 mixins\",\"t\":[\"React 的 mixins 跟 Vue2 的 mixins 配置项很类似，都是采用组件混合的方式进行的，但缺点也很明显：组合混乱、命名冲突、维护复杂。因此 React 现在已废弃 mixins\"]},\"86\":{\"h\":\"HOC\",\"t\":[\"HOC 是通过装饰器模式，实现组件状态逻辑复用的，接收要包装的组件，返回增强后的组件。\",\"高阶组件命名约定以 with 开头，如：withMouse、withRouter 等\",\"原理：高阶组件内部创建一个类组件，在这个类组件中提供复用的状态逻辑代码，通过 prop 将复用的状态传递给被包装组件\",\"注意点：\",\"设置 displayName 方便在 devTools 中展示名称\",\"注意传递 props，不传递 props 会导致增强组件丢失 props\",\"更多记录详见高阶组件\"]},\"87\":{\"h\":\"render-props 模式\",\"t\":[\"render-props将要复用的状态逻辑代码封装到一个组件中，通过一个值为函数的 prop 对外暴露数据，实现状态逻辑复用\",\"不使用 prop 函数的情况下，在组件标签内部声明的 jsx 元素或者 jsx 函数，在组件的 render 函数中，默认从 children 属性中获取\"]},\"88\":{\"h\":\"最新方案： Hooks\",\"t\":[\"详见Hook\"]},\"89\":{\"h\":\"为什么要有 Hooks\",\"t\":[\"我们先分析 Hooks 出现之前 React 存在的问题\",\"组件的状态逻辑复用\",\"已废弃的 mixins 的问题：数据来源不清晰、命名冲突\",\"HOC、render-props的问题：重构组件结构，JSX 嵌套地狱\",\"class 组件自身的问题\",\"this 指向存在学习门槛\",\"关联代码需要被拆分到不同生命周期函数中\",\"不利用代码压缩和优化，也不利于 TS 类型推导\"]},\"90\":{\"h\":\"控制反转\"},\"91\":{\"h\":\"案例\",\"t\":[\"打开 F12 可以看到，父子组件初次渲染会各打印一次信息，随后每次 button 点击都会重新触发渲染，每点一次就各打印一次信息\",\"这是因为父组件 state 更新触发重新渲染，连带子组件一起重新渲染，但是实际上子组件是一个静态 p 标签，并没有冲渲染的需要，那么这个组件更新就是没有必要的。如果子组件的渲染开销比较大，就可能引发严重的性能问题\",\"我们的第一反应可能是给子组件增加React.memo转为 props 浅比较，但是秉承能不用就不用的原则，我们选择其他的办法：控制反转（Inversion of Control）\",\"因为<br/>标签与子组件并不需要来自父组件的状态，所以对上面的代码进行改动，在父组件和子组件之间添加一个 IOC 组件：\",\"再打开 F12，无论点击多少次 button，控制台都只停留在页面第一次渲染时打印的信息，说明多次更新都没有触发父组件和子组件的重新渲染\"]},\"92\":{\"h\":\"分析\",\"t\":[\"这个案例实际上通过巧妙的render-props隔离了依赖 state，将子组件挂在 children 上，IOC 组件的更新既不触发外层 Father 组件 rerender，也不触发插槽 Children 组件 rerender\",\"一句话描述：因为 Children 来自于父组件，子组件的重新渲染并不会导致其也重新渲染\",\"完整描述：\",\"按照组件树更新原理5项条件\",\"从 Father 组件开始，Father 满足前 4 个条件，但是其子组件 FatherIoc 存在更新，不满足第 5 个条件，所以进入复用逻辑但不会跳过子组件的对比，此时父节点的 props 也不进入更新，原值赋予给新的子节点\",\"FatherIoc 子组件的 state 发生了变化，不进入复用逻辑，重新调用生成新 Fiber 节点\",\"更新前后父节点的 props 完全相同，children 节点不会重新创建。<br/>和<Children>实际位于父组件树，并非 FatherIoc 的子组件，判断更新条件 5 个条件均满足，跳过对比直接复用\",\"而没有 IOC 组件的原始组件中更新是：\",\"Father 的 state 发生变化，调用生成新的 Fiber 节点，子组件的 props 虽然是空对象，但是 JSX 转换 createElement 的时候，新的空对象与旧的空对象不等，继而重新创建，触发重新渲染\"]},\"93\":{\"h\":\"性能优化\",\"t\":[\"基于 Webpack 等构建工具打包带来的性能优化本章略过，主要讨论 React 内部的针对性优化\"]},\"94\":{\"h\":\"虚拟滚动\"},\"95\":{\"h\":\"参考库\",\"t\":[\"虚拟滚动参考react-window和react-virtualized两个热门库\"]},\"96\":{\"h\":\"原理\",\"t\":[\"虚拟列表指的是「可视区域渲染」的列表。有三个概念需要了解：\",\"滚动容器元素：一般情况下，滚动容器元素是 window 对象，也可以通过布局的方式，在某页面内指定一个或多个滚动容器元素，滚动也分横向和纵向滚动，滚动容器元素在滚动时每个列表项只是渲染一些纯文本。在这里我们只讨论元素纵向滚动\",\"可滚动区域：滚动容器元素的内部内容区域。假设有 100 条数据，每个列表项的高度是 50，那么可滚动的区域高度就是 100*50。可滚动区域当前具体高度值一般通过滚动容器元素的 scrollHeight 属性获取\",\"可视区域：滚动容器元素的视觉可见区域。如果容器元素是 window 对象，可视区域就是浏览器的视口大小（即视觉视口）；如果某个容器元素 div，其高度 300，右侧有纵向滚动条，那么视觉可见的区域就是可视区域\",\"虚拟滚动的实现是在处理用户滚动时，改变列表在可视区域的渲染部分，其具体步骤如下\",\"计算当前可见区域起始数据的 startIndex\",\"计算当前可见区域结束数据的 endIndex\",\"计算当前可见区域的数据，并渲染到页面中\",\"计算 startIndex 对应的数据在整个列表中的偏移位置 startOffset，并设置到列表上\",\"计算 endIndex 对应的数据相对于可滚动区域最底部的偏移位置 endOffset，并设置到列表上\",\"虚拟滚动实现步骤\",\"参考链接：https://blog.csdn.net/terrychinaz/article/details/112552673\"]},\"97\":{\"h\":\"rerender 优化\",\"t\":[\"组件rerender\",\"在这张组件树图例中，C6 触发的更新引起组件树重新渲染(rerender)，如果避开无需重渲染的组件：C2 及其子组件、C3 的子组件 C7、C8，最终执行最小量的重渲染组件就只会有 C1-C3-C6，从而提高渲染效率优化加载性能\"]},\"98\":{\"h\":\"shouldComponentUpdate\",\"t\":[\"假设场景：组件只有当props.color或state.count的值改变才需要更新，可以使用 shouldComponentUpdate 来检查\",\"class CounterButton extends React.Component { constructor(props) { super(props); this.state = { count: 1 }; } shouldComponentUpdate(nextProps, nextState) { if (this.props.color !== nextProps.color) { return true; } if (this.state.count !== nextState.count) { return true; } return false; } render() { return ( <button color={this.props.color} onClick={() => this.setState((state) => ({ count: state.count + 1 }))} > Count: {this.state.count} </button> ); } } \",\"如果 color 和 count 的值没有改变，则组件不会触发 rerender\"]},\"99\":{\"h\":\"PureComponent\",\"t\":[\"仅对 props 和 state 中的所有字段作浅比较的情况，使用React.PureComponent即可\",\"class CounterButton extends React.PureComponent { constructor(props) { super(props); this.state = { count: 1 }; } render() { return ( <button color={this.props.color} onClick={() => this.setState((state) => ({ count: state.count + 1 }))} > Count: {this.state.count} </button> ); } } \"]},\"100\":{\"h\":\"memo\",\"t\":[\"memo 是 React 面向函数式组件提供的浅比较 API，作用与PureComponent相同，包裹函数组件来阻止函数组件不必要的更新\",\"export default memo(function CounterButton(props) { const [count, setCount] = useState(1); return ( <button color={props.color} onClick={() => setCount(count + 1)}> Count: {count} </button> ); }); \"]},\"101\":{\"h\":\"useMemo\",\"t\":[\"详见惰性取值Hook\"]},\"102\":{\"h\":\"useCallback\",\"t\":[\"详见惰性函数Hook\"]},\"103\":{\"h\":\"不可变数据操作\",\"t\":[\"众所周知，React 遵守组件状态不可变的理念，通常在修改 state 的时候都需要使用 ES6 的解构，或者新对象赋值\",\"immer.js 为我们提供了全新的无须使用解构即可触发 React 更新的写法\",\"传统写法：\",\"const App = () => { const [state, setState] = useState({ name: \\\"lin\\\", todoList: { list: [{ name: \\\"吃饭\\\", done: true }], }, }); const addTodoList = () => { setState((state) => ({ name: state.name, todoList: { list: [...state.todoList.list, { name: \\\"睡觉\\\", done: true }], }, })); }; }; \",\"使用immer：\",\"import { produce } from \\\"immer\\\"; const App = () => { const [state, setState] = useState({ name: \\\"lin\\\", todoList: { list: [{ name: \\\"吃饭\\\", done: true }], }, }); const addTodoList = () => { setState( produce((state) => { state.todoList.list.push({ name: \\\"睡觉\\\", done: true }); }) ); }; }; \",\"immer 实现原理\",\"immer 会通过原有的 state 基础状态生成一个可编辑的 draft 状态，开发者修改数据，修改完成后 immer 只会针对数据有变化的部分进行深拷贝，然后返回一个新状态，整个过程不影响初始状态\",\"draft 的实现\",\"draft 本质是初始状态的代理，核心是为了不让开发者直接触及到原始状态，而是在其代理上进行修改，再根据代理状态的变化来生成新状态\",\"immer 中对于 draft 的实现在支持 Proxy 语法环境时使用 Proxy 实现，不支持 Proxy 语法环境时使用 defineProperty 实现\",\"为避免内存泄露并保证安全性，immer 还使用Proxy.revocable创建了可撤销的代理对象，draft 函数执行完成后调用 revoke 方法销毁 draft 对象\",\"按需深拷贝的实现\",\"immer 中通过对代理状态的劫持来实现按需标记更改\",\"当在 produce 的回调函数（recipe 函数）中修改 draft 数据时，就会通过 set 或 deleteProperty 中的 markChange 完成变化追踪，同时通过state.copy_来记录修改后的值，并通过state.assigned_记录修改的类型\",\"数据修改完成后，通过state.copy_和state.modified_生成新的状态\",\"上述核心思想就是通过递归遍历子属性，用之前的标记判断子属性部分的数据是否有被修改过，如果未被修改则直接使用原始状态中的引用，否则就用state.copy_记录的更新内容来重设子属性数据\",\"参考链接：http://lixianglong.cn/2022/02/25/application/fore-end/nodejs/immer.js 入门/\"]},\"104\":{\"h\":\"组件通信\"},\"105\":{\"h\":\"提前总结\",\"t\":[\"父组件 => 子组件\",\"Props\",\"Instance Methods\",\"子组件 => 父组件\",\"Callback Functions\",\"Event Bubbling\",\"兄弟组件之间\",\"Parent Component\",\"不太相关的组件之间\",\"Context\",\"Portals\",\"Global Variables\",\"Observer Pattern\",\"Redux 等\"]},\"106\":{\"h\":\"1.Props\",\"t\":[\"最常见的组件间传递信息方法，父组件 props 传数据给子组件，子组件接收 props 数据\",\"const Child = ({ name }) => { <div>{name}</div>; }; class Parent extends React.Component { constructor(props) { super(props); this.state = { name: \\\"misaka\\\", }; } render() { return <Child name={this.state.name} />; } } \"]},\"107\":{\"h\":\"2.Instance Methods\",\"t\":[\"实际就是父组件通过 refs 直接调用子组件实例的方法\",\"class Child extends React.Component { myFunc() { return \\\"hello\\\"; } } class Parent extends React.Component { componentDidMount() { var x = this.foo.myFunc(); // x is now 'hello' } render() { return ( <Child ref={(foo) => { this.foo = foo; }} /> ); } } \",\"在 hook 中使用 ref 转发调用子组件方法需要用到useImperativeHandle和forwardRef两个 API\"]},\"108\":{\"h\":\"3.Callback Functions\",\"t\":[\"子组件传给父组件信息的最常见方式\",\"const Child = ({ onClick }) => { <div onClick={() => onClick(\\\"misaka\\\")}>Click Me</div>; }; class Parent extends React.Component { handleClick = (data) => { console.log(\\\"Parent received value from child: \\\" + data); }; render() { return <Child onClick={this.handleClick} />; } } \"]},\"109\":{\"h\":\"4.Event Bubbling\",\"t\":[\"这个方法主要利用了原生 DOM 中的事件冒泡机制\",\" class Parent extends React.Component { render() { return ( <div onClick={this.handleClick}> <Child /> </div> ); } handleClick = () => { console.log('clicked') } } function Child { return ( <button>Click</button> ); } \",\"巧妙的利用下事件冒泡机制，我们就可以很方便的在父组件的元素上接收到来自子组件元素的点击事件\"]},\"110\":{\"h\":\"5.Parent Component\",\"t\":[\"一般来说，两个非父子组件想要通信，首先我们可以看看它们是否是兄弟组件，即它们是否在同一个父组件下\",\"如果不是的话，考虑下用一个组件把它们包裹起来从而变成兄弟组件是否合适。这样一来，它们就可以通过父组件作为中间层来实现数据互通了。\",\"class Parent extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } setCount = () => { this.setState({ count: this.state.count + 1 }); }; render() { return ( <div> <SiblingA count={this.state.count} /> <SiblingB onClick={this.setCount} /> </div> ); } } \"]},\"111\":{\"h\":\"6.Context\",\"t\":[\"通过React.Context提供的上下文环境，使得后代组件可以轻松拿到挂在根组件上的全局数据如用户信息、UI 主题、选择语言等\",\"const ThemeContext = React.createContext(\\\"light\\\"); class App extends React.Component { render() { return ( <ThemeContext.Provider value=\\\"dark\\\"> <Toolbar /> </ThemeContext.Provider> ); } } function Toolbar() { return ( <div> <ThemedButton /> </div> ); } class ThemedButton extends React.Component { static contextType = ThemeContext; render() { return <Button theme={this.context} />; } } \"]},\"112\":{\"h\":\"7.Portals\",\"t\":[\"Portals 虽然不是用来解决组件通信问题的，但因为它也涉及到组件通信问题，所以也把它列在十种方法里\",\"Portals 的主要应用场景是：当两个组件在 react 项目中是父子组件的关系，但在 HTML DOM 里并不想是父子元素的关系。一般多用于 Tooltip、Modal、Popup、Dropdown\",\"// Portal import { useEffect } from \\\"react\\\"; import { createPortal } from \\\"react-dom\\\"; const Portal = ({ children }) => { const mount = document.getElementById(\\\"portal-root\\\"); const el = document.createElement(\\\"div\\\"); useEffect(() => { mount.appendChild(el); return () => mount.removeChild(el); }, [el, mount]); return createPortal(children, el); }; export default Portal; \",\"// Parent import Portal from \\\"./Portal\\\"; const Parent = () => { const [coords, setCoords] = useState({}); return ( <div style={{ overflow: \\\"hidden\\\" }}> <Button>Hover me</Button> <Portal> <Tooltip coords={coords}> Awesome content that is never cut off by its parent container! </Tooltip> </Portal> </div> ); }; \"]},\"113\":{\"h\":\"8.Global Variables\",\"t\":[\"这种办法慎用，注意全局变量污染\",\" class ComponentA extends React.Component { handleClick = () => window.a = 'test' ... } class ComponentB extends React.Component { render() { return <div>{window.a}</div> } } \"]},\"114\":{\"h\":\"9.Observer Pattern\",\"t\":[\"DOM 提供了现成的 API 来发送自定义事件：CustomEvent，我们利用它来实现观察者模式\",\"ComponentA 接收事件\",\"class ComponentA extends React.Component { componentDidMount() { document.addEventListener(\\\"myEvent\\\", this.handleEvent); } componentWillUnmount() { document.removeEventListener(\\\"myEvent\\\", this.handleEvent); } handleEvent = (e) => { console.log(e.detail.log); //i'm misaka }; } \",\"ComponentB 发送事件\",\"class ComponentB extends React.Component { sendEvent = () => { document.dispatchEvent( new CustomEvent(\\\"myEvent\\\", { detail: { log: \\\"i'm misaka\\\", }, }) ); }; render() { return <button onClick={this.sendEvent}>Send</button>; } } \"]},\"115\":{\"h\":\"改良通信模块\",\"t\":[\"改良通信模块可以专门建立一个 class 来管理\",\"class EventBus { constructor() { this.bus = document.createElement(\\\"fakeelement\\\"); } addEventListener(event, callback) { this.bus.addEventListener(event, callback); } removeEventListener(event, callback) { this.bus.removeEventListener(event, callback); } dispatchEvent(event, detail = {}) { this.bus.dispatchEvent(new CustomEvent(event, { detail })); } } export default new EventBus(); \"]},\"116\":{\"h\":\"手动实现\",\"t\":[\"通过闭包对象，也可以手动实现观察者模式\",\"function EventBus() { const subscriptions = {}; // 订阅方法 this.subscribe = (eventType, callback) => { // 创建唯一的symbol变量id const id = Symbol(\\\"id\\\"); // 判断事件名称是否已建立模型，没有则初始化一个对象 if (!subscriptions[eventType]) subscriptions[eventType] = {}; // 将 id-callback 的键值对放进事件对象中 subscriptions[eventType][id] = callback; // 返回一个包含取消监听方法的对象，调用该方法时删除对应事件对象中的id return { unsubscribe() { delete subscriptions[eventType][id]; if ( Object.getOwnPropertySymbols(subscriptions[eventType]).length === 0 ) { delete subscriptions[eventType]; } }, }; }; // 发布方法 this.publish = (eventType, arg) => { // 判断事件对象不存在立即返回 if (!subscriptions[eventType]) return; // 获取事件对象中全部symbol值，循环执行callback回调 Object.getOwnPropertySymbols(subscriptions[eventType]).forEach((key) => subscriptions[eventType][key](arg) ); }; } \"]},\"117\":{\"h\":\"10.Redux 等\",\"t\":[\"最后才是 Redux 等状态管理库，当项目庞大且前面的方法都不能很好满足需求时，才考虑使用 Redux 这种状态管理库\",\"优点：全局数据统一管理、与组件树数据解耦\",\"缺点：臃肿、影响加载速度与性能\"]},\"118\":{\"h\":\"基本使用\"},\"119\":{\"h\":\"基础 js 库\",\"t\":[\"react.js：React 核心库\",\"react-dom.js：提供操作 DOM 的 react 扩展库\",\"babel.js：提供 JSX 语法代码转化 JS 代码的库\"]},\"120\":{\"h\":\"虚拟 DOM 和真实 DOM\",\"t\":[\"React 提供了一些 API 来创建一种特别的一般 js 对象\",\"const VDOM = React.createElement(\\\"xx\\\", { id: \\\"xx\\\" }, \\\"文本text\\\"); \",\"虚拟 DOM 对象最终都会被 React 转换为真实 DOM\",\"我们只需要操作 React 的虚拟 DOM 相关数据，React 会转换为真实 DOM 变化更新界面\"]},\"121\":{\"h\":\"React JSX\",\"t\":[\"全称：JavaScript XML\",\"React 定义的一种类似于 XML 的 JS 扩展语法：JS + XML 本质是React.createElement(component, props, ..., children)方法的语法糖\",\"作用：用来简化创建虚拟 DOM\"]},\"122\":{\"h\":\"写法\",\"t\":[\"var ele = <h1>Hello JSX!</h1>\",\"注意：\",\"它不是字符串，也不是 HTML/XML 标签，它最终产生的就是一个 JS 对象\",\"标签名任意：HTML 标签或其它标签\",\"标签属性任意：HTML 标签属性或其它\"]},\"123\":{\"h\":\"语法规则\",\"t\":[\"遇到<开头的代码，以标签的语法解析：HTML 同名标签转换为 HTML 同名元素，其它标签需要特别解析\",\"遇到以 { 开头的代码，以 JS 语法解析，标签中的 JS 表达式必须用{ }括起来\",\"定义虚拟 DOM 时，不要写引号\",\"标签中混入 JS 表达式时要用{ }\",\"样式的类名指定不要用 class，要用 className\",\"内联样式，要用style={ { key: value } }的形式去写\",\"只有一个根标签\",\"标签必须闭合\",\"标签首字母 \",\"若小写字母开头，则将标签转为 html 同名元素，若 html 中无该标签对应的同名元素，则报错\",\"若大写字母开头，React 就去渲染对应的组件，若组件没有定义，则报错\"]},\"124\":{\"h\":\"区分代码与表达式\",\"t\":[\"表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方\",\"下面这些都是表达式：\",\"(1) a; (2) a+b; (3) demo(1); (4) arr.map(); (5) function test() {}\",\"语句(代码)：\",\"下面这些都是语句(代码)：\",\"(1) if() {}; (2) for() {}; (3) switch()\"]},\"125\":{\"h\":\"babel 的作用\",\"t\":[\"React 的基础库中包含 babel.js，其作用是：\",\"浏览器不能直接解析 JSX 代码，需要 babel 转译为纯 JS 的代码才能运行\",\"只要用了 JSX，<script></script>标签内都要加上type=\\\"text/babel\\\"，声明需要 babel 来处理\"]},\"126\":{\"h\":\"渲染函数\",\"t\":[\"语法\",\"ReactDOM.render(virtualDOM, containerDOM); \",\"作用：将虚拟 DOM 元素渲染到页面中的真实容器 DOM 中显示\",\"参数说明： \",\"参数一：纯 JS 或 JSX 创建的虚拟 DOM 对象\",\"参数二：用来包含虚拟 DOM 元素的真实 DOM 元素对象（一般是一个 div）\"]},\"127\":{\"h\":\"模块化与组件化\",\"t\":[\"此处内容与Vue2 组件化编程大同小异，仅作 React 学习记录用\"]},\"128\":{\"h\":\"模块\",\"t\":[\"向外提供特定功能的 JS 程序，一般就是一个 JS 文件\",\"为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂\",\"作用：复用 JS，简化 JS 的编写，提高 JS 运行效率\"]},\"129\":{\"h\":\"组件\",\"t\":[\"用来实现局部功能效果的代码和资源的集合(html/css/js/image 等)\",\"为什么要用组件：一个界面的功能更复杂\",\"作用：复用编码，简化项目编码，提高运行效率\"]},\"130\":{\"h\":\"模块化\",\"t\":[\"当应用的 JS 都以模块来编写的, 这个应用就是一个模块化的应用\"]},\"131\":{\"h\":\"组件化\",\"t\":[\"当应用是以多组件的方式实现, 这个应用就是一个组件化的应用\"]},\"132\":{\"h\":\"功能界面的组件化编码流程（通用）\",\"t\":[\"拆分组件：拆分界面、抽取组件\",\"实现静态组件：使用组件实现静态页面效果\",\"实现动态组件：动态显示初始化数据 \",\"数据类型\",\"数据名称\",\"保存在哪个组件\",\"交互（绑定事件监听开始）\"]},\"133\":{\"h\":\"组件书写规范\",\"t\":[\"组件名必须首字母大写\",\"虚拟 DOM 元素只能有一个根元素\",\"虚拟 DOM 元素必须有结束标签\"]},\"134\":{\"h\":\"渲染类组件标签基本流程\",\"t\":[\"React 内部会创建组件实例对象\",\"调用 render()得到虚拟 DOM，并解析为真实 DOM\",\"插入到指定的页面元素内部\",\"执行了 ReactDOM.render 之后发生了什么：\",\"React 解析组件标签，找到 Component 组件\",\"发现组件是使用类定义的，随后 new 该类的实例对象，并通过该实例调用到原型上的 render 方法\",\"将 render 返回的虚拟 DOM 转为真实 DOM，随后呈现在页面中\"]},\"135\":{\"h\":\"脚手架\"},\"136\":{\"h\":\"react 脚手架\",\"t\":[\"create-react-app：用来帮助程序员快速创建一个 React 模板项目的 npm 包\",\"包含了所有需要的配置（语法检查、JSX 编译、devServer）\",\"下载好了所有相关依赖\",\"可以直接运行一个简单效果\",\"整体技术架构为：react + webpack + es6 + eslint\",\"使用脚手架开发项目的特点：模块化、组件化、工程化\"]},\"137\":{\"h\":\"创建项目并启动\",\"t\":[\"全局安装 cmd 指令：npm i -g create-react-app\",\"切换到创建项目的目录，使用 cmd 指令：create-react-app hello-react\",\"等待项目创建好之后进入项目文件夹：cd hello-react\",\"启动项目：npm start\"]},\"138\":{\"h\":\"脚手架项目结构\",\"t\":[\"public ---- 静态资源文件夹\",\"favicon.icon ------ 网站页签图标\",\"index.html -------- 主页面\",\"logo192.png ------- logo 图\",\"logo512.png ------- logo 图\",\"manifest.json ----- 应用加壳的配置文件\",\"robots.txt -------- 爬虫协议文件\",\"src ---- 源码文件夹\",\"App.css -------- App 组件的样式\",\"App.js --------- App 组件\",\"App.test.js ---- 用于给 App 做测试\",\"index.css ------ 入口文件样式\",\"index.js ------- 入口文件\",\"logo.svg ------- logo 图\",\"reportWebVitals.js --- 页面性能分析文件(需要 web-vitals 库的支持)\",\"setupTests.js ---- 组件单元测试的文件(需要 jest-dom 库的支持)\"]},\"139\":{\"h\":\"CSSModule\",\"t\":[\"为了避免 CSS 全局污染，在 jsx 文件中引入xxx.module.css形成样式隔离\",\"引入到 jsx 文件中的module.css文件默认生成一张映射表，css 中真正书写的样式名为 key，注入到页面中被隔离的样式名(key+hash)为 value\",\"可以通过这种方法获取 CSS 样式名\",\"注意：标签选择器不能被 module 隔离，最外部类名需使用类选择器 orID 选择器包裹\",\".active { border: 1px solid red; color: blue; } \",\"// style: { active: 'active+随机hash生成的样式名' } import style from \\\"./demo.module.css\\\"; function Demo() { // ... return <div className={style.active}></div>; } \",\"总结：\",\"尽量使用 class 来定义样式\",\"CSSModule 最大特色是作用于本地，只用单个类来定义样式最佳\",\"尽量避免组合选择器的运用，有利于提高选择器性能\",\"可以借助:global和标签选择器来声明全局样式，这两种写法隔离都会失效\",\"使用 class 命名时，尽量避免折中或-，尽量选择_或__连接\",\"尽量借助 CSS 的自定义属性来代替 CSS 处理器的变量\"]},\"140\":{\"h\":\"核心属性\",\"t\":[\"注意，本章主要以类式组件为例，记录 React 中的核心属性与方法\"]},\"141\":{\"h\":\"state\"},\"142\":{\"h\":\"描述\",\"t\":[\"state 是组件对象最重要的属性，值是对象（可以包含多个 key-value 的组合）\",\"组件被称为“状态机”，通过更新组件的 state 来更新对应的页面显示（重新渲染组件）\"]},\"143\":{\"h\":\"注意\",\"t\":[\"组件中 render 方法中的 this 为组件实例对象\",\"组件自定义的方法中 this 为 undefined，如何解决？\",\"方案一：强制绑定 this，通过函数对象的 bind()\",\"方案二：箭头函数\"]},\"144\":{\"h\":\"更新\",\"t\":[\"state 中存放的是状态数据，不能直接修改或更新\",\"需使用原型方法setState()来切换状态，this.setState({ flag: 'xxx' })，属于状态对象合并\"]},\"145\":{\"h\":\"Component 组件示例\",\"t\":[\"import { Component } from \\\"react\\\"; export default class Count extends Component { state = { count: 0, }; add = () => { this.setState({ count: this.state.count + 1 }); }; render() { return ( <div> <div>{this.state.count}</div> {/* 注意，此处禁止写 this.state.count++，因为自增运算符是对原count值的修改，React禁止对state的直接修改 */} <button onClick={this.add}>计数按钮</button> </div> ); } } \"]},\"146\":{\"h\":\"props\"},\"147\":{\"h\":\"描述\",\"t\":[\"每个组件对象都会有 props(properties)属性\",\"组件标签的所有属性都保存在 props 中\"]},\"148\":{\"h\":\"注意\",\"t\":[\"props 是通过标签属性从组件外部向组件内部传递变化的数据（自上而下的数据通信）\",\"子组件内部不要修改 props 数据\"]},\"149\":{\"h\":\"操作\",\"t\":[\"子组件读取 props\",\"this.props.name\",\"对 props 中的属性值进行类型限制和必要性限制\",\"第一种方式（弃用）\",\"// 类名外部写法 Person.propTypes = { name: React.PropTypes.string.isRequired, age: React.PropTypes.number, }; // 类名内部写法 class Person { static propTypes = { name: React.PropTypes.string.isRequired, age: React.PropTypes.number, }; } \",\"第二种方式（推荐，使用 prop-types 库进限制（需要引入 prop-types 库））\",\"// 类名外部写法 Person.propTypes = { name: PropTypes.string.isRequired, age: PropTypes.number. } // 类名内部写法 class Person { static propTypes = { name: PropTypes.string.isRequired, age: PropTypes.number, } } \",\"扩展运算\",\"将对象的所有属性通过 props 传递\",\"<Person {...person}></Person> \",\"默认属性\",\"Person.defaultProps = { age: 18, sex: \\\"男\\\", }; \",\"组件类的构造函数\",\"// 组件初始化时可以对props进行操作 constructor(props) { super(props); console.log(props); } \",\"函数式组件可传入 props，但不可使用 state 属性\",\"function App(props) { const { name, age, msg } = props; return <div>名字:{name}</div>; } \"]},\"150\":{\"h\":\"Component 组件示例\",\"t\":[\"import React, { Component } from \\\"react\\\"; import Item from \\\"../item/index\\\"; import \\\"./index.css\\\"; class ToDoList extends Component { state = { listState: true, }; render() { const toDoList = { handleData: this.props.handleData, listState: this.state.listState, }; return ( <ul className=\\\"doList\\\"> {this.props.toDoList.map((item) => { return <Item key={item.id} {...toDoList} content={item} />; })} </ul> ); } } export default ToDoList; \",\"import React, { Component } from \\\"react\\\"; import \\\"./index.css\\\"; class Item extends Component { render() { const { id, value, checked } = this.props.content; const listState = this.props.listState; const handleData = this.props.handleData; return ( <li> <input onChange={handleData({ eventId: id, flag: listState })} type=\\\"checkbox\\\" checked={checked} /> <p suppressContentEditableWarning contentEditable={true} onBlur={handleData({ eventId: id, flag: listState, mod: true })} className=\\\"doContent\\\" > {value} </p> <div onClick={handleData({ eventId: id, flag: listState, del: true })} className=\\\"removeList\\\" > - </div> </li> ); } } export default Item; \"]},\"151\":{\"h\":\"refs\"},\"152\":{\"h\":\"描述\",\"t\":[\"组件内的标签可以定义 ref 属性来标识自己\"]},\"153\":{\"h\":\"注意\",\"t\":[\"在 render 函数中，ref 指向的组件如this.refs.xxx为 undefined，因为此时组件尚未挂载，ref 指向为空\"]},\"154\":{\"h\":\"操作\",\"t\":[\"字符串形式的 ref（建议弃用）\",\"<input ref=\\\"input1\\\" />\",\"回调形式的 ref\",\"<input ref={(c)=>{this.input1 = c}}>\",\"createRef 创建的 ref 容器（建议使用）\",\"myRef = React.createRef()\",\"<input ref={ this.myRef } />\"]},\"155\":{\"h\":\"Component 组件示例\",\"t\":[\"import { Component, createRef } from \\\"react\\\"; export default class Count extends Component { count = createRef(); add = () => { this.count.current.innerText++; }; render() { return ( <div> <div ref={this.count}>0</div> {/* 注意，此处禁止写 this.state.count++，因为自增运算符是对原count值的修改，React禁止对state的直接修改 */} <button onClick={this.add}>计数按钮</button> </div> ); } } \"]},\"156\":{\"h\":\"三大属性执行次数\",\"t\":[\"render 调用 N+1 次，第一次为初始化，每次修改调用都会重新调用 render\",\"state 执行 N 次，render 初始化时赋值 state 初始值，每次修改都会重新设置 state（如果 state 涉及修改的话）\",\"props 受父组件影响，父组件执行 N 次则 props 执行 N 次（如果 props 涉及修改的话）\",\"回调 ref 以内联函数的方式定义，在更新过程中被执行两次，第一个传入参数为 null，第二次再传入 DOM 元素。所以目前最推荐的还是React.createRef()方法\"]},\"157\":{\"h\":\"事件处理与更新\"},\"158\":{\"h\":\"事件处理\",\"t\":[\"通过 onClick、onMousemove、onMouseenter 等属性指定事件处理函数（注意大小写）\",\"React 使用的是自定义事件，而不是原生 DOM 事件，为了更好的兼容性\",\"React 中的事件是通过事件委托方式处理的（委托给组件外层的元素）\",\"通过event.target可以得到发生事件的 DOM 元素对象\"]},\"159\":{\"h\":\"高阶函数\",\"t\":[\"如果一个函数符合下面 2 个规范中的任何一个，那该函数就是高阶函数\",\"若 A 函数，接收的参数是一个函数，那么 A 就可以称之为高阶函数\",\"若 A 函数，调用的返回值依然是一个函数，那么 A 就可以称之为高阶函数\",\"常见高阶函数：Promise、定时器、数组高阶方法（map、filter 等）\",\"函数柯里化：通过函数调用继续返回函数的方式，实现多次接收参数，最后统一处理的函数编码形式\",\"注意：\",\"父子通信的函数调用需要使用柯里化维持 this 对象\",\"JSX 循环时需要使用高阶函数 map 返回 JSX 对象\"]},\"160\":{\"h\":\"JSX 循环\",\"t\":[\"以下是 state 中的数组元素循环生成 JSX 的写法\",\"import { Component } from \\\"react\\\"; export default class Count extends Component { state = { count: 0, structure: [\\\"苹果\\\", \\\"香蕉\\\", \\\"牛奶\\\"], }; add = () => { this.setState({ count: this.state.count + 1 }); }; render() { return ( <div> <div>{this.state.count}</div> {/* 注意，此处禁止写 this.state.count++，因为自增运算符是对原count值的修改，React禁止对state的直接修改 */} <button onClick={this.add}>计数按钮</button> {this.state.structure.map((item, index) => ( <div key={index}>{item}</div> ))} </div> ); } } \"]},\"161\":{\"h\":\"key 的原理\",\"t\":[\"key 的作用\",\"简单地说，key 是虚拟 DOM 对象的标识符，在更新显示时 key 起着极其重要的作用\",\"详细地说，当状态中的数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】， 随后 React 进行【新虚拟 DOM】与【旧虚拟 DOM】的 diff 比较，比较规则如下：\",\"a.旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：\",\"（1）若虚拟 DOM 中内容没变，直接使用之前的真实 DOM\",\"（2）若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM\",\"用 index 作为 key 可能会引发的问题\",\"1.若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没有必要的真实 DOM 更新，界面效果没问题，但效率低。\",\"2.如果结构中还包含输入类的 DOM：会产生错误 DOM 更新，界面有问题。\",\"3.注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。\",\"开发中如何选择 key\",\"最好使用每条数据的唯一标识作为 key，比如 id、手机号、身份证号、学号等唯一值。\",\"如果确定只是简单展示数据，用 index 也是可以的。\",\"react-diff更新\"]},\"162\":{\"h\":\"组件树更新原理\",\"t\":[\"React 中全部的组件树会转换为 Fiber 节点，这些 Fiber 节点连起来形成 Fiber 树（又称 vdom 树），Fiber 树中判断节点的复用条件有：\",\"Fiber 节点的 type 属性是否发生变化；\",\"Fiber 节点的 props 属性是否发生变化；\",\"Fiber 节点的 state 是否发生变化；\",\"Fiber 节点的 context 是否发生变化；\",\"如果以上的条件都为否，那么就可以判断这个节点没有发生变化，不需要重新渲染\",\"但是！！！因为 React 并没有采用 Vue 那样的方式，以组件作为更新单位，中等粒度地找出哪些节点发生了更新，所以 React 每次触发更新都会从头开始生成一个新的 Fiber 树，然后与上一次更新之后生成的旧 Fiber 树对比，判断上述几个条件，找出发生了变化的 Fiber 节点，再将其更新到页面上\",\"这样逻辑上虽然可行，但是每次都从头开始对比整棵树，难免会做很多冗余比较。因此 React 触发更新之后，实际会从当前触发更新的节点开始向上对其所有的父节点打上有子节点需要更新的标记，这时会新增第 5 项判断：子节点是否存在变化，满足前 4 条件后，如果连同满足额外的第 5 个条件，那么当前节点及其所有子节点都可以跳过对比直接复用！\",\"所以完整的五项更新 or 复用判断条件是：\",\"Fiber 节点的 type 属性是否发生变化；\",\"Fiber 节点的 props 属性是否发生变化；\",\"Fiber 节点的 state 是否发生变化；\",\"Fiber 节点的 context 是否发生变化；\",\"Fiber 节点是否存在子节点更新标记\",\"React 组件树中有组件触发更新后，从顶层父节点开始递归遍历各个子节点\",\"前 4 项条件有一项发生变化，当前组件及其下属子组件全部 rerender\",\"前 4 项条件有一项发生变化，第 5 项存在更新标记，父组件自身不会 rerender，但是子组件继续进入对比判断\",\"上述 5 项条件均无变化的情况，父组件及下属子组件均不触发 rerender\"]},\"163\":{\"h\":\"生命周期\",\"t\":[\"React 组件中包含一系列钩子函数（生命周期回调函数），会在特定的时刻调用\",\"我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作\"]},\"164\":{\"h\":\"生命周期流程(旧)\"},\"165\":{\"h\":\"简述\",\"t\":[\"React 生命周期可以分成三个阶段：\",\"挂载阶段：组件状态数据的初始化及初始化渲染\",\"运行阶段：和用户交互，改变状态并重绘（最长阶段）\",\"卸载阶段：组件使用完毕后，或者不需要存在于页面中，那么将组件移除，执行销毁（需注意内存泄漏问题）\",\"以类式组件的创建流程为例：\",\"执行ReactDOM.render\",\"解析组件标签，找到组件\",\"发现组件是类定义组件，new 该类实例，通过该实例调用原型上的 render 方法\",\"将 render 返回的虚拟 DOM 转换为真实 DOM，随后呈现在页面中\",\"render 调用的时机：初始化渲染、状态更新之后\"]},\"166\":{\"h\":\"旧生命周期流程图\",\"t\":[\"React旧生命周期流程图\"]},\"167\":{\"h\":\"流程分析\",\"t\":[\"初始化阶段：ReactDOM.render()触发初次渲染\",\"constructor\",\"componentWillMount\",\"render\",\"componentDidMount\",\"componentDidMount 为常用钩子函数，一般在这个钩子中做一些初始化的事，如：开启定时器、发送网络请求、订阅消息等\",\"更新阶段：组件setState()或父组件 render 触发\",\"componentWillReceiveProps（初始化时不触发，父组件没有更新不触发）\",\"shouldComponentUpdate（setState 时触发）\",\"componentWillUpdate（forceUpdate）\",\"render\",\"componentDidUpdate\",\"卸载阶段：由ReactDOM.unmountComponentAtNode()触发\",\"componentWillUnmount\",\"componentWillUnmount 为常用钩子函数，一般在这个钩子中做一些收尾的事，如：关闭定时器、取消订阅消息\"]},\"168\":{\"h\":\"生命周期流程(新)\"},\"169\":{\"h\":\"简述\",\"t\":[\"新生命周期不是对旧生命周期的颠覆，而是合理地优化更新\",\"新的生命周期没有 componentWillMountcomponentWillReceivePropscomponentWillUpdate 钩子函数，以避免异步渲染可能存在的问题\",\"上述三个旧版本生命周期函数在 18.0.X 版本需要在函数名前面添加 UNSAFE_ (UNSAFE_componentWillMount() {})才能工作。\",\"新生命周期增加了一些新的钩子函数\"]},\"170\":{\"h\":\"新生命周期流程图\",\"t\":[\"React新生命周期流程图\"]},\"171\":{\"h\":\"流程分析\",\"t\":[\"初始化阶段：ReactDOM.render()触发初次渲染\",\"constructor\",\"getDerivedStateFromProps\",\"render\",\"componentDidMount\",\"componentDidMount 仍是常用钩子函数\",\"更新阶段：组件setState()或父组件 render 触发\",\"getDerivedStateFromProps\",\"shouldComponentUpdate\",\"render\",\"getSnapshotBeforeUpdate\",\"componentDidUpdate\",\"卸载阶段：由ReactDOM.unmountComponentAtNode()触发\",\"componentWillUnmount\",\"componentWillUnmount 仍是常用钩子函数\"]},\"172\":{\"h\":\"父子附件渲染顺序\",\"t\":[\"组件渲染的顺序依赖于深度优先原则\",\"父组件第一次渲染：\",\"父 willMount -> 父 render [ 子 willMount -> 子 render -> 子 didMount ] -> 父 didMount\",\"父组件更新：\",\"父 getDerivedStateFromProps -> 父 shouldUpdate -> 父 render -> [ 子父 getDerivedStateFromProps -> 子 shouldUpdate -> 子 render -> 子 didUpdate ] -> 父 didUpdate\",\"特殊情况：我们可以在子组件内部优化处理，验证传递的属性值有没有变化，如果没有变化则禁止更新（memo）\",\"父组件释放：\",\"父 willUnMount -> 父释放中 -> [ 子 willUnMount -> 子释放 ] -> 父释放\"]},\"173\":{\"h\":\"重要的钩子\",\"t\":[\"render：初始化渲染或更新渲染调用\",\"componentDidMount：开启监听, 发送 ajax 请求\",\"componentWillUnmount：做一些收尾工作, 如: 清理定时器\"]},\"174\":{\"h\":\"Hook\",\"t\":[\"随着 React 16.8 的更新，函数式组件终于迎来了春天，大量 Hook API 的引入，让函数式组件能以更简洁、复用性更高的代码实现组件功能\"]},\"175\":{\"h\":\"简介\"},\"176\":{\"h\":\"特点\",\"t\":[\"可在函数组件中使用 state 以及其他 React 特性\",\"完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook\",\"100% 向后兼容的。 Hook 不包含任何破坏性改动\"]},\"177\":{\"h\":\"动机\",\"t\":[\"React 需要为共享状态逻辑提供更好的原生途径\",\"Hook 可以在无需修改组件结构的情况下复用状态逻辑\",\"常规的类式组件愈发臃肿，Hook 可以将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）\"]},\"178\":{\"h\":\"使用规则\",\"t\":[\"Hook 就是 JavaScript 函数，但使用它们有两个额外规则：\",\"只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。\",\"只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。（还有一个地方可以调用 Hook —— 就是自定义的 Hook 中，我们稍后会学习到。）\"]},\"179\":{\"h\":\"状态机 Hook State Hook\",\"t\":[\"State Hook 让函数组件也可以有 state 状态，并进行状态数据的读写操作\"]},\"180\":{\"h\":\"语法\",\"t\":[\"const [xxx, setXxx] = React.useState(initialValue)\"]},\"181\":{\"h\":\"说明\",\"t\":[\"参数：第一次初始化指定的值创建闭包变量缓存\",\"返回值：包含 2 个元素的数组，第 1 个为内部当前状态值，第 2 个为更新状态值的函数\"]},\"182\":{\"h\":\"写法\",\"t\":[\"setXxx(newValue[, callback])：参数为非函数值，直接指定新的状态值，内部用其覆盖原来的状态值\",\"setXxx(value => newValue[, callback])：参数为函数，接收原本的状态值，返回新的状态值，内部用其覆盖原来的状态值\",\"案例：\",\"import React, { useState } from \\\"react\\\"; function Example() { // 声明一个叫 \\\"count\\\" 的 state 变量 const [count, setCount] = useState(0); return ( <div> <p>You clicked {count} times</p> <button onClick={() => setCount(count + 1)}>Click me</button> </div> ); } \"]},\"183\":{\"h\":\"副作用监听 Hook Effect Hook\"},\"184\":{\"h\":\"副作用与操作\",\"t\":[\"副作用：如果在 React 组件中有执行过数据获取、订阅或者手动修改过 DOM 的操作，我们统一把这些操作称为“副作用”，或者简称为“作用”。\",\"React 中常见的副作用操作：\",\"发送 ajax 请求数据获取\",\"设置订阅 / 启动定时器\",\"手动更改真实 DOM\",\"Effect Hook允许函数组件能执行副作用操作，类似于模拟类式组件中的生命周期钩子，也与Vue3 的 watch 和 watchEffect作用相近\"]},\"185\":{\"h\":\"语法\",\"t\":[\"useEffect(() => { // 在此可以执行任何带副作用操作 return () => { // 组件卸载前执行 // 可以执行收尾工作，例如清除定时器 / 取消订阅等 }; }, [stateValue]); // 如果指定的是[]，回调函数仅在第一次render执行 \"]},\"186\":{\"h\":\"说明\",\"t\":[\"第二个参数传入数组形式的值，数组内部的变量应是const [stateValue, setStateValue] = useState(initialValue)中的 stateValue。仅当数组中指定的 state 状态值发生变化时，才会触发回调函数\",\"如果第二个参数传入空数组，则整个回调函数仅在第一次 render 执行，相当于 componentDidMount 钩子函数\",\"返回值会在组件卸载前执行，相当于 componentWillUnmount 钩子函数\",\"可以把useEffect Hook看作如下三个函数与render(render 时会执行一次)的组合： \",\"componentDidMount\",\"componentDidUpdate\",\"componentWillUnMount\"]},\"187\":{\"h\":\"额外的 Hook useLayoutEffect\",\"t\":[\"函数功能与useEffect相同，但会在 DOM 变更之后同步调用 effect，用于 DOM 同步触发渲染\",\"开发中尽可能使用useEffect以避免阻塞视觉更新\"]},\"188\":{\"h\":\"引用容器 Hook Ref Hook\",\"t\":[\"Ref Hook可以在函数组件中存储/查找组件内的标签或任意其他数据\"]},\"189\":{\"h\":\"语法\",\"t\":[\"function TextInputWithFocusButton() { const inputEl = useRef(null); const onButtonClick = () => { // `current` 指向已挂载到 DOM 上的文本输入元素 inputEl.current.focus(); }; return ( <> <input ref={inputEl} type=\\\"text\\\" /> <button onClick={onButtonClick}>Focus the input</button> </> ); } \"]},\"190\":{\"h\":\"作用\",\"t\":[\"保存标签对象，功能与 React.createRef()一样\"]},\"191\":{\"h\":\"额外的 Hook useImperativeHandle\",\"t\":[\"useImperativeHandle 可以让你在使用 ref 时自定义暴露给父组件的实例值或 DOM 元素\",\"useImperativeHandle 应当与 forwardRef 一起使用：\",\"function FancyInput(props, ref) { const inputRef = useRef(); useImperativeHandle(ref, () => ({ focus: () => { inputRef.current.focus(); } })); return <input ref={inputRef} ... />; } FancyInput = forwardRef(FancyInput); \",\"渲染 <FancyInput ref={inputRef} /> 的父组件可以调用 inputRef.current.focus()\",\"该 API 通常用于组件库组件向外暴露可用方法，或项目开发中对封装组件保留内部可操作方法\"]},\"192\":{\"h\":\"祖孙环境 Hook Context Hook\",\"t\":[\"Context Hook实现了祖孙组件通信，接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近（祖先组件）的 <MyContext.Provider> 的 value prop 决定\",\"以下是祖孙组件通信切换 button 颜色的 demo：\",\"import { createContext, useContext, useState } from \\\"react\\\"; const themes = { light: { foreground: \\\"#000000\\\", background: \\\"#eeeeee\\\", }, dark: { foreground: \\\"#ffffff\\\", background: \\\"#222222\\\", }, }; const ThemeContext = createContext({ theme: themes.light, changeTheme: () => {}, }); function ContextApp() { const [themeSwitch, setThemeSwitch] = useState(\\\"dark\\\"); const changeTheme = () => { setThemeSwitch((value) => (value === \\\"light\\\" ? \\\"dark\\\" : \\\"light\\\")); }; return ( <ThemeContext.Provider value={{ theme: themes[themeSwitch], changeTheme }}> <Toolbar /> </ThemeContext.Provider> ); } function Toolbar(props) { return ( <> <ThemedButton /> </> ); } function ThemedButton() { const { theme, changeTheme } = useContext(ThemeContext); return ( <button style={{ background: theme.background, color: theme.foreground }} onClick={changeTheme} > I am styled by theme context! </button> ); } export default ContextApp; \",\"更详细的 Context API 分析，详见进阶技巧-Context\"]},\"193\":{\"h\":\"惰性取值 Hook useMemo\",\"t\":[\"useMemo 会返回一个惰性的变量值，作用类似于Vue3-computed\"]},\"194\":{\"h\":\"语法\",\"t\":[\"function App() { const [a, setA] = useState(0); const [b, setB] = useState(0); const memoizedSum = useMemo(() => { // 虽然render渲染调用了三次memo返回值，但是函数体仅调用一次，只有一次log console.log('sum'); return a + b; }, [a, b]); return ( <div>a: {a}</div> <div>b: {b}</div> <div>sum: {memoizedSum}</div> <div>sum: {memoizedSum}</div> <div>sum: {memoizedSum}</div> ) } \"]},\"195\":{\"h\":\"说明\",\"t\":[\"useMemo 会依赖于某个useState的依赖项发生变化而变化，对变量重新赋值\",\"当依赖项不变时，变量值的多次重复使用不会重新调用计算函数执行计算，而是直接返回缓存的变量值\",\"当其内部依赖项发生变化时，会再次调用计算函数执行计算后返回新值赋给变量\"]},\"196\":{\"h\":\"惰性函数 Hook useCallback\",\"t\":[\"useCallback 会返回一个惰性的函数，类似于 useMemo，不同的是 useCallback 返回的是回调函数，只有依赖项更新时回调函数才会更新\",\"何时生成新函数\",\"第二个参数\",\"组件首次执行及更新都会生成新函数\",\"空\",\"组件首次执行生成，之后不变\",\"[]\",\"组件首次执行、依赖变化时生成新函数\",\"[state, ref.current] 这两类\"]},\"197\":{\"h\":\"语法\",\"t\":[\"import { useCallback, useState } from \\\"react\\\"; export default function MemoizedCallback() { const [a, setA] = useState(0); const [b, setB] = useState(0); const memoFn = useCallback(() => { console.log(\\\"执行callback\\\"); return a + b; }, [a]); return ( <> <button onClick={() => setA(a + 1)}>a: {a}</button> <button onClick={() => setB(b + 1)}>b: {b}</button> <div>sum: {memoFn()}</div> </> ); } \",\"在上面的 demo 中，因为 memoFn 回调只依赖于 a，所以当 button b 点击增加时，<div>sum: {memoFn()}</div>中的值不会正确变化，当然，函数体内的 console 还是会正常打印的。只有当 button a 点击后，才会重新更新函数，调用正确的 a 和 b 的值进行计算\",\"因此，useCallback 实际的作用是：\",\"避免子组件对于函数不必要的 reRender\",\"当父子组件通信，父组件传递内部函数给子组件时，适合使用 useCallback\"]},\"198\":{\"h\":\"自定义 Hook\",\"t\":[\"自定义 Hook 就是基于 Hook 函数的性质，开发者自行封装、实现其他功能的 hook 函数\",\"这里列举一些与常见的、非业务型、功能性自定义 Hook\"]},\"199\":{\"h\":\"usePrevious\",\"t\":[\"类组件在 componentDidUpdate 可以获取 prevProps，函数式组件中我们使用 useRef 自定义 hook 来实现\",\"import { useEffect, useRef } from \\\"react\\\"; function usePrevious(value) { const ref = useRef(); useEffect(() => { ref.current = value; }); return ref.current; } \"]},\"200\":{\"h\":\"useDidUpdateEffect\",\"t\":[\"对目标 state 依赖执行初始挂载时不触发，后续更新才触发的函数\",\"类似 Vue 中 watch 的immediate: false选项\",\"const useDidUpdateEffect(fn, inputs) => { const didMountRef = useRef(false); useEffect(() => { if(didMountRef.current) fn(); else didMountRef.current = true; }) } \"]},\"201\":{\"h\":\"useInterval\",\"t\":[\"用 delay 动态控制定时器，delay 为 null 时不创建定时器，同样利用了 useRef 来存储新的回调\",\"import { useEffect, useRef } from \\\"react\\\"; export default function useInterval(callback, delay) { const savedCallback = useRef(); // 保存新回调 useEffect(() => { savedCallback.current = callback; }); // 建立 interval useEffect(() => { function tick() { savedCallback.current(); } if (delay !== null) { let id = setInterval(tick, delay); return () => clearInterval(id); } }, [delay]); } \"]},\"202\":{\"h\":\"useResizeObserver\",\"t\":[\"获取某个元素的位置信息，resize 时候可以更新。\",\"const useResizeObserver = (ref) => { const [dimensions, setDimensions] = useState(null); useEffect(() => { const observeTarget = ref.current; const resizeObserver = new ResizeObserver((entries) => { entries.forEach((entry) => { setDimensions(entry.contentRect); }); }); resizeObserver.observe(observeTarget); return () => { resizeObserver.unobserve(observeTarget); }; }, [ref]); return dimensions; }; \"]},\"203\":{\"h\":\"useMount\",\"t\":[\"对标类组件 ComponentDidMount，这里为了防止每次写 useEffect 时候写空数组做了封装\",\"const useMount = (callback) => { useEffect(() => { callback(); }, []); }; \"]},\"204\":{\"h\":\"useDebounce\",\"t\":[\"节流函数结合 hook 使用，利用 useEffect 的依赖值变化的特性，来控制清空定时器。这里主要应用场景是参数快速变化时候的发送请求的节流处理\",\"export const useDebounce = (value, delay) => { const [debounceValue, setDebounceValue] = useState(value); useEffect(() => { // 每次在value变化以后，设置一个定时器 const timeout = setTimeout(() => setDebounceValue(value), delay); // 上一个useEffect处理完后清理 return () => clearTimeout(timeout); }, [value, delay]); return debounceValue; }; \"]},\"205\":{\"h\":\"进阶技巧\"},\"206\":{\"h\":\"懒加载 lazy\",\"t\":[\"React.lazy 函数可以动态引入组件\",\"React.suspense 支持组件等待加载完成前的加载过程中操作如：loading 加载中... 显示\"]},\"207\":{\"h\":\"语法\",\"t\":[\"const OtherComponent = React.lazy(() => import('./OtherComponent'));\",\"import React, { Suspense } from \\\"react\\\"; const OtherComponent = React.lazy(() => import(\\\"./OtherComponent\\\")); function MyComponent() { return ( <div> <Suspense fallback={<div>Loading...</div>}> <OtherComponent /> </Suspense> </div> ); } \",\"fallback 属性接受任何在组件加载过程中你想展示的 React 元素。你可以将 Suspense 组件置于懒加载组件之上的任何位置。你甚至可以用一个 Suspense 组件包裹多个懒加载组件。\",\"import React, { Suspense } from \\\"react\\\"; const OtherComponent = React.lazy(() => import(\\\"./OtherComponent\\\")); const AnotherComponent = React.lazy(() => import(\\\"./AnotherComponent\\\")); function MyComponent() { return ( <div> <Suspense fallback={<div>Loading...</div>}> <section> <OtherComponent /> <AnotherComponent /> </section> </Suspense> </div> ); } \"]},\"208\":{\"h\":\"过渡效果\",\"t\":[\"import React, { Suspense, startTransition } from \\\"react\\\"; import Tabs from \\\"./Tabs\\\"; import Glimmer from \\\"./Glimmer\\\"; const Comments = React.lazy(() => import(\\\"./Comments\\\")); const Photos = React.lazy(() => import(\\\"./Photos\\\")); function MyComponent() { const [tab, setTab] = React.useState(\\\"photos\\\"); function handleTabSelect(tab) { startTransition(() => { setTab(tab); }); } return ( <div> <Tabs onTabSelect={handleTabSelect} /> <Suspense fallback={<Glimmer />}> {tab === \\\"photos\\\" ? <Photos /> : <Comments />} </Suspense> </div> ); } \",\"当 tab 切换时，标签切换为\\\"comments\\\"不会标记为紧急更新，而是标记为需要一些准备时间的 transition，实现一个过渡效果。React 会保留旧的 UI 并进行交互，当它准备好时，会切换为 Comments 组件\"]},\"209\":{\"h\":\"Context\",\"t\":[\"Context 实现了祖孙组件之间的通信，类似于 Vue 中的 provide 与 inject\",\"Hook 函数式组件的 context 写法详见useContext\"]},\"210\":{\"h\":\"使用时机与考虑\",\"t\":[\"Context 设计目的是为了共享自上而下的组件树中的“全局”数据，例如登录认证用户信息、主题或语言等\",\"Context 主要应用于很多不同层级的组件需要访问共享、共同使用、同步刷新的数据\",\"使用时需要考虑组件的复用性，因为 Context 的引入会使复用性变差\"]},\"211\":{\"h\":\"API\"},\"212\":{\"h\":\"React.createContext\",\"t\":[\"创建一个 Context 对象\",\"const MyContext = React.createContext(defaultValue);\",\"只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效\",\"在组件中引入 MyContext 对象，并在 render 函数中使用<MyContext.Provider></MyContext.Provider>来开启订阅\",\"注意：当组件没有捕获到来自于祖先组件的 Provider 时使用 MyContext，其默认值才会是 defaultValue\"]},\"213\":{\"h\":\"Context.Provider\",\"t\":[\"<MyContext.Provider value={/* 某个值 */}>\",\"每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化\",\"Provider 接收一个 value 属性，传递给消费组件\",\"当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染，无论组件嵌套结构有多么复杂\"]},\"214\":{\"h\":\"Class.contextType\",\"t\":[\"该 API 仅适用于类式组件，为 class 声明一个指向 Context 实例对象的 contextType 属性，会开启this.context对象，允许使用 Context 中的 value，这些值可以在全生命周期中随时调用\",\"class App extends Component { static contextType = MyContext; render() { const context = this.context; return ( // ... ) } } \"]},\"215\":{\"h\":\"Context.Consumer\",\"t\":[\"<MyContext.Consumer> {value => /* 基于 context 值进行渲染*/} </MyContext.Consumer> \",\"在 Consumer 内部，后代组件可以订阅到 Context 变更\",\"注意：消费组件必须是<MyContext.Provider></MyContext.Provider>中嵌套组件的后代组件，否则 value 参数为一开始createContext(defaultValue)中的 defaultValue\"]},\"216\":{\"h\":\"Context.displayName\",\"t\":[\"context 对象接受一个名为 displayName 的 property，类型为 string\",\"React DevTools 检测工具中可以以此更名\"]},\"217\":{\"h\":\"写法\",\"t\":[\"import { Component, createContext } from \\\"react\\\"; const themes = { light: { foreground: \\\"#000000\\\", background: \\\"#eeeeee\\\", }, dark: { foreground: \\\"#ffffff\\\", background: \\\"#222222\\\", }, }; const ThemeContext = createContext({ theme: themes.light, changeTheme: () => {}, }); class ClassContextApp extends Component { state = { themeSwitch: \\\"dark\\\", }; changeTheme = () => { const theme = this.state.themeSwitch; this.setState({ themeSwitch: theme === \\\"light\\\" ? \\\"dark\\\" : \\\"light\\\" }); }; render() { return ( <ThemeContext.Provider value={{ theme: themes[this.state.themeSwitch], changeTheme: this.changeTheme, }} > <Toolbar /> </ThemeContext.Provider> ); } } function Toolbar(props) { return ( <> <ThemedButton /> </> ); } class ThemedButton extends Component { // 声明静态属性后，class中即可使用this.context获取上下文对象 static contextType = ThemeContext; render() { const { theme, changeTheme } = this.context; return ( <button style={{ background: theme.background, color: theme.foreground }} onClick={changeTheme} > I am styled by theme context!@ </button> ); } } export default ClassContextApp; \"]},\"218\":{\"h\":\"Fragments\",\"t\":[\"Fragments 可以减少 render 渲染的节点嵌套，最外部元素在渲染时不会向 DOM 中添加父节点\",\"// 渲染DOM时，只有ChildA ChildB ChildC的DOM元素 render() { return ( <React.Fragment> <ChildA /> <ChildB /> <ChildC /> </React.Fragment> ); } \"]},\"219\":{\"h\":\"短语法\",\"t\":[\"最简洁的写法，类似空标签\",\"class Columns extends React.Component { render() { return ( <> <td>Hello</td> <td>World</td> </> ); } } \"]},\"220\":{\"h\":\"带 key 的情况\",\"t\":[\"使用显式 <React.Fragment> 语法声明的片段可能具有 key。一个使用场景是将一个集合映射到一个 Fragments 数组 - 举个例子，创建一个描述列表：\",\"function Glossary(props) { return ( <dl> {props.items.map((item) => ( // 没有`key`，React 会发出一个关键警告 <React.Fragment key={item.id}> <dt>{item.term}</dt> <dd>{item.description}</dd> </React.Fragment> ))} </dl> ); } \"]},\"221\":{\"h\":\"Portals\",\"t\":[\"Portal：门，门户。此处可理解为传送门\",\"该 API 可以将子节点渲染到父组件之外的 DOM 节点上，甚至可以添加到<body></body>上\"]},\"222\":{\"h\":\"语法\",\"t\":[\"ReactDOM.createPortal(child, container)\",\"第一个参数 child：任意可渲染的子元素\",\"第二个参数 container：DOM 元素\",\"render() { // React 并*没有*创建一个新的 div。它只是把子元素渲染到 `domNode` 中。 // `domNode` 是一个可以在任何位置的有效 DOM 节点。 return ReactDOM.createPortal( this.props.children, domNode ); } \"]},\"223\":{\"h\":\"事件冒泡\",\"t\":[\"虽然 portal 可以传送子元素到 DOM 树的任意地方，但是 React 树的挂载顺序是固定的，与 DOM 树中的位置无关，所以 React 的特性仍然不变\",\"这其中就包含事件冒泡，一个从 portal 内部触发的事件会一直冒泡至包含 React 树的祖先，即便这些元素并不是 DOM 树 中的祖先\"]},\"224\":{\"h\":\"Render-props\",\"t\":[\"Render-prop属性接收一个函数，返回一个 React 元素并调用它，而非执行渲染\"]},\"225\":{\"h\":\"语法\",\"t\":[\"<DataProvider render={(data) => <h1>Hello {data.target}</h1>} /> \"]},\"226\":{\"h\":\"应用\",\"t\":[\"以官方文档的鼠标跟踪 demo 为例，此处使用函数式组件简写\"]},\"227\":{\"h\":\"1.建立鼠标跟踪组件\",\"t\":[\"function MouseTracker() { const [x, setX] = useState(0); const [y, setY] = useState(0); function handleMouseMove(event) { setX(event.clientX); setY(event.clientY); } return ( <div style={{ height: \\\"100vh\\\" }} onMouseMove={handleMouseMove}> <h1>移动鼠标</h1> <p> 当前的鼠标位置是：{x}, {y} </p> </div> ); } \",\"以上组件实现的效果是，当光标在屏幕上移动时，组件在<p>中显示其 x,y 坐标\"]},\"228\":{\"h\":\"2.普通的组件复用\",\"t\":[\"function Mouse() { const [x, setX] = useState(0); const [y, setY] = useState(0); function handleMouseMove(event) { setX(event.clientX); setY(event.clientY); } return ( <div style={{ height: \\\"100vh\\\" }} onMouseMove={handleMouseMove}> {/* 此处可以是记录当前鼠标位置的文本信息，也可以是基于当前鼠标位置实现其他功能的封装组件 出于鼠标组件复用性考虑，此处位置应该空出给其他组件使用，就像Vue中的slot一样 */} <p> 当前的鼠标位置是：{x}, {y} </p> </div> ); } function MouseTracker() { return ( <> <h1>移动鼠标</h1> <Mouse /> </> ); } \",\"以上组件为封装后可跟随鼠标移动更新鼠标位置信息文本的组件，该组件的局限性在于，如果我们需要实现一个同样跟随鼠标移动做其他功能的组件时，除了注释之外的位置，其他的组件代码包括 x、y、handleMouseMove 全部都要重新写一遍，并没有真正达到组件复用的行为\"]},\"229\":{\"h\":\"3. Render-props\",\"t\":[\"Render-props实际上就是提供了组件插槽，在组件外部就能向组件内部指定的位置写入任何 jsx 内容，实现控制反转\",\"function Cat(props) { const { x, y } = props.mouse; return ( <img src=\\\"/cat.jpg\\\" style={{ position: \\\"absolute\\\", left: x, top: y }} /> ); } function Mouse() { const [x, setX] = useState(0); const [y, setY] = useState(0); function handleMouseMove(event) { setX(event.clientX); setY(event.clientY); } return ( <div style={{ height: \\\"100vh\\\" }} onMouseMove={handleMouseMove}> {/* 开启props，具体渲染交给外层组件控制，Mouse只负责提供props */} {props.render({ x, y })} </div> ); } function MouseTracker() { return ( <> <h1>移动鼠标</h1> {/* 实际效果是将Mouse内的{x,y}赋值mouse给Cat作为props */} <Mouse render={(mouse) => <Cat mouse={mouse} />} /> </> ); } \",\"这样，通过提供像 slot 插槽一样的 render 方法，让<Mouse>动态渲染其内部组件，避免了多次重复克隆<Mouse>组件\",\"具体来说，render prop是一个告知组件其内部需要渲染什么内容的函数\",\"注意：render prop是因为这种特殊模式才被称为render prop，render 的名字是不固定的，也可以是 formatter、create 这些名字\"]},\"230\":{\"h\":\"简写方式\",\"t\":[\"在组件标签内部{}书写的内容都视作 props.children 内容，从而可以简写为：\",\"<Mouse> {mouse => ( <p>鼠标的位置是：{mouse.x}, {mouse.y}</p> )} </Mouse> // Mouse函数 function Mouse(props) { // ... return ( // ... // 默认props.children获取函数 { props.children(...) } ) } \"]},\"231\":{\"h\":\"注意事项\",\"t\":[\"在 render 函数或函数组件返回体中创建render prop需要注意函数 rerender 的问题\",\"如果在 render 函数或函数组件返回体中声明render prop函数，那么当组件每次刷新渲染的时候，总会声明一个新的render prop函数\",\"为了绕过这一问题，优化渲染性能，可以声明一个函数后在绑定给 render\",\"class MouseTracker extends React.Component { // 定义为实例方法，`this.renderTheCat`始终 // 当我们在渲染中使用它时，它指的是相同的函数 renderTheCat(mouse) { return <Cat mouse={mouse} />; } render() { return ( <div> <h1>Move the mouse around!</h1> <Mouse render={this.renderTheCat} /> </div> ); } } \"]},\"232\":{\"h\":\"高阶组件\",\"t\":[\"高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧，是一种基于 React 组合特性的特殊设计模式\"]},\"233\":{\"h\":\"语法\",\"t\":[\"高阶组件参数为组件，返回值为新组件。HOC 本身是一个纯函数，没有副作用\",\"const EnhancedComponent = higherOrderComponent(WrappedComponent);\"]},\"234\":{\"h\":\"应用场景\",\"t\":[\"现假设项目中需要编写两个组件，分别是订阅评论与发布评论的组件、订阅博客帖子与发布博客帖子的组件，两者结构类似，假定它们的数据源都出自DataSource，那么它们均需要实现：\",\"挂载时，向 DataSource 添加一个更改侦听器\",\"在侦听器内部，当数据源发生变化时，调用 setState\",\"在卸载时，删除侦听器\",\"为了避免这种重复逻辑带来的冗余代码，现在应用 HOC 来实现它：\",\"function withSubscription(WrappedComponent, selectData) { // 返回另一个组件 return function(props) { // 根据props筛选data const [data, setData] = useState(selectData(DataSource, props)) // 实时更新列表数据 function handleChange() { setData(val => selectData(DataSource, props)) } // 挂载时添加侦听 useEffect(() => { DataSource.addChangeListener(handleChange) return () => { DataSource.removeChangeListener(handleChange) } }) return ( <WrappedComponent {data} {...props} /> ) }a } // 评论组件与博客组件复用 const CommentListWithSubscription = withSubscription( CommentList, (DataSource) => DataSource.getComments() ); const BlogPostWithSubscription = withSubscription( BlogPost, (DataSource, props) => DataSource.getBlogPost(props.id) ); \",\"被包装组件<WrappedComponent>接收来自容器组件所有的 prop，同时也接收一个新的用于 render 的data prop。HOC 不关心数据的使用方式或原因，同时被包装组件也不需要关心数据何处而来\",\"与组件一样，withSubscription 函数和被包装组件之间的契约完全基于传递的 props。这种依赖方式使组件更换更加容易，解除了功能相同细节不同的组件之间的束缚，使得我们只需要专注于组件细节\"]},\"235\":{\"h\":\"注意事项\",\"t\":[\"不要在 render 方法中使用 HOC。因为组件 rerender 重新挂载组件会导致该组件及其所有子组件已有状态丢失\",\"务必复制静态方法。HOC 包装组件之后，原组件上的静态方法或原型方法将丢失，因此需要注意方法拷贝\",\"Refs不会被传递。HOC 的约定即传递 props 给被包装组件，对 refs 并不适用\"]},\"236\":{\"h\":\"Refs 转发\",\"t\":[\"function FancyButton(props) { return <button className=\\\"FancyButton\\\">{props.children}</button>; } \",\"以该组件为例，FancyButton 内部的 button 元素被组件隐藏细节，因此外部组件的 ref 一般无法直接绑定 button 进行操作\",\"为了操作其内部的 button，需要使用 Ref 转发来实现\"]},\"237\":{\"h\":\"语法\",\"t\":[\"import { forwardRef, createRef } from 'react' const FancyButton = forwardRef((props, ref) => { <button {ref} className=\\\"FancyBUtton\\\"> {props.children} </button> }) // 这里可以直接获取DOM button 的 ref const ref = createRef(); <FancyButton ref={ref}>Click me</FancyButton> \",\"语法执行分析：\",\"调用createRef创建一个React ref并将其赋值给 ref 变量\",\"指定 ref 为 JSX 属性，将其向下传递给<FancyButton ref={ref}>\",\"React 传递 ref 给 forwardRef 内的函数(props, ref) => ...，作为第二参数\",\"我们向下转发该 ref 参数到<button ref={ref}>，指定为 JSX 属性\",\"当 ref 挂载完成后，ref.current指向<button>节点\"]},\"238\":{\"h\":\"注意\",\"t\":[\"第二个参数 ref 只能在使用React.forwardRef定义组件时存在，常规函数和 class 不接收 ref 参数，且 props 中野不存在 ref\",\"ref 除了转发 DOM 组件，也能转发 class 或函数组件\"]},\"239\":{\"h\":\"高阶函数转发 refs\",\"t\":[\"这个技巧对于高阶组件非常有用，以下是一个 demo 示例\",\"function logProps(WrappedComponent) { class LogProps extends Component { componentDidUpdate(prevProps) { console.log(\\\"old props:\\\", prevProps); console.log(\\\"new props:\\\", this.props); } render() { return <WrappedComponent {...this.props} />; } } return LogProps; } class FancyButton extends React.Component { focus() { // ... } // ... } // 我们导出 LogProps，而不是 FancyButton。 // 虽然它也会渲染一个 FancyButton。 export default logProps(FancyButton); \",\"为了让 refs 能准确绑定到高阶组件返回的组件上，需要使用React.forwardRef\",\"function logProps(component) { class LogProps extends Component { componentDidUpdate(prevProps) { console.log(\\\"old props:\\\", prevProps); console.log(\\\"new props:\\\", this.props); } render() { const { forwardedRef, ...rest } = this.props; } } } // ... const ref = createRef(); return React.forwardRef((props, ref) => { return <LogProps {...props} forwardedRef={ref} />; }); \"]},\"240\":{\"h\":\"显示自定义名称\",\"t\":[\"如果你命名了渲染函数，DevTools 也将包含其名称（例如 “ForwardRef(myFunction)”）\",\"const WrappedComponent = React.forwardRef(function myFunction(props, ref) { return <LogProps {...props} forwardedRef={ref} />; }); \",\"也可以直接通过设置静态 displayName 属性来命名\",\"function logProps(Component) { class LogProps extends React.Component { // ... } function forwardRef(props, ref) { return <LogProps {...props} forwardedRef={ref} />; } // 在 DevTools 中为该组件提供一个更有用的显示名。 // 例如 “ForwardRef(logProps(MyComponent))” const name = Component.displayName || Component.name; forwardRef.displayName = `logProps(${name})`; return React.forwardRef(forwardRef); } \"]},\"241\":{\"h\":\"错误边界\",\"t\":[\"错误边界是一种 React 组件，这种组件可以捕获并打印发生在其子组件树任何位置的 JS 错误，并能渲染备用 UI 而不是渲染崩溃了的子组件树。错误边界在渲染期间、生命周期方法和整个组件树的构造函数中捕获错误。\"]},\"242\":{\"h\":\"语法及注意事项\",\"t\":[\"注意\",\"错误边界无法捕获以下错误\",\"事件处理\",\"异步代码（setTimeout 或 requestAnimationFrame 回调）\",\"服务端渲染\",\"它自身抛出的错误（并非它的子组件）\",\"如果一个 class 组件中定义了 static getDerivedStateFromError() 或 componentDidCatch() 这两个生命周期方法中的任意一个（或两个）时，那么它就变成一个错误边界。当抛出错误后，请使用 static getDerivedStateFromError() 渲染备用 UI ，使用 componentDidCatch() 打印错误信息。\",\"class ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { // 更新 state 使下一次渲染能够显示降级后的 UI return { hasError: true }; } componentDidCatch(error, errorInfo) { // 你同样可以将错误日志上报给服务器 logErrorToMyService(error, errorInfo); } render() { if (this.state.hasError) { // 你可以自定义降级后的 UI 并渲染 return <h1>Something went wrong.</h1>; } return this.props.children; } } // 包裹所需组件使用 <ErrorBoundary> <MyWidget /> </ErrorBoundary>; \",\"注意\",\"错误边界仅可以捕获其子组件的错误，它无法捕获其自身的错误。如果一个错误边界无法渲染错误信息，则错误会向最近的上层错误边界冒泡\"]},\"243\":{\"h\":\"应用场景\",\"t\":[\"错误边界的粒度由实际开发情景决定，既可以将其包装在最顶层的路由组件并为用户展示一个错误信息，像服务端框架处理崩溃一样，也可以将单独的组件包装在错误边界以保护应用其他部分不崩溃\"]},\"244\":{\"h\":\"组件树卸载\",\"t\":[\"从 React16 开始，任何未被错误边界捕获的错误将会导致整个 React 组件树被卸载，需要注意\"]},\"245\":{\"h\":\"事件处理\",\"t\":[\"错误边界无法捕获事件处理器内部的错误，原因：事件处理器错误于 JS 执行栈触发，而错误边界捕获的是组件渲染的错误\",\"在事件处理器内部捕获错误，仍需要使用普通的 try/catch 语句\",\"class MyComponent extends React.Component { constructor(props) { super(props); this.state = { error: null }; this.handleClick = this.handleClick.bind(this); } handleClick() { try { // 执行操作，如有错误则会抛出 } catch (error) { this.setState({ error }); } } render() { if (this.state.error) { return <h1>Caught an error.</h1>; } return <button onClick={this.handleClick}>Click Me</button>; } } \"]},\"246\":{\"h\":\"React\",\"t\":[\"简介\",\"基本使用\",\"模块化与组件化\",\"脚手架\",\"核心属性\",\"事件处理与更新\",\"生命周期\",\"Hook\",\"进阶技巧\",\"逻辑复用\",\"性能优化\",\"组件通信\",\"react 生态\"]},\"247\":{\"h\":\"JSX结构\"},\"248\":{\"h\":\"babel\",\"t\":[\"JSX 是一个 JS 的语法扩展，能更好地描述 UI 应该呈现出它应有交互的本质形式\",\"astexplorer可以把 JSX 代码转换成 AST 语法树\",\"react/jsx-runtime和react/jsx-dev-runtime中的函数只能由编译器转换使用。如果需要在代码中手动创建元素，可以使用React.createElement\",\"这里我们借助 babel 插件，简便地实现模板 JSX 代码转换\",\"pnpm i -D @babel/core @babel/plugin-transform-react-jsx \",\"// oldjsx.js 在React17以前的老式babel转换写法 const babel = require(\\\"@babel/core\\\"); const sourceCode = ` <h1> hello<span style={{ color: 'red' }}>world</span> </h1> `; const result = babel.transform(sourceCode, { plugins: [[\\\"@babel/plugin-transform-react-jsx\\\", { runtime: \\\"classic\\\" }]], }); console.log(result.code); \",\"/*#__PURE__*/React.createElement(\\\"h1\\\", null, \\\"hello\\\", /*#__PURE__*/React.createElement(\\\"span\\\", { style: { color: 'red' } }, \\\"world\\\")); \",\"// React18新jsx转换写法 const babel = require(\\\"@babel/core\\\"); const React = require(\\\"react\\\"); const sourceCode = ` <h1> hello<span style={{ color: 'red' }}>world</span> </h1> `; const result = babel.transform(sourceCode, { plugins: [ [\\\"@babel/plugin-transform-react-jsx\\\", { runtime: \\\"automatic\\\" }], // automatic ], }); console.log(result.code); \",\"import { jsx } from \\\"react/jsx-runtime\\\"; import { jsxs } from \\\"react/jsx-runtime\\\"; /*#__PURE__*/_jsxs(\\\"h1\\\", { children: [\\\"hello\\\", /*#__PURE__*/_jsx(\\\"span\\\", { style: { color: 'red' }, children: \\\"world\\\" })] }); \"]},\"249\":{\"h\":\"转译过程\",\"t\":[\"ReactJSX 转译过程\",\"React18 的 babel 转译 JSX 的实质为：\",\"执行 babel 转换，将 JSX 文件内函数的返回值转换为形似 {\\\"h1\\\", { children: []}}的 AST 语法树\",\"输出一个字符串，携带内容包括 \",\"import 导入 react/jsx-runtime 的转换方法jsx、jsxs\",\"传入 AST 语法树，调用转换方法jsxs\",\"默认对上述的代码块字符串内容执行 eval，最终输出虚拟 DOM 对象\",\"这里由于我们处在开发环境，所以代码块中import { jsx } from \\\"react/jsx-runtime\\\";实际上会变成import { jsxDEV } from \\\"react/jsx-dev-runtime\\\";\",\"在src/react文件夹下手写实现jsx-dev-runtime，实现 dev 环境下的 jsx 转换\",\"代码块中导入路径react/jsx-dev-runtime通过在vite.config.js中覆写resolve.alias配置来实现路径劫持\",\"JSX项目路径\",\"vite.config.js\",\"import { defineConfig } from \\\"vite\\\"; import react from \\\"@vitejs/plugin-react\\\"; import path from \\\"path\\\"; // https://vitejs.dev/config/ export default defineConfig({ plugins: [react()], resolve: { alias: { react: path.resolve(\\\"src/react\\\"), \\\"react-dom\\\": path.resolve(\\\"src/react-dom\\\"), \\\"react-reconciler\\\": path.resolve(\\\"src/react-reconciler\\\"), scheduler: path.resolve(\\\"src/scheduler\\\"), shared: path.resolve(\\\"src/shared\\\"), }, }, }); \",\"jsconfig.json\",\"{ \\\"compilerOptions\\\": { \\\"baseUrl\\\": \\\"./\\\", \\\"paths\\\": { \\\"react/*\\\": [\\\"src/react/*\\\"], \\\"react-dom/*\\\": [\\\"src/react-dom/*\\\"], \\\"react-reconciler/*\\\": [\\\"src/react-reconciler/*\\\"], \\\"scheduler/*\\\": [\\\"src/scheduler/*\\\"], \\\"shared/*\\\": [\\\"src/shared/*\\\"] } }, \\\"exclude\\\": [\\\"node_modules\\\", \\\"dist\\\"] } \"]},\"250\":{\"h\":\"源码\",\"t\":[\"手动实现 JSX-VDOM 的源码\",\"注意：模板字符串 JSX 转换为 AST 语法树的步骤已经交由 babel 自动执行，children 元素嵌套编译，此处仅为 VDOM 的输出方法代码\"]},\"251\":{\"h\":\"jsx-dev-runtime.js\",\"t\":[\"export { jsxDEV } from \\\"react/ReactJSXElement\\\"; \"]},\"252\":{\"h\":\"ReactJSXElement.js\",\"t\":[\"// 从react源码中获取工具方法和变量 import hasOwnProperty from \\\"shared/hasOwnProperty.js\\\"; import { REACT_ELEMENT_TYPE } from \\\"shared/ReactSymbols\\\"; const RESERVED_PROPS = { key: true, ref: true, __self: true, __source: true, }; function hasValidKey(config) { return config.key !== undefined; } function hasValidRef(config) { return config.ref !== undefined; } function ReactElement(type, key, ref, props) { return { // React元素，也称为虚拟DOM $$typeof: REACT_ELEMENT_TYPE, type, // h1 span key, // 唯一标识 ref, // 获取真实DOM props, // 属性：children,style,id等 }; } export function jsxDEV(type, config) { debugger; let propName; // 属性名 const props = {}; // 属性对象 let key = null; // 可选key，区分父节点下不同子节点 let ref = null; // 引入，可通过ref获取真实DOM的需求 if (hasValidKey(config)) { key = config.key; } if (hasValidRef(config)) { ref = config.ref; } for (propName in config) { if ( hasOwnProperty.call(config, propName) && !hasOwnProperty.call(RESERVED_PROPS, propName) ) { props[propName] = config[propName]; } } return ReactElement(type, key, ref, props); // 输出虚拟DOM } \"]},\"253\":{\"h\":\"main.jsx\",\"t\":[\"const element = ( <h1> hello<span style={{ color: \\\"red\\\" }}>world</span> </h1> ); console.log(element); \"]},\"254\":{\"h\":\"输出结果\",\"t\":[\"JSX输出结果\"]},\"255\":{\"h\":\"手写源码仓库\",\"t\":[\"https://github.com/mi-saka10032/mini-react/tree/master/packages/jsx\"]},\"256\":{\"h\":\"Fiber\"},\"257\":{\"h\":\"React 与 Vue 的区别\",\"t\":[\"首先，我们需要明确一点，就是 React 跟 Vue 存在一个很大差别的地方：\",\"Vue 的更新粒度是组件级别的，得益于响应式原理，Vue 能快速地识别出当前更新来源于哪个组件，并只针对于该组件以及受该组件 props 影响的子组件进行定向更新，所以更新速度相对较快\",\"React 没有响应式更新！！！是基于单向 state 数据流的自顶向下的全节点判断比较式更新，通过 diff 算法比较得出存在 state 或 props 变化的组件，默认对该组件及其子组件进行更新\",\"在 React 的 v16 版本之前，React 的 diff 更新策略为深度嵌套的虚拟 DOM 树，每次更新都会触发 diff 算法进行循环递归式节点判断，并且这个步骤是同步不可中断的，这就导致了当项目中的内容或节点数量极其庞大时，每次更新都会牵一发而动全身，引发用时较长的更新判断，非常影响用户体验\"]},\"258\":{\"h\":\"帧率与优化\"},\"259\":{\"h\":\"性能瓶颈\",\"t\":[\"再延续上面更新用时的话题，详细讨论一下 React16 之前存在的问题：JS 执行时间问题\",\"浏览器刷新频率为 60Hz，大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧卡顿，解决方案就是 React 利用空闲时间进行更新，不影响渲染进程渲染\",\"React 团队针对这个问题给出的解决方案就是：把一个耗时任务切分成一个个小任务，分布在每一帧里，也称为时间切片\"]},\"260\":{\"h\":\"屏幕刷新率\",\"t\":[\"目前大多数设备的屏幕刷新率为 60 次/秒\",\"浏览器渲染动画或页面的每一帧的速率也需要跟设备屏幕的刷新率保持一致\",\"页面是一帧一帧绘制出来的，当每秒绘制的帧数（FPS）达到 60 时，页面是流畅的。小于这个值时，用户会感觉到卡顿\",\"每个帧的预算时间是 16.66 毫秒（1 秒/60）\",\"1s60 帧，所以每一帧分到的时间就是 1000/60 ≈ 16ms，所以我们书写代码时力求不让一帧的工作量超过 16ms\"]},\"261\":{\"h\":\"帧\",\"t\":[\"每个帧的开头包括样式计算、布局和绘制\",\"JS 执行 JS 引擎和页面渲染引擎在同一个渲染线程，GUI 渲染和 JS 执行两者互斥\",\"如果某个任务执行时间过长，浏览器会推迟渲染\",\"帧执行过程\"]},\"262\":{\"h\":\"requestIdleCallback\",\"t\":[\"我们希望快速响应用户，让用户觉得够快，不能阻塞用户的交互\",\"requestIdleCallback 使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应\",\"正常帧任务完成后没超过 16ms，说明时间有富余，此时就会执行 requestIdleCallback 里注册的任务\",\"requestIdleCallback流程\",\"以下是一个实现了 requestIdleCallback 的 demo，可以打开控制台查看按钮点击后的结果\",\"注意：因为浏览器提供的 requestIdleCallback 这个 API 存在版本兼容性和一些稳定性问题，React 团队自行实现了 requestIdleCallback 的实际效果，在这里我们直接用这个 API 来实现源码效果\"]},\"263\":{\"h\":\"Fiber 架构\",\"t\":[\"从原有性能瓶颈出发，根据屏幕刷新率和 requestIdleCallback 的思路，在 React16 版本及以后，React 团队为我们带来了全新的 Fiber 架构\",\"Fiber：纤程，意为比线程更为纤细的执行单元\",\"我们可以通过某些调度策略合理分配 CPU 资源，从而提高用户的响应速度\",\"通过 Fiber 架构，让自己的调和过程变成可被中断，适时地让出 CPU 执行权，可以让浏览器及时地响应用户的交互\"]},\"264\":{\"h\":\"1.Fiber 是一个执行单元\",\"t\":[\"Fiber 是一个执行单元，每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去\",\"FiberUnit\"]},\"265\":{\"h\":\"2.Fiber 是一种数据结构\",\"t\":[\"React 目前的做法是使用链表，每个虚拟节点内部表示为一个 Fiber\",\"从顶点开始遍历\",\"如果有第一个儿子，先遍历第一个儿子\",\"如果没有第一个儿子，标志着此节点遍历完成\",\"如果有弟弟遍历弟弟\",\"如果没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔\",\"没有父节点则遍历结束\",\"FiberChain\"]},\"266\":{\"h\":\"3.树的遍历\",\"t\":[\"对于树形结构的遍历，有两种遍历方法：\",\"深度优先（DFS）\",\"深度优先搜索：Depth First Search\",\"其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次\",\"应用场景有：React 虚拟 DOM 的构建；React 的 Fiber 树构建\",\"广度优先（BFS）\",\"广度优先搜索：Breadth First Search\",\"算法首先搜索距离为 k 的所有顶点，然后再去搜索距离为 k+1 的其他顶点\"]},\"267\":{\"h\":\"4.递归构建 Fiber 树\",\"t\":[\"递归构建Fiber树\"]},\"268\":{\"h\":\"Fiber 源码\",\"t\":[\"实现以上 Fiber 结构逻辑的关键点在于虚拟 DOM 树向单向链表的转化，这个链表的数据类型就是 FiberNode\"]},\"269\":{\"h\":\"FiberRootNode\",\"t\":[\"createRoot\",\"// ReactDOMRoot.js import { createContainer } from \\\"react-reconciler/src/ReactFiberReconciler\\\"; function ReactDOMRoot(internalRoot) { this._internalRoot = internalRoot; } export function createRoot(container) { // div#root const root = createContainer(container); return new ReactDOMRoot(root); } \",\"createContainer\",\"// ReactFiberReconciler.js import { createFiberRoot } from \\\"./ReactFiberRoot\\\"; export function createContainer(containerInfo) { return createFiberRoot(containerInfo); } \",\"createFiberRoot\",\"// ReactFiberRoot.js function FiberRootNode(containerInfo) { this.containerInfo = containerInfo; } export function createFiberRoot(containerInfo) { const root = new FiberRootNode(containerInfo); return root; } \",\"创建结果：FiberRootNode。containerInfo 属性，本质就是真实 DOM 节点（div#root）\",\"FiberRootNode\",\"main.jsx\",\"import { createRoot } from \\\"react-dom/client\\\"; const element = ( <h1> hello<span style={{ color: \\\"red\\\" }}>world</span> </h1> ); const root = createRoot(document.getElementById(\\\"root\\\")); console.log(root); \",\"输出结果：\",\"FiberRootNode输出结果\"]},\"270\":{\"h\":\"FiberNode\",\"t\":[\"为 FiberRootNode.current 创建 FiberNode 节点，根节点的 FiberNode 也称为 HostRootFiber\",\"FiberNode 是真正与所有节点相关联的节点属性，包含大量属性值\",\"import { createHostRootFiber } from \\\"./ReactFiber\\\"; function FiberRootNode(containerInfo) { this.containerInfo = containerInfo; } export function createFiberRoot(containerInfo) { const root = new FiberRootNode(containerInfo); // HostRoot指的是根节点div#root const uninitializedFiber = createHostRootFiber(); // 根容器的current指向当前的根fiber root.current = uninitializedFiber; // 根fiber的stateNode，真实DOM节点指向FiberRootNode uninitializedFiber.stateNode = root; return root; } \",\"createHostRootFiber\",\"import { HostRoot } from \\\"./ReactWorkTags\\\"; import { NoFlags } from \\\"./ReactFiberFlags\\\"; /** * * @param tag fiber类型，函数组件0、类组件1、原生组件5、根元素3 * @param pendingProps 新属性，等待处理或者生效的属性 * @param key 唯一标识 * @constructor */ export function FiberNode(tag, pendingProps, key) { this.tag = tag; this.key = key; this.type = null; // fiber类型，来自于虚拟DOM节点的type span div a this.stateNode = null; // 对应真实的DOM节点 this.return = null; // 指向父节点 this.child = null; // 指向第一个子节点 this.sibling = null; // 指向弟节点 // 虚拟DOM提供pendingProps用于创建fiber节点的属性 this.pendingProps = pendingProps; // 等待生效的属性 this.memoizedProps = null; // 已经生效的属性 // 每个fiber会有自己的状态，每一种fiber状态存的类型不一样 // 类组件对应的fiber存的是类实例状态，HostRoot存的是待渲染元素 this.memoizedState = null; // 每个fiber身上可能还有更新队列 this.updateQueue = null; // 副作用的标识，表示要针对此Fiber节点进行何种操作 this.flags = NoFlags; // 子节点对应的副作用标识 this.subtreeFlags = NoFlags; // 轮替节点 this.alternate = null; // We use a double buffering pooling technique because we know that we'll // only ever need at most two versions of a tree. We pool the \\\"other\\\" unused // node that we're free to reuse. // This is lazily created to avoid allocating // extra objects for things that are never updated. It also allows us to // reclaim the extra memory if needed. } export function createFiber(tag, pendingProps, key) { return new FiberNode(tag, pendingProps, key); } export function createHostRootFiber() { return createFiber(HostRoot, null, null); } \",\"输出结果：\",\"FiberNode输出结果\",\"注意\",\"到此为止，仅仅是 div#root 创建了一个根节点处的 Fiber 节点\",\"正常来说，先有虚拟 DOM -> Fiber 节点 -> 真实 DOM\",\"根节点在一开始就已经存在了 div#root，所以对于根节点只需要创建 Fiber 节点即可\",\"current 是有特殊含义的，代表当前节点对应的 Fiber，在 render 阶段会根据组件树的结构来构建 Fiber 节点链\"]},\"271\":{\"h\":\"UpdateQueue\",\"t\":[\"创建完根 FiberNode 节点后，新建更新队列\",\"更新队列为单向循环链表，头尾相连\",\"注：更新队列采取单循环链表的原因，个人猜测应该是为了无需遍历更新队列，直接获取头部节点和尾部节点，并完成快速地新老更新队列拼接\",\"prototype.render && updateContainer\",\"import { createContainer, updateContainer, } from \\\"react-reconciler/src/ReactFiberReconciler\\\"; function ReactDOMRoot(internalRoot) { this._internalRoote = internalRoot; } ReactDOMRoot.prototype.render = function (children) { const root = this._internalRoote; updateContainer(children, root); }; export function createRoot(container) { // div#root const root = createContainer(container); return new ReactDOMRoot(root); } \",\"initialUpdateQueue\",\"import { createHostRootFiber } from \\\"./ReactFiber\\\"; import { initialUpdateQueue } from \\\"./ReactFiberClassUpdateQueue\\\"; function FiberRootNode(containerInfo) { this.containerInfo = containerInfo; } export function createFiberRoot(containerInfo) { const root = new FiberRootNode(containerInfo); // HostRoot指的是根节点div#root const uninitializedFiber = createHostRootFiber(); // 根容器的current指向当前的根fiber root.current = uninitializedFiber; // 根fiber的stateNode，真实DOM节点指向FiberRootNode uninitializedFiber.stateNode = root; initialUpdateQueue(uninitializedFiber); return root; } \",\"updateContainer\",\"import { createFiberRoot } from \\\"./ReactFiberRoot\\\"; import { createUpdate, enqueueUpdate } from \\\"./ReactFiberClassUpdateQueue\\\"; export function createContainer(containerInfo) { return createFiberRoot(containerInfo); } /** * 更新容易，把虚拟DOM Element变成真实DOM插入到container容器中 * @param element 虚拟DOM * @param container DOM容器 FiberRootNode containerInfo div#root */ export function updateContainer(element, container) { // 获取当前的根fiber const current = container.current; // 创建更新 const update = createUpdate(); // 要更新的虚拟DOM update.payload = { element }; // 添加至current根Fiber的更新队列 const root = enqueueUpdate(current, update); } \",\"Update\",\"import { markUpdateLaneFromFiberToRoot } from \\\"react-reconciler/src/ReactFiberConcurrentUpdate\\\"; export function initialUpdateQueue(fiber) { // 创建一个新的更新队列 const queue = { shared: { // pending是一个循环链表 pending: null, }, }; fiber.updateQueue = queue; } export function createUpdate() { const update = {}; return update; } export function enqueueUpdate(fiber, update) { const updateQueue = fiber.updateQueue; // 取出fiber上已有的老的更新链表pending const pending = updateQueue.shared.pending; if (pending === null) { // pending不存在则直接将新的更新链表挂载上去 update.next = update; } else { // pending存在，注意pending为循环链表 // 新链表update的尾部next指向老pending链表的头部（尾部的next即指向头部） update.next = pending.next; // 老pending链表尾部next指向新链表update的头部 pending.next = update; } // 最终结果：pending要指向最后一个更新，最后一个更新next指向第一个更新，构成单向循环链表 updateQueue.shared.pending = update; // 返回根节点 从当前的fiber到根节点（涉及到优先级队列，此处暂时不考虑优先级） return markUpdateLaneFromFiberToRoot(fiber); } \",\"markUpdateLaneFromFiberToRoot\",\"/** * 此文件本来还需要考虑处理优先级问题 * 现在只实现找到根节点的功能 */ import { HostRoot } from \\\"react-reconciler/src/ReactWorkTags\\\"; export function markUpdateLaneFromFiberToRoot(sourceFiber) { let node = sourceFiber; // 当前fiber let parent = sourceFiber.return; // 当前fiber的父fiber while (parent !== null) { node = parent; parent = parent.return; } // 一直找到parent为null：根节点Fiber(HostRootFiber) if (node.tag === HostRoot) { // 返回根节点的stateNode: FiberRootNode return node.stateNode; } return null; } \",\"main.jsx\",\"import { createRoot } from \\\"react-dom/client\\\"; const element = ( <h1> hello<span style={{ color: \\\"red\\\" }}>world</span> </h1> ); const root = createRoot(document.getElementById(\\\"root\\\")); // 把element虚拟DOM挂载到容器中 root.render(element); \",\"UpdateQueueResult\"]},\"272\":{\"h\":\"BeginWork\",\"t\":[\"建立好更新队列后，开始创建后台节点链表 WorkInProgress，同时启动 beginWork 任务扫描虚拟 DOM（递归的递阶段），beginWork 会在子节点没有 child 时结束\",\"首先派发更新计划\",\"import { createFiberRoot } from \\\"./ReactFiberRoot\\\"; import { createUpdate, enqueueUpdate } from \\\"./ReactFiberClassUpdateQueue\\\"; import { scheduleUpdateOnFiber } from \\\"./ReactFiberWorkLoop\\\"; export function createContainer(containerInfo) { return createFiberRoot(containerInfo); } /** * 更新容易，把虚拟DOM Element变成真实DOM插入到container容器中 * @param element 虚拟DOM * @param container DOM容器 FiberRootNode containerInfo div#root */ export function updateContainer(element, container) { // 获取当前的根fiber const current = container.current; // 创建更新 const update = createUpdate(); // 要更新的虚拟DOM update.payload = { element }; // 添加至current根Fiber的更新队列 const root = enqueueUpdate(current, update); // 派发更新计划 scheduleUpdateOnFiber(root); } \",\"第二步：首次渲染执行根节点同步渲染，做两件事：1、创建后台进程节点 workInProgress；2、调用浏览器 requestIdleCallback 开启闲时 Fiber 树重构\",\"第三步：开启浏览器空闲时间碎片化加载的功能之后，将会循环调用 performUnitOfWork（工作单元执行方法），碎片化地执行 beginWork 方法，当然了，beginWork 方法之中藏有结束循环的条件，那就是后台进程节点 workInProgress 为 null 的时候，没有剩余的工作单元，也就结束了整个 Fiber 树的构建\",\"import { scheduleCallback } from \\\"scheduler/index\\\"; import { createWorkInProgress } from \\\"./ReactFiber\\\"; import { beginWork } from \\\"./ReactFiberBeginWork\\\"; // import { completeWork } from './ReactFiberCompleteWork'; let workInProgress = null; /** * 计划更新root * 源码中此处有一个调度任务的功能 * @param {*}root */ export function scheduleUpdateOnFiber(root) { // 确保调度执行root上的更新 ensureRootIsScheduled(root); } function ensureRootIsScheduled(root) { // 告诉浏览器要执行performConcurrentWorkOnRoot函数，参数为root scheduleCallback(performConcurrentWorkOnRoot.bind(null, root)); } /** * 开始根据fiber构建fiber树，要创建真实的DOM节点，再把真实的DOM节点插入容器 * @param {*} root */ function performConcurrentWorkOnRoot(root) { // 第一次渲染以同步的方式渲染根节点，初次渲染的时候，都是同步执行 renderRootSync(root); } function prepareFreshStack(root) { workInProgress = createWorkInProgress(root.current, null); } function renderRootSync(root) { // 开始构建fiber树 // 双缓冲技术，页面显示区域为current映射，对应真实DOM，代表当前已经渲染完成的Fiber // 内存中的Fiber构建、比较、更新为workInProgress映射，表示还未生效，没有更新的DOM上的Fiber树 // 1. current的HostRootFiber在构建过程中不作变化 // 2. workInProgress在内存中顺序构建Fiber树 prepareFreshStack(root); workLoopSync(); } function workLoopSync() { while (workInProgress !== null) { performUnitOfWork(workInProgress); } } /** * 执行一个工作单元 * @param unitOfWork */ function performUnitOfWork(unitOfWork) { // 获取新fiber对应的老fiber，是页面上显示的current的fiber const current = unitOfWork.alternate; // 完成当前fiber的子fiber链表构建 const next = beginWork(current, unitOfWork); // 同步工作单元中的props unitOfWork.memoizedProps = unitOfWork.pendingProps; // 没有子节点，表示工作单元递归的 递 阶段已结束，需要return执行completeWork if (next === null) { workInProgress = null; // 没有子节点，表示当前fiber的beginWork已经完成，执行completeWork } else { workInProgress = next; } } \",\"createWorkInProgress 后台节点创建\",\"import { HostRoot } from \\\"./ReactWorkTags\\\"; import { NoFlags } from \\\"./ReactFiberFlags\\\"; /** * * @param tag fiber类型，函数组件0、类组件1、原生组件5、根元素3 * @param pendingProps 新属性，等待处理或者生效的属性 * @param key 唯一标识 * @constructor */ export function FiberNode(tag, pendingProps, key) { this.tag = tag; this.key = key; this.type = null; // fiber类型，来自于虚拟DOM节点的type span div a this.stateNode = null; // 对应真实的DOM节点 this.return = null; // 指向父节点 this.child = null; // 指向第一个子节点 this.sibling = null; // 指向弟节点 this.index = 0; // 索引初始为0 // 虚拟DOM提供pendingProps用于创建fiber节点的属性 this.pendingProps = pendingProps; // 等待生效的属性 this.memoizedProps = null; // 已经生效的属性 // 每个fiber会有自己的状态，每一种fiber状态存的类型不一样 // 类组件对应的fiber存的是类实例状态，HostRoot存的是待渲染元素 this.memoizedState = null; // 每个fiber身上可能还有更新队列 this.updateQueue = null; // 副作用的标识，表示要针对此Fiber节点进行何种操作 this.flags = NoFlags; // 子节点对应的副作用标识 this.subtreeFlags = NoFlags; // 轮替节点 this.alternate = null; // We use a double buffering pooling technique because we know that we'll // only ever need at most two versions of a tree. We pool the \\\"other\\\" unused // node that we're free to reuse. // This is lazily created to avoid allocating // extra objects for things that are never updated. It also allows us to // reclaim the extra memory if needed. } export function createFiber(tag, pendingProps, key) { return new FiberNode(tag, pendingProps, key); } export function createHostRootFiber() { return createFiber(HostRoot, null, null); } /** * 基于老fiber和新属性创建新的fiber * @param current 老fiber * @param pendingProps 新属性 */ export function createWorkInProgress(current, pendingProps) { let workInProgress = current.alternate; // 首次渲染时为null if (workInProgress === null) { workInProgress = createFiber(current.tag, pendingProps, current.key); workInProgress.type = current.type; workInProgress.stateNode = current.stateNode; // 双向指针 workInProgress.alternate = current; current.alternate = workInProgress; } else { workInProgress.pendingProps = pendingProps; workInProgress.type = current.type; // 副作用清空 workInProgress.flags = NoFlags; workInProgress.subtreeFlags = NoFlags; } workInProgress.child = current.child; workInProgress.sibling = current.sibling; workInProgress.index = current.index; workInProgress.memoizedProps = current.memoizedProps; workInProgress.memoizedState = current.memoizedState; workInProgress.updateQueue = current.updateQueue; return workInProgress; } \",\"闲时加载\",\"// 后面再考虑实现优先队列 export function scheduleCallback(callback) { // 告诉浏览器在空余时间调用回调 requestIdleCallback(callback); } \",\"然后是关键任务 beginWork，对虚拟 DOM 启动 tag 判断，不同类型的 tag 执行不同情况的 update 更新，对于当前的简单 JSX 模型，我们只判断 JSX 根组件(HostRoot--updateHostRoot)和原生标签组件(HostComponent--updateHostComponent)的情况执行更新\",\"import logger from \\\"shared/logger\\\"; import { HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; import { processUpdateQueue } from \\\"./ReactFiberClassUpdateQueue\\\"; import { mountChildFibers, reconcileChildFibers } from \\\"./ReactChildFiber\\\"; import { shouldSetTextContent } from \\\"react-dom/src/client/ReactDOMHostConfig\\\"; /** * 根据新的虚拟DOM生成新的Fiber链表 * @param current 老的父Fiber * @param workInProgress 新的父Fiber * @param nextChildren 新的子虚拟DOM */ function reconcileChildren(current, workInProgress, nextChildren) { if (current === null) { // 新fiber没有老fiber，说明为首次创建挂载 // 虚拟DOM首次创建时走这里 workInProgress.child = mountChildFibers(workInProgress, null, nextChildren); } else { // 有老Fiber，需要做DOM-DIFF，拿老的子fiber链表和新的子虚拟DOM进行最小量更新 // root节点首次创建时走这里 workInProgress.child = reconcileChildFibers( workInProgress, current.child, nextChildren ); } } function updateHostRoot(current, workInProgress) { // 需要知道的它的子虚拟DOM，知道它儿子的虚拟DOM信息 processUpdateQueue(workInProgress); // workInProgress.memoizedState = { element } const nextState = workInProgress.memoizedState; const nextChildren = nextState.element; // 协调子节点，diff算法 // 根据新的虚拟DOM生成子fiber链表 reconcileChildren(current, workInProgress, nextChildren); return workInProgress.child; } /** * 构建原生组件的子fiber链表 * @param current 老fiber * @param workInProgress 新fiber */ function updateHostComponent(current, workInProgress) { const { type, pendingProps: nextProps } = workInProgress; let nextChildren = nextProps.children; // 是否直接设置文本节点，如果是则直接启动优化，不再判断children const isDirectTextChildren = shouldSetTextContent(type, nextProps); if (isDirectTextChildren) { nextChildren = null; } reconcileChildren(current, workInProgress, nextChildren); return workInProgress.child; } /** * 目标是根据虚拟DOM构建新的fiber子链表 * @param current 老fiber * @param workInProgress 新fiber */ export function beginWork(current, workInProgress) { logger(\\\"beginWork\\\", workInProgress); debugger; switch (workInProgress.tag) { case HostRoot: return updateHostRoot(current, workInProgress); case HostComponent: return updateHostComponent(current, workInProgress); case HostText: return null; default: return null; } } \",\"export function shouldSetTextContent(type, props) { return ( typeof props.children === \\\"string\\\" || typeof props.children === \\\"number\\\" ); } \",\"对于 HostRoot，我们需要补充更新队列（考虑到下一次更新时原来的更新队列中任务可能还没执行完）\",\"这里单向循环链表正式发挥作用，我们可以迅速地找到首尾更新节点，然后剪开变成单向链表，遍历老的单向链表更新拼接到新更新队列中，生成最新状态（仅概念层面理论，首次渲染还是不会生效）\",\"import { markUpdateLaneFromFiberToRoot } from \\\"react-reconciler/src/ReactFiberConcurrentUpdate\\\"; import assign from \\\"shared/assign\\\"; export const UpdateState = 0; export function initialUpdateQueue(fiber) { // 创建一个新的更新队列 const queue = { shared: { // pending是一个循环链表 pending: null, }, }; fiber.updateQueue = queue; } export function createUpdate() { const update = { tag: UpdateState }; return update; } export function enqueueUpdate(fiber, update) { const updateQueue = fiber.updateQueue; // 取出fiber上已有的老的更新链表pending const pending = updateQueue.shared.pending; if (pending === null) { // pending不存在则直接将新的更新链表挂载上去 update.next = update; } else { // pending存在，注意pending为循环链表 // 新链表update的尾部next指向老pending链表的头部（尾部的next即指向头部） update.next = pending.next; // 老pending链表尾部next指向新链表update的头部 pending.next = update; } // 最终结果：pending要指向最后一个更新，最后一个更新next指向第一个更新，构成单向循环链表 updateQueue.shared.pending = update; // 返回根节点 从当前的fiber到根节点（涉及到优先级队列，此处暂时不考虑优先级） return markUpdateLaneFromFiberToRoot(fiber); } /** * 根据老状态和更新队列中的更新计算最新状态 * @param workInProgress 要计算的fiber */ export function processUpdateQueue(workInProgress) { const queue = workInProgress.updateQueue; const pendingQueue = queue.shared.pending; // 如果有更新，或者更新队列里有内容 if (pendingQueue !== null) { // 清除等待生效的更新 queue.shared.pending = null; // 拿到最后一个等待生效的更新 update = { payload: { element: 'h1' } } const lastPendingUpdate = pendingQueue; // 指向第一个更新 const firstPendingUpdate = lastPendingUpdate.next; // 剪开更新链表，变成单链表 lastPendingUpdate.next = null; // 获取老状态 null let newState = workInProgress.memoizedState; let update = firstPendingUpdate; while (update) { // 根据老状态和更新，计算新状态 newState = getStateFromUpdate(update, newState); update = update.next; } // 把最终计算到的状态赋值给memoizedState workInProgress.memoizedState = newState; } } /** * 根据老状态和更新计算新状态 * @param update 更新时的对象，含多种类型 * @param prevState */ function getStateFromUpdate(update, prevState) { switch (update.tag) { case UpdateState: const { payload } = update; return assign({}, prevState, payload); } } \",\"接下来是执行更新时调用 reconcileChildren 协调子节点的函数，这里需要判断 current 是否为 null 的情况，存在两种情况：\",\"新 fiber 没有老 fiber，虚拟 DOM 中的节点首次挂载时执行 mountChildFibers\",\"存在老 fiber 需要执行 DOM-DIFF，后续的虚拟 DOM 更新会从这里执行，root 节点首次创建后协调虚拟 DOM 的根节点时也会执行 reconcileChildFibers\",\"两种方法最终收束为同一个函数 createChildReconciler 的返回值，通过 shouldTracksSideEffects 副作用标识来区分\",\"在分辨出首次挂载或更新的情况后，开始创建子协调器 Fiber，目前暂时只判断虚拟 DOM 的$$typeof为原生组件类型(REACT_ELEMENT_TYPE)，或者组件存在 children 数组的虚拟 DOM 的情况\",\"完成了 reconcileChildFibers 创建完成子 Fiber 后，将子 Fiber 返回给当前后台节点 workInProgress 的 child，这里如果父 Fiber 只有一个子节点那么这个子节点就是 child，如果父 Fiber 下存在子节点数组（虚拟 DOM 的 props:children 数组），那么 children 中的第一个子节点会作为父 Fiber 的 child\",\"child 作为 beginWork 的返回值将结束 beginWork 的调用，这里我们称其为 next。当 next 不为空，也就是仍存在 child 的情况下，next 会继续指向给后台节点 workInProgress，继续向下查找节点 child（深度优先 DFS），直到不存在更深层次的 child，next 为 null，此时 workInProgress 设为 null，结束工作单元调用，beginWork 正式结束\",\"注意：此处更新的情况只考虑新节点插入(Placement)的情况\",\"/** * @param shouldTracksSideEffects 是否跟踪副作用 */ import { REACT_ELEMENT_TYPE } from \\\"shared/ReactSymbols\\\"; import { createFiberFromElement, createFiberFromText } from \\\"./ReactFiber\\\"; import { Placement } from \\\"react-reconciler/src/ReactFiberFlags\\\"; import isArray from \\\"shared/isArray\\\"; function createChildReconciler(shouldTracksSideEffects) { function reconcileSingleElement(returnFiber, currentFirstFiber, element) { // 初次挂载 currentFirstFiber为null，可以直接根据虚拟DOM创建新的Fiber节点 const created = createFiberFromElement(element); created.return = returnFiber; return created; } /** * 设置副作用 * @param newFiber * @param newIndex */ function placeSingleChild(newFiber, newIndex) { // 如果为true，说明要添加副作用 if (shouldTracksSideEffects) { // 副作用标识：插入DOM节点，在最后的提交阶段插入此节点 // React的渲染分渲染（创建Fiber树）和提交（更新真实DOM）两个阶段 newFiber.flags |= Placement; } return newFiber; } function placeChild(newFiber, newIndex) { newFiber.index = newIndex; if (shouldTracksSideEffects) { // 如果一个fiber的flags上有placement，说明此节点需要创建真实DOM，插入到父容器中 // 如果父fiber初次挂载，shouldTracksSideEffects为false，不需要添加flags // 这种情况下会在完成阶段把所有子阶段全部添加到自己身上 newFiber.flags |= Placement; } } function createChild(returnFiber, newChild) { if ( (typeof newChild === \\\"string\\\" && newChild !== \\\"\\\") || typeof newChild === \\\"number\\\" ) { // 创建虚拟DOM文本节点 const created = createFiberFromText(`${newChild}`); created.return = returnFiber; return created; } else if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { const created = createFiberFromElement(newChild); created.return = returnFiber; return created; } default: break; } } return null; } function reconcilerChildrenArray( returnFiber, currentFirstFiber, newChildren ) { let resultingFirstChild = null; // 返回的第一个新儿子 let previousNewFiber = null; // 之前的新fiber let newIndex = 0; // 遍历虚拟DOM根节点内的首层newChildren类型并生成不同fiber for (; newIndex < newChildren.length; newIndex++) { const newFiber = createChild(returnFiber, newChildren[newIndex]); if (newFiber === null) continue; // 把新fiber放到索引位置 placeChild(newFiber, newIndex); if (previousNewFiber === null) { // 这是第一个newFiber resultingFirstChild = newFiber; } else { // 不是第一个newFiber previousNewFiber.sibling = newFiber; } // 让newFiber成为上一个子Fiber previousNewFiber = newFiber; } return resultingFirstChild; } /** * 比较协调子fibers DOM-DIFF：用老的子fiber链表和新的虚拟DOM进行比较的过程 * @param returnFiber 新的父fiber * @param currentFirstFiber current一般来说指老fiber的第一个子fiber * @param newChild 新的子虚拟DOM */ function reconcileChildFibers(returnFiber, currentFirstFiber, newChild) { // 现在暂时只考虑新节点只有一个的情况 if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: return placeSingleChild( reconcileSingleElement(returnFiber, currentFirstFiber, newChild) ); default: break; } } // newChild [文本节点， span虚拟元素] if (isArray(newChild)) { return reconcilerChildrenArray(returnFiber, currentFirstFiber, newChild); } return null; } return reconcileChildFibers; } // 虚拟DOM初次挂载 export const mountChildFibers = createChildReconciler(false); //老fiber更新 export const reconcileChildFibers = createChildReconciler(true); /** * 根据虚拟DOM，创建Fiber节点 * @param element */ export function createFiberFromElement(element) { const { type, key, props: pendingProps } = element; return createFiberFromTypeAndProps(type, key, pendingProps); } function createFiberFromTypeAndProps(type, key, pendingProps) { let tag = IndeterminateComponent; if (typeof type === \\\"string\\\") { // type为字符串，说明是原生组件，div p span tag = HostComponent; } const fiber = createFiber(tag, pendingProps, key); fiber.type = type; return fiber; } export function createFiberFromText(content) { return createFiber(HostText, content, null); } \",\"关于 logger\",\"为了能清楚看到 beginWork 的调用顺序，我们在 beginWork 方法开始的时候加入了 logger 打印日志方法，以便我们能看到 workInProgress 深度遍历的子节点情况\",\"import * as ReactWorkTags from \\\"react-reconciler/src/ReactWorkTags\\\"; const ReactWorkTagsMap = new Map(); for (const tag in ReactWorkTags) { ReactWorkTagsMap.set(ReactWorkTags[tag], tag); } export default function (prefix, workInProgress) { let tagValue = workInProgress.tag; let tagName = ReactWorkTagsMap.get(tagValue); let str = ` ${tagName} `; if (tagName === \\\"HostComponent\\\") { str += ` ${workInProgress.type} `; } else if (tagName === \\\"HostText\\\") { str += ` ${workInProgress.pendingProps} `; } console.log(`${prefix} ${str}`); } \",\"main.jsx\",\"import { createRoot } from \\\"react-dom/client\\\"; const element = ( <h1> hello<span style={{ color: \\\"red\\\" }}>world</span> </h1> ); const root = createRoot(document.getElementById(\\\"root\\\")); // 把element虚拟DOM挂载到容器中 root.render(element); \",\"beginWork 输出结果，注意结合递归创建 Fiber 树查看，整个 beginWork 的循环 会在最后一个 child，也就是文本节点 hello 这个地方结束\",\"beginWorkResult\"]},\"273\":{\"h\":\"CompleteWork\",\"t\":[\"completeWork 的任务执行时间节点发生在 beginWork 的返回值为 null 的时候\",\"在这之前我们已经了解到，beginWork 执行的是深度优先的子 Fiber 查找策略，在未能获取到下一级子 Fiber 时，beginWork 结束返回 null，执行 complete 任务更新 DOM（递归的归阶段）\",\"此处暂时只考虑虚拟 DOM 的挂载添加操作，其余 DOM 的更新、移动、删除等操作暂不实现，因此也不存在更新副作用\",\"首先在工作单元函数中更新 completeUnitOfWork\",\"/** * 执行一个工作单元 * @param unitOfWork */ function performUnitOfWork(unitOfWork) { // 获取新fiber对应的老fiber，是页面上显示的current的fiber const current = unitOfWork.alternate; // 完成当前fiber的子fiber链表构建 const next = beginWork(current, unitOfWork); // 同步工作单元中的props unitOfWork.memoizedProps = unitOfWork.pendingProps; // 没有子节点，表示工作单元递归的 递 阶段已结束，需要return执行completeWork if (next === null) { // 没有子节点，表示当前fiber的beginWork已经完成，执行completeWork completeUnitOfWork(unitOfWork); } else { workInProgress = next; } } function completeUnitOfWork(unitOfWork) { let completedWork = unitOfWork; do { // 替代fiber const current = completedWork.alternate; // 父fiber const returnFiber = completedWork.return; // 执行此fiber的完成工作 // 如果是原生组件，就是创建真实DOM节点 completeWork(current, completedWork); // 如果有弟弟，构建弟弟对应的fiber子链表 const siblingFiber = completedWork.sibling; if (siblingFiber !== null) { // 如果存在兄弟节点，则workInProgress赋值兄弟节点，循环退出，等待下一次工作单元执行beginWork workInProgress = siblingFiber; return; } // 如果没有弟弟，说明这当前完成的就是父fiber的最后一个节点 // 也就是说一个父fiber，所有的子fiber全部完成了 completedWork = returnFiber; workInProgress = completedWork; // 执行递归的 归阶段，当兄弟节点为空的时候执行while循环往上返回，直到根fiber时退出循环 } while (completedWork !== null); } \",\"然后是关键任务 completeWork，同样也是 tag 判断，对不同类型的 tag 对应的不同组件执行不同情况的 update 更新，这里暂时只实现 create 新建挂载操作\",\"在 completeWork 中，会对虚拟 DOM 执行真实 DOM 的创建与 append 操作，并且最后会有一个向上冒泡的方法 bubbleProperties，旨在将子节点的更新副作用不断向上传递汇聚\",\"import logger, { indent } from \\\"shared/logger\\\"; import { HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; import { createInstance, createTextInstance, appendInitialChild, finalizeInitialChildren, } from \\\"react-dom/src/client/ReactDOMHostConfig\\\"; import { NoFlags } from \\\"react-reconciler/src/ReactFiberFlags\\\"; /** * 把当前完成的fiber所有子节点对应真实DOM都挂在到父parent真实DOM节点上 * @param parent 当前完成的fiber真实DOM节点 * @param workInProgress 完成的fiber */ function appendAllChildren(parent, workInProgress) { let node = workInProgress.child; while (node) { if (node.tag === HostComponent || node.tag === HostText) { // 如果子节点是原生节点或文本节点 appendInitialChild(parent, node.stateNode); } else if (node.child !== null) { // 如果第一个儿子不是原生节点，说明它可能是一个函数组件节点 node = node.child; continue; } // 如果当前的节点没有弟弟 while (node.sibling === null) { if (node.return === null || node.return === workInProgress) { return; } // 回到父节点 node = node.return; } node = node.sibling; } } /** * 完成一个fiber节点 * @param current 老fiber * @param workInProgress 新的构建fiber */ export function completeWork(current, workInProgress) { logger(\\\" \\\".repeat(indent.number) + \\\"completeWork\\\", workInProgress); indent.number -= 2; const newProps = workInProgress.pendingProps; switch (workInProgress.tag) { case HostRoot: bubbleProperties(workInProgress); break; case HostComponent: // 暂时只处理初次创建或挂载的新节点逻辑 // 创建真实的DOM节点 const { type } = workInProgress; const instance = createInstance(type, newProps, workInProgress); // 把自己所有的儿子都添加到自己身上 appendAllChildren(instance, workInProgress); workInProgress.stateNode = instance; finalizeInitialChildren(instance, type, newProps); bubbleProperties(workInProgress); break; case HostText: // 文本节点的props就是文本内容，直接创建真实的文本节点 const newText = newProps; // 创建真实的DOM节点，并传入stateNode workInProgress.stateNode = createTextInstance(newText); // 向上冒泡属性 bubbleProperties(workInProgress); break; } } /** * 属性冒泡，旨在向上收集子孙节点的更新副作用，当子节点不存在副作用时说明无需更新，便于diff优化 * @param completedWork */ function bubbleProperties(completedWork) { let subtreeFlags = NoFlags; let child = completedWork.child; // 遍历当前fiber的所有子节点，把所有子节点的副作用及子节点的子节点副作用合并收集起来 while (child !== null) { subtreeFlags |= child.subtreeFlags; subtreeFlags |= child.flags; child = child.sibling; } // 收集子节点的副作用，注意flags才是节点自己的副作用 completedWork.subtreeFlags = subtreeFlags; } \",\"下面是初始化 DOM 实例和设置 prop 的方法\",\"import { setInitialProperties } from \\\"react-dom/src/client/ReactDOMComponent\\\"; export function shouldSetTextContent(type, props) { return ( typeof props.children === \\\"string\\\" || typeof props.children === \\\"number\\\" ); } export function createTextInstance(newText) { return document.createTextNode(newText); } export function createInstance(type, newProps, workInProgress) { const domElement = document.createElement(type); // 属性的添加TODO updateFiberProps(domElement, props); return domElement; } export function appendInitialChild(parent, child) { parent.appendChild(child); } export function finalizeInitialChildren(domElement, type, props, hostContext) { setInitialProperties(domElement, type, props); } \",\"import { setValueForStyles } from \\\"react-dom/src/client/CSSPropertyOperations\\\"; import setTextContent from \\\"react-dom/src/client/setTextContent\\\"; import { setValueForProperty } from \\\"react-dom/src/client/DOMPropertyOperations\\\"; const STYLE = \\\"style\\\"; const CHILDREN = \\\"children\\\"; function setInitialDOMProperties(tag, domElement, nextProps) { for (const propKey in nextProps) { if (nextProps.hasOwnProperty(propKey)) { const nextProp = nextProps[propKey]; if (propKey === STYLE) { setValueForStyles(domElement, nextProp); } else if (propKey === CHILDREN) { if (typeof nextProp === \\\"string\\\") { setTextContent(domElement, nextProp); } else if (typeof nextProp === \\\"number\\\") { setTextContent(domElement, nextProp + \\\"\\\"); } } else if (nextProp !== null) { setValueForProperty(domElement, propKey, nextProp); } } } } export function setInitialProperties(domElement, tag, props) { setInitialDOMProperties(tag, domElement, props); } \",\"completeWork 输出结果，除了完整的 child 和 sibling 关系之外，注意每个 Fiber 的 stateNode 均已完成 DOM 元素挂载（原生元素节点、文本节点）\",\"completeWorkResult\"]},\"274\":{\"h\":\"CommitWork\",\"t\":[\"完成 BeginWork 和 CompleteWork 之后，Work 工作进入提交阶段 CommitWork，执行 DOM 节点的更新（增删改等操作）\",\"按照之前的工作单元渲染顺序，等到根节点渲染（renderRootSync）完成后，正式进入提交阶段\",\"/** * 开始根据fiber构建fiber树，要创建真实的DOM节点，再把真实的DOM节点插入容器 * @param {*} root */ function performConcurrentWorkOnRoot(root) { // 第一次渲染以同步的方式渲染根节点，初次渲染的时候，都是同步执行 renderRootSync(root); // 开始进入提交阶段，就是执行副作用，修改真实DOM const finishedWork = root.current.alternate; root.finishedWork = finishedWork; commitRoot(root); } function commitRoot(root) { const { finishedWork } = root; const subtreeHasEffects = (finishedWork.subtreeFlags && MutationMask) !== NoFlags; const rootHasEffect = (finishedWork.flags && MutationMask) !== NoFlags; if (subtreeHasEffects || rootHasEffect) { commitMutationEffectsOnFiber(finishedWork, root); } // 等DOM变更后，就可以把root的current指向新Fiber树 root.current = finishedWork; } \",\"提交阶段分两步，第一步为 mutation，意为向上提交子节点的副作用；第二步才是真正的处理 DOM 操作\",\"/** * 遍历Fiber树，执行fiber上的副作用 * @param finishedWork fiberJ节点 * @param root 根节点 */ export function commitMutationEffectsOnFiber(finishedWork, root) { switch (finishedWork.tag) { case HostRoot: case HostComponent: case HostText: // 遍历子节点，处理子节点上的副作用 recursivelyTraverseMutationEffects(root, finishedWork); // 再处理自己身上的副作用 commitReconciliationEffects(finishedWork); break; default: break; } } function recursivelyTraverseMutationEffects(root, parentFiber) { if (parentFiber.subtreeFlags & MutationMask) { let { child } = parentFiber; while (child !== null) { commitMutationEffectsOnFiber(child, root); child = child.sibling; } } } function commitReconciliationEffects(finishedWork) { const { flags } = finishedWork; if (flags && Placement) { // 进行插入操作，也就是把此fiber对应的真实DOM节点添加到父真实DOM上 commitPlacement(finishedWork); // 把flags里的Placement删除 finishedWork.flags &= ~Placement; } } \",\"commitPlacement：节点新增处理阶段，根据 tag 类型区别执行不同的插入操作，但总体分为两步：\",\"获取最近的真实 DOM 节点：这一步发生在 getHostSibling 函数里，意为剥离 Class 节点或 Function 节点，获取到真正的原生节点或文本节点，如果当前 Fiber 的 sibling 中没有，就向上 return 查找，再查找 return 父节点的 sibling 或 child，寻找非空原生或文本节点\",\"对于根节点 root 而言，首次挂载执行一个整体 DOM 的 append 即可（通过 isHost 判断）；非 root 节点遍历 child 和 sibling 执行 append。这一步发生在 insertOrAppendPlacementNode 函数里\",\"function isHostParent(fiber) { return fiber.tag === HostComponent || fiber.tag === HostRoot; //只有根fiber或根组件节点才能作为父fiber } function getHostParentFiber(fiber) { let parent = fiber.return; while (parent !== null) { if (isHostParent(parent)) { return parent; } parent = parent.return; } } /** * 把此fiber的真实DOM插入到父DOM里 * @param finishedWork */ function commitPlacement(finishedWork) { const parentFiber = getHostParentFiber(finishedWork); switch (parentFiber.tag) { case HostRoot: { const parent = parentFiber.stateNode.containerInfo; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } case HostComponent: { const parent = parentFiber.stateNode; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } } } /** * 找到要插入的锚点 * 找到可以插在它前面的那个fiber对应的真实DOM * @param fiber */ function getHostSibling(fiber) { let node = fiber; siblings: while (true) { while (node.sibling === null) { if (node.return === null || isHostParent(node.return)) { return null; } node = node.return; } node = node.sibling; // 如果弟弟不是原生节点or文本节点，不是要插入的节点，需要寻找弟弟或儿子 while (node.tag !== HostComponent || node.tag !== HostText) { // 如果此节点是一个将要插入的新节点，找它的弟弟，否则找儿子 if (node.flags && Placement) { continue siblings; } else { node = node.child; } } if (!(node.flags && Placement)) { return node.stateNode; } } } /** * 把子节点对应的真实DOM插入到父节点DOM中 * @param node 将要插入的fiber节点 * @param before 待insertBefore的DOM节点 * @param parent 父真实DOM节点 */ function insertOrAppendPlacementNode(node, before, parent) { const { tag } = node; // 判断此fiber对应的节点是不是真实DOM节点 const isHost = tag === HostComponent || tag === HostText; if (isHost) { // 如果是的话就直接插入 const { stateNode } = node; if (before) { insertBefore(parent, stateNode, before); } else { appendChild(parent, stateNode); } } else { // 如果node不是真实DOM节点，获取它的child const { child } = node; if (child !== null) { insertOrAppendPlacementNode(child, before, parent); let { sibling } = child; while (sibling !== null) { insertOrAppendPlacementNode(sibling, before, parent); sibling = sibling.sibling; } } } } \",\"至此，JSX 到 Fiber 到真实 DOM 的转化正式完成\",\"commitWork-result\"]},\"275\":{\"h\":\"手写源码仓库\",\"t\":[\"https://github.com/mi-saka10032/mini-react/tree/master/packages/fiber\"]},\"276\":{\"h\":\"事件系统\"},\"277\":{\"h\":\"原理简述\",\"t\":[\"React 提供了有别于原生 DOM 事件系统(onclick)的完整的可插入式合成事件系统(onClick)，其原理是将全部的派发事件全部代理到根节点，然后遵循事件捕获和事件冒泡的顺序执行合成事件\",\"首先将 React 所定义的全部 DOM 事件名称转化为合成事件名称，这一步称为事件注册\",\"根节点 Fiber 初始化完成(createContainer)之后，对根节点 DOM 开启已注册事件的代理监听。这一步会将之前已注册的合成事件名进行原生事件名转化，向根节点 DOM 添加事件监听器\",\"每个原生事件注册的监听函数以事件派发(dispatchEvent)的形式触发，会自底向上地推入回调函数队列，按照事件捕获 => 事件冒泡的顺序触发这一系列合成事件\",\"下面将分阶段介绍事件系统的实现\"]},\"278\":{\"h\":\"事件注册\",\"t\":[\"事件注册阶段，将事件名 Set 中全部需注册的原生事件遍历一遍，并结合对应的 React 事件名生成映射关系 Map，最终将注册事件名称添加到 allNativeEvents 的 Set 中\"]},\"279\":{\"h\":\"DOMPluginEventSystem.js\",\"t\":[\"import * as SimpleEventPlugin from \\\"./plugins/SimpleEventPlugin\\\"; SimpleEventPlugin.registerEvents(); \"]},\"280\":{\"h\":\"SimpleEventPlugin.js\",\"t\":[\"import { registerSimpleEvents } from \\\"../DOMEventProperties\\\"; export { registerSimpleEvents as registerEvents }; \"]},\"281\":{\"h\":\"DOMEventProperties.js\",\"t\":[\"import { registerTwoPhaseEvent } from \\\"react-dom/src/events/EventRegistry\\\"; // 只注册click事件，其他需要注册的事件往里面添加就可以 const simpleEventPluginEvents = [\\\"click\\\"]; // 存储原生事件名和React事件名的映射关系 export const topLevelEventsTOReactNames = new Map(); function registerSimpleEvent(domEventName, reactName) { // 把原生事件名和处理函数的名字进行映射或绑定，click => onClick topLevelEventsTOReactNames.set(domEventName, reactName); registerTwoPhaseEvent(reactName, [domEventName]); } export function registerSimpleEvents() { for (let i = 0; i < simpleEventPluginEvents.length; i++) { const eventName = simpleEventPluginEvents[i]; // click const domEventName = eventName.toLowerCase(); // click const capitalizeEvent = eventName[0].toUpperCase() + eventName.slice(1); // Click registerSimpleEvent(domEventName, `on${capitalizeEvent}`); // click onClick } } \"]},\"282\":{\"h\":\"EventRegistry.js\",\"t\":[\"export const allNativeEvents = new Set(); /** * 注册两个阶段的事件名 * 当页面中触发事件的时候，会走事件处理函数 * 事件处理函数需要找到DOM元素对应要执行的React事件，onClick、onClickCapture等 * @param registrationName React事件名 * @param dependencies 原生事件数组[click] */ export function registerTwoPhaseEvent(registrationName, dependencies) { // 注册冒泡事件关系 registerDirectEvent(registrationName, dependencies); // 注册捕获事件关系 registerDirectEvent(registrationName + \\\"Capture\\\", dependencies); } export function registerDirectEvent(registrationName, dependencies) { for (let i = 0; i < dependencies.length; i++) { allNativeEvents.add(dependencies[i]); // click } } \"]},\"283\":{\"h\":\"事件监听\",\"t\":[\"createRoot 阶段，创建完根节点 Fiber 后，遍历allNativeEvents，开启对所有已注册事件的监听\",\"注意监听器只针对根容器，且只会监听一次不会重复监听\"]},\"284\":{\"h\":\"ReactDOMRoot.js\",\"t\":[\"export function createRoot(container) { // div#root const root = createContainer(container); listenToAllSupportedEvents(container); return new ReactDOMRoot(root); } \"]},\"285\":{\"h\":\"EventSystemFlags.js\",\"t\":[\"export const IS_CAPTURE_PHASE = 1 << 2; // 0b0100 \"]},\"286\":{\"h\":\"DOMPluginEventSystem.js\",\"t\":[\"import { allNativeEvents } from \\\"./EventRegistry\\\"; import { IS_CAPTURE_PHASE } from \\\"./EventSystemFlags\\\"; const listeningMarker = `_reactListening` + Math.random().toString(36).slice(2); export function listenToAllSupportedEvents(rootContainerElement) { // 监听根容器div#root，只监听执行一次 if (!rootContainerElement[listeningMarker]) { rootContainerElement[listeningMarker] = true; allNativeEvents.forEach((domEventName) => { listenToNativeEvent(domEventName, true, rootContainerElement); listenToNativeEvent(domEventName, false, rootContainerElement); }); } } /** * 注册原生事件 * @param domEventName 原生事件 * @param isCapturePhaseListener 是否是捕获节点 * @param target 目标DOM节点 div#root 容器节点 */ export function listenToNativeEvent( domEventName, isCapturePhaseListener, target ) { let eventSystemFlags = 0; // 默认是0，冒泡 4是捕获 if (isCapturePhaseListener) { eventSystemFlags |= IS_CAPTURE_PHASE; } addTrappedEventListener( target, domEventName, eventSystemFlags, isCapturePhaseListener ); } function addTrappedEventListener( targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener ) { // 创建基于优先级的监听函数回调 const listener = createEventListenerWrapperWithPriority( targetContainer, domEventName, eventSystemFlags ); if (isCapturePhaseListener) { addEventCaptureListener(targetContainer, domEventName, listener); } else { addEventBubbleListener(targetContainer, domEventName, listener); } } // EventListener.js export function addEventCaptureListener(target, eventType, listener) { target.addEventListener(eventType, listener, true); return listener; } export function addEventBubbleListener(target, eventType, listener) { target.addEventListener(eventType, listener, false); return listener; } \"]},\"287\":{\"h\":\"事件派发\",\"t\":[\"上面的事件监听，对监听函数 listener 实例函数进行了特殊处理，使得每个监听回调函数能自动执行事件派发功能，这里用到的关键函数就是createEventListenerWrapperWithPriority\",\"注意事件派发中事件捕获和冒泡累加回调函数的关键函数是 accumulateSinglePhaseListeners，通过不断执行 Fiber 的 return 循环，判断符合条件的 React 事件，将回调推入 listeners 回调数组，并加入到执行队列 dispatchQueue 中\"]},\"288\":{\"h\":\"ReactDOMEventListener.js\",\"t\":[\"import { getEventTarget } from \\\"./getEventTarget\\\"; import { getClosestInstanceFromNode } from \\\"../client/ReactDOMComponentTree\\\"; import { dispatchEventForPluginEventSystem } from \\\"./DOMPluginEventSystem\\\"; export function createEventListenerWrapperWithPriority( targetContainer, domEventName, eventSystemFlags ) { const listenerWrapper = dispatchDiscreteEvent; return listenerWrapper.bind( null, domEventName, eventSystemFlags, targetContainer ); } /** * 派发离散事件的监听函数 * @param domEventName 事件名 * @param eventSystemFlags 阶段 0冒泡 4捕获 * @param container 容器div#root * @param nativeEvent 原生事件 */ function dispatchDiscreteEvent( domEventName, eventSystemFlags, container, nativeEvent ) { dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent); } /** * 此方法就是委托给容器的回调，当容器#root在捕获或者说冒泡阶段处理事件的时候执行此函数 * @param domEventName * @param eventSystemFlags * @param targetContainer * @param nativeEvent */ export function dispatchEvent( domEventName, eventSystemFlags, targetContainer, nativeEvent ) { // 获取事件源，它应该是一个真实DOM const nativeEventTarget = getEventTarget(nativeEvent); const targetInst = getClosestInstanceFromNode(nativeEventTarget); dispatchEventForPluginEventSystem( domEventName, // click eventSystemFlags, // 0 4 nativeEvent, // 原生事件 targetInst, // 此真实DOM对应的fiber targetContainer // 目标容器 ); } // getEventTarget.js export function getEventTarget(nativeEvent) { const target = nativeEvent.target || nativeEvent.srcElement || window; return target; } \"]},\"289\":{\"h\":\"ReactDOMComponentTree.js\",\"t\":[\"const randomKey = Math.random().toString(36).slice(2); const internalInstanceKey = \\\"__reactFiber$\\\" + randomKey; const internalPropsKey = \\\"__reactProps$\\\" + randomKey; /** * 从真实的DOM节点上获取它对应的Fiber节点 * @param targetNode */ export function getClosestInstanceFromNode(targetNode) { const targetInst = targetNode[internalInstanceKey]; return targetInst; } /** * 提前缓存Fiber节点的实例到DOM节点上 * @param hostInst fiber实例 * @param node 真实DOM */ export function precacheFiberNode(hostInst, node) { node[internalInstanceKey] = hostInst; } export function updateFiberProps(node, props) { node[internalPropsKey] = props; } export function getFiberCurrentPropsFromNode(node) { return node[internalPropsKey] || null; } \"]},\"290\":{\"h\":\"DOMPluginEventSystem.js\",\"t\":[\"再次回到 DOMPluginEventSystem，派发事件函数还是在这里进行声明\",\"export function dispatchEventForPluginEventSystem( domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer ) { dispatchEventForPlugins( domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer ); } function dispatchEventForPlugins( domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer ) { const nativeEventTarget = getEventTarget(nativeEvent); // 派发事件的数组 const dispatchQueue = []; extractEvents( dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer ); } function extractEvents( dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer ) { SimpleEventPlugin.extractEvents( dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer ); } export function accumulateSinglePhaseListeners( targetFiber, reactName, nativeEventType, isCapturePhase ) { const captureName = reactName + \\\"Capture\\\"; const reactEventName = isCapturePhase ? captureName : reactName; const listeners = []; let instance = targetFiber; while (instance !== null) { const { stateNode, tag } = instance; if (tag === HostComponent && stateNode !== null) { const listener = getListener(instance, reactEventName); if (listener) { listeners.push(createDispatchListener(instance, listener, stateNode)); } } instance = instance.return; } return listeners; } function createDispatchListener(instance, listener, currentTarget) { return { instance, listener, currentTarget }; } \"]},\"291\":{\"h\":\"getListener.js\",\"t\":[\"import { getFiberCurrentPropsFromNode } from \\\"react-dom/src/client/ReactDOMComponentTree\\\"; /** * 获取此fiber上对应的回调函数 * @param inst * @param registrationName */ export default function getListener(inst, registrationName) { const { stateNode } = inst; if (stateNode === null) { return null; } const props = getFiberCurrentPropsFromNode(stateNode); if (props === null) { return null; } const listener = props[registrationName]; // props.onClick return listener; } \"]},\"292\":{\"h\":\"SimpleEventPlugin.js\",\"t\":[\"import { registerSimpleEvents, topLevelEventsTOReactNames, } from \\\"../DOMEventProperties\\\"; import { IS_CAPTURE_PHASE } from \\\"react-dom/src/events/EventSystemFlags\\\"; import { SyntheticMouseEvent } from \\\"../SyntheticEvent\\\"; /** * 把要执行的回调函数添加到派发队列中 * @param dispatchQueue 派发队列，里面放置监听函数 * @param domEventName DOM事件名，click * @param targetInst 目标fiber * @param nativeEvent 原生事件 * @param nativeEventTarget 原生事件源 * @param eventSystemFlags 事件系统标识 0冒泡 4捕获 * @param targetContainer 目标容器 div#root */ function extractEvents( dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, // click => onClick eventSystemFlags, targetContainer ) { const reactName = topLevelEventsTOReactNames.get(domEventName); // click => onClick let SyntheticEventCtor; // 合成事件的构造函数 switch (domEventName) { case \\\"click\\\": SyntheticEventCtor = SyntheticMouseEvent; break; default: break; } // 检查是否捕获阶段 const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0; // 是否是捕获阶段 // 累加单个阶段的监听 const listeners = accumulateSinglePhaseListeners( targetInst, reactName, nativeEvent.type, inCapturePhase ); // 如果有要执行的监听函数[onClickCapture, onClickCapture] = [ChildCapture, ParentCapture] if (listeners.length > 0) { const event = new SyntheticEventCtor( reactName, domEventName, null, nativeEvent, nativeEventTarget ); dispatchQueue.push({ event, // 合成事件实例 listeners, // 监听函数数组 }); } } export { registerSimpleEvents as registerEvents, extractEvents }; \"]},\"293\":{\"h\":\"SyntheticEvent.js\",\"t\":[\"这个方法的主要作用是融合 React 事件的 Event 和原生事件的 Event\",\"import hasOwnProperty from \\\"shared/hasOwnProperty\\\"; import assign from \\\"shared/assign\\\"; function functionThatReturnsTrue() { return true; } function functionThatReturnsFalse() { return false; } const MouseEventInterface = { clientX: 0, clientY: 0, }; function createSyntheticEvent(inter) { /** * 合成事件的基类 * @param reactName react的属性名 onClick * @param reactEventType react时间类型 click * @param targetInst 事件源对应的fiber实例 * @param nativeEvent 原生事件对象 * @param nativeEventTarget 原生事件源 真实DOM * @constructor */ function SyntheticBaseEvent( reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget ) { this._reactName = reactName; this.type = reactEventType; this._targetInst = targetInst; this.nativeEvent = nativeEvent; this.target = nativeEventTarget; // 把此接口上对应的属性从原生事件上拷贝到合成事件实例上 for (const propName in inter) { if (!hasOwnProperty.call(inter, propName)) { continue; } this[propName] = nativeEvent[propName]; } // 是否已阻止默认事件 this.isDefaultPrevented = functionThatReturnsFalse; // 是否已阻止继续传播 this.isPropagationStopped = functionThatReturnsFalse; return this; } assign(SyntheticBaseEvent.prototype, { preventDefault() { const event = this.nativeEvent; if (event.preventDefault) { event.preventDefault(); } else { event.returnValue = false; } this.isDefaultPrevented = functionThatReturnsTrue; }, stopPropagation() { const event = this.nativeEvent; if (event.stopPropagation) { event.stopPropagation(); } else { event.cancelBubble = true; } this.isPropagationStopped = functionThatReturnsTrue; }, }); return SyntheticBaseEvent; } export const SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface); \"]},\"294\":{\"h\":\"事件处理\",\"t\":[\"在回调函数执行完成 extractEvents 之后，实际上 dispatchQueue 就已经成功储存到所有基于事件捕获和事件冒泡的两套回调函数的数组了，接下来需要根据捕获顺序和冒泡顺序处理派发事件 processDispatchQueue\"]},\"295\":{\"h\":\"DOMPluginEventSystem.js\",\"t\":[\"function dispatchEventForPlugins( domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer ) { const nativeEventTarget = getEventTarget(nativeEvent); // 派发事件的数组 const dispatchQueue = []; extractEvents( dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer ); // processDispatchQueue 处理派发事件 processDispatchQueue(dispatchQueue, eventSystemFlags); } function processDispatchQueue(dispatchQueue, eventSystemFlags) { // 判断是否捕获阶段 const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0; // 循环派发队列 for (let i = 0; i <= dispatchQueue.length - 1; i++) { const { event, listeners } = dispatchQueue[i]; processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); } } /** * 合成事件的实例currentTarget是在不断变化的 * event nativeEventTarget指的是原始事件源，永远不变 * event currentTarget 当前的事件源，会随着事件回调执行不断变化 * @param listener * @param event * @param currentTarget */ function executeDispatch(listener, event, currentTarget) { event.currentTarget = currentTarget; listener(event); } function processDispatchQueueItemsInOrder( event, dispatchListeners, inCapturePhase ) { if (inCapturePhase) { // dispatchListeners[子，父] for (let i = dispatchListeners.length - 1; i >= 0; i--) { const { listener, currentTarget } = dispatchListeners[i]; if (event.isPropagationStopped()) { return; } executeDispatch(listener, event, currentTarget); } } else { // dispatchListeners[父，子] for (let i = 0; i <= dispatchListeners.length - 1; i++) { const { listener, currentTarget } = dispatchListeners[i]; if (event.isPropagationStopped()) { return; } executeDispatch(listener, event, currentTarget); } } } \"]},\"296\":{\"h\":\"容易忽略的点\",\"t\":[\"在 accumulateSinglePhaseListeners 累加回调函数阶段\",\"我们对当前 Fiber 节点进行 return 循环，逐步获取上级 Fiber 的节点和 DOM 元素\",\"我们从 getListener 中获取到了匹配 React 合成事件名的回调函数，加入回调数组\",\"但是\",\"如何获取当前最近的 Fiber 节点？\",\"从何获取 JSX 上绑定的事件回调函数？\",\"实际上，我们需要对 Fiber 方法中的创建实例的函数进行修改，让 Fiber 对应的 DOM 元素绑定预存 Fiber 节点和 props\"]},\"297\":{\"h\":\"ReactDOMHostConfig.js\",\"t\":[\"export function createInstance(type, props, internalInstanceHandle) { const domElement = document.createElement(type); // 预先缓存fiber节点到DOM节点上 precacheFiberNode(internalInstanceHandle, domElement); // 属性的添加TODO updateFiberProps(domElement, props); return domElement; } \",\"这样，便可以在 dispatchEvent 派发事件函数中获取到 target 目标 DOM 上最近的那一个 Fiber 节点\",\"export function dispatchEvent( domEventName, eventSystemFlags, targetContainer, nativeEvent ) { // 获取事件源，它应该是一个真实DOM const nativeEventTarget = getEventTarget(nativeEvent); const targetInst = getClosestInstanceFromNode(nativeEventTarget); dispatchEventForPluginEventSystem( domEventName, // click eventSystemFlags, // 0 4 nativeEvent, // 原生事件 targetInst, // 此真实DOM对应的fiber targetContainer // 目标容器 ); } \"]},\"298\":{\"h\":\"accumulateSinglePhaseListeners.js\",\"t\":[\"累加回调也能通过上面透传的 targetInst(targetFiber)，执行 return 循环查找\",\"export function accumulateSinglePhaseListeners( targetFiber, reactName, nativeEventType, isCapturePhase ) { const captureName = reactName + \\\"Capture\\\"; const reactEventName = isCapturePhase ? captureName : reactName; const listeners = []; let instance = targetFiber; while (instance !== null) { const { stateNode, tag } = instance; if (tag === HostComponent && stateNode !== null) { const listener = getListener(instance, reactEventName); if (listener) { listeners.push(createDispatchListener(instance, listener, stateNode)); } } instance = instance.return; } return listeners; } \"]},\"299\":{\"h\":\"getListener.js\",\"t\":[\"同理，在上面需要获取 listener 回调函数的时候，也是能获取到函数的\",\"export default function getListener(inst, registrationName) { const { stateNode } = inst; if (stateNode === null) { return null; } const props = getFiberCurrentPropsFromNode(stateNode); if (props === null) { return null; } const listener = props[registrationName]; // props.onClick return listener; } \"]},\"300\":{\"h\":\"流程图\",\"t\":[\"事件监听流程图\",\"DOMPluginEventSystem\",\"事件派发流程图\",\"extractEvents\",\"事件处理流程图\",\"processDispatchQueue\"]},\"301\":{\"h\":\"最终输出结果\",\"t\":[\"main.jsx\",\"import { createRoot } from \\\"react-dom/client\\\"; function FunctionComponent() { const parentBubble = () => { console.log(\\\"父冒泡\\\"); }; const parentCapture = () => { console.log(\\\"父捕获\\\"); }; const childBubble = () => { console.log(\\\"子冒泡\\\"); }; const childCapture = () => { console.log(\\\"子捕获\\\"); }; return ( <h1 id=\\\"container\\\" onClick={parentBubble} onClickCapture={parentCapture}> hello <span style={{ color: \\\"red\\\" }} onClick={childBubble} onClickCapture={childCapture} > world </span> </h1> ); } const element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); // 把element虚拟DOM挂载到容器中 root.render(element); \",\"点击 world 之后控制台打印结果：\",\"eventSystemResult\"]},\"302\":{\"h\":\"手写源码仓库\",\"t\":[\"https://github.com/mi-saka10032/mini-react/tree/master/packages/events\"]},\"303\":{\"h\":\"Hooks-Reducer\",\"t\":[\"React 提供的 hooks 函数中，useReducer 提供了类似 redux 的数据状态管理功能，其底层原理大体分为三步：mountReducer -> updateReducer -> commitReducer，分别代表挂载、更新、提交更改的全过程\"]},\"304\":{\"h\":\"mountReducer\",\"t\":[\"mountReducer\"]},\"305\":{\"h\":\"main.jsx\",\"t\":[\"src\\\\main.jsx\",\"import * as React from \\\"react/index\\\"; import { createRoot } from \\\"react-dom/client\\\"; const reducer = (state, action) => { if (action.type === \\\"add\\\") return state + 1; return state; }; function FunctionComponent() { const [number, setNumber] = React.useReducer(reducer, 0); return <button onClick={() => setNumber({ type: \\\"add\\\" })}>{number}</button>; } const element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); // 把element虚拟DOM挂载到容器中 root.render(element); \"]},\"306\":{\"h\":\"ReactFiberHooks.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberHooks.js\",\"import ReactSharedInternals from \\\"shared/ReactSharedInternals\\\"; // 全局共享对象 ReactCurrentDispatcher const { ReactCurrentDispatcher } = ReactSharedInternals; let currentlyRenderingFiber = null; let workInProgressHook = null; // 挂载hook链表 function mountWorkInProgressHook() { const hook = { memoizedState: null, queue: null, next: null, }; if (workInProgressHook === null) { // 挂载到当前fiber的memoizedState上 currentlyRenderingFiber.memoizedState = workInProgressHook = hook; } else { // hook环链 workInProgressHook = workInProgressHook.next = hook; } return workInProgressHook; } function dispatchReducerAction(fiber, queue, action) { console.log(\\\"dispatchReducerAction\\\", action); } const HooksDispatcherOnMountInDEV = { useReducer: mountReducer, }; // 为当前的hook对象挂载初始值、更新队列、派发函数 function mountReducer(reducer, initialArg) { const hook = mountWorkInProgressHook(); hook.memoizedState = initialArg; const queue = { pending: null, dispatch: null, }; hook.queue = queue; const dispatch = (queue.dispatch = dispatchReducerAction.bind( null, currentlyRenderingFiber, queue )); return [hook.memoizedState, dispatch]; } /** * 渲染函数组件 * @param current 老fiber * @param workInProgress 新fiber * @param Component 组件定义 * @param props 组件属性 * @returns 虚拟DOM或者React元素 */ export function renderWithHooks(current, workInProgress, Component, props) { currentlyRenderingFiber = workInProgress; if (current !== null && current.memoizedState !== null) { // TODO updateReducer } else { ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV; } const children = Component(props); currentlyRenderingFiber = null; return children; } \"]},\"307\":{\"h\":\"react\\\\index.js\",\"t\":[\"src\\\\react\\\\index.js\",\"export { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, useReducer, } from \\\"./src/React\\\"; \"]},\"308\":{\"h\":\"React.js\",\"t\":[\"src\\\\react\\\\src\\\\React.js\",\"import { useReducer } from \\\"./ReactHooks\\\"; import ReactSharedInternals from \\\"./ReactSharedInternals\\\"; export { useReducer, ReactSharedInternals as __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, }; \"]},\"309\":{\"h\":\"ReactHooks.js\",\"t\":[\"src\\\\react\\\\src\\\\ReactHooks.js\",\"import ReactCurrentDispatcher from \\\"./ReactCurrentDispatcher\\\"; function resolveDispatcher() { const dispatcher = ReactCurrentDispatcher.current; return dispatcher; } export function useReducer(reducer, initialArg, init) { const dispatcher = resolveDispatcher(); // dispatcher.useReducer这个方法，通过renderWithHooks中对全局对象ReactCurrentDispatcher.current设置以获得 return dispatcher.useReducer(reducer, initialArg, init); } \"]},\"310\":{\"h\":\"ReactCurrentDispatcher.js\",\"t\":[\"src\\\\react\\\\src\\\\ReactCurrentDispatcher.js\",\"const ReactCurrentDispatcher = { current: null, }; export default ReactCurrentDispatcher; \"]},\"311\":{\"h\":\"ReactSharedInternals.js\",\"t\":[\"src\\\\react\\\\src\\\\ReactSharedInternals.js\",\"import ReactCurrentDispatcher from \\\"./ReactCurrentDispatcher\\\"; const ReactSharedInternals = { ReactCurrentDispatcher, }; export default ReactSharedInternals; \"]},\"312\":{\"h\":\"ReactSharedInternals.js\",\"t\":[\"src\\\\shared\\\\ReactSharedInternals.js\",\"import * as React from \\\"react/index\\\"; const ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; export default ReactSharedInternals; \"]},\"313\":{\"h\":\"mountReducer 小结\",\"t\":[\"整个 mountReducer 围绕存储于 ReactCurrentDispatcher.js 中的 ReactCurrentDispatcher 对象，向外 export 相同栈地址的浅拷贝对象\",\"在React.useReducer中为 ReactCurrentDispatcher.current 对象的 useReducer 赋值，初始化并为当前的 Fiber.memoizedState 挂载一个包含了缓存值、更新队列、派发函数的 hook 单向环形链表\",\"useReducer 最后返回一个长度为 2 的数组，对应 hook 的缓存值和派发函数\",\"mountReducer 点击 button 的控制台输出结果：\",\"mountReducerResult\"]},\"314\":{\"h\":\"updateReducer\",\"t\":[\"updateReducer\"]},\"315\":{\"h\":\"ReactFiberHooks.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberHooks.js\",\"import ReactSharedInternals from \\\"shared/ReactSharedInternals\\\"; import { enqueueConcurrentHookUpdate } from \\\"./ReactFiberConcurrentUpdates\\\"; import { scheduleUpdateOnFiber } from \\\"./ReactFiberWorkLoop\\\"; const { ReactCurrentDispatcher } = ReactSharedInternals; let currentlyRenderingFiber = null; let workInProgressHook = null; let currentHook = null; function mountWorkInProgressHook() { const hook = { memoizedState: null, queue: null, next: null, }; if (workInProgressHook === null) { currentlyRenderingFiber.memoizedState = workInProgressHook = hook; } else { workInProgressHook = workInProgressHook.next = hook; } return workInProgressHook; } function dispatchReducerAction(fiber, queue, action) { const update = { action, next: null, }; const root = enqueueConcurrentHookUpdate(fiber, queue, update); scheduleUpdateOnFiber(root); } const HooksDispatcherOnMountInDEV = { useReducer: mountReducer, }; function mountReducer(reducer, initialArg) { const hook = mountWorkInProgressHook(); hook.memoizedState = initialArg; const queue = { pending: null, dispatch: null, }; hook.queue = queue; const dispatch = (queue.dispatch = dispatchReducerAction.bind( null, currentlyRenderingFiber, queue )); return [hook.memoizedState, dispatch]; } // 更新当前fiber的hook链表 function updateWorkInProgressHook() { if (currentHook === null) { const current = currentlyRenderingFiber.alternate; currentHook = current.memoizedState; } else { currentHook = currentHook.next; } const newHook = { memoizedState: currentHook.memoizedState, queue: currentHook.queue, next: null, }; if (workInProgressHook === null) { currentlyRenderingFiber.memoizedState = workInProgressHook = newHook; } else { workInProgressHook = workInProgressHook.next = newHook; } return workInProgressHook; } const HooksDispatcherOnUpdateInDEV = { useReducer: updateReducer, }; function updateReducer(reducer) { const hook = updateWorkInProgressHook(); const queue = hook.queue; queue.lastRenderedReducer = reducer; const current = currentHook; const pendingQueue = queue.pending; let newState = current.memoizedState; if (pendingQueue !== null) { queue.pending = null; const first = pendingQueue.next; let update = first; do { if (update.hasEagerState) { newState = update.eagerState; } else { const action = update.action; newState = reducer(newState, action); } update = update.next; } while (update !== null && update !== first); } hook.memoizedState = queue.lastRenderedState = newState; return [hook.memoizedState, queue.dispatch]; } /** * 渲染函数组件 * @param current 老fiber * @param workInProgress 新fiber * @param Component 组件定义 * @param props 组件属性 * @returns 虚拟DOM或者React元素 */ export function renderWithHooks(current, workInProgress, Component, props) { currentlyRenderingFiber = workInProgress; if (current !== null && current.memoizedState !== null) { ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV; } else { ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV; } const children = Component(props); workInProgressHook = null; currentHook = null; currentlyRenderingFiber = null; return children; } \"]},\"316\":{\"h\":\"ReactFiberConcurrentUpdates.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberConcurrentUpdates.js\",\"/** * 此文件本来还需要考虑处理优先级问题 * 现在只实现找到根节点的功能 */ import { HostRoot } from \\\"react-reconciler/src/ReactWorkTags\\\"; const concurrentQueues = []; let concurrentQueuesIndex = 0; export function markUpdateLaneFromFiberToRoot(sourceFiber) { let node = sourceFiber; // 当前fiber let parent = sourceFiber.return; // 当前fiber的父fiber while (parent !== null) { node = parent; parent = parent.return; } // 一直找到parent为null：根节点Fiber(HostRootFiber) if (node.tag === HostRoot) { // 返回根节点的stateNode: FiberRootNode return node.stateNode; } return null; } export function enqueueConcurrentHookUpdate(fiber, queue, update) { enqueueUpdate(fiber, queue, update); return getRootForUpdatedFiber(fiber); } function enqueueUpdate(fiber, queue, update) { concurrentQueues[concurrentQueuesIndex++] = fiber; concurrentQueues[concurrentQueuesIndex++] = queue; concurrentQueues[concurrentQueuesIndex++] = update; } function getRootForUpdatedFiber(sourceFiber) { let node = sourceFiber; let parent = node.return; while (parent !== null) { node = parent; parent = node.return; } return node.tag === HostRoot ? node.stateNode : null; } export function finishQueueingConcurrentUpdates() { const endIndex = concurrentQueuesIndex; concurrentQueuesIndex = 0; let i = 0; while (i < endIndex) { const fiber = concurrentQueues[i++]; const queue = concurrentQueues[i++]; const update = concurrentQueues[i++]; if (queue !== null && update !== null) { const pending = queue.pending; if (pending === null) { update.next = update; } else { update.next = pending.next; pending.next = update; } queue.pending = update; } } } \"]},\"317\":{\"h\":\"ReactFiberWorkLoop.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberWorkLoop.js\",\"import { scheduleCallback } from \\\"scheduler/index\\\"; import { createWorkInProgress } from \\\"./ReactFiber\\\"; import { beginWork } from \\\"./ReactFiberBeginWork\\\"; import { completeWork } from \\\"./ReactFiberCompleteWork\\\"; import { NoFlags, MutationMask } from \\\"react-reconciler/src/ReactFiberFlags\\\"; import { commitMutationEffectsOnFiber } from \\\"./ReactFiberCommitWork\\\"; import { finishQueueingConcurrentUpdates } from \\\"./ReactFiberConcurrentUpdates\\\"; let workInProgress = null; /** * 计划更新root * 源码中此处有一个调度任务的功能 * @param {*}root */ export function scheduleUpdateOnFiber(root) { // 确保调度执行root上的更新 ensureRootIsScheduled(root); } function ensureRootIsScheduled(root) { // 告诉浏览器要执行performConcurrentWorkOnRoot函数，参数为root scheduleCallback(performConcurrentWorkOnRoot.bind(null, root)); } /** * 开始根据fiber构建fiber树，要创建真实的DOM节点，再把真实的DOM节点插入容器 * @param {*} root */ function performConcurrentWorkOnRoot(root) { // 第一次渲染以同步的方式渲染根节点，初次渲染的时候，都是同步执行 renderRootSync(root); // 开始进入提交阶段，就是执行副作用，修改真实DOM const finishedWork = root.current.alternate; root.finishedWork = finishedWork; commitRoot(root); } function commitRoot(root) { const { finishedWork } = root; const subtreeHasEffects = (finishedWork.subtreeFlags && MutationMask) !== NoFlags; const rootHasEffect = (finishedWork.flags && MutationMask) !== NoFlags; if (subtreeHasEffects || rootHasEffect) { commitMutationEffectsOnFiber(finishedWork, root); } // 等DOM变更后，就可以把root的current指向新Fiber树 root.current = finishedWork; } function prepareFreshStack(root) { workInProgress = createWorkInProgress(root.current, null); finishQueueingConcurrentUpdates(); } function renderRootSync(root) { // 开始构建fiber树 // 双缓冲技术，页面显示区域为current映射，对应真实DOM，代表当前已经渲染完成的Fiber // 内存中的Fiber构建、比较、更新为workInProgress映射，表示还未生效，没有更新的DOM上的Fiber树 // 1. current的HostRootFiber在构建过程中不作变化 // 2. workInProgress在内存中顺序构建Fiber树 prepareFreshStack(root); workLoopSync(); } function workLoopSync() { while (workInProgress !== null) { performUnitOfWork(workInProgress); } } /** * 执行一个工作单元 * @param unitOfWork */ function performUnitOfWork(unitOfWork) { // 获取新fiber对应的老fiber，是页面上显示的current的fiber const current = unitOfWork.alternate; // 完成当前fiber的子fiber链表构建 const next = beginWork(current, unitOfWork); // 同步工作单元中的props unitOfWork.memoizedProps = unitOfWork.pendingProps; // 没有子节点，表示工作单元递归的 递 阶段已结束，需要return执行completeWork if (next === null) { // 没有子节点，表示当前fiber的beginWork已经完成，执行completeWork completeUnitOfWork(unitOfWork); } else { workInProgress = next; } } function completeUnitOfWork(unitOfWork) { let completedWork = unitOfWork; do { // 替代fiber const current = completedWork.alternate; // 父fiber const returnFiber = completedWork.return; // 执行此fiber的完成工作 // 如果是原生组件，就是创建真实DOM节点 completeWork(current, completedWork); // 如果有弟弟，构建弟弟对应的fiber子链表 const siblingFiber = completedWork.sibling; if (siblingFiber !== null) { // 如果存在兄弟节点，则workInProgress赋值兄弟节点，循环退出，等待下一次工作单元执行beginWork workInProgress = siblingFiber; return; } // 如果没有弟弟，说明这当前完成的就是父fiber的最后一个节点 // 也就是说一个父fiber，它的所有子fiber全部完成了 completedWork = returnFiber; workInProgress = completedWork; // 执行递归的 归阶段，当兄弟节点为空的时候执行while循环往上返回，直到根fiber时退出循环 } while (completedWork !== null); } \"]},\"318\":{\"h\":\"ReactFiberBeginWork.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberBeginWork.js\",\"import logger, { indent } from \\\"shared/logger\\\"; import { FunctionComponent, HostComponent, HostRoot, HostText, IndeterminateComponent, } from \\\"react-reconciler/src/ReactWorkTags\\\"; import { processUpdateQueue } from \\\"./ReactFiberClassUpdateQueue\\\"; import { mountChildFibers, reconcileChildFibers } from \\\"./ReactChildFiber\\\"; import { shouldSetTextContent } from \\\"react-dom/src/client/ReactDOMHostConfig\\\"; import { renderWithHooks } from \\\"react-reconciler/src/ReactFiberHooks\\\"; /** * 根据新的虚拟DOM生成新的Fiber链表 * @param current 老的父Fiber * @param workInProgress 新的父Fiber * @param nextChildren 新的子虚拟DOM */ function reconcileChildren(current, workInProgress, nextChildren) { if (current === null) { // 新fiber没有老fiber，说明为首次创建挂载 // 虚拟DOM首次创建时走这里 workInProgress.child = mountChildFibers(workInProgress, null, nextChildren); } else { // 有老Fiber，需要做DOM-DIFF，拿老的子fiber链表和新的子虚拟DOM进行最小量更新 // root节点首次创建时走这里 workInProgress.child = reconcileChildFibers( workInProgress, current.child, nextChildren ); } } function updateHostRoot(current, workInProgress) { // 需要知道的它的子虚拟DOM，知道它儿子的虚拟DOM信息 processUpdateQueue(workInProgress); // workInProgress.memoizedState = { element } const nextState = workInProgress.memoizedState; const nextChildren = nextState.element; // 协调子节点，diff算法 // 根据新的虚拟DOM生成子fiber链表 reconcileChildren(current, workInProgress, nextChildren); return workInProgress.child; } /** * 构建原生组件的子fiber链表 * @param current 老fiber * @param workInProgress 新fiber */ function updateHostComponent(current, workInProgress) { const { type, pendingProps: nextProps } = workInProgress; let nextChildren = nextProps.children; // 是否直接设置文本节点，如果是则直接启动优化，不再判断children const isDirectTextChildren = shouldSetTextContent(type, nextProps); if (isDirectTextChildren) { nextChildren = null; } reconcileChildren(current, workInProgress, nextChildren); return workInProgress.child; } /** * 挂载函数组件 * @param current 老fiber * @param workInProgress 新fiber * @param Component 组件类型，函数组件的定义 */ export function mountIndeterminateComponent( current, workInProgress, Component ) { const props = workInProgress.pendingProps; // 执行函数拿到返回值 // const value = Component(props); const value = renderWithHooks(current, workInProgress, Component, props); workInProgress.tag = FunctionComponent; reconcileChildren(null, workInProgress, value); return workInProgress.child; } function updateFunctionComponent( current, workInProgress, Component, nextProps ) { const nextChildren = renderWithHooks( current, workInProgress, Component, nextProps ); reconcileChildren(current, workInProgress, nextChildren); return workInProgress.child; } /** * 目标是根据虚拟DOM构建新的fiber子链表 * @param current 老fiber * @param workInProgress 新fiber */ export function beginWork(current, workInProgress) { logger(\\\" \\\".repeat(indent.number) + \\\"beginWork\\\", workInProgress); indent.number += 2; switch (workInProgress.tag) { case IndeterminateComponent: return mountIndeterminateComponent( current, workInProgress, workInProgress.type ); case FunctionComponent: { const Component = workInProgress.type; const resolvedProps = workInProgress.pendingProps; return updateFunctionComponent( current, workInProgress, Component, resolvedProps ); } case HostRoot: return updateHostRoot(current, workInProgress); case HostComponent: return updateHostComponent(current, workInProgress); case HostText: return null; default: return null; } } \"]},\"319\":{\"h\":\"ReactChildFiber.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactChildFiber.js\",\"/** * @param shouldTracksSideEffects 是否跟踪副作用 */ import { REACT_ELEMENT_TYPE } from \\\"shared/ReactSymbols\\\"; import { createFiberFromElement, createFiberFromText, createWorkInProgress, FiberNode, } from \\\"./ReactFiber\\\"; import { Placement, ChildDeletion } from \\\"./ReactFiberFlags\\\"; import isArray from \\\"shared/isArray\\\"; import { HostText } from \\\"react-reconciler/src/ReactWorkTags\\\"; function createChildReconciler(shouldTracksSideEffects) { function useFiber(fiber, pendingProps) { const clone = createWorkInProgress(fiber, pendingProps); clone.index = 0; clone.sibling = null; return clone; } function deleteChild(returnFiber, childToDelete) { if (!shouldTracksSideEffects) { return; } const deletions = returnFiber.deletions; if (deletions === null) { returnFiber.deletions = [childToDelete]; returnFiber.flags |= ChildDeletion; } else { deletions.push(childToDelete); } } function reconcileSingleElement(returnFiber, currentFirstChild, element) { const key = element.key; let child = currentFirstChild; while (child !== null) { if (child.key === key) { const elementType = element.type; if (child.type === elementType) { const existing = useFiber(child, element.props); existing.return = returnFiber; return existing; } } else { deleteChild(returnFiber, child); } child = child.sibling; } // 初次挂载 currentFirstFiber为null，可以直接根据虚拟DOM创建新的Fiber节点 const created = createFiberFromElement(element); created.return = returnFiber; return created; } /** * 设置副作用 * @param newFiber * @param newIndex */ function placeSingleChild(newFiber, newIndex) { // 如果为true，说明要添加副作用 if (shouldTracksSideEffects && newFiber.alternate === null) { // 副作用标识：插入DOM节点，在最后的提交阶段插入此节点 // React的渲染分渲染（创建Fiber树）和提交（更新真实DOM）两个阶段 newFiber.flags |= Placement; } return newFiber; } function reconcileSingleTextNode(returnFiber, currentFirstChild, content) { const created = new FiberNode(HostText, { content }, null); created.return = returnFiber; return created; } function placeChild(newFiber, newIndex) { newFiber.index = newIndex; if (shouldTracksSideEffects) { // 如果一个fiber的flags上有placement，说明此节点需要创建真实DOM，插入到父容器中 // 如果父fiber初次挂载，shouldTracksSideEffects为false，不需要添加flags // 这种情况下会在完成阶段把所有子阶段全部添加到自己身上 newFiber.flags |= Placement; } } function createChild(returnFiber, newChild) { if ( (typeof newChild === \\\"string\\\" && newChild !== \\\"\\\") || typeof newChild === \\\"number\\\" ) { // 创建虚拟DOM文本节点 const created = createFiberFromText(`${newChild}`); created.return = returnFiber; return created; } else if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { const created = createFiberFromElement(newChild); created.return = returnFiber; return created; } default: break; } } return null; } function reconcileChildrenArray(returnFiber, currentFirstFiber, newChildren) { let resultingFirstChild = null; // 返回的第一个新儿子 let previousNewFiber = null; // 之前的新fiber let newIndex = 0; // 遍历虚拟DOM根节点内的首层newChildren类型并生成不同fiber for (; newIndex < newChildren.length; newIndex++) { const newFiber = createChild(returnFiber, newChildren[newIndex]); if (newFiber === null) continue; // 把新fiber放到索引位置 placeChild(newFiber, newIndex); if (previousNewFiber === null) { // 这是第一个newFiber resultingFirstChild = newFiber; } else { // 不是第一个newFiber previousNewFiber.sibling = newFiber; } // 让newFiber成为上一个子Fiber previousNewFiber = newFiber; } return resultingFirstChild; } /** * 比较协调子fibers DOM-DIFF：用老的子fiber链表和新的虚拟DOM进行比较的过程 * @param returnFiber 新的父fiber * @param currentFirstChild current一般来说指老fiber的第一个子fiber * @param newChild 新的子虚拟DOM */ function reconcileChildFibers(returnFiber, currentFirstChild, newChild) { // 现在暂时只考虑新节点只有一个的情况 if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: return placeSingleChild( reconcileSingleElement(returnFiber, currentFirstChild, newChild) ); default: break; } // newChild [文本节点， span虚拟元素] if (isArray(newChild)) { return reconcileChildrenArray(returnFiber, currentFirstChild, newChild); } } if (typeof newChild === \\\"string\\\") { return placeSingleChild( reconcileSingleTextNode(returnFiber, currentFirstChild, newChild) ); } return null; } return reconcileChildFibers; } // 虚拟DOM初次挂载 export const mountChildFibers = createChildReconciler(false); //老fiber更新 export const reconcileChildFibers = createChildReconciler(true); \"]},\"320\":{\"h\":\"ReactFiberCompleteWork.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberCompleteWork.js\",\"import logger, { indent } from \\\"shared/logger\\\"; import { HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; import { createInstance, createTextInstance, appendInitialChild, finalizeInitialChildren, prepareUpdate, } from \\\"react-dom/src/client/ReactDOMHostConfig\\\"; import { NoFlags, Update } from \\\"react-reconciler/src/ReactFiberFlags\\\"; /** * 属性冒泡，旨在向上收集子孙节点的更新副作用，当子节点不存在副作用时说明无需更新，便于diff优化 * @param completedWork */ function bubbleProperties(completedWork) { let subtreeFlags = NoFlags; let child = completedWork.child; // 遍历当前fiber的所有子节点，把所有子节点的副作用及子节点的子节点副作用合并收集起来 while (child !== null) { subtreeFlags |= child.subtreeFlags; subtreeFlags |= child.flags; child = child.sibling; } // 收集子节点的副作用，注意flags才是节点自己的副作用 completedWork.subtreeFlags = subtreeFlags; } /** * 把当前完成的fiber所有子节点对应真实DOM都挂在到父parent真实DOM节点上 * @param parent 当前完成的fiber真实DOM节点 * @param workInProgress 完成的fiber */ function appendAllChildren(parent, workInProgress) { let node = workInProgress.child; while (node) { if (node.tag === HostComponent || node.tag === HostText) { // 如果子节点是原生节点或文本节点 appendInitialChild(parent, node.stateNode); } else if (node.child !== null) { // 如果第一个儿子不是原生节点，说明它可能是一个函数组件节点 node = node.child; continue; } // 如果当前的节点没有弟弟 while (node.sibling === null) { if (node.return === null || node.return === workInProgress) { return; } // 回到父节点 node = node.return; } node = node.sibling; } } function markUpdate(workInProgress) { workInProgress.flags |= Update; } function updateHostComponent(current, workInProgress, type, newProps) { const oldProps = current.memoizedProps; const instance = workInProgress.stateNode; const updatePayload = prepareUpdate(instance, type, oldProps, newProps); workInProgress.updateQueue = updatePayload; if (updatePayload) { markUpdate(workInProgress); } } /** * 完成一个fiber节点 * @param current 老fiber * @param workInProgress 新的构建fiber */ export function completeWork(current, workInProgress) { logger(\\\" \\\".repeat(indent.number) + \\\"completeWork\\\", workInProgress); indent.number -= 2; const newProps = workInProgress.pendingProps; switch (workInProgress.tag) { case HostRoot: bubbleProperties(workInProgress); break; case HostComponent: { const { type } = workInProgress; if (current !== null && workInProgress.stateNode !== null) { updateHostComponent(current, workInProgress, type, newProps); console.log(\\\"updatePayload\\\", workInProgress.updateQueue); } else { // 暂时只处理初次创建或挂载的新节点逻辑 // 创建真实的DOM节点 const instance = createInstance(type, newProps, workInProgress); // 把自己所有的儿子都添加到自己身上 appendAllChildren(instance, workInProgress); workInProgress.stateNode = instance; finalizeInitialChildren(instance, type, newProps); } bubbleProperties(workInProgress); break; } case HostText: // 文本节点的props就是文本内容，直接创建真实的文本节点 const newText = newProps; // 创建真实的DOM节点，并传入stateNode workInProgress.stateNode = createTextInstance(newText); // 向上冒泡属性 bubbleProperties(workInProgress); break; } } \"]},\"321\":{\"h\":\"ReactDOMHostConfig.js\",\"t\":[\"src\\\\react-dom-bindings\\\\src\\\\client\\\\ReactDOMHostConfig.js\",\"import { setInitialProperties, diffProperties } from \\\"./ReactDOMComponent\\\"; export function prepareUpdate(domElement, type, oldProps, newProps) { return diffProperties(domElement, type, oldProps, newProps); } \"]},\"322\":{\"h\":\"ReactDOMComponent.js\",\"t\":[\"src\\\\react-dom-bindings\\\\src\\\\client\\\\ReactDOMComponent.js\",\"import { setValueForStyles } from \\\"react-dom/src/client/CSSPropertyOperations\\\"; import setTextContent from \\\"react-dom/src/client/setTextContent\\\"; import { setValueForProperty } from \\\"react-dom/src/client/DOMPropertyOperations\\\"; const STYLE = \\\"style\\\"; const CHILDREN = \\\"children\\\"; function setInitialDOMProperties(tag, domElement, nextProps) { for (const propKey in nextProps) { if (nextProps.hasOwnProperty(propKey)) { const nextProp = nextProps[propKey]; if (propKey === STYLE) { setValueForStyles(domElement, nextProp); } else if (propKey === CHILDREN) { if (typeof nextProp === \\\"string\\\") { setTextContent(domElement, nextProp); } else if (typeof nextProp === \\\"number\\\") { setTextContent(domElement, nextProp + \\\"\\\"); } } else if (nextProp !== null) { setValueForProperty(domElement, propKey, nextProp); } } } } export function setInitialProperties(domElement, tag, props) { setInitialDOMProperties(tag, domElement, props); } export function diffProperties(domElement, tag, lastProps, nextProps) { let updatePayload = null; let propKey; let styleName; let styleUpdates = null; for (propKey in lastProps) { if ( nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null ) { continue; } if (propKey === STYLE) { const lastStyle = lastProps[propKey]; for (styleName in lastStyle) { if (lastStyle.hasOwnProperty(styleName)) { if (!styleUpdates) { styleUpdates = {}; } styleUpdates[styleName] = \\\"\\\"; } } } else { (updatePayload = updatePayload || []).push(propKey, null); } } for (propKey in nextProps) { const nextProp = nextProps[propKey]; const lastProp = lastProps != null ? lastProps[propKey] : undefined; if ( !nextProps.hasOwnProperty(propKey) || nextProp === lastProp || (nextProp == null && lastProp == null) ) { continue; } if (propKey === STYLE) { if (lastProp) { for (styleName in lastProp) { if ( lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName)) ) { if (!styleUpdates) { styleUpdates = {}; } styleUpdates[styleName] = \\\"\\\"; } } for (styleName in nextProp) { if ( nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName] ) { if (!styleUpdates) { styleUpdates = {}; } styleUpdates[styleName] = nextProp[styleName]; } } } else { if (!styleUpdates) { if (!updatePayload) { updatePayload = []; } updatePayload.push(propKey, styleUpdates); } styleUpdates = nextProp; } } else if (propKey === CHILDREN) { if (typeof nextProp === \\\"string\\\" || typeof nextProp === \\\"number\\\") { (updatePayload = updatePayload || []).push(propKey, \\\"\\\" + nextProp); } } else { (updatePayload = updatePayload || []).push(propKey, nextProp); } } if (styleUpdates) { (updatePayload = updatePayload || []).push(STYLE, styleUpdates); } return updatePayload; } \"]},\"323\":{\"h\":\"updateReducer 小结\",\"t\":[\"在派发函数 dispatchReducerAction 中，基于当前 Fiber、更新队列和 action 对象，生成一个长度为 3n 的数组 concurrentQueues，每三个索引分别存储渲染对象 fiber、更新队列 queue、更新内容 update。最后回归到 HostRoot 根节点开启调度计划更新 scheduleUpdateOnFiber\",\"在调度计划中，函数调用至 prepareFreshStack，开始串起更新任务，调用 finishQueueingConcurrentUpdates。将 concurrentQueues 每三个一组，将更新队列 queue 中的 pending 负载以链表形式环链，queue.pending 永远指向最后一个更新，queue.pending.next 指向第一个更新\",\"prepareFreshStack 结束，进入 workLoopSync，执行工作单元调度 performUnitOfWork，首先执行 beginWork \",\"beginWork 阶段，由于 IndeterminateComponent 类型的组件在执行挂载的时候，tag 统一转为 FunctionComponent 类型组件，因此 FunctionComponent 更新时另起一个case FunctionComponent，用于更新函数组件\",\"更新函数 updateFunctionComponent 包含两大步骤，重渲染 hooks(renderWithHooks) 和 协调 DIFF 子节点(reconcileChildren)\",\"以下是 renderWithHooks 的过程： \",\"通过判断老 Fiber 是否为空且老 Fiber 的 memoizedState 是否为空来判断给 ReactCurrentDispatcher.current 中 useReducer 属性赋予为 mountReducer 或 updateReducer。此处函数更新，老 Fiber 不为空且 Fiber.memoizedState 为已创建的 hook 对象，所以函数组件如果重新执行渲染，原先的 useReducer 函数由挂载函数变更为更新函数，进入 updateReducer 调用\",\"updateReducer 阶段，根据当前 Fiber 和当前 Hooks 依序进行更新操作，获取老 Fiber.alternate 的已有的 fiberHook 链表，顺序取出当前需要执行的 currentHook\",\"由于 queue.pending 在 finishQueueingConcurrentUpdates 时已完成链接，所以从头开始循环 currentHook.queue.pending，顺序执行调用 useReducer 中存储的 reducer 方法，退出循环时将最新的状态值 newState 赋给 hook.memoizedState\",\"返回最新的 hook.memoizedState 和 dispatch 派发函数组成的数组，等待函数组件执行渲染，并清除 FiberHooks 工作栈中的 hook 和 fiber 等\",\"以下是 reconcileChildren 的过程： \",\"由于老 fiber(workInProgress.alternate)不为 null，所以开始进行新老 child 的 diff 比较\",\"暂时还是以单元素节点协调 reconcileSingleElement 为例，比较判断单节点的 key 和 type 是否相同，如果相同则基于老 Fiber 属性对老 child 拷贝一个新 Fiber(createWorkInProgress && useFiber 克隆)并直接返回。此处比较关键的是新 Fiber 继承了老 Fiber 的 memoizedState、memoizedProps、StateNode 等属性，无需再次初始化\",\"beginWork 执行完毕，进入 completeWork 执行 \",\"对于需要完成更新的原生标签组件，判断老的 Fiber 节点 fiber.alternate 和新 Fiber 的 DOM 元素 workInProgress.stateNode 是否不为 null，如果成立则执行原生组件更新 updateHostComponent\",\"对新 Fiber.pendingProps 和老 Fiber.memoizedProps 进行全属性比较与遍历，生成一个长度为 2n 的数组 updatePayload，偶数索引(0.2.4.6.8)元素代表属性名 propKey，奇数索引(1.3.5.7.9)元素代表属性值 propValue。注意对不同属性的 propKey 需要执行不同的生成策略，如 style 属性、children 属性等\",\"最后为新 Fiber(workInProgress)的 updateQueue 挂载 updatePayload，并标记更新副作用，让最终的 workInProgress.flags 变更为 MutationMask(插入 | 更新)\",\"现阶段最后挂载的 workInProgress.updateQueue，就是 updateReducer 阶段的最终产物了\",\"updateReducer 点击 button 的控制台输出结果：\",\"updateReducerResult\"]},\"324\":{\"h\":\"commitReducer\"},\"325\":{\"h\":\"ReactFiberCompleteWork.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberCompleteWork.js\",\"执行函数组件副作用冒泡\",\"import logger, { indent } from \\\"shared/logger\\\"; import { FunctionComponent, HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; import { createInstance, createTextInstance, appendInitialChild, finalizeInitialChildren, prepareUpdate, } from \\\"react-dom/src/client/ReactDOMHostConfig\\\"; import { NoFlags, Update } from \\\"react-reconciler/src/ReactFiberFlags\\\"; /** * 属性冒泡，旨在向上收集子孙节点的更新副作用，当子节点不存在副作用时说明无需更新，便于diff优化 * @param completedWork */ function bubbleProperties(completedWork) { let subtreeFlags = NoFlags; let child = completedWork.child; // 遍历当前fiber的所有子节点，把所有子节点的副作用及子节点的子节点副作用合并收集起来 while (child !== null) { subtreeFlags |= child.subtreeFlags; subtreeFlags |= child.flags; child = child.sibling; } // 收集子节点的副作用，注意flags才是节点自己的副作用 completedWork.subtreeFlags = subtreeFlags; } /** * 把当前完成的fiber所有子节点对应真实DOM都挂在到父parent真实DOM节点上 * @param parent 当前完成的fiber真实DOM节点 * @param workInProgress 完成的fiber */ function appendAllChildren(parent, workInProgress) { let node = workInProgress.child; while (node) { if (node.tag === HostComponent || node.tag === HostText) { // 如果子节点是原生节点或文本节点 appendInitialChild(parent, node.stateNode); } else if (node.child !== null) { // 如果第一个儿子不是原生节点，说明它可能是一个函数组件节点 node = node.child; continue; } // 如果当前的节点没有弟弟 while (node.sibling === null) { if (node.return === null || node.return === workInProgress) { return; } // 回到父节点 node = node.return; } node = node.sibling; } } function markUpdate(workInProgress) { workInProgress.flags |= Update; } function updateHostComponent(current, workInProgress, type, newProps) { const oldProps = current.memoizedProps; const instance = workInProgress.stateNode; const updatePayload = prepareUpdate(instance, type, oldProps, newProps); workInProgress.updateQueue = updatePayload; if (updatePayload) { markUpdate(workInProgress); } } /** * 完成一个fiber节点 * @param current 老fiber * @param workInProgress 新的构建fiber */ export function completeWork(current, workInProgress) { logger(\\\" \\\".repeat(indent.number) + \\\"completeWork\\\", workInProgress); indent.number -= 2; const newProps = workInProgress.pendingProps; switch (workInProgress.tag) { case HostRoot: bubbleProperties(workInProgress); break; case HostComponent: { const { type } = workInProgress; if (current !== null && workInProgress.stateNode !== null) { updateHostComponent(current, workInProgress, type, newProps); console.log(\\\"updatePayload\\\", workInProgress.updateQueue); } else { // 暂时只处理初次创建或挂载的新节点逻辑 // 创建真实的DOM节点 const instance = createInstance(type, newProps, workInProgress); // 把自己所有的儿子都添加到自己身上 appendAllChildren(instance, workInProgress); workInProgress.stateNode = instance; finalizeInitialChildren(instance, type, newProps); } bubbleProperties(workInProgress); break; } case FunctionComponent: { bubbleProperties(workInProgress); break; } case HostText: // 文本节点的props就是文本内容，直接创建真实的文本节点 const newText = newProps; // 创建真实的DOM节点，并传入stateNode workInProgress.stateNode = createTextInstance(newText); // 向上冒泡属性 bubbleProperties(workInProgress); break; } } \"]},\"326\":{\"h\":\"ReactFiberCommitWork.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberCommitWork.js\",\"import { appendChild, insertBefore, commitUpdate, } from \\\"react-dom/src/client/ReactDOMHostConfig\\\"; import { FunctionComponent, HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; import { MutationMask, Placement, Update, } from \\\"react-reconciler/src/ReactFiberFlags\\\"; function recursivelyTraverseMutationEffects(root, parentFiber) { if (parentFiber.subtreeFlags & MutationMask) { let { child } = parentFiber; while (child !== null) { commitMutationEffectsOnFiber(child, root); child = child.sibling; } } } function commitReconciliationEffects(finishedWork) { const { flags } = finishedWork; if (flags && Placement) { // 进行插入操作，也就是把此fiber对应的真实DOM节点添加到父真实DOM上 commitPlacement(finishedWork); // 把flags里的Placement删除 finishedWork.flags &= ~Placement; } } function isHostParent(fiber) { return fiber.tag === HostComponent || fiber.tag === HostRoot; //只有根fiber或根组件节点才能作为父fiber } function getHostParentFiber(fiber) { let parent = fiber.return; while (parent !== null) { if (isHostParent(parent)) { return parent; } parent = parent.return; } } /** * 把子节点对应的真实DOM插入到父节点DOM中 * @param node 将要插入的fiber节点 * @param before 待insertBefore的DOM节点 * @param parent 父真实DOM节点 */ function insertOrAppendPlacementNode(node, before, parent) { const { tag } = node; // 判断此fiber对应的节点是不是真实DOM节点 const isHost = tag === HostComponent || tag === HostText; if (isHost) { // 如果是的话就直接插入 const { stateNode } = node; if (before) { insertBefore(parent, stateNode, before); } else { appendChild(parent, stateNode); } } else { // 如果node不是真实DOM节点，获取它的child const { child } = node; if (child !== null) { insertOrAppendPlacementNode(child, before, parent); let { sibling } = child; while (sibling !== null) { insertOrAppendPlacementNode(sibling, before, parent); sibling = sibling.sibling; } } } } /** * 找到要插入的锚点 * 找到可以插在它前面的那个fiber对应的真实DOM * @param fiber */ function getHostSibling(fiber) { let node = fiber; siblings: while (true) { while (node.sibling === null) { if (node.return === null || isHostParent(node.return)) { return null; } node = node.return; } node = node.sibling; // 如果弟弟不是原生节点or文本节点，不是要插入的节点，需要寻找弟弟或儿子 while (node.tag !== HostComponent || node.tag !== HostText) { // 如果此节点是一个将要插入的新节点，找它的弟弟，否则找儿子 if (node.flags && Placement) { continue siblings; } else { node = node.child; } } if (!(node.flags && Placement)) { return node.stateNode; } } } /** * 把此fiber的真实DOM插入到父DOM里 * @param finishedWork */ function commitPlacement(finishedWork) { const parentFiber = getHostParentFiber(finishedWork); switch (parentFiber.tag) { case HostRoot: { const parent = parentFiber.stateNode.containerInfo; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } case HostComponent: { const parent = parentFiber.stateNode; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } } } /** * 遍历Fiber树，执行fiber上的副作用 * @param finishedWork fiberJ节点 * @param root 根节点 */ export function commitMutationEffectsOnFiber(finishedWork, root) { const current = finishedWork.alternate; const flags = finishedWork.flags; switch (finishedWork.tag) { case HostRoot: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); break; } case FunctionComponent: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); break; } case HostComponent: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); // 识别更新副作用标识，判断执行更新 if (flags & Update) { const instance = finishedWork.stateNode; if (instance !== null) { const newProps = finishedWork.memoizedProps; const oldProps = current !== null ? current.memoizedProps : newProps; const type = finishedWork.type; const updatePayload = finishedWork.updateQueue; finishedWork.updateQueue = null; if (updatePayload !== null) { commitUpdate( instance, updatePayload, type, oldProps, newProps, finishedWork ); } } } break; } case HostText: // 遍历子节点，处理子节点上的副作用 recursivelyTraverseMutationEffects(root, finishedWork); // 再处理自己身上的副作用 commitReconciliationEffects(finishedWork); break; default: break; } } \"]},\"327\":{\"h\":\"ReactDOMHostConfig.js\",\"t\":[\"src\\\\react-dom-bindings\\\\src\\\\client\\\\ReactDOMHostConfig.js\",\"import { setInitialProperties, diffProperties, updateProperties, } from \\\"react-dom/src/client/ReactDOMComponent\\\"; import { precacheFiberNode, updateFiberProps, } from \\\"react-dom/src/client/ReactDOMComponentTree\\\"; export function shouldSetTextContent(type, props) { return ( typeof props.children === \\\"string\\\" || typeof props.children === \\\"number\\\" ); } export function createTextInstance(newText) { return document.createTextNode(newText); } /** * 在原生组件初次挂载的时候，会通过此方法创建真实DOM * @param type 类型props * @param props 属性 * @param internalInstanceHandle 对应的fiber * @returns {*} */ export function createInstance(type, props, internalInstanceHandle) { const domElement = document.createElement(type); // 预先缓存fiber节点到DOM节点上 precacheFiberNode(internalInstanceHandle, domElement); // 属性的添加TODO updateFiberProps(domElement, props); return domElement; } export function appendInitialChild(parent, child) { parent.appendChild(child); } export function finalizeInitialChildren(domElement, type, props, hostContext) { setInitialProperties(domElement, type, props); } export function appendChild(parent, child) { parent.appendChild(child); } export function insertBefore(parentInstance, child, beforeChild) { parentInstance.insertBefore(child, beforeChild); } export function prepareUpdate(domElement, type, oldProps, newProps) { return diffProperties(domElement, type, oldProps, newProps); } export function commitUpdate( domElement, updatePayload, type, oldProps, newProps ) { updateProperties(domElement, updatePayload, type, oldProps, newProps); updateFiberProps(domElement, newProps); } \"]},\"328\":{\"h\":\"ReactDOMComponent.js\",\"t\":[\"src\\\\react-dom-bindings\\\\src\\\\client\\\\ReactDOMComponent.js\",\"import { setValueForStyles } from \\\"react-dom/src/client/CSSPropertyOperations\\\"; import setTextContent from \\\"react-dom/src/client/setTextContent\\\"; import { setValueForProperty } from \\\"react-dom/src/client/DOMPropertyOperations\\\"; const STYLE = \\\"style\\\"; const CHILDREN = \\\"children\\\"; function setInitialDOMProperties(tag, domElement, nextProps) { for (const propKey in nextProps) { if (nextProps.hasOwnProperty(propKey)) { const nextProp = nextProps[propKey]; if (propKey === STYLE) { setValueForStyles(domElement, nextProp); } else if (propKey === CHILDREN) { if (typeof nextProp === \\\"string\\\") { setTextContent(domElement, nextProp); } else if (typeof nextProp === \\\"number\\\") { setTextContent(domElement, nextProp + \\\"\\\"); } } else if (nextProp !== null) { setValueForProperty(domElement, propKey, nextProp); } } } } export function setInitialProperties(domElement, tag, props) { setInitialDOMProperties(tag, domElement, props); } export function diffProperties(domElement, tag, lastProps, nextProps) { let updatePayload = null; let propKey; let styleName; let styleUpdates = null; for (propKey in lastProps) { if ( nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null ) { continue; } if (propKey === STYLE) { const lastStyle = lastProps[propKey]; for (styleName in lastStyle) { if (lastStyle.hasOwnProperty(styleName)) { if (!styleUpdates) { styleUpdates = {}; } styleUpdates[styleName] = \\\"\\\"; } } } else { (updatePayload = updatePayload || []).push(propKey, null); } } for (propKey in nextProps) { const nextProp = nextProps[propKey]; const lastProp = lastProps != null ? lastProps[propKey] : undefined; if ( !nextProps.hasOwnProperty(propKey) || nextProp === lastProp || (nextProp == null && lastProp == null) ) { continue; } if (propKey === STYLE) { if (lastProp) { for (styleName in lastProp) { if ( lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName)) ) { if (!styleUpdates) { styleUpdates = {}; } styleUpdates[styleName] = \\\"\\\"; } } for (styleName in nextProp) { if ( nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName] ) { if (!styleUpdates) { styleUpdates = {}; } styleUpdates[styleName] = nextProp[styleName]; } } } else { if (!styleUpdates) { if (!updatePayload) { updatePayload = []; } updatePayload.push(propKey, styleUpdates); } styleUpdates = nextProp; } } else if (propKey === CHILDREN) { if (typeof nextProp === \\\"string\\\" || typeof nextProp === \\\"number\\\") { (updatePayload = updatePayload || []).push(propKey, \\\"\\\" + nextProp); } } else { (updatePayload = updatePayload || []).push(propKey, nextProp); } } if (styleUpdates) { (updatePayload = updatePayload || []).push(STYLE, styleUpdates); } return updatePayload; } export function updateProperties(domElement, updatePayload) { updateDOMProperties(domElement, updatePayload); } function updateDOMProperties(domElement, updatePayload) { console.log(updatePayload); for (let i = 0; i < updatePayload.length; i += 2) { const propKey = updatePayload[i]; const propValue = updatePayload[i + 1]; if (propKey === STYLE) { setValueForStyles(domElement, propValue); } else if (propKey === CHILDREN) { setTextContent(domElement, propValue); } else { setValueForProperty(domElement, propKey, propValue); } } } \"]},\"329\":{\"h\":\"main.jsx 更新\",\"t\":[\"import * as React from \\\"react/index\\\"; import { createRoot } from \\\"react-dom/client\\\"; const reducer = (state, action) => { if (action.type === \\\"add\\\") return state + action.payload; return state; }; function FunctionComponent() { const [number, setNumber] = React.useReducer(reducer, 0); let attrs = { id: \\\"btn1\\\" }; if (number === 6) { delete attrs.id; attrs.style = { color: \\\"red\\\" }; } return ( <button {...attrs} onClick={() => setNumber({ type: \\\"add\\\", payload: 3 })}> {number} </button> ); } const element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); // 把element虚拟DOM挂载到容器中 root.render(element); \"]},\"330\":{\"h\":\"commitReducer 小结\",\"t\":[\"commit 提交更新阶段相对简单一点，在 commitMutationEffectsOnFiber 这个提交副作用函数中，还是针对原生标签组件 HostComponent：\",\"如果更新副作用存在 Update 更新标识并且 updateQueue 不为 null，执行 commitUpdate 更新\",\"commitUpdate 中调用两个方法：DOM 属性更新 updateProperties 和 Fiber 属性更新 updateFiberProps。updateFiberProps 主要是将属性挂载到原生 DOM 节点上，不再赘述\",\"updateProperties 的主要作用就是循环 updateQueue 中的元素，两两一对进行确认，对原生的 DOM 节点，执行诸如 style、class、id、内部文本等内容更新\",\"commitReducer 点击 button 两次后的控制台输出结果：\",\"commitReducerResult\"]},\"331\":{\"h\":\"手写源码仓库\",\"t\":[\"https://github.com/mi-saka10032/mini-react/tree/master/packages/reducer\"]},\"332\":{\"h\":\"Hooks-State\",\"t\":[\"useState 绝大部分源码和流程都与 useReducer 相同，可以理解为 useState 就是一个设置了基础 reducer 函数(baseStateReducer)与不可变数据判断的 useReducer\",\"源码改动主要围绕 React 的 useState 属性添加声明与 ReactFiberHooks 内的 mountState 和 updateState 进行，其余源码详见 useReducer 源码不分不再记录\"]},\"333\":{\"h\":\"src\\\\main.jsx\",\"t\":[\"src\\\\main.jsx\",\"import * as React from \\\"react/index\\\"; import { createRoot } from \\\"react-dom/client\\\"; function FunctionComponent() { const [number, setNumber] = React.useState(0); let attrs = { id: \\\"btn1\\\" }; if (number === 3) { delete attrs.id; attrs.style = { color: \\\"red\\\" }; } // 如果使用的是useState，调用setNumber的时候传入的是老状态，则不需要更新 return ( <button {...attrs} onClick={() => setNumber(number + 1)}> {number} </button> ); } const element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); // 把element虚拟DOM挂载到容器中 root.render(element); \"]},\"334\":{\"h\":\"react\\\\index.js\",\"t\":[\"src\\\\react\\\\index.js\",\"export { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, useReducer, useState, } from \\\"./src/React\\\"; \"]},\"335\":{\"h\":\"React.js\",\"t\":[\"src\\\\react\\\\src\\\\React.js\",\"import { useReducer, useState } from \\\"./ReactHooks\\\"; import ReactSharedInternals from \\\"./ReactSharedInternals\\\"; export { useReducer, useState, ReactSharedInternals as __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, }; \"]},\"336\":{\"h\":\"ReactHooks.js\",\"t\":[\"src\\\\react\\\\src\\\\ReactHooks.js\",\"import ReactCurrentDispatcher from \\\"./ReactCurrentDispatcher\\\"; function resolveDispatcher() { const dispatcher = ReactCurrentDispatcher.current; return dispatcher; } export function useReducer(reducer, initialArg, init) { const dispatcher = resolveDispatcher(); return dispatcher.useReducer(reducer, initialArg, init); } export function useState(reducer, initialArg, init) { const dispatcher = resolveDispatcher(); return dispatcher.useState(reducer, initialArg, init); } \"]},\"337\":{\"h\":\"objectIs.js\",\"t\":[\"src\\\\shared\\\\objectIs.js\",\"const objectIs = Object.is; export default objectIs; \"]},\"338\":{\"h\":\"ReactFiberHooks.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberHooks.js\",\"import ReactSharedInternals from \\\"shared/ReactSharedInternals\\\"; import { enqueueConcurrentHookUpdate } from \\\"./ReactFiberConcurrentUpdates\\\"; import { scheduleUpdateOnFiber } from \\\"./ReactFiberWorkLoop\\\"; import is from \\\"shared/objectIs\\\"; const { ReactCurrentDispatcher } = ReactSharedInternals; let currentlyRenderingFiber = null; let workInProgressHook = null; let currentHook = null; function mountWorkInProgressHook() { const hook = { memoizedState: null, queue: null, next: null, }; if (workInProgressHook === null) { currentlyRenderingFiber.memoizedState = workInProgressHook = hook; } else { workInProgressHook = workInProgressHook.next = hook; } return workInProgressHook; } function dispatchReducerAction(fiber, queue, action) { const update = { action, next: null, }; const root = enqueueConcurrentHookUpdate(fiber, queue, update); scheduleUpdateOnFiber(root); } function dispatchSetState(fiber, queue, action) { const update = { action, hasEagerState: false, // 是否有急切的更新 eagerState: null, // 急切的更新状态 next: null, }; // 派发动作后，立刻用上一次的状态和上一次的reducer计算新状态 const { lastRenderedReducer, lastRenderedState } = queue; const eagerState = lastRenderedReducer(lastRenderedState, action); update.hasEagerState = true; update.eagerState = eagerState; if (is(eagerState, lastRenderedState)) { return; } // 入队更新，调度更新逻辑 const root = enqueueConcurrentHookUpdate(fiber, queue, update); scheduleUpdateOnFiber(root); } const HooksDispatcherOnMountInDEV = { useReducer: mountReducer, useState: mountState, }; function mountState(initialState) { const hook = mountWorkInProgressHook(); hook.memoizedState = initialState; const queue = { pending: null, dispatch: null, lastRenderedReducer: baseStateReducer, // 上一个reducer lastRenderedState: initialState, // 上一个state }; hook.queue = queue; const dispatch = (queue.dispatch = dispatchSetState.bind( null, currentlyRenderingFiber, queue )); return [hook.memoizedState, dispatch]; } function mountReducer(reducer, initialArg) { const hook = mountWorkInProgressHook(); hook.memoizedState = initialArg; const queue = { pending: null, dispatch: null, }; hook.queue = queue; const dispatch = (queue.dispatch = dispatchReducerAction.bind( null, currentlyRenderingFiber, queue )); return [hook.memoizedState, dispatch]; } // 更新当前fiber的hook链表 function updateWorkInProgressHook() { if (currentHook === null) { const current = currentlyRenderingFiber.alternate; currentHook = current.memoizedState; } else { currentHook = currentHook.next; } const newHook = { memoizedState: currentHook.memoizedState, queue: currentHook.queue, next: null, }; if (workInProgressHook === null) { currentlyRenderingFiber.memoizedState = workInProgressHook = newHook; } else { workInProgressHook = workInProgressHook.next = newHook; } return workInProgressHook; } const HooksDispatcherOnUpdateInDEV = { useReducer: updateReducer, useState: updateState, }; // useState就是一个内置了reducer的useReducer function baseStateReducer(state, action) { return typeof action === \\\"function\\\" ? action(state) : action; } function updateState() { return updateReducer(baseStateReducer); } function updateReducer(reducer) { const hook = updateWorkInProgressHook(); const queue = hook.queue; queue.lastRenderedReducer = reducer; const current = currentHook; const pendingQueue = queue.pending; let newState = current.memoizedState; if (pendingQueue !== null) { queue.pending = null; const first = pendingQueue.next; let update = first; do { if (update.hasEagerState) { newState = update.eagerState; } else { const action = update.action; newState = reducer(newState, action); } update = update.next; } while (update !== null && update !== first); } hook.memoizedState = queue.lastRenderedState = newState; return [hook.memoizedState, queue.dispatch]; } /** * 渲染函数组件 * @param current 老fiber * @param workInProgress 新fiber * @param Component 组件定义 * @param props 组件属性 * @returns 虚拟DOM或者React元素 */ export function renderWithHooks(current, workInProgress, Component, props) { currentlyRenderingFiber = workInProgress; if (current !== null && current.memoizedState !== null) { ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV; } else { ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV; } const children = Component(props); workInProgressHook = null; currentHook = null; currentlyRenderingFiber = null; return children; } \"]},\"339\":{\"h\":\"useState 源码小结\",\"t\":[\"useState 的执行流程与 useReducer 基本相同，同样地需要根据是否首次执行来动态切换 mountState 和 updateState 函数\",\"updateState 的过程与 updateReducer 几乎一行，实际上 React 内部设置了一个默认的执行函数 baseStateReducer，state 中的值会通过这个函数执行返回值重新为 memoizedState 赋值。所以 updateState 就变成了绑定了 baseStateReducer 执行函数的 updateReducer 函数调用\",\"mountState 相比 mountReducer，在初始化 queue 对象时额外声明了 lastRenderedReducer 和 lastRenderedState 函数，同时设置的派发函数 dispatchSetState 会在执行调度更新前，先获取 queue 中的 lastRenderedReducer, lastRenderedState 预先执行一次赋值返回，通过Object.is浅比较判断值是否改变，如果没有改变则直接退出，一定程度上优化了 useState 的使用\",\"需要注意的是，当前没有加入异步调度的源码，因此一次 button 按钮点击同时调用多次 setNumber 触发多次更新情况时，只会执行最后一个调度任务\"]},\"340\":{\"h\":\"手写源码仓库\",\"t\":[\"https://github.com/mi-saka10032/mini-react/tree/master/packages/state\"]},\"341\":{\"h\":\"Diff\",\"t\":[\"React 的核心设计之一就是基于虚拟 DOM 的 diff 算法，最大化地降低了 DOM 渲染压力。diff 算法主要分为两类：单节点 diff(SingleDiff)和多节点 diff(MultipleDiff)\"]},\"342\":{\"h\":\"单节点 Diff\",\"t\":[\"单节点diff流程图\",\"React 存在单节点的情况，除了单个的原生节点(div、span 等)、文本节点之外，还有我们熟悉的单个类组件、函数组件，这些都属于单节点 diff 的范畴\",\"现在以单节点 diff 存在的三种情况来分别讲解单节点 diff 策略\"]},\"343\":{\"h\":\"key 不同 type 相同\",\"t\":[\"单节点 key 不同，类型相同：删除老节点，添加新节点\"]},\"344\":{\"h\":\"main.jsx\",\"t\":[\"src\\\\main.jsx\",\"import * as React from \\\"react\\\"; import { createRoot } from \\\"react-dom/client\\\"; function FunctionComponent() { const [number, setNumber] = React.useState(0); return number === 0 ? ( <div onClick={() => setNumber(number + 1)} key=\\\"title1\\\" id=\\\"title\\\"> title </div> ) : ( <div onClick={() => setNumber(number + 1)} key=\\\"title2\\\" id=\\\"title2\\\"> title2 </div> ); } let element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); root.render(element); \"]},\"345\":{\"h\":\"ReactFiberFlags.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberFlags.js\",\"export const NoFlags = 0b00000000000000000000000000; export const Placement = 0b00000000000000000000000010; export const Update = 0b00000000000000000000000100; export const ChildDeletion = 0b00000000000000000000001000; export const MutationMask = Placement | Update; \"]},\"346\":{\"h\":\"ReactFiber.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiber.js\",\"export function FiberNode(tag, pendingProps, key) { this.tag = tag; this.key = key; this.type = null; this.stateNode = null; this.return = null; this.child = null; this.sibling = null; this.pendingProps = pendingProps; this.memoizedProps = null; this.updateQueue = null; this.memoizedState = null; this.flags = NoFlags; this.subtreeFlags = NoFlags; // 存放将要删除的子Fiber this.deletions = null; this.alternate = null; } \"]},\"347\":{\"h\":\"ReactDOMHostConfig.js\",\"t\":[\"export function removeChild(parentInstance, child) { parentInstance.removeChild(child); } \"]},\"348\":{\"h\":\"ReactChildFiber.js\",\"t\":[\"/** * @param shouldTracksSideEffects 是否跟踪副作用 */ import { REACT_ELEMENT_TYPE } from \\\"shared/ReactSymbols\\\"; import { createFiberFromElement, createFiberFromText, createWorkInProgress, FiberNode, } from \\\"./ReactFiber\\\"; import { Placement, ChildDeletion } from \\\"./ReactFiberFlags\\\"; import isArray from \\\"shared/isArray\\\"; import { HostText } from \\\"react-reconciler/src/ReactWorkTags\\\"; function createChildReconciler(shouldTracksSideEffects) { function useFiber(fiber, pendingProps) { const clone = createWorkInProgress(fiber, pendingProps); clone.index = 0; clone.sibling = null; return clone; } // 向fiber上推入需要删除的子节点 function deleteChild(returnFiber, childToDelete) { if (!shouldTracksSideEffects) { return; } const deletions = returnFiber.deletions; if (deletions === null) { returnFiber.deletions = [childToDelete]; returnFiber.flags |= ChildDeletion; } else { deletions.push(childToDelete); } } function reconcileSingleElement(returnFiber, currentFirstChild, element) { const key = element.key; let child = currentFirstChild; while (child !== null) { if (child.key === key) { const elementType = element.type; if (child.type === elementType) { const existing = useFiber(child, element.props); existing.return = returnFiber; return existing; } } else { // key不同，删除老fiber.child deleteChild(returnFiber, child); } child = child.sibling; } // 初次挂载 currentFirstFiber为null，可以直接根据虚拟DOM创建新的Fiber节点 const created = createFiberFromElement(element); created.return = returnFiber; return created; } /** * 设置副作用 * @param newFiber * @param newIndex */ function placeSingleChild(newFiber, newIndex) { // 如果为true，说明要添加副作用 if (shouldTracksSideEffects && newFiber.alternate === null) { // 副作用标识：插入DOM节点，在最后的提交阶段插入此节点 // React的渲染分渲染（创建Fiber树）和提交（更新真实DOM）两个阶段 newFiber.flags |= Placement; } return newFiber; } function reconcileSingleTextNode(returnFiber, currentFirstChild, content) { const created = new FiberNode(HostText, { content }, null); created.return = returnFiber; return created; } function placeChild(newFiber, newIndex) { newFiber.index = newIndex; if (shouldTracksSideEffects) { // 如果一个fiber的flags上有placement，说明此节点需要创建真实DOM，插入到父容器中 // 如果父fiber初次挂载，shouldTracksSideEffects为false，不需要添加flags // 这种情况下会在完成阶段把所有子阶段全部添加到自己身上 newFiber.flags |= Placement; } } function createChild(returnFiber, newChild) { if ( (typeof newChild === \\\"string\\\" && newChild !== \\\"\\\") || typeof newChild === \\\"number\\\" ) { // 创建虚拟DOM文本节点 const created = createFiberFromText(`${newChild}`); created.return = returnFiber; return created; } else if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { const created = createFiberFromElement(newChild); created.return = returnFiber; return created; } default: break; } } return null; } function reconcileChildrenArray(returnFiber, currentFirstFiber, newChildren) { let resultingFirstChild = null; // 返回的第一个新儿子 let previousNewFiber = null; // 之前的新fiber let newIndex = 0; // 遍历虚拟DOM根节点内的首层newChildren类型并生成不同fiber for (; newIndex < newChildren.length; newIndex++) { const newFiber = createChild(returnFiber, newChildren[newIndex]); if (newFiber === null) continue; // 把新fiber放到索引位置 placeChild(newFiber, newIndex); if (previousNewFiber === null) { // 这是第一个newFiber resultingFirstChild = newFiber; } else { // 不是第一个newFiber previousNewFiber.sibling = newFiber; } // 让newFiber成为上一个子Fiber previousNewFiber = newFiber; } return resultingFirstChild; } /** * 比较协调子fibers DOM-DIFF：用老的子fiber链表和新的虚拟DOM进行比较的过程 * @param returnFiber 新的父fiber * @param currentFirstChild current一般来说指老fiber的第一个子fiber * @param newChild 新的子虚拟DOM */ function reconcileChildFibers(returnFiber, currentFirstChild, newChild) { // 现在暂时只考虑新节点只有一个的情况 if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: return placeSingleChild( reconcileSingleElement(returnFiber, currentFirstChild, newChild) ); default: break; } // newChild [文本节点， span虚拟元素] if (isArray(newChild)) { return reconcileChildrenArray(returnFiber, currentFirstChild, newChild); } } if (typeof newChild === \\\"string\\\") { return placeSingleChild( reconcileSingleTextNode(returnFiber, currentFirstChild, newChild) ); } return null; } return reconcileChildFibers; } // 虚拟DOM初次挂载 export const mountChildFibers = createChildReconciler(false); //老fiber更新 export const reconcileChildFibers = createChildReconciler(true); \"]},\"349\":{\"h\":\"ReactFiberCommitWork.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberCommitWork.js\",\"import { appendChild, insertBefore, commitUpdate, removeChild, } from \\\"react-dom/src/client/ReactDOMHostConfig\\\"; import { FunctionComponent, HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; import { MutationMask, Placement, Update, } from \\\"react-reconciler/src/ReactFiberFlags\\\"; let hostParent = null; /** * 提交删除副作用 * @param root 根节点 * @param returnFiber 父fiber * @param deletedFiber 删除的fiber */ function commitDeletionEffects(root, returnFiber, deletedFiber) { let parent = returnFiber; // 一直向上查找直到找到真实DOM节点为止 findParent: while (parent !== null) { switch (parent.tag) { case HostComponent: { hostParent = parent.stateNode; break findParent; } case HostRoot: { hostParent = parent.stateNode.containerInfo; break findParent; } } parent = parent.return; } commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber); hostParent = null; } function commitDeletionEffectsOnFiber( finishedRoot, nearestMountedAncestor, deletedFiber ) { switch (deletedFiber.tag) { case HostComponent: case HostText: { // 递归处理子节点，当要删除一个节点的时候，要先删除它的子节点 不直接删除自己 recursivelyTraverseDeletionEffects( finishedRoot, nearestMountedAncestor, deletedFiber ); // 再把自己删除 if (hostParent !== null) { removeChild(hostParent, deletedFiber.stateNode); } break; } default: break; } } function recursivelyTraverseDeletionEffects( finishedRoot, nearestMountedAncestor, parent ) { let child = parent.child; while (child !== null) { commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child); child = child.sibling; } } /** * 递归遍历处理变更的副作用 * @param root 根节点 * @param parentFiber 父Fiber */ function recursivelyTraverseMutationEffects(root, parentFiber) { // 先把父Fiber上该删除的节点都删除 const deletions = parentFiber.deletions; if (deletions !== null) { for (let i = 0; i < deletions.length; i++) { const childToDelete = deletions[i]; commitDeletionEffects(root, parentFiber, childToDelete); } } // 再去处理剩下的子节点 if (parentFiber.subtreeFlags & MutationMask) { let { child } = parentFiber; while (child !== null) { commitMutationEffectsOnFiber(child, root); child = child.sibling; } } } function commitReconciliationEffects(finishedWork) { const { flags } = finishedWork; if (flags && Placement) { // 进行插入操作，也就是把此fiber对应的真实DOM节点添加到父真实DOM上 commitPlacement(finishedWork); // 把flags里的Placement删除 finishedWork.flags &= ~Placement; } } function isHostParent(fiber) { return fiber.tag === HostComponent || fiber.tag === HostRoot; //只有根fiber或根组件节点才能作为父fiber } function getHostParentFiber(fiber) { let parent = fiber.return; while (parent !== null) { if (isHostParent(parent)) { return parent; } parent = parent.return; } } /** * 把子节点对应的真实DOM插入到父节点DOM中 * @param node 将要插入的fiber节点 * @param before 待insertBefore的DOM节点 * @param parent 父真实DOM节点 */ function insertOrAppendPlacementNode(node, before, parent) { const { tag } = node; // 判断此fiber对应的节点是不是真实DOM节点 const isHost = tag === HostComponent || tag === HostText; if (isHost) { // 如果是的话就直接插入 const { stateNode } = node; if (before) { insertBefore(parent, stateNode, before); } else { appendChild(parent, stateNode); } } else { // 如果node不是真实DOM节点，获取它的child const { child } = node; if (child !== null) { insertOrAppendPlacementNode(child, before, parent); let { sibling } = child; while (sibling !== null) { insertOrAppendPlacementNode(sibling, before, parent); sibling = sibling.sibling; } } } } /** * 找到要插入的锚点 * 找到可以插在它前面的那个fiber对应的真实DOM * @param fiber */ function getHostSibling(fiber) { let node = fiber; siblings: while (true) { while (node.sibling === null) { if (node.return === null || isHostParent(node.return)) { return null; } node = node.return; } node = node.sibling; // 如果弟弟不是原生节点or文本节点，不是要插入的节点，需要寻找弟弟或儿子 while (node.tag !== HostComponent || node.tag !== HostText) { // 如果此节点是一个将要插入的新节点，找它的弟弟，否则找儿子 if (node.flags && Placement) { continue siblings; } else { node = node.child; } } if (!(node.flags && Placement)) { return node.stateNode; } } } /** * 把此fiber的真实DOM插入到父DOM里 * @param finishedWork */ function commitPlacement(finishedWork) { const parentFiber = getHostParentFiber(finishedWork); switch (parentFiber.tag) { case HostRoot: { const parent = parentFiber.stateNode.containerInfo; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } case HostComponent: { const parent = parentFiber.stateNode; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } } } /** * 遍历Fiber树，执行fiber上的副作用 * @param finishedWork fiberJ节点 * @param root 根节点 */ export function commitMutationEffectsOnFiber(finishedWork, root) { const current = finishedWork.alternate; const flags = finishedWork.flags; switch (finishedWork.tag) { case HostRoot: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); break; } case FunctionComponent: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); break; } case HostComponent: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); // 识别更新副作用标识，判断执行更新 if (flags & Update) { const instance = finishedWork.stateNode; if (instance !== null) { const newProps = finishedWork.memoizedProps; const oldProps = current !== null ? current.memoizedProps : newProps; const type = finishedWork.type; const updatePayload = finishedWork.updateQueue; finishedWork.updateQueue = null; if (updatePayload !== null) { commitUpdate( instance, updatePayload, type, oldProps, newProps, finishedWork ); } } } break; } case HostText: // 遍历子节点，处理子节点上的副作用 recursivelyTraverseMutationEffects(root, finishedWork); // 再处理自己身上的副作用 commitReconciliationEffects(finishedWork); break; default: break; } } \"]},\"350\":{\"h\":\"key 相同 type 不同\",\"t\":[\"这种情况其实跟 key 不同 type 相同一样，删除老节点添加新节点，对 ReactChildFiber 中的 reconcileSingleElement 方法做补充\"]},\"351\":{\"h\":\"main.jsx\",\"t\":[\"src\\\\main.jsx\",\"import * as React from \\\"react\\\"; import { createRoot } from \\\"react-dom/client\\\"; function FunctionComponent() { const [number, setNumber] = React.useState(0); return number === 0 ? ( <div onClick={() => setNumber(number + 1)} key=\\\"title1\\\" id=\\\"title1\\\"> title1 </div> ) : ( <p onClick={() => setNumber(number + 1)} key=\\\"title1\\\" id=\\\"title1\\\"> title1 </p> ); } let element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); root.render(element); \"]},\"352\":{\"h\":\"ReactChildFiber.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactChildFiber.js\",\"/** * @param shouldTracksSideEffects 是否跟踪副作用 */ import { REACT_ELEMENT_TYPE } from \\\"shared/ReactSymbols\\\"; import { createFiberFromElement, createFiberFromText, createWorkInProgress, FiberNode, } from \\\"./ReactFiber\\\"; import { Placement, ChildDeletion } from \\\"./ReactFiberFlags\\\"; import isArray from \\\"shared/isArray\\\"; import { HostText } from \\\"react-reconciler/src/ReactWorkTags\\\"; function createChildReconciler(shouldTracksSideEffects) { function useFiber(fiber, pendingProps) { const clone = createWorkInProgress(fiber, pendingProps); clone.index = 0; clone.sibling = null; return clone; } function deleteChild(returnFiber, childToDelete) { if (!shouldTracksSideEffects) { return; } const deletions = returnFiber.deletions; if (deletions === null) { returnFiber.deletions = [childToDelete]; returnFiber.flags |= ChildDeletion; } else { deletions.push(childToDelete); } } // 删除从currentFirstChild之后的所有fiber节点 function deleteRemainingChildren(returnFiber, currentFirstChild) { if (!shouldTracksSideEffects) { return null; } let childToDelete = currentFirstChild; while (childToDelete !== null) { deleteChild(returnFiber, childToDelete); childToDelete = childToDelete.sibling; } return null; } function reconcileSingleElement(returnFiber, currentFirstChild, element) { const key = element.key; let child = currentFirstChild; while (child !== null) { if (child.key === key) { const elementType = element.type; if (child.type === elementType) { // key相同且元素类型相同，fiber复用 deleteRemainingChildren(returnFiber, child.sibling); const existing = useFiber(child, element.props); existing.return = returnFiber; return existing; } else { // key相同但是类型不同，删除剩下的全部fiber.child deleteRemainingChildren(returnFiber, child); } } else { // key不同，删除老fiber.child deleteChild(returnFiber, child); } child = child.sibling; } // 初次挂载 currentFirstFiber为null，可以直接根据虚拟DOM创建新的Fiber节点 const created = createFiberFromElement(element); created.return = returnFiber; return created; } /** * 设置副作用 * @param newFiber * @param newIndex */ function placeSingleChild(newFiber, newIndex) { // 如果为true，说明要添加副作用 if (shouldTracksSideEffects && newFiber.alternate === null) { // 副作用标识：插入DOM节点，在最后的提交阶段插入此节点 // React的渲染分渲染（创建Fiber树）和提交（更新真实DOM）两个阶段 newFiber.flags |= Placement; } return newFiber; } function reconcileSingleTextNode(returnFiber, currentFirstChild, content) { const created = new FiberNode(HostText, { content }, null); created.return = returnFiber; return created; } function placeChild(newFiber, newIndex) { newFiber.index = newIndex; if (shouldTracksSideEffects) { // 如果一个fiber的flags上有placement，说明此节点需要创建真实DOM，插入到父容器中 // 如果父fiber初次挂载，shouldTracksSideEffects为false，不需要添加flags // 这种情况下会在完成阶段把所有子阶段全部添加到自己身上 newFiber.flags |= Placement; } } function createChild(returnFiber, newChild) { if ( (typeof newChild === \\\"string\\\" && newChild !== \\\"\\\") || typeof newChild === \\\"number\\\" ) { // 创建虚拟DOM文本节点 const created = createFiberFromText(`${newChild}`); created.return = returnFiber; return created; } else if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { const created = createFiberFromElement(newChild); created.return = returnFiber; return created; } default: break; } } return null; } function reconcileChildrenArray(returnFiber, currentFirstFiber, newChildren) { let resultingFirstChild = null; // 返回的第一个新儿子 let previousNewFiber = null; // 之前的新fiber let newIndex = 0; // 遍历虚拟DOM根节点内的首层newChildren类型并生成不同fiber for (; newIndex < newChildren.length; newIndex++) { const newFiber = createChild(returnFiber, newChildren[newIndex]); if (newFiber === null) continue; // 把新fiber放到索引位置 placeChild(newFiber, newIndex); if (previousNewFiber === null) { // 这是第一个newFiber resultingFirstChild = newFiber; } else { // 不是第一个newFiber previousNewFiber.sibling = newFiber; } // 让newFiber成为上一个子Fiber previousNewFiber = newFiber; } return resultingFirstChild; } /** * 比较协调子fibers DOM-DIFF：用老的子fiber链表和新的虚拟DOM进行比较的过程 * @param returnFiber 新的父fiber * @param currentFirstChild current一般来说指老fiber的第一个子fiber * @param newChild 新的子虚拟DOM */ function reconcileChildFibers(returnFiber, currentFirstChild, newChild) { // 现在暂时只考虑新节点只有一个的情况 if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: return placeSingleChild( reconcileSingleElement(returnFiber, currentFirstChild, newChild) ); default: break; } // newChild [文本节点， span虚拟元素] if (isArray(newChild)) { return reconcileChildrenArray(returnFiber, currentFirstChild, newChild); } } if (typeof newChild === \\\"string\\\") { return placeSingleChild( reconcileSingleTextNode(returnFiber, currentFirstChild, newChild) ); } return null; } return reconcileChildFibers; } // 虚拟DOM初次挂载 export const mountChildFibers = createChildReconciler(false); //老fiber更新 export const reconcileChildFibers = createChildReconciler(true); \"]},\"353\":{\"h\":\"多节点剩一个节点\",\"t\":[\"此种情况在上一个情况中的 ReactChildFiber.js 的 deleteRemainingChildren 方法中已经实现，多节点下的单节点可复用时，其他节点尽数删除\",\"import * as React from \\\"react\\\"; import { createRoot } from \\\"react-dom/client\\\"; function FunctionComponent() { const [number, setNumber] = React.useState(0); return number === 0 ? ( <ul key=\\\"container\\\" onClick={() => setNumber(number + 1)}> <li key=\\\"A\\\">A</li> <li key=\\\"B\\\" id=\\\"B\\\"> B </li> <li key=\\\"C\\\">C</li> </ul> ) : ( <ul key=\\\"container\\\" onClick={() => setNumber(number + 1)}> <li key=\\\"B\\\" id=\\\"B2\\\"> B2 </li> </ul> ); } let element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); root.render(element); \"]},\"354\":{\"h\":\"多节点 Diff\",\"t\":[\"React 最复杂的正是多节点的 Diff 分辨与遍历规则\",\"Diff 规则有三：\",\"只对同级元素进行比较，不同层级不对比\",\"不同的类型对应不同的元素\",\"可以通过 key 来标识同一个节点\",\"遍历顺序有三：\",\"第一轮遍历\",\"如果 key 不同则直接结束本轮循环\",\"newChildren 或 oldFiber 遍历完，结束本轮循环\",\"key 相同而 type 也相同，则可以复用老节 oldFiber 节点，继续循环\",\"第二轮遍历\",\"newChildren 遍历完而 oldFiber 还有，遍历剩下所有的 oldFiber 标记为删除，DIFF 结束\",\"oldFiber 遍历完了，而 newChildren 还有，将剩下的 newChildren 标记为插入，DIFF 结束\",\"newChildren 和 oldFiber 都同时遍历完成，diff 结束\",\"newChildren 和 oldFiber 都没有完成，则进行节点移动的逻辑，进入下一轮遍历\",\"第三轮遍历\",\"处理节点移动的情况\"]},\"355\":{\"h\":\"前两轮遍历\",\"t\":[\"这里列举前两轮遍历的一种理想情况，新旧节点的数量相同，key 相同，有的 type 不同\",\"这种情况下，第一轮遍历会在 updateElement 函数中对这些 key 都相同的节点进行 type 比较，不同的老节点推入 deletion，新节点创建新 fiber\",\"多节点diff第一轮循环\"]},\"356\":{\"h\":\"src\\\\main.jsx\",\"t\":[\"src\\\\main.jsx\",\"import * as React from \\\"react\\\"; import { createRoot } from \\\"react-dom/client\\\"; function FunctionComponent() { console.log(\\\"FunctionComponent\\\"); const [number, setNumber] = React.useState(0); return number === 0 ? ( <ul key=\\\"container\\\" onClick={() => setNumber(number + 1)}> <li key=\\\"A\\\">A</li> <li key=\\\"B\\\" id=\\\"B\\\"> B </li> <li key=\\\"C\\\" id=\\\"C\\\"> C </li> </ul> ) : ( <ul key=\\\"container\\\" onClick={() => setNumber(number + 1)}> <li key=\\\"A\\\">A2</li> <p key=\\\"B\\\" id=\\\"B2\\\"> B2 </p> <li key=\\\"C\\\" id=\\\"C2\\\"> C2 </li> </ul> ); } let element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); root.render(element); \"]},\"357\":{\"h\":\"ReactChildFiber.jS\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactChildFiber.js\",\"/** * @param shouldTracksSideEffects 是否跟踪副作用 */ import { REACT_ELEMENT_TYPE } from \\\"shared/ReactSymbols\\\"; import { createFiberFromElement, createFiberFromText, createWorkInProgress, FiberNode, } from \\\"./ReactFiber\\\"; import { Placement, ChildDeletion } from \\\"./ReactFiberFlags\\\"; import isArray from \\\"shared/isArray\\\"; import { HostText } from \\\"react-reconciler/src/ReactWorkTags\\\"; function createChildReconciler(shouldTracksSideEffects) { function useFiber(fiber, pendingProps) { const clone = createWorkInProgress(fiber, pendingProps); clone.index = 0; clone.sibling = null; return clone; } function deleteChild(returnFiber, childToDelete) { if (!shouldTracksSideEffects) { return; } const deletions = returnFiber.deletions; if (deletions === null) { returnFiber.deletions = [childToDelete]; returnFiber.flags |= ChildDeletion; } else { deletions.push(childToDelete); } } // 删除从currentFirstChild之后的所有fiber节点 function deleteRemainingChildren(returnFiber, currentFirstChild) { if (!shouldTracksSideEffects) { return null; } let childToDelete = currentFirstChild; while (childToDelete !== null) { deleteChild(returnFiber, childToDelete); childToDelete = childToDelete.sibling; } return null; } function reconcileSingleElement(returnFiber, currentFirstChild, element) { const key = element.key; let child = currentFirstChild; while (child !== null) { if (child.key === key) { const elementType = element.type; if (child.type === elementType) { // key相同且元素类型相同，fiber复用 deleteRemainingChildren(returnFiber, child.sibling); const existing = useFiber(child, element.props); existing.return = returnFiber; return existing; } else { // key相同但是类型不同，删除剩下的全部fiber.child deleteRemainingChildren(returnFiber, child); } } else { // key不同，删除老fiber.child deleteChild(returnFiber, child); } child = child.sibling; } // 初次挂载 currentFirstFiber为null，可以直接根据虚拟DOM创建新的Fiber节点 const created = createFiberFromElement(element); created.return = returnFiber; return created; } /** * 设置副作用 * @param newFiber * @param newIndex */ function placeSingleChild(newFiber, newIndex) { // 如果为true，说明要添加副作用 if (shouldTracksSideEffects && newFiber.alternate === null) { // 副作用标识：插入DOM节点，在最后的提交阶段插入此节点 // React的渲染分渲染（创建Fiber树）和提交（更新真实DOM）两个阶段 newFiber.flags |= Placement; } return newFiber; } function reconcileSingleTextNode(returnFiber, currentFirstChild, content) { const created = new FiberNode(HostText, { content }, null); created.return = returnFiber; return created; } function placeChild(newFiber, newIndex) { newFiber.index = newIndex; if (shouldTracksSideEffects) { // 如果一个fiber的flags上有placement，说明此节点需要创建真实DOM，插入到父容器中 // 如果父fiber初次挂载，shouldTracksSideEffects为false，不需要添加flags // 这种情况下会在完成阶段把所有子阶段全部添加到自己身上 const current = newFiber.alternate; if (current === null) { // 新节点，需要插入 newFiber.flags |= Placement; } } } function createChild(returnFiber, newChild) { if ( (typeof newChild === \\\"string\\\" && newChild !== \\\"\\\") || typeof newChild === \\\"number\\\" ) { // 创建虚拟DOM文本节点 const created = createFiberFromText(`${newChild}`); created.return = returnFiber; return created; } else if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { const created = createFiberFromElement(newChild); created.return = returnFiber; return created; } default: break; } } return null; } function updateElement(returnFiber, current, element) { const elementType = element.type; if (current !== null) { // key和type都相同 if (current.type === elementType) { const existing = useFiber(current, element.props); existing.return = returnFiber; return existing; } } const created = createFiberFromElement(element); created.return = returnFiber; return created; } function updateSlot(returnFiber, oldFiber, newChild) { const key = oldFiber !== null ? oldFiber.key : null; if (newChild !== null && typeof newChild === \\\"object\\\") { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { if (newChild.key === key) { return updateElement(returnFiber, oldFiber, newChild); } } default: return null; } } } function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren) { let resultingFirstChild = null; // 返回的第一个新儿子 let previousNewFiber = null; // 之前的新fiber let newIdx = 0; // 遍历新虚拟DOM的索引 let oldFiber = currentFirstChild; // 第一个老fiber let nextOldFiber = null; // 下一个老fiber // 开始第一轮循环 如果老fiber有值，新的虚拟DOM也有值 for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) { // 暂存下一个老fiber nextOldFiber = oldFiber.sibling; // 试图更新或者试图复用老的fiber const newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx]); if (newFiber === null) { break; } if (shouldTracksSideEffects) { // 有老fiber，但是新的fiber并没有成功复用老fiber和老的真实DOM，删除老fiber，提交阶段删除真实DOM if (oldFiber && newFiber.alternate === null) { deleteChild(returnFiber, oldFiber); } } // 指定新fiber的位置 placeChild(newFiber, newIdx); if (previousNewFiber === null) { resultingFirstChild = newFiber; } else { previousNewFiber.sibling = newFiber; } previousNewFiber = newFiber; oldFiber = nextOldFiber; } // 新的虚拟DOM已经循环完毕 if (newIdx === newChildren.length) { // 第二轮循环情况1 删除剩下的老fiber deleteRemainingChildren(returnFiber, oldFiber); return resultingFirstChild; } if (oldFiber === null) { // 第二轮循环情况2 老fiber已经没有了，新的虚拟DOM还在，进入插入新节点的逻辑 for (; newIdx < newChildren.length; newIdx++) { const newFiber = createChild(returnFiber, newChildren[newIdx]); if (newFiber === null) continue; // 把新fiber放到索引位置 placeChild(newFiber, newIdx); if (previousNewFiber === null) { // 这是第一个newFiber resultingFirstChild = newFiber; } else { // 不是第一个newFiber previousNewFiber.sibling = newFiber; } // 让newFiber成为上一个子Fiber previousNewFiber = newFiber; } } return resultingFirstChild; } /** * 比较协调子fibers DOM-DIFF：用老的子fiber链表和新的虚拟DOM进行比较的过程 * @param returnFiber 新的父fiber * @param currentFirstChild current一般来说指老fiber的第一个子fiber * @param newChild 新的子虚拟DOM */ function reconcileChildFibers(returnFiber, currentFirstChild, newChild) { // 现在暂时只考虑新节点只有一个的情况 if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: return placeSingleChild( reconcileSingleElement(returnFiber, currentFirstChild, newChild) ); default: break; } // newChild [文本节点， span虚拟元素] if (isArray(newChild)) { return reconcileChildrenArray(returnFiber, currentFirstChild, newChild); } } if (typeof newChild === \\\"string\\\") { return placeSingleChild( reconcileSingleTextNode(returnFiber, currentFirstChild, newChild) ); } return null; } return reconcileChildFibers; } // 虚拟DOM初次挂载 export const mountChildFibers = createChildReconciler(false); //老fiber更新 export const reconcileChildFibers = createChildReconciler(true); \",\"因为第二轮遍历也相对简单，主要是对第一轮遍历彻底完成后残留的新旧节点做处理，因此上面的 ReactChildFiber.js 已经补全了这部分逻辑\"]},\"358\":{\"h\":\"第三轮遍历\",\"t\":[\"接下来讨论情况最复杂的第三轮遍历，前两轮遍历已经对头部 key 相同的节点进行了处理，最后进入第三轮遍历前，新旧节点依然存在数量相等或不等的乱序节点，key 和 type 也不尽相同\",\"以下面这张节点图为例，描述具体的第三轮遍历 diff 规则：\",\"多节点diff第三轮循环\",\"其实第三轮遍历的关键在于对于剩余 oldFiber 的 map 映射表建立，以及剩余 newChildren 遍历过程中对 lastPlacedIndex 这个索引的判断来进行增加、更新、删除等操作\"]},\"359\":{\"h\":\"src\\\\main.jsx\",\"t\":[\"src\\\\main.jsx\",\"import * as React from \\\"react/index\\\"; import { createRoot } from \\\"react-dom/client\\\"; function FunctionComponent() { console.log(\\\"FunctionComponent\\\"); const [number, setNumber] = React.useState(0); return number === 0 ? ( <ul key=\\\"container\\\" onClick={() => setNumber(number + 1)}> <li key=\\\"A\\\">A</li> <li key=\\\"B\\\" id=\\\"b\\\"> B </li> <li key=\\\"C\\\">C</li> <li key=\\\"D\\\">D</li> <li key=\\\"E\\\">E</li> <li key=\\\"F\\\">F</li> </ul> ) : ( <ul key=\\\"container\\\" onClick={() => setNumber(number + 1)}> <li key=\\\"A\\\">A2</li> <li key=\\\"C\\\">C2</li> <li key=\\\"E\\\">E2</li> <li key=\\\"B\\\" id=\\\"b2\\\"> B2 </li> <li key=\\\"G\\\">G</li> <li key=\\\"D\\\">D2</li> </ul> ); } const element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); // 把element虚拟DOM挂载到容器中 root.render(element); \"]},\"360\":{\"h\":\"ReactFiberWorkLoop.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberWorkLoop.js\",\"这里引入一下打印日志函数，便于查看 diff 细节\",\"import { scheduleCallback } from \\\"scheduler/index\\\"; import { createWorkInProgress } from \\\"./ReactFiber\\\"; import { beginWork } from \\\"./ReactFiberBeginWork\\\"; import { completeWork } from \\\"./ReactFiberCompleteWork\\\"; import { NoFlags, MutationMask, Placement, Update, ChildDeletion, } from \\\"react-reconciler/src/ReactFiberFlags\\\"; import { commitMutationEffectsOnFiber } from \\\"./ReactFiberCommitWork\\\"; import { finishQueueingConcurrentUpdates } from \\\"./ReactFiberConcurrentUpdates\\\"; import { FunctionComponent, HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; let workInProgress = null; /** * 计划更新root * 源码中此处有一个调度任务的功能 * @param {*}root */ export function scheduleUpdateOnFiber(root) { // 确保调度执行root上的更新 ensureRootIsScheduled(root); } function ensureRootIsScheduled(root) { // 告诉浏览器要执行performConcurrentWorkOnRoot函数，参数为root scheduleCallback(performConcurrentWorkOnRoot.bind(null, root)); } /** * 开始根据fiber构建fiber树，要创建真实的DOM节点，再把真实的DOM节点插入容器 * @param {*} root */ function performConcurrentWorkOnRoot(root) { // 第一次渲染以同步的方式渲染根节点，初次渲染的时候，都是同步执行 renderRootSync(root); // 开始进入提交阶段，就是执行副作用，修改真实DOM const finishedWork = root.current.alternate; root.finishedWork = finishedWork; commitRoot(root); } function commitRoot(root) { const { finishedWork } = root; printFinishedWork(finishedWork); console.log(\\\"~~~~~~~~~~~~~~~~~~~\\\"); const subtreeHasEffects = (finishedWork.subtreeFlags && MutationMask) !== NoFlags; const rootHasEffect = (finishedWork.flags && MutationMask) !== NoFlags; if (subtreeHasEffects || rootHasEffect) { commitMutationEffectsOnFiber(finishedWork, root); } // 等DOM变更后，就可以把root的current指向新Fiber树 root.current = finishedWork; } function prepareFreshStack(root) { workInProgress = createWorkInProgress(root.current, null); finishQueueingConcurrentUpdates(); } function renderRootSync(root) { // 开始构建fiber树 // 双缓冲技术，页面显示区域为current映射，对应真实DOM，代表当前已经渲染完成的Fiber // 内存中的Fiber构建、比较、更新为workInProgress映射，表示还未生效，没有更新的DOM上的Fiber树 // 1. current的HostRootFiber在构建过程中不作变化 // 2. workInProgress在内存中顺序构建Fiber树 prepareFreshStack(root); workLoopSync(); } function workLoopSync() { while (workInProgress !== null) { performUnitOfWork(workInProgress); } } /** * 执行一个工作单元 * @param unitOfWork */ function performUnitOfWork(unitOfWork) { // 获取新fiber对应的老fiber，是页面上显示的current的fiber const current = unitOfWork.alternate; // 完成当前fiber的子fiber链表构建 const next = beginWork(current, unitOfWork); // 同步工作单元中的props unitOfWork.memoizedProps = unitOfWork.pendingProps; // 没有子节点，表示工作单元递归的 递 阶段已结束，需要return执行completeWork if (next === null) { // 没有子节点，表示当前fiber的beginWork已经完成，执行completeWork completeUnitOfWork(unitOfWork); } else { workInProgress = next; } } function completeUnitOfWork(unitOfWork) { let completedWork = unitOfWork; do { // 替代fiber const current = completedWork.alternate; // 父fiber const returnFiber = completedWork.return; // 执行此fiber的完成工作 // 如果是原生组件，就是创建真实DOM节点 completeWork(current, completedWork); // 如果有弟弟，构建弟弟对应的fiber子链表 const siblingFiber = completedWork.sibling; if (siblingFiber !== null) { // 如果存在兄弟节点，则workInProgress赋值兄弟节点，循环退出，等待下一次工作单元执行beginWork workInProgress = siblingFiber; return; } // 如果没有弟弟，说明这当前完成的就是父fiber的最后一个节点 // 也就是说一个父fiber，它的所有子fiber全部完成了 completedWork = returnFiber; workInProgress = completedWork; // 执行递归的 归阶段，当兄弟节点为空的时候执行while循环往上返回，直到根fiber时退出循环 } while (completedWork !== null); } function printFinishedWork(fiber) { const { flags, deletions } = fiber; if ((flags & ChildDeletion) !== NoFlags) { fiber.flags &= ~ChildDeletion; for (let i = 0; i < deletions.length; i++) { console.log( \\\"子节点有删除\\\", deletions[i].type, deletions[i].memoizedProps ); } } let child = fiber.child; while (child) { printFinishedWork(child); child = child.sibling; } if (fiber.flags !== NoFlags) { console.log( getFlags(fiber), getTag(fiber.tag), typeof fiber.type === \\\"function\\\" ? fiber.type.name : fiber.type, fiber.memoizedProps ); } } function getFlags(fiber) { const { flags, deletions } = fiber; if (flags === Placement) { return \\\"插入\\\"; } if (flags === Update) { return \\\"更新\\\"; } return flags; } function getTag(tag) { switch (tag) { case FunctionComponent: return \\\"FunctionComponent\\\"; case HostRoot: return \\\"HostRoot\\\"; case HostComponent: return \\\"HostComponent\\\"; case HostText: return \\\"HostText\\\"; default: return tag; } } \"]},\"361\":{\"h\":\"ReactChildFiber.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactChildFiber.js\",\"/** * @param shouldTracksSideEffects 是否跟踪副作用 */ import { REACT_ELEMENT_TYPE } from \\\"shared/ReactSymbols\\\"; import { createFiberFromElement, createFiberFromText, createWorkInProgress, FiberNode, } from \\\"./ReactFiber\\\"; import { Placement, ChildDeletion } from \\\"./ReactFiberFlags\\\"; import isArray from \\\"shared/isArray\\\"; import { HostText } from \\\"react-reconciler/src/ReactWorkTags\\\"; function createChildReconciler(shouldTracksSideEffects) { function useFiber(fiber, pendingProps) { const clone = createWorkInProgress(fiber, pendingProps); clone.index = 0; clone.sibling = null; return clone; } function deleteChild(returnFiber, childToDelete) { if (!shouldTracksSideEffects) { return; } const deletions = returnFiber.deletions; if (deletions === null) { returnFiber.deletions = [childToDelete]; returnFiber.flags |= ChildDeletion; } else { deletions.push(childToDelete); } } // 删除从currentFirstChild之后的所有fiber节点 function deleteRemainingChildren(returnFiber, currentFirstChild) { if (!shouldTracksSideEffects) { return null; } let childToDelete = currentFirstChild; while (childToDelete !== null) { deleteChild(returnFiber, childToDelete); childToDelete = childToDelete.sibling; } return null; } function reconcileSingleElement(returnFiber, currentFirstChild, element) { const key = element.key; let child = currentFirstChild; while (child !== null) { if (child.key === key) { const elementType = element.type; if (child.type === elementType) { // key相同且元素类型相同，fiber复用 deleteRemainingChildren(returnFiber, child.sibling); const existing = useFiber(child, element.props); existing.return = returnFiber; return existing; } else { // key相同但是类型不同，删除剩下的全部fiber.child deleteRemainingChildren(returnFiber, child); } } else { // key不同，删除老fiber.child deleteChild(returnFiber, child); } child = child.sibling; } // 初次挂载 currentFirstFiber为null，可以直接根据虚拟DOM创建新的Fiber节点 const created = createFiberFromElement(element); created.return = returnFiber; return created; } /** * 设置副作用 * @param newFiber * @param newIndex */ function placeSingleChild(newFiber, newIndex) { // 如果为true，说明要添加副作用 if (shouldTracksSideEffects && newFiber.alternate === null) { // 副作用标识：插入DOM节点，在最后的提交阶段插入此节点 // React的渲染分渲染（创建Fiber树）和提交（更新真实DOM）两个阶段 newFiber.flags |= Placement; } return newFiber; } function reconcileSingleTextNode(returnFiber, currentFirstChild, content) { const created = new FiberNode(HostText, { content }, null); created.return = returnFiber; return created; } function placeChild(newFiber, lastPlacedIndex, newIndex) { newFiber.index = newIndex; // 如果不需要跟踪副作用 if (!shouldTracksSideEffects) { return lastPlacedIndex; } // 如果一个fiber的flags上有placement，说明此节点需要创建真实DOM，插入到父容器中 // 如果父fiber初次挂载，shouldTracksSideEffects为false，不需要添加flags // 这种情况下会在完成阶段把所有子阶段全部添加到自己身上 const current = newFiber.alternate; if (current === null) { // 新节点，需要插入 newFiber.flags |= Placement; return lastPlacedIndex; } else { const oldIndex = current.index; // 如果老fiber的索引比lastPlacedIndex要小，则老fiber对应的DOM节点需要移动 if (oldIndex < lastPlacedIndex) { newFiber.flags |= Placement; return lastPlacedIndex; } else { return oldIndex; } } } function createChild(returnFiber, newChild) { if ( (typeof newChild === \\\"string\\\" && newChild !== \\\"\\\") || typeof newChild === \\\"number\\\" ) { // 创建虚拟DOM文本节点 const created = createFiberFromText(`${newChild}`); created.return = returnFiber; return created; } else if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { const created = createFiberFromElement(newChild); created.return = returnFiber; return created; } default: break; } } return null; } function updateElement(returnFiber, current, element) { const elementType = element.type; if (current !== null) { // key和type都相同 if (current.type === elementType) { const existing = useFiber(current, element.props); existing.return = returnFiber; return existing; } } const created = createFiberFromElement(element); created.return = returnFiber; return created; } function updateSlot(returnFiber, oldFiber, newChild) { const key = oldFiber !== null ? oldFiber.key : null; if (newChild !== null && typeof newChild === \\\"object\\\") { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { if (newChild.key === key) { return updateElement(returnFiber, oldFiber, newChild); } } default: return null; } } } function mapRemainingChildren(returnFiber, currentFirstChild) { const existingChildren = new Map(); let existingChild = currentFirstChild; while (existingChild !== null) { // 有key用key，无key用index if (existingChild.key !== null) { existingChildren.set(existingChild.key, existingChild); } else { existingChildren.set(existingChild.index, existingChild); } existingChild = existingChild.sibling; } return existingChildren; } function updateTextNode(returnFiber, current, textContent) { if (current === null || current.tag !== HostText) { const created = createFiberFromText(textContent); created.return = returnFiber; return created; } else { const existing = useFiber(current, textContent); existing.return = returnFiber; return existing; } } function updateFromMap(existingChildren, returnFiber, newIdx, newChild) { if ( (typeof newChild === \\\"string\\\" && newChild !== \\\"\\\") || typeof newChild === \\\"number\\\" ) { const matchedFiber = existingChildren.get(newIdx) || null; return updateTextNode(returnFiber, matchedFiber, \\\"\\\" + newChild); } if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { const matchedFiber = existingChildren.get( newChild.key === null ? newIdx : newChild.key ) || null; return updateElement(returnFiber, matchedFiber, newChild); } } } } function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren) { let resultingFirstChild = null; // 返回的第一个新儿子 let previousNewFiber = null; // 之前的新fiber let newIdx = 0; // 遍历新虚拟DOM的索引 let oldFiber = currentFirstChild; // 第一个老fiber let nextOldFiber = null; // 下一个老fiber let lastPlacedIndex = 0; // 上一个不需要移动的老节点的索引 // 开始第一轮循环 如果老fiber有值，新的虚拟DOM也有值 for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) { // 暂存下一个老fiber nextOldFiber = oldFiber.sibling; // 试图更新或者试图复用老的fiber const newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx]); if (newFiber === null) { break; } if (shouldTracksSideEffects) { // 有老fiber，但是新的fiber并没有成功复用老fiber和老的真实DOM，删除老fiber，提交阶段删除真实DOM if (oldFiber && newFiber.alternate === null) { deleteChild(returnFiber, oldFiber); } } // 指定新fiber的位置 lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx); if (previousNewFiber === null) { resultingFirstChild = newFiber; } else { previousNewFiber.sibling = newFiber; } previousNewFiber = newFiber; oldFiber = nextOldFiber; } // 新的虚拟DOM已经循环完毕 if (newIdx === newChildren.length) { // 第二轮循环情况1 删除剩下的老fiber deleteRemainingChildren(returnFiber, oldFiber); return resultingFirstChild; } if (oldFiber === null) { // 第二轮循环情况2 老fiber已经没有了，新的虚拟DOM还在，进入插入新节点的逻辑 for (; newIdx < newChildren.length; newIdx++) { const newFiber = createChild(returnFiber, newChildren[newIdx]); if (newFiber === null) continue; // 把新fiber放到索引位置 lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx); if (previousNewFiber === null) { // 这是第一个newFiber resultingFirstChild = newFiber; } else { // 不是第一个newFiber previousNewFiber.sibling = newFiber; } // 让newFiber成为上一个子Fiber previousNewFiber = newFiber; } } // 第三轮循环 开始处理移动的情况 const existingChildren = mapRemainingChildren(returnFiber, oldFiber); // 开始遍历剩下的虚拟DOM子节点 for (; newIdx < newChildren.length; newIdx++) { const newFiber = updateFromMap( existingChildren, returnFiber, newIdx, newChildren[newIdx] ); if (newFiber !== null) { if (shouldTracksSideEffects) { // 需要跟踪副作用且存在的老fiber if (newFiber.alternate !== null) { existingChildren.delete( newFiber.key === null ? newIdx : newFiber.key ); } } // 指定新fiber的存放位置，并且给lastPlacedIndex赋值 lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx); if (previousNewFiber === null) { resultingFirstChild = newFiber; // 这个newFiber就是大儿子 } else { // 否则说明不是大儿子，把这个newFiber添加上一个子节点后面 previousNewFiber.sibling = newFiber; } // 让newFiber成为最后一个或上一个子Fiber previousNewFiber = newFiber; } } if (shouldTracksSideEffects) { // 全部处理完之后，删除map中所有剩下的老fiber existingChildren.forEach((child) => deleteChild(returnFiber, child)); } return resultingFirstChild; } /** * 比较协调子fibers DOM-DIFF：用老的子fiber链表和新的虚拟DOM进行比较的过程 * @param returnFiber 新的父fiber * @param currentFirstChild current一般来说指老fiber的第一个子fiber * @param newChild 新的子虚拟DOM */ function reconcileChildFibers(returnFiber, currentFirstChild, newChild) { // 现在暂时只考虑新节点只有一个的情况 if (typeof newChild === \\\"object\\\" && newChild !== null) { switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: return placeSingleChild( reconcileSingleElement(returnFiber, currentFirstChild, newChild) ); default: break; } // newChild [文本节点， span虚拟元素] if (isArray(newChild)) { return reconcileChildrenArray(returnFiber, currentFirstChild, newChild); } } if (typeof newChild === \\\"string\\\") { return placeSingleChild( reconcileSingleTextNode(returnFiber, currentFirstChild, newChild) ); } return null; } return reconcileChildFibers; } // 虚拟DOM初次挂载 export const mountChildFibers = createChildReconciler(false); //老fiber更新 export const reconcileChildFibers = createChildReconciler(true); \"]},\"362\":{\"h\":\"控制台打印结果\",\"t\":[\"多节点diff复杂遍历打印结果\"]},\"363\":{\"h\":\"手写源码仓库\",\"t\":[\"https://github.com/mi-saka10032/mini-react/tree/master/packages/singledomdiff\",\"https://github.com/mi-saka10032/mini-react/tree/master/packages/multipledomdiff\"]},\"364\":{\"h\":\"Hooks-Effect\"},\"365\":{\"h\":\"副作用的意义\",\"t\":[\"effectHook\",\"在函数组件主体内（这里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性\",\"使用 useEffect 完成副作用操作。赋值给 useEffect 的函数会在组件渲染到屏幕之后执行。你可以把 effect 看作从 React 的纯函数式世界通往命令式世界的逃生通道\",\"useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API\",\"该 Hook 接收一个包含命令式、且可能有副作用代码的函数\",\"注意：\",\"要避免在 useEffect 的副作用函数中操作 useEffect 绑定的依赖项，这会引起堆栈溢出异常\",\"effectHook 提供了两种 hook，分为 useEffect 和 useLayoutEffect\",\"useEffect 在浏览器渲染变更完成后非阻塞执行\",\"useLayoutEffect 在浏览器渲染变更时阻塞执行\"]},\"366\":{\"h\":\"useEffect\",\"t\":[\"useEffect流程图\",\"useEffect 和其他 hook 函数一样，beginWork 时为 Fiber 挂载 effectHook，二次触发时更新 effectHook，需要注意的是 effect 的 hook 链表和 state、reducer 不是同一个 hook 链表，为的是区分数据流和副作用流\"]},\"367\":{\"h\":\"src\\\\main.jsx\",\"t\":[\"src\\\\main.jsx\",\"import * as React from \\\"react/index\\\"; import { createRoot } from \\\"react-dom/client\\\"; function FunctionComponent() { console.log(\\\"FunctionComponent\\\"); const [number, setNumber] = React.useState(1); React.useEffect(() => { console.log(\\\"useEffect1\\\"); return () => { console.log(\\\"destroy useEffect1\\\"); }; }, []); React.useEffect(() => { console.log(\\\"useEffect2\\\"); return () => { console.log(\\\"destroy useEffect2\\\"); }; }); React.useEffect(() => { console.log(\\\"useEffect3\\\"); return () => { console.log(\\\"destroy useEffect3\\\"); }; }); return <div onClick={() => setNumber(number + 1)}>{number}</div>; } const element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); // 把element虚拟DOM挂载到容器中 root.render(element); \"]},\"368\":{\"h\":\"react\\\\index.js\",\"t\":[\"src\\\\react\\\\index.js\",\"export { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, useReducer, useState, useEffect, } from \\\"./src/React\\\"; \"]},\"369\":{\"h\":\"React.js\",\"t\":[\"src\\\\react\\\\src\\\\React.js\",\"import { useReducer, useState, useEffect } from \\\"./ReactHooks\\\"; import ReactSharedInternals from \\\"./ReactSharedInternals\\\"; export { useReducer, useState, useEffect, ReactSharedInternals as __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, }; \"]},\"370\":{\"h\":\"ReactHooks.js\",\"t\":[\"src\\\\react\\\\src\\\\ReactHooks.js\",\"import ReactCurrentDispatcher from \\\"./ReactCurrentDispatcher\\\"; function resolveDispatcher() { const dispatcher = ReactCurrentDispatcher.current; return dispatcher; } export function useReducer(reducer, initialArg, init) { const dispatcher = resolveDispatcher(); return dispatcher.useReducer(reducer, initialArg, init); } export function useState(reducer, initialArg, init) { const dispatcher = resolveDispatcher(); return dispatcher.useState(reducer, initialArg, init); } export function useEffect(create, deps) { const dispatcher = resolveDispatcher(); return dispatcher.useEffect(create, deps); } \"]},\"371\":{\"h\":\"ReactHookEffectTags.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactHookEffectTags.js\",\"export const HasEffect = 0b0001; // 1 // 浏览器绘制之前执行的effect，UI绘制之前，类似微任务 export const Layout = 0b0100; // 4 // 浏览器绘制之后执行的effect，UI绘制之后，类似于宏任务 export const Passive = 0b1000; // 8 \"]},\"372\":{\"h\":\"ReactFiberFlags.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberFlags.js\",\"// 如果函数组件里使用了useEffect，那么此函数组件对应的fiber上会有一个flags，为Passive export const Passive = /* */ 0b00000000000000010000000000; // 1024 \"]},\"373\":{\"h\":\"ReactFiberHooks.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberHooks.js\",\"import ReactSharedInternals from \\\"shared/ReactSharedInternals\\\"; import { enqueueConcurrentHookUpdate } from \\\"./ReactFiberConcurrentUpdates\\\"; import { scheduleUpdateOnFiber } from \\\"./ReactFiberWorkLoop\\\"; import is from \\\"shared/objectIs\\\"; import { Passive as PassiveEffect } from \\\"./ReactFiberFlags\\\"; import { HasEffect as HookHasEffect, Passive as HookPassive, } from \\\"./ReactHookEffectTags\\\"; const { ReactCurrentDispatcher } = ReactSharedInternals; let currentlyRenderingFiber = null; let workInProgressHook = null; let currentHook = null; function mountWorkInProgressHook() { const hook = { memoizedState: null, queue: null, next: null, }; if (workInProgressHook === null) { currentlyRenderingFiber.memoizedState = workInProgressHook = hook; } else { workInProgressHook = workInProgressHook.next = hook; } return workInProgressHook; } function dispatchReducerAction(fiber, queue, action) { const update = { action, next: null, }; const root = enqueueConcurrentHookUpdate(fiber, queue, update); scheduleUpdateOnFiber(root); } function dispatchSetState(fiber, queue, action) { const update = { action, hasEagerState: false, // 是否有急切的更新 eagerState: null, // 急切的更新状态 next: null, }; // 派发动作后，立刻用上一次的状态和上一次的reducer计算新状态 const { lastRenderedReducer, lastRenderedState } = queue; const eagerState = lastRenderedReducer(lastRenderedState, action); update.hasEagerState = true; update.eagerState = eagerState; if (is(eagerState, lastRenderedState)) { return; } // 入队更新，调度更新逻辑 const root = enqueueConcurrentHookUpdate(fiber, queue, update); scheduleUpdateOnFiber(root); } const HooksDispatcherOnMountInDEV = { useReducer: mountReducer, useState: mountState, useEffect: mountEffect, }; function updateEffect(create, deps) { return updateEffectImpl(PassiveEffect, HookPassive, create, deps); } function updateEffectImpl(fiberFlags, hookFlags, create, deps) { const hook = updateWorkInProgressHook(); const nextDeps = deps === undefined ? null : deps; let destroy; // 上一个老hook if (currentHook !== null) { // 获取此useEffect这个Hook上老的effect对象 const prevEffect = currentHook.memoizedState; destroy = prevEffect.destroy; if (nextDeps !== null) { const prevDeps = prevEffect.deps; // 用新数组和老数组进行对比，如果一样说明依赖项相同不需要执行 if (areHookInputsEqual(nextDeps, prevDeps)) { // 不管要不要重新执行，都需要把新的effect组成完整的单循环链表放到fiber.updateQueue中 hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps); return; } } } // 如果要执行的话，需要修改fiber的flags currentlyRenderingFiber.flags |= fiberFlags; // 如果要执行的话，添加HookHasEffect flag。不是每个Passive都会执行，只有含有HookHasEffect的Passive才执行 hook.memoizedState = pushEffect( HookHasEffect | hookFlags, create, destroy, nextDeps ); } function areHookInputsEqual(nextDeps, prevDeps) { if (prevDeps === null) { return null; } for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) { if (is(nextDeps[i], prevDeps[i])) { continue; } return false; } return true; } function mountEffect(create, deps) { return mountEffectImpl(PassiveEffect, HookPassive, create, deps); } function mountEffectImpl(fiberFlags, hookFlags, create, deps) { const hook = mountWorkInProgressHook(); const nextDeps = deps === undefined ? null : deps; // 给当前的函数组件fiber添加 effectFlags currentlyRenderingFiber.flags |= fiberFlags; hook.memoizedState = pushEffect( HookHasEffect | hookFlags, create, undefined, nextDeps ); } /** * 添加effect链表 * @param tag effect的标签 * @param create 创建方法 * @param destroy 销毁方法 * @param deps 依赖数组 */ function pushEffect(tag, create, destroy, deps) { const effect = { tag, create, destroy, deps, next: null, }; let componentUpdateQueue = currentlyRenderingFiber.updateQueue; if (componentUpdateQueue === null) { componentUpdateQueue = createFunctionComponentUpdateQueue(); currentlyRenderingFiber.updateQueue = componentUpdateQueue; componentUpdateQueue.lastEffect = effect.next = effect; } else { // effect单向环链 const lastEffect = componentUpdateQueue.lastEffect; if (lastEffect === null) { componentUpdateQueue.lastEffect = effect.next = effect; } else { const firstEffect = lastEffect.next; lastEffect.next = effect; effect.next = firstEffect; componentUpdateQueue.lastEffect = effect; } } return effect; } function createFunctionComponentUpdateQueue() { return { lastEffect: null, }; } function mountState(initialState) { const hook = mountWorkInProgressHook(); hook.memoizedState = initialState; const queue = { pending: null, dispatch: null, lastRenderedReducer: baseStateReducer, // 上一个reducer lastRenderedState: initialState, // 上一个state }; hook.queue = queue; const dispatch = (queue.dispatch = dispatchSetState.bind( null, currentlyRenderingFiber, queue )); return [hook.memoizedState, dispatch]; } function mountReducer(reducer, initialArg) { const hook = mountWorkInProgressHook(); hook.memoizedState = initialArg; const queue = { pending: null, dispatch: null, }; hook.queue = queue; const dispatch = (queue.dispatch = dispatchReducerAction.bind( null, currentlyRenderingFiber, queue )); return [hook.memoizedState, dispatch]; } // 更新当前fiber的hook链表 function updateWorkInProgressHook() { if (currentHook === null) { const current = currentlyRenderingFiber.alternate; currentHook = current.memoizedState; } else { currentHook = currentHook.next; } const newHook = { memoizedState: currentHook.memoizedState, queue: currentHook.queue, next: null, }; if (workInProgressHook === null) { currentlyRenderingFiber.memoizedState = workInProgressHook = newHook; } else { workInProgressHook = workInProgressHook.next = newHook; } return workInProgressHook; } const HooksDispatcherOnUpdateInDEV = { useReducer: updateReducer, useState: updateState, useEffect: updateEffect, }; // useState就是一个内置了reducer的useReducer function baseStateReducer(state, action) { return typeof action === \\\"function\\\" ? action(state) : action; } function updateState() { return updateReducer(baseStateReducer); } function updateReducer(reducer) { const hook = updateWorkInProgressHook(); const queue = hook.queue; queue.lastRenderedReducer = reducer; const current = currentHook; const pendingQueue = queue.pending; let newState = current.memoizedState; if (pendingQueue !== null) { queue.pending = null; const first = pendingQueue.next; let update = first; do { if (update.hasEagerState) { newState = update.eagerState; } else { const action = update.action; newState = reducer(newState, action); } update = update.next; } while (update !== null && update !== first); } hook.memoizedState = queue.lastRenderedState = newState; return [hook.memoizedState, queue.dispatch]; } /** * 渲染函数组件 * @param current 老fiber * @param workInProgress 新fiber * @param Component 组件定义 * @param props 组件属性 * @returns 虚拟DOM或者React元素 */ export function renderWithHooks(current, workInProgress, Component, props) { currentlyRenderingFiber = workInProgress; // 每次渲染hook前需要清除更新队列 workInProgress.updateQueue = null; workInProgress.memoizedState = null; if (current !== null && current.memoizedState !== null) { ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV; } else { ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV; } const children = Component(props); workInProgressHook = null; currentHook = null; currentlyRenderingFiber = null; return children; } \"]},\"374\":{\"h\":\"ReactFiberWorkLoop.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberWorkLoop.js\",\"import { scheduleCallback } from \\\"scheduler/index\\\"; import { createWorkInProgress } from \\\"./ReactFiber\\\"; import { beginWork } from \\\"./ReactFiberBeginWork\\\"; import { completeWork } from \\\"./ReactFiberCompleteWork\\\"; import { NoFlags, MutationMask, Placement, Update, ChildDeletion, Passive, } from \\\"react-reconciler/src/ReactFiberFlags\\\"; import { commitMutationEffectsOnFiber, commitPassiveUnmountEffects, commitPassiveMountEffects, } from \\\"./ReactFiberCommitWork\\\"; import { finishQueueingConcurrentUpdates } from \\\"./ReactFiberConcurrentUpdates\\\"; import { FunctionComponent, HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; let workInProgress = null; let rootDoesHavePassiveEffect = false; // 此根节点上有没有useEffect类似的副作用 let rootWithPendingPassiveEffects = null; // 具有useEffect副作用的根节点 FiberRootNode，根fiber.stateNode /** * 计划更新root * 源码中此处有一个调度任务的功能 * @param {*}root */ export function scheduleUpdateOnFiber(root) { // 确保调度执行root上的更新 ensureRootIsScheduled(root); } function ensureRootIsScheduled(root) { // 告诉浏览器要执行performConcurrentWorkOnRoot函数，参数为root scheduleCallback(performConcurrentWorkOnRoot.bind(null, root)); } /** * 开始根据fiber构建fiber树，要创建真实的DOM节点，再把真实的DOM节点插入容器 * @param {*} root */ function performConcurrentWorkOnRoot(root) { // 第一次渲染以同步的方式渲染根节点，初次渲染的时候，都是同步执行 renderRootSync(root); // 开始进入提交阶段，就是执行副作用，修改真实DOM const finishedWork = root.current.alternate; root.finishedWork = finishedWork; commitRoot(root); } function flushPassiveEffect() { if (rootWithPendingPassiveEffects !== null) { const root = rootWithPendingPassiveEffects; // 执行卸载副作用 destroy commitPassiveUnmountEffects(root.current); // 执行挂载副作用 create commitPassiveMountEffects(root, root.current); } } function commitRoot(root) { const { finishedWork } = root; // printFinishedWork(finishedWork); if ( (finishedWork.subtreeFlags & Passive) !== NoFlags || (finishedWork.flags & Passive) !== NoFlags ) { if (!rootDoesHavePassiveEffect) { rootDoesHavePassiveEffect = true; scheduleCallback(flushPassiveEffect); } } console.log(\\\"~~~~~~~~~~~~~~~~~~~\\\"); const subtreeHasEffects = (finishedWork.subtreeFlags && MutationMask) !== NoFlags; const rootHasEffect = (finishedWork.flags && MutationMask) !== NoFlags; if (subtreeHasEffects || rootHasEffect) { // 当DOM执行变更之后 commitMutationEffectsOnFiber(finishedWork, root); if (rootDoesHavePassiveEffect) { rootDoesHavePassiveEffect = false; rootWithPendingPassiveEffects = root; } } // 等DOM变更后，就可以把root的current指向新Fiber树 root.current = finishedWork; } function prepareFreshStack(root) { workInProgress = createWorkInProgress(root.current, null); finishQueueingConcurrentUpdates(); } function renderRootSync(root) { // 开始构建fiber树 // 双缓冲技术，页面显示区域为current映射，对应真实DOM，代表当前已经渲染完成的Fiber // 内存中的Fiber构建、比较、更新为workInProgress映射，表示还未生效，没有更新的DOM上的Fiber树 // 1. current的HostRootFiber在构建过程中不作变化 // 2. workInProgress在内存中顺序构建Fiber树 prepareFreshStack(root); workLoopSync(); } function workLoopSync() { while (workInProgress !== null) { performUnitOfWork(workInProgress); } } /** * 执行一个工作单元 * @param unitOfWork */ function performUnitOfWork(unitOfWork) { // 获取新fiber对应的老fiber，是页面上显示的current的fiber const current = unitOfWork.alternate; // 完成当前fiber的子fiber链表构建 const next = beginWork(current, unitOfWork); // 同步工作单元中的props unitOfWork.memoizedProps = unitOfWork.pendingProps; // 没有子节点，表示工作单元递归的 递 阶段已结束，需要return执行completeWork if (next === null) { // 没有子节点，表示当前fiber的beginWork已经完成，执行completeWork completeUnitOfWork(unitOfWork); } else { workInProgress = next; } } function completeUnitOfWork(unitOfWork) { let completedWork = unitOfWork; do { // 替代fiber const current = completedWork.alternate; // 父fiber const returnFiber = completedWork.return; // 执行此fiber的完成工作 // 如果是原生组件，就是创建真实DOM节点 completeWork(current, completedWork); // 如果有弟弟，构建弟弟对应的fiber子链表 const siblingFiber = completedWork.sibling; if (siblingFiber !== null) { // 如果存在兄弟节点，则workInProgress赋值兄弟节点，循环退出，等待下一次工作单元执行beginWork workInProgress = siblingFiber; return; } // 如果没有弟弟，说明这当前完成的就是父fiber的最后一个节点 // 也就是说一个父fiber，它的所有子fiber全部完成了 completedWork = returnFiber; workInProgress = completedWork; // 执行递归的 归阶段，当兄弟节点为空的时候执行while循环往上返回，直到根fiber时退出循环 } while (completedWork !== null); } function printFinishedWork(fiber) { const { flags, deletions } = fiber; if ((flags & ChildDeletion) !== NoFlags) { fiber.flags &= ~ChildDeletion; for (let i = 0; i < deletions.length; i++) { console.log( \\\"子节点有删除\\\", deletions[i].type, deletions[i].memoizedProps ); } } let child = fiber.child; while (child) { printFinishedWork(child); child = child.sibling; } if (fiber.flags !== NoFlags) { console.log( getFlags(fiber), getTag(fiber.tag), typeof fiber.type === \\\"function\\\" ? fiber.type.name : fiber.type, fiber.memoizedProps ); } } function getFlags(fiber) { const { flags, deletions } = fiber; if (flags === Placement) { return \\\"插入\\\"; } if (flags === Update) { return \\\"更新\\\"; } return flags; } function getTag(tag) { switch (tag) { case FunctionComponent: return \\\"FunctionComponent\\\"; case HostRoot: return \\\"HostRoot\\\"; case HostComponent: return \\\"HostComponent\\\"; case HostText: return \\\"HostText\\\"; default: return tag; } } \"]},\"375\":{\"h\":\"ReactFiberCommitWork.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberCommitWork.js\",\"import { appendChild, insertBefore, commitUpdate, removeChild, } from \\\"react-dom/src/client/ReactDOMHostConfig\\\"; import { FunctionComponent, HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; import { MutationMask, Passive, Placement, Update, } from \\\"react-reconciler/src/ReactFiberFlags\\\"; import { Passive as HookPassive, HasEffect as HookHasEffect, } from \\\"./ReactHookEffectTags\\\"; let hostParent = null; /** * 提交删除副作用 * @param root 根节点 * @param returnFiber 父fiber * @param deletedFiber 删除的fiber */ function commitDeletionEffects(root, returnFiber, deletedFiber) { let parent = returnFiber; // 一直向上查找直到找到真实DOM节点为止 findParent: while (parent !== null) { switch (parent.tag) { case HostComponent: { hostParent = parent.stateNode; break findParent; } case HostRoot: { hostParent = parent.stateNode.containerInfo; break findParent; } } parent = parent.return; } commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber); hostParent = null; } function commitDeletionEffectsOnFiber( finishedRoot, nearestMountedAncestor, deletedFiber ) { switch (deletedFiber.tag) { case HostComponent: case HostText: { // 递归处理子节点，当要删除一个节点的时候，要先删除它的子节点 不直接删除自己 recursivelyTraverseDeletionEffects( finishedRoot, nearestMountedAncestor, deletedFiber ); // 再把自己删除 if (hostParent !== null) { removeChild(hostParent, deletedFiber.stateNode); } break; } default: break; } } function recursivelyTraverseDeletionEffects( finishedRoot, nearestMountedAncestor, parent ) { let child = parent.child; while (child !== null) { commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child); child = child.sibling; } } /** * 递归遍历处理变更的副作用 * @param root 根节点 * @param parentFiber 父Fiber */ function recursivelyTraverseMutationEffects(root, parentFiber) { // 先把父Fiber上该删除的节点都删除 const deletions = parentFiber.deletions; if (deletions !== null) { for (let i = 0; i < deletions.length; i++) { const childToDelete = deletions[i]; commitDeletionEffects(root, parentFiber, childToDelete); } } // 再去处理剩下的子节点 if (parentFiber.subtreeFlags & MutationMask) { let { child } = parentFiber; while (child !== null) { commitMutationEffectsOnFiber(child, root); child = child.sibling; } } } function commitReconciliationEffects(finishedWork) { const { flags } = finishedWork; if (flags && Placement) { // 进行插入操作，也就是把此fiber对应的真实DOM节点添加到父真实DOM上 commitPlacement(finishedWork); // 把flags里的Placement删除 finishedWork.flags &= ~Placement; } } function isHostParent(fiber) { return fiber.tag === HostComponent || fiber.tag === HostRoot; //只有根fiber或根组件节点才能作为父fiber } function getHostParentFiber(fiber) { let parent = fiber.return; while (parent !== null) { if (isHostParent(parent)) { return parent; } parent = parent.return; } } /** * 把子节点对应的真实DOM插入到父节点DOM中 * @param node 将要插入的fiber节点 * @param before 待insertBefore的DOM节点 * @param parent 父真实DOM节点 */ function insertOrAppendPlacementNode(node, before, parent) { const { tag } = node; // 判断此fiber对应的节点是不是真实DOM节点 const isHost = tag === HostComponent || tag === HostText; if (isHost) { // 如果是的话就直接插入 const { stateNode } = node; if (before) { insertBefore(parent, stateNode, before); } else { appendChild(parent, stateNode); } } else { // 如果node不是真实DOM节点，获取它的child const { child } = node; if (child !== null) { insertOrAppendPlacementNode(child, before, parent); let { sibling } = child; while (sibling !== null) { insertOrAppendPlacementNode(sibling, before, parent); sibling = sibling.sibling; } } } } /** * 找到要插入的锚点 * 找到可以插在它前面的那个fiber对应的真实DOM * @param fiber */ function getHostSibling(fiber) { let node = fiber; siblings: while (true) { while (node.sibling === null) { if (node.return === null || isHostParent(node.return)) { return null; } node = node.return; } node = node.sibling; // 如果弟弟不是原生节点or文本节点，不是要插入的节点，需要寻找弟弟或儿子 while (node.tag !== HostComponent || node.tag !== HostText) { // 如果此节点是一个将要插入的新节点，找它的弟弟，否则找儿子 if (node.flags && Placement) { continue siblings; } else { node = node.child; } } if (!(node.flags && Placement)) { return node.stateNode; } } } /** * 把此fiber的真实DOM插入到父DOM里 * @param finishedWork */ function commitPlacement(finishedWork) { const parentFiber = getHostParentFiber(finishedWork); switch (parentFiber.tag) { case HostRoot: { const parent = parentFiber.stateNode.containerInfo; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } case HostComponent: { const parent = parentFiber.stateNode; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } } } /** * 遍历Fiber树，执行fiber上的副作用 * @param finishedWork fiberJ节点 * @param root 根节点 */ export function commitMutationEffectsOnFiber(finishedWork, root) { const current = finishedWork.alternate; const flags = finishedWork.flags; switch (finishedWork.tag) { case HostRoot: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); break; } case FunctionComponent: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); break; } case HostComponent: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); // 识别更新副作用标识，判断执行更新 if (flags & Update) { const instance = finishedWork.stateNode; if (instance !== null) { const newProps = finishedWork.memoizedProps; const oldProps = current !== null ? current.memoizedProps : newProps; const type = finishedWork.type; const updatePayload = finishedWork.updateQueue; finishedWork.updateQueue = null; if (updatePayload !== null) { commitUpdate( instance, updatePayload, type, oldProps, newProps, finishedWork ); } } } break; } case HostText: // 遍历子节点，处理子节点上的副作用 recursivelyTraverseMutationEffects(root, finishedWork); // 再处理自己身上的副作用 commitReconciliationEffects(finishedWork); break; default: break; } } export function commitPassiveUnmountEffects(finishedWork) { commitPassiveUnmountOnFiber(finishedWork); } function commitPassiveUnmountOnFiber(finishedWork) { const flags = finishedWork.flags; switch (finishedWork.tag) { case HostRoot: { recursivelyTraversePassiveUnmountEffects(finishedWork); break; } case FunctionComponent: { recursivelyTraversePassiveUnmountEffects(finishedWork); if (flags & Passive) { commitHookPassiveUnmountEffects( finishedWork, HookPassive | HookHasEffect ); } break; } } } function recursivelyTraversePassiveUnmountEffects(parentFiber) { if (parentFiber.subtreeFlags & Passive) { let child = parentFiber.child; while (child !== null) { commitPassiveUnmountOnFiber(child); child = child.sibling; } } } function commitHookPassiveUnmountEffects(finishedWork, hookFlags) { commitHookEffectListUnmount(hookFlags, finishedWork); } function commitHookEffectListUnmount(flags, finishedWork) { const updateQueue = finishedWork.updateQueue; const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null; if (lastEffect !== null) { const firstEffect = lastEffect.next; let effect = firstEffect; do { if ((effect.tag & flags) === flags) { const destroy = effect.destroy; if (destroy !== undefined) { destroy(); } } effect = effect.next; } while (effect !== firstEffect); } } export function commitPassiveMountEffects(root, finishedWork) { commitPassiveMountOnFiber(root, finishedWork); } function commitPassiveMountOnFiber(finishedRoot, finishedWork) { const flags = finishedWork.flags; switch (finishedWork.tag) { case HostRoot: { recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork); break; } case FunctionComponent: { recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork); if (flags & Passive) { commitHookPassiveMountEffects( finishedWork, HookPassive | HookHasEffect ); } break; } } } function recursivelyTraversePassiveMountEffects(root, parentFiber) { if (parentFiber.subtreeFlags & Passive) { let child = parentFiber.child; while (child !== null) { commitPassiveMountOnFiber(root, child); child = child.sibling; } } } function commitHookPassiveMountEffects(finishedWork, hookFlags) { commitHookEffectListMount(hookFlags, finishedWork); } function commitHookEffectListMount(flags, finishedWork) { const updateQueue = finishedWork.updateQueue; const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null; if (lastEffect !== null) { const firstEffect = lastEffect.next; let effect = firstEffect; do { if ((effect.tag & flags) === flags) { const create = effect.create; effect.destroy = create(); } effect = effect.next; } while (effect !== firstEffect); } } \"]},\"376\":{\"h\":\"useLayoutEffect\",\"t\":[\"useLayoutEffect\",\"commitLayoutEffect\",\"其函数签名与 useEffect 相同，但它会在所有的 DOM 变更之后同步调用 effect\",\"useEffect 不会阻塞浏览器渲染，而 useLayoutEffect 会浏览器渲染\",\"useEffect 会在浏览器渲染结束后执行,useLayoutEffect 则是在 DOM 更新完成后,浏览器绘制之前执行\",\"相较于在 commit 阶段执行完毕后才执行的副作用 useEffect，useLayoutEffect 选择在 commitWork 执行 DOM 操作前就会先执行\"]},\"377\":{\"h\":\"src\\\\main.jsx\",\"t\":[\"src\\\\main.jsx\",\"import * as React from \\\"react/index\\\"; import { createRoot } from \\\"react-dom/client\\\"; function FunctionComponent() { console.log(\\\"FunctionComponent\\\"); const [number, setNumber] = React.useState(1); React.useLayoutEffect(() => { console.log(\\\"useLayoutEffect1\\\"); return () => { console.log(\\\"destroy useLayoutEffect1\\\"); }; }); React.useEffect(() => { console.log(\\\"useEffect2\\\"); return () => { console.log(\\\"destroy useEffect2\\\"); }; }); React.useEffect(() => { console.log(\\\"useEffect3\\\"); console.log(number); return () => { console.log(\\\"destroy useEffect3\\\"); }; }); return <div onClick={() => setNumber(number + 1)}>{number}</div>; } const element = <FunctionComponent />; const root = createRoot(document.getElementById(\\\"root\\\")); // 把element虚拟DOM挂载到容器中 root.render(element); \"]},\"378\":{\"h\":\"react\\\\index.js\",\"t\":[\"src\\\\react\\\\index.js\",\"export { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, useReducer, useState, useEffect, useLayoutEffect, } from \\\"./src/React\\\"; \"]},\"379\":{\"h\":\"React.js\",\"t\":[\"src\\\\react\\\\src\\\\React.js\",\"import { useReducer, useState, useEffect, useLayoutEffect } from \\\"./ReactHooks\\\"; import ReactSharedInternals from \\\"./ReactSharedInternals\\\"; export { useReducer, useState, useEffect, useLayoutEffect, ReactSharedInternals as __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, }; \"]},\"380\":{\"h\":\"ReactHooks.js\",\"t\":[\"src\\\\react\\\\src\\\\ReactHooks.js\",\"import ReactCurrentDispatcher from \\\"./ReactCurrentDispatcher\\\"; function resolveDispatcher() { const dispatcher = ReactCurrentDispatcher.current; return dispatcher; } export function useReducer(reducer, initialArg, init) { const dispatcher = resolveDispatcher(); return dispatcher.useReducer(reducer, initialArg, init); } export function useState(reducer, initialArg, init) { const dispatcher = resolveDispatcher(); return dispatcher.useState(reducer, initialArg, init); } export function useEffect(create, deps) { const dispatcher = resolveDispatcher(); return dispatcher.useEffect(create, deps); } export function useLayoutEffect(create, deps) { const dispatcher = resolveDispatcher(); return dispatcher.useLayoutEffect(create, deps); } \"]},\"381\":{\"h\":\"ReactHookEffectTags.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactHookEffectTags.js\",\"export const HasEffect = 0b0001; // 1 // 浏览器绘制之前执行的effect，UI绘制之前，类似微任务 export const Layout = 0b0100; // 4 // 浏览器绘制之后执行的effect，UI绘制之后，类似于宏任务 export const Passive = 0b1000; // 8 \"]},\"382\":{\"h\":\"ReactFiberFlags.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberFlags.js\",\"// Don't change these two values. They're used by React Dev Tools. export const NoFlags = /* */ 0b00000000000000000000000000; export const PerformedWork = /* */ 0b00000000000000000000000001; // You can change the rest (and add more). // Placement 插入 export const Placement = /* */ 0b00000000000000000000000010; // Update 更新 export const Update = /* */ 0b00000000000000000000000100; export const ChildDeletion = /* */ 0b00000000000000000000001000; export const MutationMask = Placement | Update; // 如果函数组件里使用了useEffect，那么此函数组件对应的fiber上会有一个flags，为Passive export const Passive = /* */ 0b00000000000000010000000000; // 1024 export const LayoutMask = /* */ Update; // 4 \"]},\"383\":{\"h\":\"ReactFiberHooks.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberHooks.js\",\"import { Passive as PassiveEffect, Update as UpdateEffect, } from \\\"./ReactFiberFlags\\\"; import { HasEffect as HookHasEffect, Passive as HookPassive, Layout as HookLayout, } from \\\"./ReactHookEffectTags\\\"; const HooksDispatcherOnMountInDEV = { useReducer: mountReducer, useState: mountState, useEffect: mountEffect, useLayoutEffect: mountLayoutEffect, }; function mountLayoutEffect(create, deps) { return mountEffectImpl(UpdateEffect, HookLayout, create, deps); } function updateLayoutEffect(create, deps) { return updateEffectImpl(UpdateEffect, HookLayout, create, deps); } const HooksDispatcherOnUpdateInDEV = { useReducer: updateReducer, useState: updateState, useEffect: updateEffect, useLayoutEffect: updateLayoutEffect, }; \"]},\"384\":{\"h\":\"ReactFiberWorkLoop.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberWorkLoop.js\",\"import { commitMutationEffectsOnFiber, commitPassiveUnmountEffects, commitPassiveMountEffects, commitLayoutEffects, } from \\\"./ReactFiberCommitWork\\\"; function commitRoot(root) { const { finishedWork } = root; // printFinishedWork(finishedWork); if ( (finishedWork.subtreeFlags & Passive) !== NoFlags || (finishedWork.flags & Passive) !== NoFlags ) { if (!rootDoesHavePassiveEffect) { rootDoesHavePassiveEffect = true; scheduleCallback(flushPassiveEffect); } } console.log(\\\"~~~~~~~~~~~~~~~~~~~\\\"); const subtreeHasEffects = (finishedWork.subtreeFlags && MutationMask) !== NoFlags; const rootHasEffect = (finishedWork.flags && MutationMask) !== NoFlags; if (subtreeHasEffects || rootHasEffect) { // 当DOM执行变更之后 commitMutationEffectsOnFiber(finishedWork, root); // !!! UI渲染之前：同步执行layoutEffect commitLayoutEffects(finishedWork, root); if (rootDoesHavePassiveEffect) { rootDoesHavePassiveEffect = false; rootWithPendingPassiveEffects = root; } } // 等DOM变更后，就可以把root的current指向新Fiber树 root.current = finishedWork; } \"]},\"385\":{\"h\":\"ReactFiberCommitWork.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberCommitWork.js\",\"import { appendChild, insertBefore, commitUpdate, removeChild, } from \\\"react-dom/src/client/ReactDOMHostConfig\\\"; import { FunctionComponent, HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; import { MutationMask, Passive, Placement, Update, LayoutMask, } from \\\"react-reconciler/src/ReactFiberFlags\\\"; import { Passive as HookPassive, HasEffect as HookHasEffect, Layout as HookLayout, } from \\\"./ReactHookEffectTags\\\"; let hostParent = null; /** * 提交删除副作用 * @param root 根节点 * @param returnFiber 父fiber * @param deletedFiber 删除的fiber */ function commitDeletionEffects(root, returnFiber, deletedFiber) { let parent = returnFiber; // 一直向上查找直到找到真实DOM节点为止 findParent: while (parent !== null) { switch (parent.tag) { case HostComponent: { hostParent = parent.stateNode; break findParent; } case HostRoot: { hostParent = parent.stateNode.containerInfo; break findParent; } } parent = parent.return; } commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber); hostParent = null; } function commitDeletionEffectsOnFiber( finishedRoot, nearestMountedAncestor, deletedFiber ) { switch (deletedFiber.tag) { case HostComponent: case HostText: { // 递归处理子节点，当要删除一个节点的时候，要先删除它的子节点 不直接删除自己 recursivelyTraverseDeletionEffects( finishedRoot, nearestMountedAncestor, deletedFiber ); // 再把自己删除 if (hostParent !== null) { removeChild(hostParent, deletedFiber.stateNode); } break; } default: break; } } function recursivelyTraverseDeletionEffects( finishedRoot, nearestMountedAncestor, parent ) { let child = parent.child; while (child !== null) { commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child); child = child.sibling; } } /** * 递归遍历处理变更的副作用 * @param root 根节点 * @param parentFiber 父Fiber */ function recursivelyTraverseMutationEffects(root, parentFiber) { // 先把父Fiber上该删除的节点都删除 const deletions = parentFiber.deletions; if (deletions !== null) { for (let i = 0; i < deletions.length; i++) { const childToDelete = deletions[i]; commitDeletionEffects(root, parentFiber, childToDelete); } } // 再去处理剩下的子节点 if (parentFiber.subtreeFlags & MutationMask) { let { child } = parentFiber; while (child !== null) { commitMutationEffectsOnFiber(child, root); child = child.sibling; } } } function commitReconciliationEffects(finishedWork) { const { flags } = finishedWork; if (flags && Placement) { // 进行插入操作，也就是把此fiber对应的真实DOM节点添加到父真实DOM上 commitPlacement(finishedWork); // 把flags里的Placement删除 finishedWork.flags &= ~Placement; } } function isHostParent(fiber) { return fiber.tag === HostComponent || fiber.tag === HostRoot; //只有根fiber或根组件节点才能作为父fiber } function getHostParentFiber(fiber) { let parent = fiber.return; while (parent !== null) { if (isHostParent(parent)) { return parent; } parent = parent.return; } } /** * 把子节点对应的真实DOM插入到父节点DOM中 * @param node 将要插入的fiber节点 * @param before 待insertBefore的DOM节点 * @param parent 父真实DOM节点 */ function insertOrAppendPlacementNode(node, before, parent) { const { tag } = node; // 判断此fiber对应的节点是不是真实DOM节点 const isHost = tag === HostComponent || tag === HostText; if (isHost) { // 如果是的话就直接插入 const { stateNode } = node; if (before) { insertBefore(parent, stateNode, before); } else { appendChild(parent, stateNode); } } else { // 如果node不是真实DOM节点，获取它的child const { child } = node; if (child !== null) { insertOrAppendPlacementNode(child, before, parent); let { sibling } = child; while (sibling !== null) { insertOrAppendPlacementNode(sibling, before, parent); sibling = sibling.sibling; } } } } /** * 找到要插入的锚点 * 找到可以插在它前面的那个fiber对应的真实DOM * @param fiber */ function getHostSibling(fiber) { let node = fiber; siblings: while (true) { while (node.sibling === null) { if (node.return === null || isHostParent(node.return)) { return null; } node = node.return; } node = node.sibling; // 如果弟弟不是原生节点or文本节点，不是要插入的节点，需要寻找弟弟或儿子 while (node.tag !== HostComponent || node.tag !== HostText) { // 如果此节点是一个将要插入的新节点，找它的弟弟，否则找儿子 if (node.flags && Placement) { continue siblings; } else { node = node.child; } } if (!(node.flags && Placement)) { return node.stateNode; } } } /** * 把此fiber的真实DOM插入到父DOM里 * @param finishedWork */ function commitPlacement(finishedWork) { const parentFiber = getHostParentFiber(finishedWork); switch (parentFiber.tag) { case HostRoot: { const parent = parentFiber.stateNode.containerInfo; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } case HostComponent: { const parent = parentFiber.stateNode; // 获取最近的真实DOM节点 const before = getHostSibling(finishedWork); // 获取最近的真实DOM节点 insertOrAppendPlacementNode(finishedWork, before, parent); break; } } } /** * 遍历Fiber树，执行fiber上的副作用 * @param finishedWork fiberJ节点 * @param root 根节点 */ export function commitMutationEffectsOnFiber(finishedWork, root) { const current = finishedWork.alternate; const flags = finishedWork.flags; switch (finishedWork.tag) { case HostRoot: case FunctionComponent: case HostText: { // 遍历子节点，处理子节点上的副作用 recursivelyTraverseMutationEffects(root, finishedWork); // 再处理自己身上的副作用 commitReconciliationEffects(finishedWork); if (flags & Update) { commitHookEffectListUnmount(HookHasEffect | HookLayout, finishedWork); } break; } case HostComponent: { recursivelyTraverseMutationEffects(root, finishedWork); commitReconciliationEffects(finishedWork); // 识别更新副作用标识，判断执行更新 if (flags & Update) { const instance = finishedWork.stateNode; if (instance !== null) { const newProps = finishedWork.memoizedProps; const oldProps = current !== null ? current.memoizedProps : newProps; const type = finishedWork.type; const updatePayload = finishedWork.updateQueue; finishedWork.updateQueue = null; if (updatePayload !== null) { commitUpdate( instance, updatePayload, type, oldProps, newProps, finishedWork ); } } } break; } default: break; } } export function commitPassiveUnmountEffects(finishedWork) { commitPassiveUnmountOnFiber(finishedWork); } function commitPassiveUnmountOnFiber(finishedWork) { const flags = finishedWork.flags; switch (finishedWork.tag) { case HostRoot: { recursivelyTraversePassiveUnmountEffects(finishedWork); break; } case FunctionComponent: { recursivelyTraversePassiveUnmountEffects(finishedWork); if (flags & Passive) { commitHookPassiveUnmountEffects( finishedWork, HookPassive | HookHasEffect ); } break; } } } function recursivelyTraversePassiveUnmountEffects(parentFiber) { if (parentFiber.subtreeFlags & Passive) { let child = parentFiber.child; while (child !== null) { commitPassiveUnmountOnFiber(child); child = child.sibling; } } } function commitHookPassiveUnmountEffects(finishedWork, hookFlags) { commitHookEffectListUnmount(hookFlags, finishedWork); } function commitHookEffectListUnmount(flags, finishedWork) { const updateQueue = finishedWork.updateQueue; const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null; if (lastEffect !== null) { const firstEffect = lastEffect.next; let effect = firstEffect; do { if ((effect.tag & flags) === flags) { const destroy = effect.destroy; if (destroy !== undefined) { destroy(); } } effect = effect.next; } while (effect !== firstEffect); } } export function commitPassiveMountEffects(root, finishedWork) { commitPassiveMountOnFiber(root, finishedWork); } function commitPassiveMountOnFiber(finishedRoot, finishedWork) { const flags = finishedWork.flags; switch (finishedWork.tag) { case HostRoot: { recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork); break; } case FunctionComponent: { recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork); if (flags & Passive) { commitHookPassiveMountEffects( finishedWork, HookPassive | HookHasEffect ); } break; } } } function recursivelyTraversePassiveMountEffects(root, parentFiber) { if (parentFiber.subtreeFlags & Passive) { let child = parentFiber.child; while (child !== null) { commitPassiveMountOnFiber(root, child); child = child.sibling; } } } function commitHookPassiveMountEffects(finishedWork, hookFlags) { commitHookEffectListMount(hookFlags, finishedWork); } function commitHookEffectListMount(flags, finishedWork) { const updateQueue = finishedWork.updateQueue; const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null; if (lastEffect !== null) { const firstEffect = lastEffect.next; let effect = firstEffect; do { if ((effect.tag & flags) === flags) { const create = effect.create; effect.destroy = create(); } effect = effect.next; } while (effect !== firstEffect); } } export function commitLayoutEffects(finishedWork, root) { // 老的根fiber const current = finishedWork.alternate; commitLayoutEffectOnFiber(root, current, finishedWork); } function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) { const flags = finishedWork.flags; switch (finishedWork.tag) { case HostRoot: { recursivelyTraverseLayoutEffects(finishedRoot, finishedWork); break; } case FunctionComponent: { recursivelyTraverseLayoutEffects(finishedRoot, finishedWork); if (flags & LayoutMask) { // 4 LayoutMask = Update = 4 commitHookLayoutEffects(finishedWork, HookLayout | HookHasEffect); } break; } } } function recursivelyTraverseLayoutEffects(root, parentFiber) { if (parentFiber.subtreeFlags & LayoutMask) { let child = parentFiber.child; while (child !== null) { const current = child.alternate; commitLayoutEffectOnFiber(root, current, child); child = child.sibling; } } } function commitHookLayoutEffects(finishedWork, hookFlags) { commitHookEffectListMount(hookFlags, finishedWork); } \"]},\"386\":{\"h\":\"手写源码仓库\",\"t\":[\"https://github.com/mi-saka10032/mini-react/tree/master/packages/effect\"]},\"387\":{\"h\":\"Scheduler\"},\"388\":{\"h\":\"MessageChannel\",\"t\":[\"在上面的源码中，我们使用 requestIdleCallback 来实现浏览器帧渲染与 JS 优化，但是目前 requestIdleCallback 的浏览器兼容性比较差\",\"所以目前 React 利用 MessageChannel 模拟了 requestIdleCallback，将回调延迟到绘制操作之后执行\",\"MessageChannel API 允许我们创建一个新的消息通道，并通过它的两个 MessagePort 属性发送数据\",\"MessageChannel 创建了一个通信的管道，这个管道有两个端口，每个端口都可以通过 postMessage 发送数据，而一个端口只要绑定了 onmessage 回调方法，就可以接收从另一个端口传过来的数据\",\"MessageChannel 是一个宏任务\",\"MessageChannel\",\"以下是一个 MessageChannel 的代码示例\",\"var channel = new MessageChannel(); var port1 = channel.port1; var port2 = channel.port2; port1.onmessage = function (event) { console.log(\\\"port1收到来自port2的数据：\\\" + event.data); }; port2.onmessage = function (event) { console.log(\\\"port2收到来自port1的数据：\\\" + event.data); }; port1.postMessage(\\\"发送给port2\\\"); port2.postMessage(\\\"发送给port1\\\"); \"]},\"389\":{\"h\":\"最小堆\"},\"390\":{\"h\":\"二叉树简介\",\"t\":[\"二叉树：每个节点最多有两个子节点\",\"满二叉树：除最后一层无任何子节点外，每一层上的所有节点都有两个子节点的二叉树\",\"满二叉树\",\"完全二叉树：\",\"叶子节点只能出现在最下层和次下层\",\"且最下层的叶子节点集中在树的左部\",\"完全二叉树\"]},\"391\":{\"h\":\"最小堆机制\",\"t\":[\"最小堆是一种经过排序的完全二叉树\",\"其中任一非终端节点的数据均不大于其左子节点和右子节点的值\",\"根节点值是所有堆节点值中的最小值\",\"编号关系： \",\"左子节点编号 = 父节点编号 x 2\",\"右子节点编号 = 左子节点编号 + 1\",\"父节点编号 = 子节点编号 / 2\",\"索引关系 \",\"左子节点索引 = (父节点索引 + 1) x 2 - 1\",\"右子节点索引 = 左子节点索引 + 1\",\"父节点索引 = (子节点索引 - 1) / 2\",\"最小堆\",\"使用最小堆的原因：\",\"设定任务队列，任务优先级越高，编号值越小\",\"使推入最小堆中的任务队列永远是优先级最高的任务对象拍在顶点，永远取出优先级最高的任务\"]},\"392\":{\"h\":\"SchedulerMinHeap.js\",\"t\":[\"方法简析\",\"peek：查看堆的顶点\",\"pop：弹出堆的顶点后需要调用 siftDown 函数向下调整堆\",\"push：添加新节点后需要调用 siftUp 函数向上调整堆\",\"siftDown：向下调整堆结构，保证最小堆\",\"siftUp：向上调整堆结构，保证最小堆\",\"react\\\\packages\\\\scheduler\\\\src\\\\SchedulerMinHeap.js\",\"// 最小堆方法 export function push(heap, node) { const index = heap.length; heap.push(node); siftUp(heap, node, index); } export function peek(heap) { return heap.length === 0 ? null : heap[0]; } export function pop(heap) { if (heap.length === 0) { return null; } const first = heap[0]; const last = heap.pop(); if (last !== first) { heap[0] = last; siftDown(heap, last, 0); } return first; } function siftUp(heap, node, i) { let index = i; while (index > 0) { const parentIndex = (index - 1) >>> 1; const parent = heap[parentIndex]; if (compare(parent, node) > 0) { // The parent is larger. Swap positions. heap[parentIndex] = node; heap[index] = parent; index = parentIndex; } else { // The parent is smaller. Exit. return; } } } function siftDown(heap, node, i) { let index = i; const length = heap.length; const halfLength = length >>> 1; while (index < halfLength) { const leftIndex = (index + 1) * 2 - 1; const left = heap[leftIndex]; const rightIndex = leftIndex + 1; const right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those. if (compare(left, node) < 0) { if (rightIndex < length && compare(right, left) < 0) { heap[index] = right; heap[rightIndex] = node; index = rightIndex; } else { heap[index] = left; heap[leftIndex] = node; index = leftIndex; } } else if (rightIndex < length && compare(right, node) < 0) { heap[index] = right; heap[rightIndex] = node; index = rightIndex; } else { // Neither child is smaller. Exit. return; } } } function compare(a, b) { // Compare sort index first, then task id. const diff = a.sortIndex - b.sortIndex; return diff !== 0 ? diff : a.id - b.id; } \"]},\"393\":{\"h\":\"时间调度与优先级\",\"t\":[\"需要引入各类优先级常量，建立最小堆，管理队列任务，在fiber-requestIdleCallback中通过 requestIdleCallback 实现的方法重新实现\",\"时间切片\",\"多任务队列\"]},\"394\":{\"h\":\"SchedulerPriorities.js\",\"t\":[\"src\\\\scheduler\\\\src\\\\SchedulerPriorities.js\",\"export const NoPriority = 0; export const ImmediatePriority = 1; export const UserBlockingPriority = 2; export const NormalPriority = 3; export const LowPriority = 4; export const IdlePriority = 5; \"]},\"395\":{\"h\":\"Scheduler.js\",\"t\":[\"src\\\\scheduler\\\\src\\\\forks\\\\Scheduler.js\",\"import { peek, pop, push } from \\\"./SchedulerMinHeap\\\"; import { NoPriority, ImmediatePriority, UserBlockingPriority, NormalPriority, LowPriority, IdlePriority, } from \\\"scheduler/src/forks/SchedulerPriorities\\\"; // 后面再考虑实现优先队列 // export function scheduleCallback(callback) { // // 告诉浏览器在空余时间调用回调 // requestIdleCallback(callback); // } function getCurrentTime() { return performance.now(); } // Max 31 bit integer. The max integer size in V8 for 32-bit systems. // Math.pow(2, 30) - 1 // 0b111111111111111111111111111111 const maxSigned31BitInt = 1073741823; // Times out immediately const IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out const USER_BLOCKING_PRIORITY_TIMEOUT = 250; const NORMAL_PRIORITY_TIMEOUT = 5000; const LOW_PRIORITY_TIMEOUT = 10000; // Never times out const IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // 任务ID计数器 let taskIdCounter = 1; // 任务最小堆 const taskQueue = []; let scheduleHostCallback = null; let startTime = null; // 当前任务 let currentTask = null; // 5ms 帧间隔时间；React每一帧向浏览器申请5ms用于自己任务执行 // 如果5ms内没有完成，react也会放弃控制权，把控制权交给浏览器 const frameInterval = 5; const channel = new MessageChannel(); let port1 = channel.port1; let port2 = channel.port2; port1.onmessage = performWorkUntilDeadLine; /** * 按优先级执行任务 * @param priorityLevel * @param callback */ export function scheduleCallback(priorityLevel, callback) { // 获取当前时间 const currentTime = getCurrentTime(); // 此任务的开始时间 const startTime = currentTime; // 超时时间 let timeout; switch (priorityLevel) { case ImmediatePriority: timeout = IMMEDIATE_PRIORITY_TIMEOUT; // -1 break; case UserBlockingPriority: timeout = USER_BLOCKING_PRIORITY_TIMEOUT; // 250ms break; case IdlePriority: timeout = IDLE_PRIORITY_TIMEOUT; // 1073741823ms break; case LowPriority: timeout = LOW_PRIORITY_TIMEOUT; // 10000ms break; case NormalPriority: default: timeout = NORMAL_PRIORITY_TIMEOUT; // 5000ms break; } // 计算此任务的过期时间 const expirationTime = startTime + timeout; const newTask = { id: taskIdCounter++, callback, // 回调任务函数 priorityLevel, // 优先级别 startTime, // 任务的开始时间 expirationTime, // 任务的过期时间 sortIndex: expirationTime, // 排序依据 }; // 向任务最小堆里面添加任务，排序的依据是过期时间，时间最短的在队列头部 push(taskQueue, newTask); // flushWork执行工作，刷新工作，执行任务 requestHostCallback(flushWork); return newTask; } /** * 开始执行任务队列中的任务 * @param startTime */ function flushWork(startTime) { return workLoop(startTime); } function shouldYieldToHost() { // 用当前时间减去开始的时间就是过去的时间 const timeElapsed = getCurrentTime() - startTime; // 如果流逝或经过的时间小于5ms，那就不需要放弃执行 return timeElapsed >= frameInterval; } function workLoop(startTime) { let currentTime = startTime; // 取出优先级最高的task currentTask = peek(taskQueue); while (currentTask !== null) { // 如果此任务的过期时间大于当前时间，也就是没有过期，并且需要放弃执行 时间片到期 if (currentTask.expirationTime > currentTime && shouldYieldToHost()) { // 跳出工作循环 break; } // 告诉浏览器要执行performConcurrentWorkOnRoot 在此触发更新 const callback = currentTask.callback; if (typeof callback === \\\"function\\\") { currentTask.callback = null; const continuationCallback = callback(); // 执行工作如果返回新的函数，表示当前工作未完成 if (typeof continuationCallback === \\\"function\\\") { currentTask.callback = continuationCallback; return true; // 还有任务要执行 } // 如果此任务已经完成，则不需要再继续执行，可以把此任务弹出 if (currentTask === peek(taskQueue)) { pop(taskQueue); } } else { pop(taskQueue); } // 如果当前任务执行完了，或者当前任务不合法，取出下一个任务执行 currentTask = peek(taskQueue); } // 如果循环结束还有未完成的任务，表示hasMoreWork = true return currentTask !== null; } function requestHostCallback(flushWork) { // 先缓存回调函数 scheduleHostCallback = flushWork; // 执行工作直到截止时间 schedulePerformWorkUntilDeadLine(); } function schedulePerformWorkUntilDeadLine() { port2.postMessage(null); } function performWorkUntilDeadLine() { if (scheduleHostCallback) { // 先获取开始执行任务的时间 // 表示时间片的开始 startTime = getCurrentTime(); // 是否有更多的工作要做 let hasMoreWork = true; try { // 执行flushWork，并判断有没有返回值 hasMoreWork = scheduleHostCallback(startTime); } finally { // 执行完以后说明还有更多工作要做 if (hasMoreWork) { // 继续执行 performWorkUntilDeadLine(); } else { scheduleHostCallback = null; } } } } export { shouldYieldToHost as shouldYield, NoPriority, ImmediatePriority, UserBlockingPriority, NormalPriority, LowPriority, IdlePriority, }; \"]},\"396\":{\"h\":\"ReactFiberWorkLoop.js\",\"t\":[\"src\\\\react-reconciler\\\\src\\\\ReactFiberWorkLoop.js\",\"替换了原来的老 scheduleCallback 函数，更新了传入参数\",\"加入 workLoopConcurrent 模式，与 workLoopSync 的区别是增加了判断 5ms 时间片逻辑\",\"import { scheduleCallback, NormalPriority as NormalSchedulePriority, shouldYield, } from \\\"scheduler/index\\\"; import { createWorkInProgress } from \\\"./ReactFiber\\\"; import { beginWork } from \\\"./ReactFiberBeginWork\\\"; import { completeWork } from \\\"./ReactFiberCompleteWork\\\"; import { NoFlags, MutationMask, Placement, Update, ChildDeletion, Passive, } from \\\"react-reconciler/src/ReactFiberFlags\\\"; import { commitMutationEffectsOnFiber, commitPassiveUnmountEffects, commitPassiveMountEffects, commitLayoutEffects, } from \\\"./ReactFiberCommitWork\\\"; import { finishQueueingConcurrentUpdates } from \\\"./ReactFiberConcurrentUpdates\\\"; import { FunctionComponent, HostComponent, HostRoot, HostText, } from \\\"react-reconciler/src/ReactWorkTags\\\"; let workInProgress = null; let rootDoesHavePassiveEffect = false; // 此根节点上有没有useEffect类似的副作用 let rootWithPendingPassiveEffects = null; // 具有useEffect副作用的根节点 FiberRootNode，根fiber.stateNode /** * 计划更新root * 源码中此处有一个调度任务的功能 * @param {*}root */ export function scheduleUpdateOnFiber(root) { // 确保调度执行root上的更新 ensureRootIsScheduled(root); } function ensureRootIsScheduled(root) { // 告诉浏览器要执行performConcurrentWorkOnRoot函数，参数为root scheduleCallback( NormalSchedulePriority, performConcurrentWorkOnRoot.bind(null, root) ); } /** * 开始根据fiber构建fiber树，要创建真实的DOM节点，再把真实的DOM节点插入容器 * @param {*} root */ function performConcurrentWorkOnRoot(root) { // 第一次渲染以同步的方式渲染根节点，初次渲染的时候，都是同步执行 // 改成并发渲染 // renderRootSync(root); renderRootConcurrent(root); // 开始进入提交阶段，就是执行副作用，修改真实DOM const finishedWork = root.current.alternate; root.finishedWork = finishedWork; commitRoot(root); } function flushPassiveEffect() { if (rootWithPendingPassiveEffects !== null) { const root = rootWithPendingPassiveEffects; // 执行卸载副作用 destroy commitPassiveUnmountEffects(root.current); // 执行挂载副作用 create commitPassiveMountEffects(root, root.current); } } function commitRoot(root) { const { finishedWork } = root; // printFinishedWork(finishedWork); if ( (finishedWork.subtreeFlags & Passive) !== NoFlags || (finishedWork.flags & Passive) !== NoFlags ) { if (!rootDoesHavePassiveEffect) { rootDoesHavePassiveEffect = true; scheduleCallback(NormalSchedulePriority, flushPassiveEffect); } } console.log(\\\"~~~~~~~~~~~~~~~~~~~\\\"); const subtreeHasEffects = (finishedWork.subtreeFlags && MutationMask) !== NoFlags; const rootHasEffect = (finishedWork.flags && MutationMask) !== NoFlags; if (subtreeHasEffects || rootHasEffect) { // 当DOM执行变更之后 commitMutationEffectsOnFiber(finishedWork, root); // UI渲染之前：同步执行layoutEffect commitLayoutEffects(finishedWork, root); if (rootDoesHavePassiveEffect) { rootDoesHavePassiveEffect = false; rootWithPendingPassiveEffects = root; } } // 等DOM变更后，就可以把root的current指向新Fiber树 root.current = finishedWork; } function prepareFreshStack(root) { workInProgress = createWorkInProgress(root.current, null); finishQueueingConcurrentUpdates(); } function renderRootConcurrent(root) { prepareFreshStack(root); workLoopConcurrent(); } function renderRootSync(root) { // 开始构建fiber树 // 双缓冲技术，页面显示区域为current映射，对应真实DOM，代表当前已经渲染完成的Fiber // 内存中的Fiber构建、比较、更新为workInProgress映射，表示还未生效，没有更新的DOM上的Fiber树 // 1. current的HostRootFiber在构建过程中不作变化 // 2. workInProgress在内存中顺序构建Fiber树 prepareFreshStack(root); workLoopSync(); } function workLoopConcurrent() { // 如果有下一个要构建的fiber，并且时间片没有过期 while (workInProgress !== null && !shouldYield()) { performUnitOfWork(workInProgress); } } function workLoopSync() { while (workInProgress !== null) { performUnitOfWork(workInProgress); } } /** * 执行一个工作单元 * @param unitOfWork */ function performUnitOfWork(unitOfWork) { // 获取新fiber对应的老fiber，是页面上显示的current的fiber const current = unitOfWork.alternate; // 完成当前fiber的子fiber链表构建 const next = beginWork(current, unitOfWork); // 同步工作单元中的props unitOfWork.memoizedProps = unitOfWork.pendingProps; // 没有子节点，表示工作单元递归的 递 阶段已结束，需要return执行completeWork if (next === null) { // 没有子节点，表示当前fiber的beginWork已经完成，执行completeWork completeUnitOfWork(unitOfWork); } else { workInProgress = next; } } function completeUnitOfWork(unitOfWork) { let completedWork = unitOfWork; do { // 替代fiber const current = completedWork.alternate; // 父fiber const returnFiber = completedWork.return; // 执行此fiber的完成工作 // 如果是原生组件，就是创建真实DOM节点 completeWork(current, completedWork); // 如果有弟弟，构建弟弟对应的fiber子链表 const siblingFiber = completedWork.sibling; if (siblingFiber !== null) { // 如果存在兄弟节点，则workInProgress赋值兄弟节点，循环退出，等待下一次工作单元执行beginWork workInProgress = siblingFiber; return; } // 如果没有弟弟，说明这当前完成的就是父fiber的最后一个节点 // 也就是说一个父fiber，它的所有子fiber全部完成了 completedWork = returnFiber; workInProgress = completedWork; // 执行递归的 归阶段，当兄弟节点为空的时候执行while循环往上返回，直到根fiber时退出循环 } while (completedWork !== null); } function printFinishedWork(fiber) { const { flags, deletions } = fiber; if ((flags & ChildDeletion) !== NoFlags) { fiber.flags &= ~ChildDeletion; for (let i = 0; i < deletions.length; i++) { console.log( \\\"子节点有删除\\\", deletions[i].type, deletions[i].memoizedProps ); } } let child = fiber.child; while (child) { printFinishedWork(child); child = child.sibling; } if (fiber.flags !== NoFlags) { console.log( getFlags(fiber), getTag(fiber.tag), typeof fiber.type === \\\"function\\\" ? fiber.type.name : fiber.type, fiber.memoizedProps ); } } function getFlags(fiber) { const { flags, deletions } = fiber; if (flags === Placement) { return \\\"插入\\\"; } if (flags === Update) { return \\\"更新\\\"; } return flags; } function getTag(tag) { switch (tag) { case FunctionComponent: return \\\"FunctionComponent\\\"; case HostRoot: return \\\"HostRoot\\\"; case HostComponent: return \\\"HostComponent\\\"; case HostText: return \\\"HostText\\\"; default: return tag; } } \"]},\"397\":{\"h\":\"手写源码仓库\",\"t\":[\"https://github.com/mi-saka10032/mini-react/tree/master/packages/messageChannel\"]},\"398\":{\"h\":\"React源码分析\",\"t\":[\"芝士React源码分析\"]},\"399\":{\"h\":\"简介\"},\"400\":{\"h\":\"官网\",\"t\":[\"英文官网: https://vuejs.org/\",\"中文官网: https://cn.vuejs.org/\"]},\"401\":{\"h\":\"介绍与作者\",\"t\":[\"动态构建用户界面的渐进式 JavaScript 框架\",\"作者: 尤雨溪\"]},\"402\":{\"h\":\"特点\",\"t\":[\"1.遵循 MVVM 模式\",\"2.编码简洁, 体积小, 运行效率高, 适合移动/PC 端开发\",\"3.它本身只关注 UI, 也可以引入其它第三方库开发项\"]},\"403\":{\"h\":\"与其他JS框架的关联\",\"t\":[\"1.借鉴 Angular 的模板和数据绑定技术\",\"2.借鉴 React 的组件化和虚拟 DOM 技术\"]},\"404\":{\"h\":\"周边生态\",\"t\":[\"vue-cli：vue脚手架\",\"vue-resource\",\"axios\",\"vue-router：路由\",\"vuex：状态管理\",\"element-ui：基于vue的UI组件库（PC端）\"]},\"405\":{\"h\":\"VueX\"},\"406\":{\"h\":\"理解\",\"t\":[\"概念：专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。\",\"什么时候使用？\",\"1.多个组件依赖于同一状态\",\"2.来自不同组件的行为需要变更同一状态\",\"VueX状态\"]},\"407\":{\"h\":\"搭建 VueX 环境\",\"t\":[\"// ./store/index.js VueX根文件 import Vue from \\\"vue\\\"; import VueX from \\\"vuex\\\"; Vue.use(VueX); //准备动作actions const actions = { increment(context, value) { context.commit(\\\"INCREMENT\\\", value); }, decrement(context, value) { context.commit(\\\"DECREMENT\\\", value); }, incrementOdd(context, value) { if (context.state.num % 2) context.commit(\\\"INCREMENT\\\", value); }, incrementAysnc(context, value) { setTimeout(() => { context.commit(\\\"INCREMENT\\\", value); }, 1000); }, }; //准备变化mutations const mutations = { INCREMENT(state, value) { state.num += value; }, DECREMENT(state, value) { state.num -= value; }, }; //准备数据状态state const state = { num: 0, }; const getters = { tenTime() { return state.num * 10; }, }; export default new VueX.Store({ actions, mutations, state, getters, }); \",\"// main.js import store from './store' new Vue({ store, render: (h) => h(App), beforeCreate() { Vue.prototype.$bus = this; }, }).$mount(\\\"#app\\\"); \"]},\"408\":{\"h\":\"核心属性\"},\"409\":{\"h\":\"state\",\"t\":[\"1.VueX 管理的状态对象\",\"2.它应该是唯一的\",\"3.示例代码：\",\"const state = { xxx: initValue, }; \"]},\"410\":{\"h\":\"actions\",\"t\":[\"1.值为一个对象，包含多个响应用户动作的回调函数\",\"2.通过 commit() 来触发 mutation 中函数的调用，间接更新 state\",\"3.如何触发 actions 中的回调\",\"​ 在组件中使用 $store.dispatch('对应的 action 回调名')触发\",\"4.可以包含异步代码（定时器，ajax）\",\"5.示例代码：\",\"const actions = { zzz({ commit, state }, data1) { commit(\\\"yyy\\\", { data }); }, }; \"]},\"411\":{\"h\":\"mutations\",\"t\":[\"1.值是一个对象，包含多个直接更新 state 的方法。\",\"2.谁能调用 mutation 中的方法，如何调用？\",\"在 action 中：commit(\\\"对应的 mutation 方法名\\\")触发\",\"3.mutations 中方法的特点：不能写异步代码、只能单纯操作 state\",\"在组件仅进行简单操作时，可越过 actions 直接对 mutations 操作，this.$store.commit(xxx)\",\"4.示例代码：\",\"const mutations = { yyy(state, { data1 }) { //更新state某属性 }, }; \"]},\"412\":{\"h\":\"getters\",\"t\":[\"1.值为一个对象，包含多个用于返回数据的函数\",\"2.如何使用？ $store.getters.xxx\",\"3.示例代码：\",\"const getters = { mmm(state) { return state.msg + \\\"!\\\"; }, }; \"]},\"413\":{\"h\":\"Map 方法\"},\"414\":{\"h\":\"mapState\",\"t\":[\"映射 state 中的数据为计算属性。\",\"import { mapState } from \\\"vuex\\\"; export default { computed: { // 借助mapState生成计算属性：sum、school、subject（对象写法） ...mapState({ sum: \\\"sum\\\", school: \\\"school\\\", subject: \\\"subject\\\" }), // 借助mapState生成计算属性：sum、school、subject（数组写法） ...mapState([\\\"sum\\\", \\\"school\\\", \\\"subject\\\"]), }, }; \"]},\"415\":{\"h\":\"mapGetters\",\"t\":[\"映射 getters 中的数据为计算属性。\",\"import { mapGetters } from \\\"vuex\\\"; export default { computed: { // 借助mapGetters生成计算属性：bigSum（对象写法） ...mapGetters({ bigSum: \\\"bigSum\\\" }), // 借助mapGetters生成计算属性：bigSum（数组写法） ...mapGetters([\\\"bigSum\\\"]), }, }; \"]},\"416\":{\"h\":\"mapActions\",\"t\":[\"生成与 actions 对话的方法，即包含$store.dispatch(xxx)的函数\",\"import { mapActions } from \\\"vuex\\\"; export default { methods: { // 借助mapActions生成：incrementOdd、incrementWait（对象写法） ...mapActions({ incrementOdd: \\\"jiaOdd\\\", incrementWait: \\\"jiaWait\\\" }), // 借助mapActions生成：jiaOdd、jiaWait（数组写法） ...mapActions([\\\"jiaOdd\\\", \\\"jiaWait\\\"]), }, }; \"]},\"417\":{\"h\":\"mapMutations\",\"t\":[\"生成与 mutations 对话的方法，即包含$store.commit(yyy)的函数\",\"import { mapMutations } from \\\"vuex\\\"; export default { methods: { // 借助mapMutations生成：increment、decrement（对象写法） ...mapMutations({ increment: \\\"JIA\\\", decrement: \\\"JIAN\\\" }), // 借助mapMutations生成：JIA、JIAN（数组写法） ...mapMutations([\\\"JIA\\\", \\\"JIAN\\\"]), }, }; \",\"备注：mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。\"]},\"418\":{\"h\":\"module 命名空间\",\"t\":[\"包含多个 module\",\"一个 module 是一个 store 的配置对象\",\"与一个组件（包含有共享数据）对应\",\"步骤：\",\"1.修改 store.js\",\"const countAbout = { namespaced: true, //开启命名空间 state: {x: 1}, mutations: { …… }, actions: { …… }， getters: { bigSum(state){ return state.sum * 10 } }, } const personAbout = { namespaced: true, state = { …… }, mutations: { …… }， actions: { …… } } const store = new Vuex.Store({ modules: { countAbout, personAbout } }) \",\"2.开启命名空间后，组件中读取 state 数据\",\"方式一：直接读取\",\"this.$store.state.personAbout.list; \",\"方式二：借助 mapState 读取\",\"...mapState('countAbout',['sum','school','subject']) \",\"3.开启命名空间后，组件中读取 getters 数据\",\"方式一：直接读取\",\"this.$store.getters[\\\"personAbout/firstPersonName\\\"]; \",\"方式二：借助 mapGetters 读取\",\"...mapGetters('countAbout',['bigSum']) \",\"4.开启命名空间后，组件中调用 dispatch\",\"方式一：直接 dispatch\",\"this.$store.dispatch(\\\"personAbout/addPersonWang\\\", person); \",\"方式二：借助 mapActions\",\"...mapActions('countAbout',['incrementOdd','incrementAsync']) \",\"5.开启命名空间后，组件中调用 commit\",\"方式一：直接 commit\",\"this.$store.commit(\\\"personAbout/ADD_PERSON\\\", person); \",\"方式二：借助 mapMutations\",\"...mapMutations('countAbout',['increment','decrement']) \"]},\"419\":{\"h\":\"VueRouter\"},\"420\":{\"h\":\"理解\"},\"421\":{\"h\":\"SPA\",\"t\":[\"1.单页 web 应用。\",\"2.整个应用只有一个完整页面。\",\"3.点击页面中的导航链接不会刷新页面，只会做页面的局部更新。\",\"4.数据需要通过 ajax 请求获取。\"]},\"422\":{\"h\":\"路由\",\"t\":[\"1.一个路由就是一组映射关系(key - value)\",\"2.key 为路径，value 可能是 function 或 component\"]},\"423\":{\"h\":\"分类\",\"t\":[\"1.后端路由：\",\"value 是 function，用于处理客户端提交的请求。\",\"服务器收到一个请求时，根据请求路径找到匹配的函数来处理请求，返回响应数据。\",\"2.前端路由：\",\"value 是 component，用于展示页面内容。\",\"当浏览器的路径改变时，对应的组件就会显示。\"]},\"424\":{\"h\":\"基本使用\",\"t\":[\"1.npm i vue-router\",\"2.应用插件 Vue.use(VueRouter)\",\"3.编写 router 配置项并注入到 Vue 实例中\",\"// ./router/index.js import VueRouter from \\\"vue-router\\\"; import About from \\\"../components/About.vue\\\"; import Home from \\\"../components/Home.vue\\\"; //创建并默认暴露一个路由器 export default new VueRouter({ routes: [ { path: \\\"/about\\\", component: About, }, { path: \\\"/home\\\", component: Home, }, ], }); \",\"// main.js import router from \\\"./router\\\"; new Vue({ router, render: (h) => h(App), beforeCreate() { Vue.prototype.$bus = this; }, }).$mount(\\\"#app\\\"); \",\"4.实现切换 active-class 可配置高亮样式\",\"<template> <router-link class=\\\"list-group-item\\\" active-class=\\\"active\\\" to=\\\"/about\\\" >About </router-link> </template> \",\"5.指定展示位置\",\"<template> <router-view></router-view> </template> \"]},\"425\":{\"h\":\"注意点\",\"t\":[\"1.路由组件通常放在 pages 文件夹，一般组件通常存放在 components 文件夹。\",\"2.通过切换，隐藏了的路由组件，默认是被销毁掉的，需要的时候再去挂载。\",\"3.每个组件都有自己的$route 属性，里面存储着自己的路由信息。\",\"4.整个应用只有一个 router，可以通过组件的$router 属性获取到。\"]},\"426\":{\"h\":\"嵌套路由\",\"t\":[\"1.配置路由规则，使用 children 配置项：\",\"routes: [ { path: \\\"/about\\\", component: About, }, { path: \\\"/home\\\", component: Home, children: [ { path: \\\"news\\\", //此处一定不要写 /news component: News, }, { path: \\\"message\\\", //此处一定不要写 /message component: Message, }, ], }, ]; \",\"2.跳转，要写完整路径：\",\"<router-link class=\\\"list-group-item\\\" active-class=\\\"active\\\" to=\\\"/home/news\\\" >News</router-link> \"]},\"427\":{\"h\":\"路由命名\",\"t\":[\"作用：简化路由的跳转，以及后续路由跳转也有用到。\",\"export default new VueRouter({ routes: [{ path: '/about', component: About }, { path: '/home', component: Home, children: [{ path: 'news', component: News }, { path: 'message', component: Message, children: [ { name: 'xiangqing' //命名 path: 'detail', component: Detail } ] } ] } ] }) \",\"简化跳转写法：\",\"<template> <!-- 简化前，完整路径 --> <router-link to=\\\"/demo/test/welcome\\\">跳转</router-link> <!-- 简化后，通过名字跳转 --> <router-link :to=\\\"{ name: 'hello' }\\\">跳转</router-link> <!-- 简化写法配合传递参数 --> <router-link :to=\\\"{ name: 'hello', query: { id: 666, title: '你好' } }\\\" >跳转</router-link >= </template> \"]},\"428\":{\"h\":\"路由传参\"},\"429\":{\"h\":\"query\",\"t\":[\"<template> <!-- 跳转并携带query参数，to的字符串写法 --> <router-link to=\\\"/home/message/detail?id=666&title=你好\\\">跳转</router-link> <!-- 跳转并携带query参数，to的对象写法 --> <router-link :to=\\\"{ path: '/home/message/detail', query: { id: 666, title: '你好' } }\\\" >跳转</router-link >= </template> \",\"在指向 /home/message/detail 路由的组件 component 中，调用 query 参数\",\"this.$route.query.idthis.$route.query.title\"]},\"430\":{\"h\":\"params\",\"t\":[\"1.配置路由，声明接收 params 参数\",\"export default new VueRouter({ routes: [{ path: '/about', component: About }, { path: '/home', component: Home, children: [{ path: 'news', component: News }, { path: 'message', component: Message, children: [ { name: 'xiangqing' //命名 path: 'detail/:id/:title', // 使用占位符声明接收params参数 component: Detail } ] } ] } ] }) \",\"<template> <!-- 跳转并携带params参数，to的字符串写法 --> <router-link to=\\\"/home/message/detail/666/你好\\\">跳转</router-link> <!-- 跳转并携带params参数，to的对象写法，此处必须是name，不能是path --> <router-link :to=\\\"{ name: 'xiangqing', params: { id: 666, title: '你好' } }\\\" >跳转</router-link >= </template> \",\"特别注意 1：路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须用 name 配置！\",\"在指向 /home/message/detail/:id/:title 路由的组件 component 中，调用 params 参数\",\"this.$route.params.idthis.$route.params.title\",\"特别注意 2：\",\"在路由配置中不声明 id 和 title 占位符，依旧可以通过 to 的对象写法跳转到'xiangqing'路由组件，并且 params 参数可传递，但是页面刷新后 params 会消失\",\"该路由配置方法适用于 url 跳转需要对参数保密的情景，为了避免页面刷新后丢失 params，可以在跳转的时候对 params 做持久化储存，后端处理、使用 localStorage、VueX-persist 均可解决。\"]},\"431\":{\"h\":\"props\",\"t\":[\"作用：让路由组件更方便地收到参数\",\"// ./router/index.js { name: 'xiangqing', path: 'detail/:id', component: Detail, // 第一种写法，props值为对象，该对象中所有的key-value组合最终都通过props传给Detail组件 props: { a: 900 } // 第二种写法：props为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件 props: true // 第三种写法：props值为函数，该函数返回的对象中每一对key-value组合都会通过props传给Detail组件 props(route) { return { id: route.params.id, title: route.query.title } } } \"]},\"432\":{\"h\":\"编程式路由导航\",\"t\":[\"1.作用：不借助<router-link>实现路由跳转，让路由跳转更加灵活\",\"// $router的两个API // 跳转到目标路由，浏览器后退可退回当前url this.$router.push({ name: \\\"xiangqing\\\", params: { id: \\\"xxx\\\", title: \\\"xxxx\\\", }, }); // 替换当前url并跳转到目标路由，浏览器无法退回到当前url this.$router.replace({ name: \\\"xiangqing\\\", params: { id: \\\"xxx\\\", title: \\\"xxxx\\\", }, }); this.$router.forward(); // 前进 this.$router.back(); // 后退 this.$router.go(); // 前进或后退取决于go中的参数（需要为整数），正数为前进负数为后退 \",\"replace 属性\",\"1.作用：控制路由跳转时操作浏览器历史记录的模式\",\"2.浏览器的历史记录有两种写入方式：分别为 push 和 replace，push 是追加历史记录，replace 是替换当前历史记录，路由跳转默认 push\",\"3.router-link 中如何开启 replace：<router-link replace >News</router-link>\"]},\"433\":{\"h\":\"缓存路由组件\",\"t\":[\"1.作用：让不展示的路由组件保持挂载，不被销毁。\",\"2.具体编码：\",\"<keep-alive include=\\\"News\\\"> <router-view></router-view> </keep-alive> \"]},\"434\":{\"h\":\"新生命周期钩子\",\"t\":[\"1.作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。\",\"2.具体名字：\",\"activated 路由组件被激活时触发\",\"deactivated 路由组件失活时触发\",\"// 配合keep-alive使用，组件会在首次加载时触发mounted钩子，外部父路由卸载前触发beforeDestroy钩子，在父路由内部子路由之间相互切换，并不会触发挂载和卸载钩子，而是触发activated和deactivated export default { mounted() { console.log(\\\"组件挂载\\\"); }, activated() { console.log(\\\"路由组件激活\\\"); }, deactivated() { console.log(\\\"路由组件失活\\\"); }, beforeDestroy() { console.log(\\\"组件即将销毁\\\"); }, }; \"]},\"435\":{\"h\":\"路由守卫\",\"t\":[\"1.作用：对路由进行权限控制。\",\"2.分类：全局守卫、独享守卫、组件内守卫\"]},\"436\":{\"h\":\"全局守卫\",\"t\":[\"// 全局前置守卫：初始化时执行，每次路由切换时执行 router.beforeEach((to, from, next) => { console.log(\\\"beforeEach\\\", to, from); // 判断当前路由是否需要进行权限控制，在router配置项中对目标路由的meta属性对象中添加isAuth的布尔值 if (to.meta.isAuth) { // 权限控制的具体规则 if (localStorage.getItem(\\\"school\\\") === \\\"atguigu\\\") { next(); // 放行 } else { alert(\\\"暂无权限查看\\\"); } } else { next(); // 放行 } }); // 全局后置守卫，初始化时执行，每次路由切换后执行 router.afterEach((to, from) => { console.log(\\\"afterEach\\\", to, from); if (to.meta.title) { document.title = to.meta.title; // 修改网页的title } else { document.title = \\\"vue-test\\\"; } }); \"]},\"437\":{\"h\":\"独享守卫\",\"t\":[\"写在 routes 的对象元素中，并且该守卫没有 afterEnter 后置守卫\",\"// ./router/index.js { path: '/home', name: 'Home', component: Home, beforeEnter(to, from, next) { console.log('beforeEnter', to, from); if(to.meta.isAuth) { if(localStorage.getItem('school') === 'atguigu') { next() } else { alert('暂无权限查看') } } else { next() } } } \"]},\"438\":{\"h\":\"组件内守卫\",\"t\":[\"在组件内配置项书写\",\"<script> export default { // 进入守卫：通过路由规则，进入该组件时调用 beforeRouteEnter(to, from, next) { // ... }, // 离开守卫：通过路由规则，离开该组件时调用 beforeRouteLeave(to, from, next) { // ... }, }; </script> \"]},\"439\":{\"h\":\"路由器两种工作模式\",\"t\":[\"1.对于一个 url 来说，什么是 hash 值？——#及其后面的内容就是 hash 值。\",\"2.hash 值不会包含在 http 请求中，即：hash 值不会带给服务器。\",\"3.hash 模式：\",\"-地址中永远带着#号，不美观。\",\"-若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。\",\"兼容性较好。\",\"4.history 模式：\",\"​ - 地址干净，美观。\",\"​ - 兼容性和 hash 模式相比略差。\",\"​ - 应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。\",\"export default new VueRouter({ mode: 'hash' // or 'history' routes: { path: \\\"/about\\\", component: About, }, }); \"]},\"440\":{\"h\":\"history 模式在生产环境的问题\",\"t\":[\"待定\"]},\"441\":{\"h\":\"数据绑定\"},\"442\":{\"h\":\"模板\",\"t\":[\"html 中包含了一些 JS 语法代码，语法分为两种，分别为：\",\"插值语法（双大括号表达式）\",\"指令（以 v-开头）\"]},\"443\":{\"h\":\"插值语法\",\"t\":[\"1.功能: 用于解析标签体内容\",\"2.语法: {{xxx}} ，xxx 会作为 js 表达式 解析（注意区分 js 代码、表达式、vue 实例对象）\",\"注意：\",\"el 用于指定当前 Vue 实例为哪个容器服务，值通常为 css 选择器字符串。\",\"data 中用于存储数据，数据供 el 所制定的容器去使用。\",\"root 容器里的代码被称为 Vue 模板。\",\"容器与 Vue 实例为一对一关系。\",\"真实开发中只有一个 Vue 实例，并且会配合组件一起使用。\",\"一旦 data 中的数据发生改变，那么模板中用到该数据的地方也会自动更新。\"]},\"444\":{\"h\":\"指令语法\",\"t\":[\"功能: 解析标签属性、解析标签体内容、绑定事件\",\"举例：v-bind:href = 'xxxx' ，xxxx 会作为 js 表达式被解析\"]},\"445\":{\"h\":\"数据绑定\"},\"446\":{\"h\":\"单向绑定\",\"t\":[\"1.v-bind:href =\\\"xxx\\\" 或简写为 :href\",\"2.数据只能从 data 流向页面\"]},\"447\":{\"h\":\"双向绑定\",\"t\":[\"1.语法：v-model:value=\\\"xxx\\\" 或简写为 v-model=\\\"xxx\\\"\",\"2.特点：数据不仅能从 data 流向页面，还能从页面流向 data\",\"注意：v-model 只能用于表单类元素（输入类元素）\"]},\"448\":{\"h\":\"写法示例\",\"t\":[\"<body> <div id=\\\"app\\\"> <p>{{ name }}</p> <input v-model=\\\"age\\\" > </div> <script> const app = new Vue({ data: function () { return { name: \\\"Hello\\\", age: 18 } } }); app.$mount(\\\"#app\\\") </script> </body> \"]},\"449\":{\"h\":\"计算与监视属性\"},\"450\":{\"h\":\"computed\",\"t\":[\"1.要显示的数据不存在，要通过计算的来。\",\"2.在 computed 对象中定义计算属性。\",\"3.在页面中使用{{方法名}}来显示计算结果。\",\"原理：底层借助了 Object.defineProperty 方法提供的 getter 和 setter。\",\"get 函数执行时机：初次读取时会执行一次；当依赖的数据发生改变时会被再次调用。\",\"优势：与 methods 实现相比，内部有缓存机制（复用），效率更高，调试方便。\",\"备注：\",\"1.计算属性最终会出现在 vm 上，直接读取使用即可。\",\"2.如果计算属性要被修改，那必须写 set 函数去响应修改，切 set 中要引起计算时依赖的数据发生改变。\",\"与 methods 对比\",\"1.computed 调用属性，methods 调用函数。\",\"2.computed 具备缓存功能，依赖改变的 data 不变时 computed 属性多次调用内部不会多次执行；methods 不具备缓存功能，调用几次 methods 内部就执行多少次。\"]},\"451\":{\"h\":\"watch\",\"t\":[\"1.通过通过 vm 对象的$watch()或 watch 配置来监视指定的属性（data 和 computed 皆可）\",\"2.当属性变化时，handler 回调函数自动调用, 在函数内部进行计算\",\"3.handler 两个参数，newValue 和 oldValue，表示监视 data 修改前后的值\",\"4.immediate 方法，初始化时能让 handler 调用一次\",\"深度监视\",\"1.Vue 中的 watch 默认不监视对象内部值的改变（一层）。\",\"2.配置 deep: true 可以监视对象内部值改变（多层）。\",\"3.Vue 自身可以监视对象内部值的改变，但 Vue 提供的 watch 默认不可以。\",\"4.使用 watch 时根据数据的具体结构，决定是否采用深度监视。\",\"监视简写\",\"不需要 immediate，不需要 deep，仅需要 handler 呈递值改变，可以直接简写。\",\"对象监听时 newValue 和 oldValue 相同的解决方案\",\"原因：因为 newValue 和 oldValue 的栈地址都指向同一个对象，所以 newValue 和 oldValue 在 handler 函数中的值内容是相同的\",\"方案：创建该 data 的 computed 属性，JSON 转译一次之后再监听\",\"<script> export default { data: () => ({ obj: { name: \\\"1\\\", age: 12 }, }), computed: { watchObj() { return JSON.parse(JSON.stringify(this.obj)); }, }, watch: { watchObj: { deep: true, handler(newValue, oldValue) { // 修改obj中的name或age值，触发watchObj的handler执行，newValue和oldValue可以正常显示 console.log(\\\"newValue\\\", newValue); console.log(\\\"oldValue\\\", oldValue); }, }, }, }; </script> \"]},\"452\":{\"h\":\"计算与监视对比\",\"t\":[\"1.computed 能完成的功能，watch 都可以完成。\",\"2.操作一个由多个 data 属性集成的属性时，computed 一个函数即可实现，watch 需要对多个属性同时监听才行。\",\"3.watch 能完成的功能，computed 不一定能完成，例如：watch 可以异步操作。\",\"两个重要原则：\",\"1.所有被 Vue 管理的函数，最好写成普通函数，这样在 this 的指向才是 vm 或组件实例对象。\",\"2.所有不被 Vue 管理的函数（定时器的回调函数、ajax 登录回调），最好写成箭头函数，这样 this 的指向才是 vm 或组件实例对象。\"]},\"453\":{\"h\":\"样式绑定\"},\"454\":{\"h\":\"class 绑定\",\"t\":[\"1.字符串写法，适用于：样式的类名不确定，需要动态指定。\",\"<div id=\\\"app\\\"> <div :class=\\\"addObj\\\"></div> </div> <script> new Vue({ el: \\\"#app\\\", data: { addObj: \\\"div1\\\", }, }); Vue.prototype.productionTip = false; </script> \",\"2.数组写法，适用于：要绑定的样式个数不确定、名字也不确定。\",\"<body> <div id=\\\"app\\\"> <div :class=\\\"arrObj\\\"></div> </div> <script> new Vue({ el: \\\"#app\\\", data: { arrObj: [\\\"div1\\\",\\\"div2\\\",\\\"div3\\\"] }, }); Vue.prototype.productionTip = false; </script> </body> \",\"3.对象写法， 适用于：要绑定的样式个数确定、名字也确定，但要动态决定用还是不用\",\"<body> <div id=\\\"app\\\"> <div :class=\\\"classObj\\\"></div> </div> <script> new Vue({ el: \\\"#app\\\", data: { classObj: { div1: true, }, }, }); Vue.prototype.productionTip = false; </script> </body> \"]},\"455\":{\"h\":\"style 绑定\",\"t\":[\"style 同样有三种写法，但需要注意：\",\"1.:style = \\\"{fontSize: xxx }\\\"其中 xxx 是动态 data 值。\",\"2.:style = \\\"[a,b]\\\"其中 a、b 应是样式对象。\",\"3.样式名驼峰命名法\",\"4.对象写法与 class 不同，不支持动态切换，仅在对象中以 key-value 显示样式。\"]},\"456\":{\"h\":\"条件渲染\"},\"457\":{\"h\":\"条件渲染指令\",\"t\":[\"1.v-if 与 v-else\",\"（1）v-if=\\\"表达式\\\"\",\"​（2）v-else-if=\\\"表达式\\\"\",\"​（3）v-else=\\\"表达式\\\"\",\"适用于：切换频率较低的场景。\",\"特点：不展示的 DOM 元素直接被移除。\",\"注意：v-if 可以和 v-else-if、v-else 一起使用，但要求结构不能被“打断”。\",\"v-if 可以搭配<template>标签使用，template 仅仅用于条件判断来切换内部元素，不破坏 DOM 结构。\",\"2.v-show\",\"写法：v-show=\\\"表达式\\\"\",\"​ 适用于：切换频率较高的场景。\",\"​ 特点：不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉。\",\"3.备注：使用 v-if 的时候，元素可能无法获取到，而是用 v-show 一定可以获取到。\"]},\"458\":{\"h\":\"比较 v-if 与 v-show\",\"t\":[\"1.如果需要频繁切换 v-show 较好\",\"2.当条件不成立时, v-if 的所有子节点不会解析(项目中使用)\"]},\"459\":{\"h\":\"列表渲染\"},\"460\":{\"h\":\"列表显示指令\",\"t\":[\"遍历数组: v-for / index\",\"遍历对象: v-for / key\",\"特点：\",\"1.用于展示列表数据\",\"2.语法：v-for=\\\"(item, index) in xxx\\\" :key=\\\"yyy\\\"\",\"3.可遍历：数组、对象、字符串（很少用）、指定次数（很少用）\"]},\"461\":{\"h\":\"key 原理\",\"t\":[\"key 的作用\",\"简单地说，key 是虚拟 DOM 对象的标识符，在更新显示时 key 起着极其重要的作用\",\"详细地说，当状态中的数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】， 随后 Vue 进行【新虚拟 DOM】与【旧虚拟 DOM】的 diff 比较，比较规则如下：\",\"a.旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：\",\"（1）若虚拟 DOM 中内容没变，直接使用之前的真实 DOM\",\"（2）若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM\",\"用 index 作为 key 可能会引发的问题\",\"1.若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没有必要的真实 DOM 更新，界面效果没问题，但效率低。\",\"2.如果结构中还包含输入类的 DOM：会产生错误 DOM 更新，界面有问题。\",\"3.注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。\",\"开发中如何选择 key\",\"最好使用每条数据的唯一标识作为 key，比如 id、手机号、身份证号、学号等唯一值。\",\"如果确定只是简单展示数据，用 index 也是可以的。\"]},\"462\":{\"h\":\"收集表单数据\"},\"463\":{\"h\":\"text\",\"t\":[\"v-model 收集的是 value 值，用户输入的就是 value 值。\"]},\"464\":{\"h\":\"radio\",\"t\":[\"v-model 收集的是 value 值，且要给标签配置 value 值。\"]},\"465\":{\"h\":\"checkbox\",\"t\":[\"1.没有配置 input 的 value 属性，那么收集的是 checked（勾选 or 未勾选，布尔值）\",\"2.配置 input 的 value 属性：\",\"（1）v-model 的初始值是非数组，那么收集的是 checked\",\"​（2）v-model 的初始值是数组，那么收集的是 value 组成的数组\",\"备注：v-model 三个修饰符：\",\"lazy：失去焦点再收集数据\",\"number：输入字符串转为有效的数字\",\"​trim：输入首尾空格过滤\"]},\"466\":{\"h\":\"过滤器（Vue3 已删除）\",\"t\":[\"定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。\",\"语法：\",\"1.注册过滤器：Vue.filter(name, callback) 或 new Vue(filters: {})\",\"2.使用过滤器：{{ xxx | 过滤器名 }}\",\"备注：\",\"1.过滤器也可以接收额外参数、多个过滤器也可以串联。\",\"2.并没有改变原本的数据，是产生新的对应数据。\",\"3.功能：对要显示的数据进行特定格式化后\",\"4.注意：并没有改变原本的数据，是产生新的对应数据。\"]},\"467\":{\"h\":\"MVVM 模型\",\"t\":[\"M：Model：模型，对应 data 中的数据\",\"V：View：视图，模板\",\"VM：ViewModel：视图模型，Vue 实例对象。\",\"MVVM模型\",\"总结：\",\"1.data 中所有的属性，最后都出现在 vm（Vue 实例）身上。\",\"2.vm 身上所有的属性及 Vue 原型上所有属性，在 Vue 模板上都可以直接使用。\"]},\"468\":{\"h\":\"数据代理\",\"t\":[\"核心 API：Object.defineProperty(obj, key, value)\",\"声明默认不可枚举、不可修改、不可删除的属性\",\"let sex = \\\"male\\\"; let obj = { name: \\\"zhangsan\\\", age: 18, }; Object.defineProperty(obj, \\\"gender\\\", { get() { return sex; }, set(value) { sex = value; }, }); \",\"上述示例完成了 sex 变量和 obj.gender 的双向绑定。\",\"真正定义：通过一个对象代理对另一个对象中属性的操作（读/写）\",\"数据代理图示\"]},\"469\":{\"h\":\"事件处理\"},\"470\":{\"h\":\"事件绑定\",\"t\":[\"使用 v-on:xxx 或 @xxx 绑定事件，其中 xxx 是事件名\",\"事件的回调需要配置在 methods 对象中，最终会在 vm 上\",\"methods 中配置的函数，不要用箭头函数，否则 this 不是 vm\",\"methods 中配置的函数，都是被 Vue 所管理的函数，this 指向是 vm 或组件实例对象\",\"@click=\\\"demo\\\" 和 @click=\\\"demo($event)\\\" 效果一致，但后者可以传参\",\"绑定事件的时候引号内可以写一些简单的语句\"]},\"471\":{\"h\":\"事件修饰符\",\"t\":[\"@click.prevent：阻止事件的默认行为 event.preventDefault()\",\"@click.stop : 停止事件冒泡 event.stopPropagation()\",\"@click.one：事件只触发一次\",\"@click.capture：使用事件的捕获模式\",\"@click.self：只有 event.target 是当前操作的元素时才触发事件\",\"@click.passive：事件的默认行为立即执行，无需等待事件回调执行完毕（先动作，再执行函数）\",\"修饰符可连续写如 @click.one.prevent\"]},\"472\":{\"h\":\"按键修饰符\",\"t\":[\"1.keycode : 操作的是某个 keycode 值的键\",\"2.keyName : 操作的某个按键名的键(少部分)\",\"常用的按键别名：\",\"回车 => enter\",\"删除 => delete（捕获“删除”和“退格”键）\",\"退出 => esc\",\"空格 => space\",\"换行 => tab\",\"上 => up\",\"下 => down\",\"左 => left\",\"右 => right\",\"Vue 未提供别名的按键，可以使用按键原始的 key 值去绑定，但要注意转为 kebab-case（短横线命名）\",\"系统修饰键（用法特殊）：ctrl、alt、shift、meta\",\"（1）配合keyup使用，按下修饰键的同事，再按下其他键，随后释放其他键，事件才被触发。\",\"（2）配合keydown使用，正常触发事件。\",\"也可以使用keyCode去指定具体的按键（不推荐）\",\"Vue.config.keyCodes[自定义键名] = 键码，定制按键别名\"]},\"473\":{\"h\":\"指令\",\"t\":[\"数据绑定 v-bind 及其简写、事件处理 v-on 及其简写@都是 Vue 指令的一部分。\"]},\"474\":{\"h\":\"常用内置指令\",\"t\":[\"1.v-text : 更新元素的 textContent\",\"与插值语法的区别：v-text 会替换节点中的内容，{{x}}不会\",\"2.v-html : 更新元素的 innerHTML\",\"与插值语法的区别：\",\"v-html 会替换掉节点中所有内容，{{x}}不会。v-html 可以识别 html 结构。\",\"严重注意：v-html 有安全性问题！\",\"在网站上动态渲染任意 html 是非常危险的，容易导致 XSS 攻击。\",\"一定要在可信的内容上使用 v-html，不要用在用户提交的内容上。\",\"3.v-if : 如果为 true, 当前标签才会输出到页面\",\"4.v-else: 如果为 false, 当前标签才会输出到页面\",\"5.v-show : 通过控制 display 样式来控制显示/隐藏\",\"6.v-for : 遍历数组/对象\",\"7.v-on : 绑定事件监听, 一般简写为@\",\"8.v-bind : 绑定解析表达式, 可以省略 v-bind\",\"9.v-model : 双向数据绑定\",\"10.v-cloak : 防止闪现, 与 css 配合: [v-cloak] { display: none }（在 CSS 中写）\",\"1.本质是一个特殊属性，Vue 实例创建完毕接管容器后，会删掉 v-cloak 属性。\",\"2.使用 css 配合 v-cloak 可以解决网速慢时页面展示出{{xxx}}的问题。\",\"11.v-once：初次动态渲染后视为静态内容\",\"以后数据的改变不会引起 v-once 所在结构的更新，用于优化性能。\",\"12.v-pre：跳过其所在节点的编译过程\",\"可利用该指令跳过没有使用指令语法、没有使用插值语法的节点，加快编译。\"]},\"475\":{\"h\":\"自定义指令\",\"t\":[\"例：v-big：指令与元素成功绑定时/指令所在的模板被重新解析时。\",\"1.在 directives 属性中写入 big(element, binding){} 函数，随页面渲染自动调用。\",\"2.绑入多个元素，元素都重新解析更新，函数会重复调用。\",\"自定义指令写为对象形式，可插入三个函数方法：bind、inserted、update。分别在指令与元素成功绑定时、指令所在元素被插入页面时、指令所在模板被重新解析时触发。\",\"语法\",\"（1）局部指令：new Vue({ directives: { 指令明： 配置对象}}) 或 new Vue({ directives() { } })\",\"（2）全局指令：Vue.directive(指令名，配置对象) 或 Vue.directive(指令名，回调函数)\",\"回调\",\"bind：指令与元素成功绑定时调用\",\"inserted：指令所在元素被插入页面时调用\",\"update：指令所在模板结构重新解析时调用\",\"备注\",\"1.指令定义时不加 v-，但使用时要加 v-\",\"2.指令名如果是多个单词，要使用 kebab-case 命名方式，不要用 camelCase 命名。\",\"以下为 v-directive 代码示例，click 点击后绑定了 v-color 的元素字体变红切换\",\"<template> <div id=\\\"app\\\"> <button @click=\\\"onclick\\\">Hello</button> <div v-color=\\\"color\\\">哈哈哈</div> </div> </template> <script> export default { data: () => { return { color: null, }; }, methods: { onclick() { this.color = this.color ? null : \\\"red\\\"; }, }, directives: { color: { inserted(el) { el.style.display = \\\"block\\\"; }, update(el, binding) { el.style.color = binding.value; }, }, }, }; </script> \"]},\"476\":{\"h\":\"生命周期\"},\"477\":{\"h\":\"流程图\",\"t\":[\"Vue2生命周期\"]},\"478\":{\"h\":\"分析\"},\"479\":{\"h\":\"初始化显示\",\"t\":[\"beforeCreate()：初始化生命周期、事件，但数据代理还未开始。此时，无法通过 vm 访问 data 中数据、methods 中方法。\",\"created()：初始化数据监测、数据代理。此时，可以通过 vm 访问到 data 中的数据、methods 中方法。\",\"beforeMount()：页面呈现的是未经 Vue 编译的 DOM 结构，所有对 DOM 的操作不奏效。\",\"mounted()：此时，页面中呈现的是经过 Vue 编译的 DOM，对 DOM 的操作均有效（尽可能避免）。一般在此进行：开启定时器、发送网络请求、订阅消息、绑定自定义事件等初始化操作。\"]},\"480\":{\"h\":\"更新状态\",\"t\":[\"当 data 中监听的数据变化时，this.xxx = value\",\"beforeUpdate()：此时，数据是新的但页面时旧的，即页面尚未和数据保持同步。\",\"中场：根据新数据，生成新的虚拟 DOM，随后与旧的虚拟 DOM 进行比较，最终完成页面更新，完成了 Model→View 的更新。\",\"updated()：此时数据和页面都是最新的，页面和数据同步。\"]},\"481\":{\"h\":\"销毁实例\",\"t\":[\"beforeDestroy()：此时，vm 中所有的 data、methods、指令等等，都处于可用状态，马上要执行销毁过程，一般在此阶段：关闭定时器、取消订阅消息、解绑自定义事件等收尾操作。\"]},\"482\":{\"h\":\"常用周期\",\"t\":[\"1.mounted(): 发送 ajax 请求, 启动定时器等异步任务，绑定自定义事件\",\"2.beforeDestroy(): 做收尾工作, 如: 清除定时器、解绑自定义事件、取消订阅消息\",\"3.销毁 Vue 实例：\",\"销毁后期借助 Vue-dev 工具看不到任何信息。\",\"销毁后自定义事件会失效，但原生 DOM 事件依然有效。\",\"一般不会在 beforeDestroy 操作数据，因为即便更新数据也无法更新。\"]},\"483\":{\"h\":\"组件化编程\"},\"484\":{\"h\":\"模块与组件\"},\"485\":{\"h\":\"模块\",\"t\":[\"1.理解: 向外提供特定功能的 js 程序, 一般就是一个 js 文件\",\"2.作用: 复用 js, 简化 js 的编写, 提高 js 运行效率\"]},\"486\":{\"h\":\"组件\",\"t\":[\"1.理解: 用来实现局部(特定)功能效果的代码集合(html/css/js/image…..)\",\"2.作用: 复用编码, 简化项目编码, 提高运行效率\",\"模块化：当应用中的 js 都以模块来编写的, 那这个应用就是一个模块化的应用。\",\"组件化：当应用中的功能都是多组件的方式来编写的, 那这个应用就是一个组件化的应用。\"]},\"487\":{\"h\":\"非单文件组件\",\"t\":[\"问题：\",\"模板编写没有提示\",\"没有构建过程, 无法将 ES6 转换成 ES5\",\"不支持组件的 CSS\",\"真正开发中几乎不用\",\"创建步骤：\",\"1.创建组件，const app = Vue.extend( data({ return xxx; }) )\",\"注意区别：1.el 不要写，因为 el 由最终的 vm 来管理。2.data 必须写成函数，避免组件复用数据存在引用。\",\"备注：使用 template 可以配置组件结构。\",\"2.注册组件\",\"1）局部注册：new Vue({ components: { app } })\",\"2）全局注册：Vue.component('组件名'，组件)\",\"3.编写组件标签\",\"<hello></hello>\"]},\"488\":{\"h\":\"组件名\",\"t\":[\"1.单词拼写\",\"一个单词组成：school School均可\",\"多个单词组成：my-school √ MySchool ×（需要脚手架支持）\",\"尽可能回避HTML已有元素名称，可以使用name配置项指定组件在开发者工具中呈现的名字。\",\"2.组件标签\",\"<school></school> √\",\"<school/> 不使用脚手架时，会导致后续组件不能渲染。\"]},\"489\":{\"h\":\"VueComponent构造函数\",\"t\":[\"1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。\",\"2.我们只需要写<school></school>，Vue解析时会帮我们创建school组件的实例对象，Vue会执行new VueComponent(options)。\",\"3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent。\",\"4.关于this指向：\",\"​ （1）组件配置中：data函数、methods函数、watch函数、computed函数，它们的this均是VueComponent实例对象。\",\"​ （2）new Vue()配置中：data函数、methods函数、watch函数、computed函数，它们的this均是Vue实例对象。\",\"5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。Vue的实例对象简称vm。\",\"以下是VueComponent关系图谱：\",\"非常重要的VueComponent关系图谱\"]},\"490\":{\"h\":\"单文件组件\",\"t\":[\"单文件组件的使用简单，耦合度低，是开发中最常用的写法。\",\"创建步骤：\",\"引入组件\",\"映射成标签\",\"使用组件标签\",\"单文件组件的书写格式详见脚手架章节\"]},\"491\":{\"h\":\"脚手架\",\"t\":[\"脚手架以vue-cli为例进行记录，实际开发更推荐使用vite。\"]},\"492\":{\"h\":\"初始化脚手架\",\"t\":[\"Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台）。\",\"最新的版本是 5.x。\",\"文档: https://cli.vuejs.org/zh/。\"]},\"493\":{\"h\":\"初始化步骤\",\"t\":[\"第一步（仅第一次执行）：全局安装@vue/cli。\",\"npm install -g @vue/cli\",\"第二步：切换到你要创建项目的目录，然后使用命令创建项目\",\"vue create xxxx\",\"第三步：启动项目\",\"npm run serve\",\"Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpack 配置，请执行：vue inspect > output.js\"]},\"494\":{\"h\":\"模板项目结构\",\"t\":[\"脚手架模板项目结构\"]},\"495\":{\"h\":\"请求代理\",\"t\":[\"第一种方式：\",\"module.exports = { devServer: { proxy: 'http://localhost:4000' } } \",\"仅限一个服务器端口有效。\",\"工作方式：请求了前端不存在的资源时，那么请求会转发给该服务器（优先匹配前端资源）\",\"第二种方式：\",\"module.exports = { devServer: { proxy: { '/api': { target: '<url>', pathRewrite: {'^/api':''}, ws: true, //用于支持websocket changeOrigin: true //用于控制请求头中的host值 }, '/foo': { target: '<other_url>' } } } } \",\"可以配置多个代理，且可以灵活控制请求是否走代理。\",\"配置略微繁琐，请求资源时必须加前缀。\"]},\"496\":{\"h\":\"基础API与扩展\"},\"497\":{\"h\":\"ref\",\"t\":[\"1.作用：用于给节点打标识\",\"2.应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象\",\"3.读取方式：this.$refs.xxxxxx\",\"4.读取时机，组件或 DOM 元素成功渲染挂载后，一般是在 mounted 或挂载成功后的触发事件中\",\"<template> <div>Hello</div> </template> <script> export default { methods: { sayHello() { console.log(\\\"Hello\\\"); }, }, }; </script> \",\"<template> <div> <div ref=\\\"div\\\">Hello</div> <Hello ref=\\\"hello\\\" /> </div> </template> <script> import Hello from \\\"./Hello\\\"; export default { components: { Hello }, mounted() { console.log(this.$refs.div.innerText); // 可以调用组件内部的methods或data属性等 this.$refs.hello.sayHello(); }, }; </script> \"]},\"498\":{\"h\":\"props\",\"t\":[\"1.作用：用于父组件给子组件传递数据\",\"2.读取方式一: 只指定名称props: ['name', 'age', 'setName']\",\"3.读取方式二: 指定名称和类型\",\"props: { name: String, age: Number, setName: Function } \",\"4.读取方式三: 指定名称/类型/必要性/默认值\",\"props: { name: {type: String, required: true, default:xxx}, } \",\"注意：接收到的 props 是不能被自身修改的。\"]},\"499\":{\"h\":\"混入\",\"t\":[\"提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。\",\"局部混入：mixins: [ 'xxx' ]\",\"全局混入：Vue.mixin(xxx)\",\"// mixin.js export const mixin = { methods: { showName() { alert(this.name); }, }, }; \",\"<!-- Main.vue --> <template> <!-- 因为mixins已经混入了methods，此处可直接使用showName方法 --> <div @click=\\\"showName\\\">{{ name }}</div> </template> <script> import { mixin } from \\\"./mixin.js\\\"; export default { name: \\\"Main\\\", data: () => ({ name: \\\"mainName\\\", }), mixins: [mixin], }; </script> \"]},\"500\":{\"h\":\"插件\",\"t\":[\"1.Vue 插件是一个包含 install 方法的对象\",\"2.通过 install 方法给 Vue 或 Vue 实例添加方法, 定义全局指令等\",\"本质：包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据。\",\"定义插件：\",\"export default { install(Vue) { // 全局过滤器 Vue.filter('mySlice', function(value) { return value.slice(0, 4) }) } // 定义全局指令 Vue.directive('fbind', { // ... }) // 定义混入 Vue.mixin({ // ... }) // 给Vue原型上添加一个方法，vm和vc均可使用 Vue.prototype.hello = () => { alert('Hello') } } \",\"使用插件，Vue.use()\"]},\"501\":{\"h\":\"插槽\"},\"502\":{\"h\":\"作用\",\"t\":[\"让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信方式，适用于 父组件 ===> 子组件\"]},\"503\":{\"h\":\"分类\",\"t\":[\"默认插槽、具名插槽、作用域插槽。\"]},\"504\":{\"h\":\"使用方式\",\"t\":[\"1.默认插槽\",\"<!-- 父组件 --> <template> <Category> <div>html1结构1</div> </Category> </template> <!-- 子组件 --> <template> <div> <!-- 定义插槽 --> <slot>插槽默认内容...如果父组件中写入了默认插槽，此处内容会被覆写</slot> </div> </template> \",\"2.具名插槽\",\"<!-- 父组件 --> <template> <Category> <template slot=\\\"center\\\"> <div>html结构1</div> </template> <template v-slot:footer> <div>html结构2</div> </template> </Category> </template> <!-- 子组件 --> <template> <div> <!-- 定义插槽 --> <slot name=\\\"center\\\">插槽默认内容...</slot> <slot name=\\\"footer\\\">插槽默认内容...</slot> </div> </template> \",\"3.作用域插槽\",\"理解：数据在组件的自身，但根据数据生成的结构需要组件使用者来决定。（真正 data 数据在子组件中，但使用数据所遍历出来的结构由父组件决定）\",\"<!-- 父组件 --> <template> <Category> <template scope=\\\"scope\\\"> <ul> <li v-for=\\\"item in scope.games\\\" :key=\\\"item\\\">{{ item }}</li> </ul> </template> </Category> <Category> <template slot-scope=\\\"{ games }\\\"> <ul> <li v-for=\\\"item in games\\\" :key=\\\"item\\\">{{ item }}</li> </ul> </template> </Category> </template> <!-- 子组件 --> <template> <div> <!-- 定义插槽 --> <slot :games=\\\"games\\\"></slot> </div> </template> <script> export default { data() { return { games: [\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\"], }; }, }; </script> \"]},\"505\":{\"h\":\"nextTick\",\"t\":[\"nextTick 就是设置一个回调，用于异步执行。\",\"就是把你设置的回调放在 setTimeout 中执行，这样就算异步了，等待当时同步代码执行完毕再执行。\",\"this.$nextTick((_) => { this.$refs.saveTagInput.$refs.input.focus(); }); \",\"当页面上的元素被重新渲染之后，才会执行指定回调函数中的代码。\",\"实现原理\",\"存在 回调数组 里。每次调用 nextTick，便往数组里面 push 设置的回调\",\"只注册一个 setTimeout，时间为 0，用于遍历 回调数组，然后逐个执行子项\",\"同步代码执行完毕，setTimeout 自然会执行\",\"Vue 不止使用 setTimeout 实现 nextTick；会判断 promise 是否存在，选择任务类型。如果 promise 存在，就使用微任务。\",\"注意：Vue 在一个 tick 中多次更新数据页面只会更新一次\",\"即使在 Vue 中多么频繁地修改数据，最后 Vue 页面只会更新一次。\",\"例如： 数据 name 被 页面引用，name 会收集到 页面的 watcher； name 被修改时，会通知所有收集到的 watcher 进行更新（watcher.update）； 如果 name 一时间被修改三次时，按道理应该会通知三次 watcher 更新，那么页面会更新三次，但是最后只会更新一次。 这是因为： 当数据变化后，把 watcher.update 函数存放进 nextTick 的 回调数组中，并且会做过滤。 通过 watcher.id 来判断 回调数组 中是否已经存在这个 watcher 的更新函数不存在，才 push。 之后 nextTick 时 遍历回调数组，便会执行了更新。\",\"所以当三次修改数据的时候，会 push 回调数组 三个 watcher.update，但是只有第一次是 push 成功的，其他的会被过滤掉，因为已经存在了。 所以，不管你修改多少次数据，nextTick 的回调数组中只存在唯一一个 watcher.update，从而页面只会更新一次。\"]},\"506\":{\"h\":\"过渡与动画\"},\"507\":{\"h\":\"过渡\",\"t\":[\"作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名。\",\"Vue过渡动画\",\"元素进入样式：\",\"起点：v-enter\",\"过程：v-enter-active\",\"终点：v-enter-to\",\"元素离开样式：\",\"起点：v-leave\",\"过程：v-leave-active\",\"终点：v-leave-to\"]},\"508\":{\"h\":\"包裹\",\"t\":[\"使用<transition>包裹要过渡的元素，并配置name属性\",\"appear属性：给元素添加初始过渡效果\",\"<template> <transition name='hello' appear> <h1 v-show=\\\"isTrue\\\">test</h2> </transition> </template> <script> export default { data: () => ({ isTrue: true }) } </script> \",\"若有多个元素需要过渡，则需要<transition-group>，且每个元素都要指定key值\"]},\"509\":{\"h\":\"组件通信\",\"t\":[\"此处搬运了 12 种基于 vue 框架层面分析通讯方案，以其他方式实现的方案不记录在此\"]},\"510\":{\"h\":\"1.单向 props\",\"t\":[\"在父组件子组件添加自定义属性，挂载需要传递的数据，子组件用 props 来接受，接收方式也可以是数组，也可以是对象，子组件接收到数据之后，不能直接修改父组件的数据。会报错，所以当父组件重新渲染时，数据会被覆盖。如果子组件内要修改的话推荐使用 $emit\",\"<!-- Parent.vue 传送 --> <template> <child :msg=\\\"msg\\\"></child> </template> <!-- Child.vue 接收 --> <script> ​export default { // 写法一 用数组接收 props:['msg'], //写法二 用对象接收，可以限定接收的数据类型、设置默认值、验证等 props:{ msg:{ type:String, default:'这是默认数据' } }, mounted(){ console.log(this.msg) }, } </script> \"]},\"511\":{\"h\":\"2.双向 v-model\",\"t\":[\"和 .sync 类似，可以实现将父组件传给子组件的数据为双向绑定，子组件通过 $emit 修改父组件的数据\",\"<!-- 父组件组件 这个是 v-model:obj=\\\"value\\\" --> <template> <div class=\\\"\\\"> <HelloWorld v-model:obj=\\\"value\\\"></HelloWorld> {{ value }} </div> </template> <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return { value: \\\"我是Home里的数据 响应式的\\\", }; }, components: { HelloWorld }, }; </script> <!-- ​子组件 --> <template> <input :value=\\\"obj\\\" @input=\\\"handlerChange\\\" /> </template> <script> export default { props: [\\\"obj\\\"], // 可以修改事件名，默认为 input model: { event: \\\"updateValue\\\", }, methods: { handlerChange(e) { // 如果有上面的重命名就是这样 this.$emit(\\\"updateValue\\\", e.target.value); }, }, }; </script> \",\"第二种方式\",\"<!-- 最简单的 v-model实现 父组件 Home --> <template> <div class=\\\"\\\"> <HelloWorld v-model=\\\"value\\\"></HelloWorld> {{ value }} </div> </template> ​ <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return { value: \\\"我是Home里的数据 响应式的\\\", }; }, components: { HelloWorld }, }; </script> <!-- 子组件 HelloWorld --> <template> <input :value=\\\"value\\\" @input=\\\"handlerChange\\\" /> </template> <script> export default { props: [\\\"value\\\"], methods: { handlerChange(e) { // 一定要是 input 事件 this.$emit(\\\"input\\\", e.target.value); }, }, }; </script> \"]},\"512\":{\"h\":\"3.sync\",\"t\":[\"可以帮我们实现父组件向子组件传递的数据 的双向绑定，所以子组件接收到数据后可以直接修改，并且会同时修改父组件的数据\",\"<!-- 父组件 Home --> <template> <div class=\\\"\\\"> <HelloWorld :val.sync=\\\"val\\\"></HelloWorld> {{ val }} </div> </template> ​ <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return { val: \\\"我是Home里的数据 响应式的\\\", }; }, components: { HelloWorld }, }; </script> <!-- ​ 子组件 HelloWorld --> <template> <input class=\\\"i911-sync\\\" :value=\\\"val\\\" @input=\\\"handleInput\\\" /> </template> <script> export default { name: \\\"HelloWorld\\\", props: { val: { type: String, default: \\\"\\\", }, }, methods: { handleInput(event) { this.$emit(\\\"update:val\\\", event.target.value); }, }, }; </script> \"]},\"513\":{\"h\":\"4.ref\",\"t\":[\"ref 如果在普通的 DOM 元素上，引用指向的就是该 DOM 元素;\",\"如果在子组件上，引用的指向就是子组件实例，然后父组件就可以通过 ref 主动获取子组件的属性或者调用子组件的方法\",\"<!-- 父组件 --> <template> <div class=\\\"\\\"> <HelloWorld ref=\\\"child\\\"></HelloWorld> </div> </template> <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return {}; }, mounted() { const child = this.$refs.child; console.log(child.str); // 获取子组件的方法 child.fn(\\\"调用了子组件的方法\\\"); }, components: { HelloWorld }, }; </script> ​ <!-- 子组件 --> <template> <input type=\\\"text\\\" /> </template> <script> export default { data() { return { str: \\\"我是数据\\\", }; }, methods: { fn(e) { console.log(e); }, }, }; </script> \"]},\"514\":{\"h\":\"5.$emit / v-on\",\"t\":[\"在父组件中给子组件绑定自定义事件，然后调用需要的方法，然后在子组件中用 this.$emit 触发父组件的事件，第一个是事件名第二个是参数\",\"<!-- 父组件 --> <template> <div class=\\\"\\\"> <!-- v-on 简写 @ --> <HelloWorld @fn=\\\"fn\\\"></HelloWorld> </div> </template> <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return {}; }, mounted() {}, methods: { fn(e) { console.log(\\\"子传父\\\" + e); }, }, components: { HelloWorld }, }; </script> ​ <!-- 子组件 --> <template> <input type=\\\"text\\\" @blur=\\\"fn('我是子组件，可以传参数')\\\" /> </template> <script> export default { data() { return {}; }, methods: { // 失去焦点发送 fn(e) { this.$emit(\\\"fn\\\", e); }, }, }; </script> \"]},\"515\":{\"h\":\"6.$attrs / $listeners\",\"t\":[\"多层嵌套组件传递数据时，如果只是传递数据，而不做中间处理的话就可以用这个，比如父组件向孙子组件传递数据时\",\"$attrs：包含父作用域里除 class 和 style 除外的非 props 属性集合。通过 this.$attrs 获取父作用域中所有符合条件的属性集合，然后还要继续传给子组件内部的其他组件，就可以通过 v-bind=\\\"$attrs\\\"\",\"$listeners：包含父作用域里 .native 除外的监听事件集合。如果还要继续传给子组件内部的其他组件，就可以通过 v-on=\\\"$listeners\\\"\",\"<!-- 父组件 --> <template> <div class=\\\"\\\"> <HelloWorld :name=\\\"name\\\" val=\\\"你好s-z-h\\\"></HelloWorld> </div> </template> <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return { name: \\\"父组件数据\\\", }; }, components: { HelloWorld }, }; </script> <!-- 子组件 --> <template> <div> <input type=\\\"text\\\" /> <!-- 孙组件 --> <SunChild v-bind=\\\"$attrs\\\"></SunChild> </div> </template> <script> import SunChild from \\\"./sun-child.vue\\\"; export default { data() { return {}; }, mounted() { console.log(this.$attrs); // 可以拿到父组件传来的数据 }, components: { SunChild }, }; </script> <!-- 孙组件 --> <script> export default { mounted() { console.log(this.$attrs); }, }; </script> \",\"$listeners 使用\",\"<!-- parent组件 --> <template> <div> <Son @eventOne=\\\"eventHandler\\\" @click.native=\\\"clickHandler\\\" /> </div> </template> <script> export default { methods: { eventHandler() { console.log(\\\"触发了Parent中的eventHandler s-z-h\\\"); }, clickHandler() { console.log(\\\"触发了Parent中的clickHandler\\\"); }, }, }; </script> ​ <!-- Son组件 --> <template> <div> <!-- 此时Son组件把从父组件传来的监听器，在传给孙组件 --> <GrandSon v-on=\\\"$listeners\\\" /> </div> </template> <script> export default { mounted() { //父组件监听了两个事件，一个eventOne， 一个click，由于click被native修饰了，故$listeners 只有eventOne事件 console.log(this.$listeners); //{eventOne: fn} this.$emit(\\\"eventOne\\\"); //可以触发Parent组件中的eventHandler函数 }, }; </script> ​ <!-- GrandSon组件 --> <template> <div>这是孙组件</div> </template> <script> export default { mounted() { //这样孙组件通过emit触发Parent组件中的监听函数 让后代组件触发祖先组件 console.log(this.$listeners); // {eventOne: fn} this.$emit(\\\"eventOne\\\"); //可以触发Parent组件中的eventHandler函数 }, }; </script> \"]},\"516\":{\"h\":\"7.$children / $parent\",\"t\":[\"$children：获取到一个包含所有子组件(不包含孙子组件)的 VueComponent 对象数组，可以直接拿到子组件中所有数据和方法等\",\"$parent：获取到一个父节点的 VueComponent 对象，同样包含父节点中所有数据和方法等\",\"<!-- 父组件 --> <template> <div class=\\\"\\\"> <HelloWorld></HelloWorld> </div> </template> <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return { name: \\\"父组件数据\\\", }; }, mounted() { this.$children[0].fn(); // 调用第一个子组件的方法 console.log(this.$children[0].name); // 获取第一个子组件中的属性 }, methods: { fn() { console.log(\\\"父组件里的方法 s-z-h\\\"); }, }, components: { HelloWorld }, }; </script> <!-- 子组件 --> <template> <div> <input type=\\\"text\\\" /> </div> </template> <script> export default { data() { return { name: \\\"我是子里的数据\\\", }; }, methods: { fn() { console.log(\\\"我是子组件方法\\\"); }, }, mounted() { this.$parent.fn(); // 调用父组件的方法 console.log(this.$parent.name); // 获取父组件中的属性 }, }; </script> \"]},\"517\":{\"h\":\"8.provide / inject 祖孙通信\",\"t\":[\"provide / inject 为依赖注入，说是不推荐直接用于应用程序代码中，但是在一些插件或组件库里却是被常用，所以我觉得用也没啥，还挺好用的\",\"provide：可以让我们指定想要提供给后代组件的数据或方法\",\"inject：在任何后代组件中接收想要添加在这个组件上的数据或方法，不管组件嵌套多深都可以直接拿来用\",\"要注意的是 provide 和 inject 传递的数据不是响应式的，也就是说用 inject 接收来数据后，provide 里的数据改变了，后代组件中的数据不会改变，除非传入的就是一个可监听的对象\",\"// 父组件 Home <template> <div class=\\\"\\\"> <HelloWorld></HelloWorld> </div> </template> <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return { val: \\\"父组件数据\\\", }; }, provide() { return { name: this.val, // data 的数据 someMethod: this.someMethod, // methods 中的方法 }; }, methods: { someMethod() { console.log(\\\"这是注入的方法\\\"); }, }, components: { HelloWorld }, }; </script> <!-- 子组件 HelloWorld --> <template> <div> <input type=\\\"text\\\" /> <SunChild></SunChild> </div> </template> <script> import SunChild from \\\"./sun-child.vue\\\"; export default { data() { return {}; }, inject: [\\\"name\\\", \\\"someMethod\\\"], mounted() { console.log(this.name); this.someMethod(); }, components: { SunChild }, }; </script> <!-- 孙组件SunChild 也可以拿数据 --> <script> export default { data() { return {}; }, mounted() {}, inject: [\\\"name\\\", \\\"someMethod\\\"], mounted() { console.log(this.name); this.someMethod(); }, }; </script> \"]},\"518\":{\"h\":\"9.EventBus 全局事件总线\",\"t\":[\"EventBus 是中央事件总线，不管是父子组件，兄弟组件，跨层级组件等都可以完成通信\",\"// 找到main.js 加入一下代码 公共的$bus // 写法一 Vue.prototype.$bus = new Vue(); // 写法二 new Vue({ beforeCreate() { // 全局事件总线 Vue.prototype.$bus = this; }, render: (h) => h(App), }).$mount(\\\"#app\\\"); \",\"<!-- 父组件 也可以兄弟a --> <template> <div class=\\\"\\\"> <HelloWorld></HelloWorld> </div> </template> <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return {}; }, mounted() { this.$bus.$on(\\\"fn\\\", (value) => { console.log(value); }); }, components: { HelloWorld }, }; </script> <!-- 子组件 也可以兄弟b --> <template> <div> <input type=\\\"text\\\" @blur=\\\"fn\\\" /> </div> </template> <script> export default { data() { return {}; }, methods: { fn() { this.$bus.$emit(\\\"fn\\\", \\\"可以父子通信，也可以兄弟通信,s-z-h\\\"); }, }, }; </script> \"]},\"519\":{\"h\":\"10.vuex 通信\",\"t\":[\"可以定义共享的数据源，在哪里都可以访问 安装配置 使用即可。详细的 vuex 配置见[vuex]\",\"// store.js // vuex 里定义共享的数据，在哪个组件都可以访问 import Vue from \\\"vue\\\"; import Vuex from \\\"vuex\\\"; Vue.use(Vuex); import vuexPersist from \\\"vuex-persist\\\"; export default new Vuex.Store({ state: { data: \\\"vuex 的数据\\\", a: 1, b: 2, }, mutations: {}, actions: {}, modules: {}, getters: { num(state) { return state.a + state.b; }, }, }); \",\"<template> <div class=\\\"\\\"> {{ data }} {{ num }} </div> </template> <script> import { mapState, mapGetters } from \\\"vuex\\\"; export default { data() { return {}; }, // 辅助函数 computed: { ...mapState([\\\"data\\\"]), ...mapGetters([\\\"num\\\"]) }, // 第二种 希望你会举一反三 // computed: { // data() { // return this.$store.state.data; // }, // }, components: {}, }; </script> \"]},\"520\":{\"h\":\"11.具名插槽+作用域插槽\",\"t\":[\"具名插槽是在父组件中通过 slot 属性，给插槽命名，在子组件中通过 slot 标签，根据定义好的名字填充到对应的位置。\",\"作用域插槽是带数据的插槽，子组件提供给父组件的参数，父组件根据子组件传过来的插槽数据来进行不同的展现和填充内容。在标签中通过 v-slot=\\\"value\\\" 来接受数据。\",\"<!-- 父组件 --> <template> <div class=\\\"\\\"> <HelloWorld> <template v-slot:a=\\\"value\\\"> <!-- 这个是具名插槽 --> <h2>{{ name }}</h2> <!-- value 是子组件传过来的数据 --> <!-- 这个是作用域插槽 --> <h2>{{ value.value }}</h2> </template> </HelloWorld> </div> </template> <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return { name: \\\"具名插槽 slot插槽传数据 父传子\\\", }; }, components: { HelloWorld }, }; </script> <!-- 子组件 --> <template> <div> <slot name=\\\"a\\\" :value=\\\"value\\\"></slot> </div> </template> <script> export default { data() { return { value: \\\"我是子组件数据 作用域插槽子传父 s-z-h\\\", }; }, methods: {}, }; </script> \"]},\"521\":{\"h\":\"12.$root\",\"t\":[\"$root 可以拿到 App.vue 里的数据和方法\",\"<!-- HelloWorld 子组件添加数据 --> <template> <div></div> </template> <script> export default { data() { return {}; }, mounted() { // 写入根组件的数据 this.$root.foo = 2; }, methods: {}, }; </script> <!-- Home 父组件访问数据 --> <template> <div class=\\\"\\\"> <HelloWorld></HelloWorld> </div> </template> <script> import HelloWorld from \\\"../components/HelloWorld.vue\\\"; export default { data() { return {}; }, mounted() { // 获取根组件的数据 console.log(this.$root.foo); }, components: { HelloWorld }, }; </script> \"]},\"522\":{\"h\":\"Vue2\",\"t\":[\"简介\",\"数据绑定\",\"事件处理\",\"指令\",\"生命周期\",\"组件化编程\",\"脚手架\",\"基础 API 与扩展\",\"组件通信\",\"vuex\",\"vue-router\"]},\"523\":{\"h\":\"简介\",\"t\":[\"该 Vue3 文档主要记录 Vue3 相比 Vue2 新增的功能和特性，其他基础属性与指令与 Vue2 相同的不再赘述\"]},\"524\":{\"h\":\"相比 Vue2 的提升\",\"t\":[\"1.性能的提升\",\"打包大小减少 41\",\"初次渲染快 55%, 更新渲染快 133%\",\"内存减少 54%\",\"2.源码的升级\",\"使用 Proxy 代替 defineProperty 实现响应式\",\"双向数据绑定从 defineProperty for in 循环变量改成 proxy。defineProperty 是改变原对象属性标签；而 proxy 未改变原对象，而是产生新的代理对象，js 引擎更喜欢稳定的对象\",\"重写虚拟 DOM 的实现和 Tree-Shaking\",\"区分动静态 dom，只对比动态数据 dom，用 block 标记动态标签内部的静态标签\",\"使用最长递增子序列算法，找到所有不需要移动的元素\",\"compile 编译优化，把大量计算放在 node 层，最后浏览器只需执行最少的代码\",\"底层源码设计层面的改变决定了 vue3 比 vue2 更快\",\"3.拥抱 TypeScript\",\"Vue3 可以更好的支持 TypeScript，其底层就是用 ts 编写的\"]},\"525\":{\"h\":\"新特性\",\"t\":[\"Composition API（组合 API）\",\"setup 配置\",\"ref 与 reactive\",\"watch 与 watchEffect\",\"provide 与 inject\",\"......\",\"新的内置组件\",\"Fragment\",\"Teleport\",\"Suspense\",\"其他改变\",\"组件文件中 template 模板内无需用根节点标签包着组件元素\",\"新的生命周期钩子\",\"data 选项应始终被声明为一个函数\",\"移除 keyCode 支持作为 v-on 的修饰符\",\"......\"]},\"526\":{\"h\":\"创建工程\"},\"527\":{\"h\":\"使用 vue-cli 创建\",\"t\":[\"官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\",\"## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上 vue --version ## 安装或者升级你的@vue/cli npm install -g @vue/cli ## 创建 vue create vue_test ## 启动 cd vue_test npm run serve \"]},\"528\":{\"h\":\"使用 vite 创建\",\"t\":[\"官方文档：https://v3.cn.vuejs.org/guide/installation.html#vite\",\"vite 官网：https://vitejs.cn\"]},\"529\":{\"h\":\"初始化步骤\",\"t\":[\"## 创建工程 npm init vite-app <project-name> ## 进入工程目录 cd <project-name> ## 安装依赖 npm install ## 运行 npm run dev \"]},\"530\":{\"h\":\"优秀的冷启动\",\"t\":[\"当冷启动开发服务器时，基于打包器的方式启动必须优先抓取并构建你的整个应用，然后才能提供服务。\",\"Vite 以 原生 ESM 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。\",\"以 webpack 为基础的项目bundle启动方式\",\"webpack-bundle\",\"以 vite 为基础的项目esm启动方式\",\"vite-esm\"]},\"531\":{\"h\":\"与 webpack 比较\",\"t\":[\"首先我们知道，vite 主要还是用来在开发跟发布过程中的一个替代 webpack 的解决方案\",\"虽然生产环境依然还是通过rollup打包的，但是在开发环境中，是使用的vite自身的模式，来改正了webpack在打包依赖的过程中时间太长的问题\",\"从这里可以看出\",\"1.vite是一个基于开发环境下的构建工具\",\"2.vite其实并不能完全替代webpack，更偏向于优化版的webpack-dev-server\",\"更多Vite的分析详见Vite工具\"]},\"532\":{\"h\":\"组合式API\"},\"533\":{\"h\":\"Composition API（组合式 API）\"},\"534\":{\"h\":\"setup\",\"t\":[\"Vue3.0 中一个新的配置项，值为一个函数。\",\"setup 是所有 Composition API（组合 API）“表演的舞台”\",\"组件中所用到的：数据、方法等等，均要配置在 setup 中。\",\"setup 函数的两种返回值：\",\"若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注）\",\"若返回一个渲染函数：则可以自定义渲染内容。（了解）\",\"<script> export default { setup() { const name = \\\"1\\\"; const age = 18; const sayHello = () => { console.log(\\\"Hello\\\"); }; return { name, age, sayHello, }; // 返回一个函数（渲染函数） // return () => h('h1', 'Hello你好') }, }; </script> \",\"注意点：\",\"尽量不要与 Vue2.x 配置混用\",\"Vue2.x 配置（data、methods、computed）可以访问到 setup 中的属性或方法，但在 setup 中不能访问到 Vue2.x 的配置。如果两者配置重名，以 setup 优先。\",\"setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）\"]},\"535\":{\"h\":\"setup 执行时机\",\"t\":[\"在 beforeCreate 之前执行一次，this 是 undefined\",\"setup 的参数：\",\"props：值为对象，包含组件外部传递进来，且组件内部声明接收了的属性\",\"context：上下文对象，包含属性 \",\"attrs：值为对象，包含组件外部传递过来，但没有在 props 配置中声明的属性，相当于this.$attrs\",\"slots：收到的插槽内容，相当于this.$slots\",\"emit：分发自定义事件的函数，相当于this.$emit\"]},\"536\":{\"h\":\"ref 函数\",\"t\":[\"作用：定义一个响应式数据\",\"语法：const xx = ref(initValue)\",\"创建一个包含响应式数据的引用对象（reference 对象，简称 ref 对象）\",\"在 js 中操作数据：xx.value = xxxxx\",\"模板中读取数据：不需要.value，直接写入插值语句<div>{{ xx }}</div>\",\"接收的数据可以是基本类型，也可以是对象类型（最好是基本类型）\",\"基本类型的数据：响应式依然是靠Object.defineProperty()的 get 与 set 完成的\",\"对象类型的数据：内部借助 Vue3 的 reactive 函数\"]},\"537\":{\"h\":\"reactive 函数\",\"t\":[\"作用：定义一个对象类型的响应式数据（基本类型只使用 ref 函数）\",\"语法：const obj = reactive({ name: '123' })\",\"接收一个对象（或数组》，返回一个代理对象（Proxy 的实例对象，简称 proxy 对象）\",\"reactive 定义的响应式数据是深层次的\",\"内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作\"]},\"538\":{\"h\":\"计算与监视属性\"},\"539\":{\"h\":\"computed\",\"t\":[\"与 Vue2.x 中 computed 配置功能一致\",\"import {computed} from 'vue' export default { setup(){ ... //计算属性——简写 let fullName = computed(()=>{ return person.firstName + '-' + person.lastName }) //计算属性——完整 let fullName = computed({ get(){ return person.firstName + '-' + person.lastName }, set(value){ const nameArr = value.split('-') person.firstName = nameArr[0] person.lastName = nameArr[1] } }) } } \"]},\"540\":{\"h\":\"watch\",\"t\":[\"与 Vue2.x 中 watch 配置功能一致\",\"//情况一：监视ref定义的响应式数据 watch( sum, (newValue, oldValue) => { console.log(\\\"sum变化了\\\", newValue, oldValue); }, { immediate: true } ); //情况二：监视多个ref定义的响应式数据 watch([sum, msg], (newValue, oldValue) => { console.log(\\\"sum或msg变化了\\\", newValue, oldValue); }); /* 情况三：监视reactive定义的响应式数据 若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！ 若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 */ watch( person, (newValue, oldValue) => { console.log(\\\"person变化了\\\", newValue, oldValue); }, { immediate: true, deep: false } ); //此处的deep配置不再奏效 //情况四：监视reactive定义的响应式数据中的某个属性 watch( () => person.job, (newValue, oldValue) => { console.log(\\\"person的job变化了\\\", newValue, oldValue); }, { immediate: true, deep: true } ); //情况五：监视reactive定义的响应式数据中的某些属性 watch( [() => person.job, () => person.name], (newValue, oldValue) => { console.log(\\\"person的job变化了\\\", newValue, oldValue); }, { immediate: true, deep: true } ); //特殊情况 watch( () => person.job, (newValue, oldValue) => { console.log(\\\"person的job变化了\\\", newValue, oldValue); }, { deep: true } ); //此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效 \"]},\"541\":{\"h\":\"watchEffect\",\"t\":[\"watch 既要指明监视的属性，也要指明监视的回调。\",\"watchEffect 不用指明监视哪个属性，监视的回调中用到哪个属性，就监视哪个属性。\",\"watchEffect 有点像 computed：\",\"但 computed 注重计算出来的值（回调函数的返回值），所以必须要谢返回值\",\"而 watchEffect 更注重过程（回调函数的函数体），所以不用写返回值\",\"//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。 watchEffect(() => { const x1 = sum.value; const x2 = person.age; console.log(\\\"watchEffect配置的回调执行了\\\"); }); \"]},\"542\":{\"h\":\"生命周期\",\"t\":[\"以下是 vue3 的生命周期图示\",\"Vue3生命周期\",\"Vue3 中可以继续使用 Vue2 的生命周期钩子，但有两个更名：\",\"beforeDestroy改名为 beforeUnmount\",\"destroyed改名为 unmounted\",\"Vue3 也提供了 Composition API 形式的生命周期钩子，与 Vue2 中钩子对应关系如下\",\"beforeCreate===>setup()\",\"created=======>setup()\",\"beforeMount ===>onBeforeMount\",\"mounted=======>onMounted\",\"beforeUpdate===>onBeforeUpdate\",\"updated =======>onUpdated\",\"beforeUnmount ==>onBeforeUnmount\",\"unmounted =====>onUnmounted\"]},\"543\":{\"h\":\"自定义 hook 函数\",\"t\":[\"什么是 hook？—— 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装。\",\"类似于 vue2.x 中的 mixin。\",\"自定义 hook 的优势: 复用代码, 让 setup 中的逻辑更清楚易懂。\",\"以下是一个暴露响应式宽高数据和获取窗口宽高方法的 hooks 函数\",\"import { reactive } from \\\"vue\\\"; export default function () { // 导出一个默认方法 // 创建一个对象，保存宽度和高度值 const screen = reactive({ width: 0, height: 0, }); // 创建一个方法，获取可视化界面的宽度和高度值 const getWH = () => { screen.width = document.documentElement.clientWidth; screen.height = document.documentElement.clientHeight; }; return { screen, getWH }; // 方法返回宽高值 } \"]},\"544\":{\"h\":\"组合式 API 的优势\"},\"545\":{\"h\":\"Options API 存在的问题\",\"t\":[\"使用传统 OptionsAPI 中，新增或者修改一个需求，就需要分别在 data，methods，computed 里修改。\",\"OptionsAPI\"]},\"546\":{\"h\":\"Composition API 的优势\",\"t\":[\"我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。\",\"CompositionAPI\"]},\"547\":{\"h\":\"响应式原理\"},\"548\":{\"h\":\"Vue2 响应式\",\"t\":[\"实现原理：\",\"对象类型：通过Object.defineProperty()对属性的读取、修改进行拦截（数据劫持）\",\"数组类型：通过重写更新数组的一系列方法实现拦截（对数组的变更方法进行了包裹）\",\"存在问题：新增属性、删除属性，界面不更新；直接通过下标修改数组，界面不更新\",\"Object.defineProperty(data, \\\"count\\\", { get() {}, set() {}, }); \"]},\"549\":{\"h\":\"Vue3 响应式\",\"t\":[\"实现原理：\",\"通过 Proxy 代理：拦截对象中任意属性的变化，包括：属性值的读写、属性的添加、属性的删除等。\",\"通过 Reflect 反射：对源对象的属性进行操作。\",\"MDN 文档中描述的 Proxy 和 Reflect：\",\"Proxy：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\",\"Reflect：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\",\"new Proxy(data, { // 拦截读取属性值 get(target, prop) { return Reflect.get(target, prop); }, // 拦截设置属性值或添加新属性 set(target, prop, value) { return Reflect.set(target, prop, value); }, // 拦截删除属性 deleteProperty(target, prop) { return Reflect.deleteProperty(target, prop); }, }); proxy.name = \\\"tom\\\"; \"]},\"550\":{\"h\":\"ref 与 reactive 对比\",\"t\":[\"从定义数据角度对比：\",\"ref 用来定义基本类型数据\",\"reactive 定义复杂类型数据\",\"注：ref 也可定义复杂类型，它内部实际上自动通过 reactive 转为代理对象\",\"从原理角度对比：\",\"ref 通过Object.defineProperty()实现响应式（数据劫持）\",\"reactive 通过使用 Proxy 实现响应式（数据代理），并通过 Reflect 操作原对象内部数据\",\"从使用角度对比：\",\"ref 定义的数据：操作数据需要.value去读写数据，模板读取时直接读取，不需要.value\",\"reactive 定义的数据：操作数据与模板读取数据均不需要.value\"]},\"551\":{\"h\":\"其他API\"},\"552\":{\"h\":\"响应式数据转化 API\"},\"553\":{\"h\":\"toRef\",\"t\":[\"作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。\",\"语法：const name = toRef(person,'name')\",\"应用: 要将响应式对象中的某个属性单独提供给外部使用时。\",\"toRefs 与 toRef 功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)\"]},\"554\":{\"h\":\"shallowReactive 与 shallowRef\",\"t\":[\"shallowReactive：只处理对象最外层属性的响应式（浅响应式）。\",\"shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。\",\"什么时候使用? \",\"如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shallowReactive。\",\"如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===> shallowRef。\"]},\"555\":{\"h\":\"readonly 与 shallowReadonly\",\"t\":[\"readonly: 让一个响应式数据变为只读的（深只读）。\",\"shallowReadonly：让一个响应式数据变为只读的（浅只读）。\",\"应用场景: 不希望数据被修改时。\"]},\"556\":{\"h\":\"toRaw 与 markRaw\",\"t\":[\"toRaw： \",\"作用：将一个由reactive生成的响应式对象转为普通对象。\",\"使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\",\"markRaw： \",\"作用：标记一个对象，使其永远不会再成为响应式对象。\",\"应用场景: \",\"有些值不应被设置为响应式的，例如复杂的第三方类库等。\",\"当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。\"]},\"557\":{\"h\":\"customRef\",\"t\":[\"作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\",\"示例：创建一个实现了防抖效果的响应式数据\",\"<template> <input type=\\\"text\\\" v-model=\\\"keyword\\\" /> <h3>{{ keyword }}</h3> </template> <script> import { ref, customRef } from \\\"vue\\\"; export default { name: \\\"Demo\\\", setup() { // let keyword = ref('hello') //使用Vue准备好的内置ref //自定义一个myRef function myRef(value, delay) { let timer; //通过customRef去实现自定义 return customRef((track, trigger) => { return { get() { track(); //告诉Vue这个value值是需要被“追踪”的 return value; }, set(newValue) { clearTimeout(timer); timer = setTimeout(() => { value = newValue; trigger(); //告诉Vue去更新界面 }, delay); }, }; }); } let keyword = myRef(\\\"hello\\\", 500); //使用程序员自定义的ref return { keyword, }; }, }; </script> \"]},\"558\":{\"h\":\"响应式数据判断\",\"t\":[\"isRef: 检查一个值是否为一个 ref 对象\",\"isReactive: 检查一个对象是否是由 reactive 创建的响应式代理\",\"isReadonly: 检查一个对象是否是由 readonly 创建的只读代理\",\"isProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理\",\"以上返回值均为 boolean\"]},\"559\":{\"h\":\"Other API\"},\"560\":{\"h\":\"provide 与 inject\",\"t\":[\"provide 和 inject 提供依赖注入，功能类似 2.x 的 provide/inject\",\"示例：实现跨层级祖孙组件通信\",\"<template> <h1>父组件</h1> <p>当前颜色: {{ color }}</p> <button @click=\\\"color = 'red'\\\">红</button> <button @click=\\\"color = 'yellow'\\\">黄</button> <button @click=\\\"color = 'blue'\\\">蓝</button> <hr /> <Son /> </template> <script lang=\\\"ts\\\"> import { provide, ref } from \\\"vue\\\"; /* - provide` 和 `inject` 提供依赖注入，功能类似 2.x 的 `provide/inject - 实现跨层级组件(祖孙)间通信 */ import Son from \\\"./Son.vue\\\"; export default { name: \\\"ProvideInject\\\", components: { Son, }, setup() { const color = ref(\\\"red\\\"); provide(\\\"color\\\", color); return { color, }; }, }; </script> \",\"<template> <div> <h2>子组件</h2> <hr /> <GrandSon /> </div> </template> <script lang=\\\"ts\\\"> import GrandSon from \\\"./GrandSon.vue\\\"; export default { components: { GrandSon, }, }; </script> \",\"<template> <h3 :style=\\\"{ color }\\\">孙子组件: {{ color }}</h3> </template> <script lang=\\\"ts\\\"> import { inject } from \\\"vue\\\"; export default { setup() { const color = inject(\\\"color\\\"); return { color, }; }, }; </script> \"]},\"561\":{\"h\":\"全局 API 的转移\",\"t\":[\"Vue2 有许多全局 API 和配置,例如：注册全局组件、注册全局指令等。\",\"//注册全局组件 Vue.component('MyButton', { data: () => ({ count: 0 }), template: '<button @click=\\\"count++\\\">Clicked {{ count }} times.</button>' }) //注册全局指令 Vue.directive('focus', { inserted: el => el.focus() } \",\"Vue3 对这些 API 做出了调整：\",\"将全局的 API，即：Vue.xxx调整到应用实例（app）上\",\"2.x 全局 API（Vue）\",\"3.x 实例 API (app)\",\"Vue.config.xxxx\",\"app.config.xxxx\",\"Vue.config.productionTip\",\"移除\",\"Vue.component\",\"app.component\",\"Vue.directive\",\"app.directive\",\"Vue.mixin\",\"app.mixin\",\"Vue.use\",\"app.use\",\"Vue.prototype\",\"app.config.globalProperties\"]},\"562\":{\"h\":\"过渡类名更改\",\"t\":[\"Vue2 写法\",\".v-enter, .v-leave-to { opacity: 0; } .v-leave, .v-enter-to { opacity: 1; } \",\"Vue3 写法\",\".v-enter-from, .v-leave-to { opacity: 0; } .v-leave-from, .v-enter-to { opacity: 1; } \"]},\"563\":{\"h\":\"事件处理\",\"t\":[\"移除 keyCode 作为 v-on 的修饰符，同时也不再支持 config.keyCodes\",\"移除 v-on.native 修饰符\",\"emits 声明\",\"<!-- 父组件 --> <my-component @close=\\\"handleComponentEvent\\\" @click=\\\"handleNativeClickEvent\\\" /> \",\"<!-- 子组件中需要声明emits事件之后才能在setup中使用 --> <script> export default { emits: [\\\"close\\\"], }; </script> \"]},\"564\":{\"h\":\"移除过滤器\",\"t\":[\"过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。\"]},\"565\":{\"h\":\"其他组件\"},\"566\":{\"h\":\"Fragment\",\"t\":[\"在 Vue2 中: 组件必须有一个根标签\",\"在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中\",\"好处: 减少标签层级, 减小内存占用\"]},\"567\":{\"h\":\"Teleport\",\"t\":[\"Teleport 是一种能够将我们的组件 html 结构移动到指定位置的技术。\",\"<teleport to=\\\"移动位置\\\"> <div v-if=\\\"isShow\\\" class=\\\"mask\\\"> <div class=\\\"dialog\\\"> <h3>我是一个弹窗</h3> <button @click=\\\"isShow = false\\\">关闭弹窗</button> </div> </div> </teleport> \"]},\"568\":{\"h\":\"Suspense\",\"t\":[\"等待异步组件时渲染一些额外内容，让应用有更好的用户体验\",\"引入异步组件\",\"import { defineAsyncComponent } from \\\"vue\\\"; const Child = defineAsyncComponent(() => import(\\\"./components/Child.vue\\\")); \",\"使用 Suspense 包裹组件，并配置好 default 与 fallback\",\"<template> <div class=\\\"app\\\"> <h3>我是App组件</h3> <Suspense> <template v-slot:default> <Child /> </template> <template v-slot:fallback> <h3>加载中.....</h3> </template> </Suspense> </div> </template> \"]},\"569\":{\"h\":\"Vue3+TS+Vite\"},\"570\":{\"h\":\"创建项目\",\"t\":[\"# npm 6.x npm create vite@latest my-vue-app --template vue # npm 7+, extra double-dash is needed: npm create vite@latest my-vue-app -- --template vue cd my-vue-app npm install npm run dev \"]},\"571\":{\"h\":\"vite 配置\",\"t\":[\"功能一致的配置大多跟 vue-cli 配置大同小异，不过多赘述\"]},\"572\":{\"h\":\"resolve\",\"t\":[\"resolve.alias：当使用文件系统路径的别名时，请始终使用绝对路径。相对路径的别名值会原封不动地被使用，因此无法被正常解析。\",\"/* vite.config.ts */ resolve: { //文件系统路径的别名, 绝对路径 alias: { \\\"@\\\": path.resolve(__dirname, \\\"src\\\"), } } \"]},\"573\":{\"h\":\"sass 配置\",\"t\":[\"安装 sass 依赖和配置 vite.config.ts 预定义全局变量\",\"npm i sass -D \",\"/* vite.config.ts */ css: { preprocessorOptions: { scss: { additionalData: '@import \\\"./src/assets/scss/var.scss\\\";'; } } } \"]},\"574\":{\"h\":\"开启服务\",\"t\":[\"开启 http 服务\",\"/* vite.config.ts */ server:{ host: 'dev.front.cn', port: 3000 } \",\"开启 https 服务\",\"/* vite.config.ts */ let httpsConfig = { key: fs.readFileSync(\\\"C:/Users/ca/wps.cn/_wildcard.wps.cn+3-key.pem\\\"), cert: fs.readFileSync(\\\"C:/Users/ca/wps.cn/_wildcard.wps.cn+3.pem\\\") }; server:{ https: httpsConfig, host: 'dev.front.cn', port: 443, open: true } \"]},\"575\":{\"h\":\"预构建依赖优化\",\"t\":[\"默认情况下，Vite 会抓取你的 index.html 来检测需要预构建的依赖项。如果指定了 build.rollupOptions.input，Vite 将转而去抓取这些入口点。\"]},\"576\":{\"h\":\"optimizeDeps.include\",\"t\":[\"默认情况下，不在 node_modules 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包。\",\"/* vite.config.ts */ optimizeDeps: { include: ['axios'], }, \"]},\"577\":{\"h\":\"optimizeDeps.exclude\",\"t\":[\"在预构建中强制排除的依赖项。\"]},\"578\":{\"h\":\"eslint 配置\",\"t\":[\"plugin:vue/vue3-recommended，plugin:vue/vue3-essential：识别 vue 的变量 如'Page'，选其一即可\",\"@vue/typescript/recommended：识别 ts 关键字，如 interface 等，该模块在 @vue/eslint-config-typescript 中\",\"prettier, @vue/prettier：格式化代码\",\"eslint-plugin-vue：允许 eslint 对 vue 文件进行校验\",\"安装开发依赖\",\"npm i -D eslint prettier @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue \",\".eslintrc.cjs 如下\",\"文件格式要改为 cjs，因为里面使用了 module.exports 的 CJS 语法，否则 eslint 无法识别项目中的 rc 文件\",\"若要文件格式保留 js，则需要将 package.json 中的\\\"type\\\": \\\"module\\\"删除\",\"module.exports = { root: true, env: { node: true, }, extends: [ \\\"plugin:vue/vue3-essential\\\", \\\"@vue/typescript/recommended\\\", \\\"prettier\\\", \\\"@vue/prettier\\\", ], plugins: [\\\"@typescript-eslint\\\", \\\"prettier\\\"], parserOptions: { ecmaVersion: 2017, }, rules: { \\\"prettier/prettier\\\": \\\"error\\\", \\\"@typescript-eslint/no-unused-vars\\\": [\\\"error\\\"], }, globals: { defineProps: \\\"readonly\\\", }, }; \",\"注意事项：\",\"eslint:recommended 会误判一些 vue 的 ts 全局变量，如 withDefaults，defineEmits\",\"eslint 的 rules 配置 no-unused-vars 会误判一些变量，如 e，visible，所以需要 ts 变量配置 @typescript-eslint/no-unused-vars\"]},\"579\":{\"h\":\"TypeScript\"},\"580\":{\"h\":\"类型/接口/泛型\",\"t\":[\"类型：类型（type）不是定义一个新类型，而是一个类型别名，使类型更具体化\",\"接口：接口（interface）则是描述一个对象的形状，对值所具有的结构进行类型检查。接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。\",\"泛型：支持多种数据结构，有函数泛型，类泛型，接口泛型等。\",\"可以使用接口就尽量使用接口，因为接口更灵活，更容易处理\",\"很多时候 interface 和 type 是相同的，但有一个明显区别在于 interface 可以重复定义，类型注解会累加，而 type 重复定义会报错\"]},\"581\":{\"h\":\"类型声明\",\"t\":[\"类型声明（Type Declaration） 或者类型定义（Type Definition） 文件是一个以.d.ts 作为文件后缀名的 TypeScript 文件。文件中只包含与类型相关的代码，不包含逻辑代码，它们的作用旨在为开发者提供类型信息，所以它们只在开发阶段起作用。\",\"typescript 编译后会将类型信息移除，类型信息仅在开发阶段起作用。\",\"此处以全局类型/变量声明为例创建示例文件\",\"先在项目 src 目录中新建 global.d.ts 文件\"]},\"582\":{\"h\":\"全局类型声明\",\"t\":[\"项目的根目录有 tsconfig.json 可以配置 TypeScript，include 属性包含了需要校验 ts 的文件。ts 默认会将 xx.d.ts 类型文件中的类型注册成全局的，下面举个栗子：\",\"// global.d.ts type T1 = number; \",\"// 组件内 <script lang=\\\"ts\\\"> let num1: T1 = 1; </script> \"]},\"583\":{\"h\":\"全局变量声明\",\"t\":[\"使用 window\",\"// global.d.ts // 若想不带window使用userId，但需重复声明 declare let userId: string; interface Window { userId: string; } \",\"注：不声明且不带 window 使用开发模式不会报错，但打包时会报错\",\"// 组件内 window.userId = \\\"1\\\"; console.log(userId); \",\"使用 global 配合 window 或 var，需加 export，否则会打包报错\",\"// global.d.ts export {}; declare global { interface Window { // 使用foo全局变量时得带window，否则打包会报错 foo: string; } var age: number; } \",\"// 组件内 globalThis.age = 18; window.foo = \\\"1\\\"; console.log(age, window.foo); \",\"注：加上 export 后其他声明会失效，其他声明可另起 *.d.ts 文件定义\",\"使用 var\",\"// global.d.ts declare var age: number; \",\"// 组件内 globalThis.age = 18; console.log(age); \",\"每种方式各有利弊，自行选择\"]},\"584\":{\"h\":\"语法糖\",\"t\":[\"一个组件选项，在组件被创建之前，props 被解析之后执行。它是组合式 API 的入口。<script setup> 是在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖。相比于普通的 <script> 语法，它具有更多优势：\",\"更少的样板内容，更简洁的代码。\",\"能够使用纯 Typescript 声明 props 和抛出事件。\",\"更好的运行时性能 (其模板会被编译成与其同一作用域的渲染函数，没有任何的中间代理)。\",\"更好的 IDE 类型推断性能 (减少语言服务器从代码中抽离类型的工作)。\",\"使用这个语法，需要将 setup attribute 添加到 <script> 代码块上：\",\"<script setup lang=\\\"ts\\\"></script> \",\"里面的代码会被编译成组件 setup() 函数的内容，声明的变量、函数可以被 <template> 模板直接插值使用，无需 export 抛出。这意味着与普通的 <script> 只在组件被首次引入的时候执行一次不同，<script setup> 中的代码会在每次组件实例被创建的时候执行。\",\"setup 函数在生命周期方面，它是在 beforeCreate 钩子之前调用的。\"]},\"585\":{\"h\":\"生命周期\",\"t\":[\"选项式 API 的生命周期选项和组合式 API 之间的映射\",\"beforeCreate -> 使用 setup()\",\"created -> 使用 setup()\",\"beforeMount -> onBeforeMount\",\"mounted -> onMounted\",\"beforeUpdate -> onBeforeUpdate\",\"updated -> onUpdated\",\"beforeUnmount -> onBeforeUnmount\",\"unmounted -> onUnmounted\",\"errorCaptured -> onErrorCaptured\",\"renderTracked -> onRenderTracked\",\"renderTriggered -> onRenderTriggered\",\"activated -> onActivated\",\"deactivated -> onDeactivated\",\"因为 setup 是围绕 beforeCreate 和 created 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 setup 函数中编写。\"]},\"586\":{\"h\":\"响应式 ref\",\"t\":[\"接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象仅有一个 .value property，指向该内部值。和从 setup() 函数中返回值一样，ref 值在模板中使用的时候会自动解包。\",\"可以在调用 ref 时传递一个泛型参数以覆盖默认推断\",\"import { ref } from \\\"vue\\\"; let str = ref<string>(\\\"test\\\"); \",\"指定复杂类型\",\"const foo = ref<string | number>(\\\"foo\\\"); // foo 的类型：Ref<string | number> foo.value = 123; // ok! \"]},\"587\":{\"h\":\"props/emit\",\"t\":[\"仅限类型的 props/emit 声明\",\"defineProps<{ title: string }>(); const emit = defineEmits<{ (e: \\\"change\\\", id: number): void; (e: \\\"update\\\", value: string): void; }>(); \",\"props 有两种方式设置默认值：\",\"使用运行时声明\",\"运行时声明 的方式只能设置参数类型、默认值、是否必传、自定义验证。报错为控制台 warn 警告。 若想设置 [ 编辑器报错、编辑器语法提示 ]则需要使用类型声明的方式。\",\"使用类型声明时的默认 props 值\",\"仅限类型的 defineProps 声明的不足之处在于，它不能给 props 定义默认值。需配合 withDefaults 编译器宏解决：\",\"interface Props { title?: string; msg?: string; } withDefaults(defineProps<Props>(), { title: \\\"提示\\\", msg: \\\"是否跳转到app?\\\", }); \",\"defineProps、withDefaults 是只在 <script setup> 语法糖中才能使用的编译器宏。他不需要导入且会随着 <script setup> 处理过程一同被编译掉。\"]},\"588\":{\"h\":\"v-model 双向绑定\",\"t\":[\"vue2 中的 v-model 的使用是通过传递 value 属性和接收 input 事件实现，vue3 则换成了 modelValue 属性，接收的方法是 update:modelValue。\",\"以下弹窗例子以 Page.vue 为父组件，Dialog.vue 为子组件，关键代码如下：\",\"/* Page.vue */ <template> <Dialog v-model=\\\"dialogVisible\\\"></Dialog> <div class=\\\"bottom-btn\\\" @click=\\\"onTap\\\">点击按钮</div> </template> <script setup lang=\\\"ts\\\"> import { ref } from \\\"vue\\\"; import Dialog from \\\"./Dialog.vue\\\"; let dialogVisible = ref<boolean>(false); function onTap() { dialogVisible.value = true; } <script> \",\"/* Dialog.vue */ <template> <div class=\\\"dialog\\\" v-show=\\\"modelValue\\\"> <span class=\\\"dialog-content-btn\\\" @click=\\\"onConfirm\\\">确定</span> </div> </template> <script setup lang=\\\"ts\\\"> import { ref } from \\\"vue\\\"; interface Props { modelValue?: boolean; } let props = withDefaults(defineProps<Props>(), { modelValue: false // v-model绑定的属性值 }); // 传递的方法 const emit = defineEmits<{ (e: \\\"update:modelValue\\\", visible: boolean): boolean; }>(); function onConfirm() { emit(\\\"update:modelValue\\\", false); } <script> \"]},\"589\":{\"h\":\"可能遇到的报错/警告\"},\"590\":{\"h\":\"vite 打包 charset 警告\",\"t\":[\"\\\"@charset\\\" must be the first rule in the file }@charset \\\"UTF-8\\\";\",\"原因：使用了 scss 类库 sass，scss 编译的时候，因为被编译的文件里可能有中文导致\",\"解决：在 vite.config.js 里面，加一个 sass 的配置，把 charset 关掉就行了\",\"export default defineConfig({ css: { preprocessorOptions: { scss: { charset: false, }, }, }, }); \"]},\"591\":{\"h\":\"去除 Typescript 全局变量的 eslint 报错\",\"t\":[\"使用 var 定义全局变量\",\"var 相关声明下会带下划线，并报错\",\"Unexpected var, use let or const instead.\",\"解决：在 .eslintrc 配置文件中增加规则\",\"rules: { // 全局变量允许使用 var 'no-var': 'off', } \",\"使用 global 定义全局变量\",\"global 相关声明下会带下划线，并报错\",\"Augmentations for the global scope can only be directly nested in external modules or ambient module declarations.\",\"解决：在 global.d.ts 声明文件中添加一行代码\",\"// global.d.ts export {} \",\"注：新增后会导致该文件中的其他变量/类型等声明失效，其他声明可另起 *.d.ts 文件定义\"]},\"592\":{\"h\":\"Vue3\",\"t\":[\"简介\",\"创建工程\",\"compositionAPI\",\"otherAPI\",\"其他组件\",\"Vue3+TS+Vite\"]},\"593\":{\"h\":\"深入响应式原理\",\"t\":[\"这里是官网的响应式原理原文\",\"当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。\",\"这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。这里需要注意的是不同浏览器在控制台打印数据对象时对 getter/setter 的格式化并不同，所以建议安装 vue-devtools 来获取对检查数据更加友好的用户界面。\",\"每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。\",\"Vue2响应式原理官网图例\",\"为了彻底弄懂 Vue2 的数据更新原理，手写相关实现代码，让相关知识不再处于“忽悠阶段”，现记录本章节\"]},\"594\":{\"h\":\"前言\"},\"595\":{\"h\":\"MVVM 模式\",\"t\":[\"<template> 提供 html 模板视图(view)\",\"<script> 中的 data 提供已声明的响应式数据(model)\",\"<script> 中的其他对 data 的操作实现 model 和 view 之间的双向响应(view-model)\"]},\"596\":{\"h\":\"非侵入式变化\",\"t\":[\"Vue 的数据变化语法为 this.a ++;，并未调用其他任何 API，为非侵入式数据变化\",\"React 的数据变化语法为 this.setState({ a: this.state.a ++; })，小程序同样也是 this.setData({ a: this.data.a + 1 })，都需要借助框架的 API 才能修改数据，为侵入式数据变化\"]},\"597\":{\"h\":\"上帝的钥匙\",\"t\":[\"Object.defineProperty() 数据劫持/数据代理\",\"利用 JS 引擎赋予的功能，监测对象属性变化。\",\"但是仅有“上帝的钥匙”不够，还需要设计一套精密的系统，因此需要一套依赖收集与订阅发布系统。\"]},\"598\":{\"h\":\"1.实现完整的数据劫持\",\"t\":[\"简而言之，对需要数据劫持的对象初始化 Observer 观察者类，并开启数据劫持\"]},\"599\":{\"h\":\"方法简介\",\"t\":[\"Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\",\"const obj = {}; Object.defineProperty(obj, \\\"a\\\", { value: 3, }); Object.defineProperty(obj, \\\"b\\\", { value: 5, }); console.log(obj); // { a: 3, b: 5 } console.log(obj.a, obj.b); // 3, 5 \"]},\"600\":{\"h\":\"隐藏属性\",\"t\":[\"同时，还可以设置一些额外隐藏的属性，这里只列 2 个为例\",\"Object.defineProperty(obj, \\\"a\\\", { value: 3, // 是否可写 writable: false, // 不可写的属性，对obj.a的数据修改不会生效 }); Object.defineProperty(obj, \\\"b\\\", { value: 5, // 是否可以被枚举 enumerable: false, // 无法被枚举的属性，对obj作for..in循环的时候不会被读取 }); \"]},\"601\":{\"h\":\"getter/setter\",\"t\":[\"get：属性的 getter 参数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的 this 不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。默认为 undefined\",\"set：属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（被赋予的新值），会传入赋值时的 this 对象。默认为 undefined\",\"get 和 set，可以通过闭包存储 get 和 set 的值\",\"Object.defineProperty(obj, \\\"a\\\", { // getter get() { console.log(\\\"你试图访问obj的a属性\\\"); }, // setter set() { console.log(\\\"你试图改变obj的a属性\\\"); }, }); console.log(obj.a); // 你试图访问obj的a属性 undefined obj.a = 10; // 你试图改变obj的a属性 obj.a仍然是undefined \",\"get/set 需要变量周转才能工作\",\"let temp; Object.defineProperty(obj, \\\"a\\\", { // getter get() { console.log(\\\"你试图访问obj的a属性\\\"); return temp; }, // setter set(newValue) { console.log(\\\"你试图改变obj的a属性\\\", newValue); temp = newValue; }, }); console.log(obj.a); obj.a = 9; console.log(obj.a); // 9 \",\"设置 defineReactive 函数实现变量闭包\",\"function defineReactive(data, key, val) { Object.defineProperty(data, key, { // 可枚举 enumerable: true, // 可以被配置，比如可以被delete configurable: true, // getter get() { console.log(`你试图访问obj的${key}属性`); return val; }, // setter set(newValue) { console.log(`你试图改变obj的${key}属性`, newValue); if (val === newValue) { return; } val = newValue; }, }); } const obj = {}; defineReactive(obj, \\\"a\\\", 10); console.log(obj.a); // 10 obj.a = 6; console.log(obj.a); // 6 \"]},\"602\":{\"h\":\"递归侦测对象属性(实现 Observer 类)\",\"t\":[\"形如Object.defineProperty(obj, 'a') 仅当 a 作为基本类型可以正常监测属性，如果 a 是嵌套对象，则 a 内部的属性变化无法正常监测\",\"// defineReactive.js function defineReactive(data, key, val) { val = val || data[key]; Object.defineProperty(data, key, { // 可枚举 enumerable: true, // 可以被配置，比如可以被delete configurable: true, // getter get() { console.log(`你试图访问obj的${key}属性`); return val; }, // setter set(newValue) { console.log(`你试图改变obj的${key}属性`, newValue); if (val === newValue) { return; } val = newValue; }, }); } const obj = { a: { m: { n: 5, }, }, }; defineReactive(obj, \\\"a\\\"); console.log(obj); // a是响应式对象数据 obj.a.m.n = 10; console.log(obj.a.m.n); // n不是响应式数据 \",\"实际上，Observer 观察者模式需要将一个正常的 object 转换为每个层级的属性都是响应式（可以被侦测）的 object\",\"// util.js __ob__属性定义 export const def = function (obj, key, value, enumerable) { Object.defineProperty(obj, key, { value, enumerable, writable: true, configurable: true, }); }; \",\"// defineReactive.js // 响应式数据劫持的核心函数 // 作用1：生成val闭包变量，用以劫持数据 // 作用2：对val变量开启observe类型判断与监听，生成递归结构的观察者类 import observe from \\\"./observe.js\\\"; function defineReactive(data, key, val) { val = val || data[key]; // 定义响应式数据前，先执行一次值类型判断，如果为复杂类型，则会new Observer实例同时遍历key值进入defineReactive的递归执行，直到key的value值为基本类型为止 observe(val); Object.defineProperty(data, key, { // 可枚举 enumerable: true, // 可以被配置，比如可以被delete configurable: true, // getter get() { console.log(`你试图访问${key}属性`); return val; }, // setter set(newValue) { console.log(`你试图改变${key}属性`, newValue); if (val === newValue) { return; } val = newValue; observe(newValue); }, }); } \",\"// observer.js 观察者类 // 数据变量的观察者类 // 作用1：为闭包变量创建实例对象，只要递归结构中存在复杂类型就一定会创建新的实例对象 // 作用2：在实例上声明一个响应式变化的 __ob__ 对象，现阶段暂时用不上 // 作用3：遍历实例的全部key值并开启响应式数据劫持 import { def } from \\\"./util.js\\\"; import defineReactive from \\\"./defineReactive.js\\\"; export default class Observer { constructor(value) { // 给需要开启监听的对象声明绑定一个初始化的Observer类，key值为__ob__，且不可被枚举 def(value, \\\"__ob__\\\", this, false); // 遍历value的key，对每一个属性都开启监听 this.walk(value); } // 遍历 walk(value) { for (let key in value) { defineReactive(value, key); } } } \",\"// 值类型监听判断函数，也是对象观察者模式初始化执行或后续值改变时触发的函数 // 作用1：为复杂数据类型，且没有初始化过Observer实例对象的变量，作new Observer操作 // 作用2：作为defineReactive响应式数据劫持函数的递归操作入口函数，实现多层级复杂类型的递归响应式数据劫持 import Observer from \\\"./observer.js\\\"; export default function observe(value) { // 基本类型不再往下执行，递归的跳出条件 if (typeof value !== \\\"object\\\") return; var ob; if (typeof value.__ob__ !== \\\"undefined\\\") { // 当对象的 __ob__ 不为 undefined 时，说明value已经初始化创建过Observer实例了，此时不再执行new Observer，__ob__是响应式的 ob = value.__ob__; } else { // 对象不存在 __ob__ 属性时，new Observer实例对象并初始化value值 ob = new Observer(value); } return ob; } \"]},\"603\":{\"h\":\"数组的响应式处理\",\"t\":[\"上述的实现只能处理普通对象形式，对于数组仍无法正确处理\",\"因此，Vue2 底层改写了数组的 7 个方法：push、pop、shift、unshift、splice、sort、reverse\",\"实现方式：以 Array.prototype 为原型，创建一个 arrayMethods 对象\",\"响应式原理修改数组方法\",\"// array.js import { def } from \\\"./util.js\\\"; const arrayPrototype = Array.prototype; export const arrayMethods = Object.create(arrayPrototype); const methodsNeedChange = [ \\\"push\\\", \\\"pop\\\", \\\"shift\\\", \\\"unshift\\\", \\\"splice\\\", \\\"sort\\\", \\\"reverse\\\", ]; methodsNeedChange.forEach((methodName) => { // 备份原来的方法 const original = arrayPrototype[methodName]; // 定义新方法 def( arrayMethods, methodName, function () { // 执行数组的老方法，保证原API顺利执行 const result = original.apply(this, arguments); // 从顶层对象开始递归调用声明下的数组，已经完成了实例初始化，执行`def(value, \\\"__ob__\\\", this, false);`后当前数组必定包含 __ob__ 属性 const ob = this.__ob__; // 7种方法里有3种方法 push / unshift / splice 能够插入新项，现在要把插入的新项也变为observe响应式数据 let inserted = []; switch (methodName) { case \\\"push\\\": case \\\"unshift\\\": inserted = arguments; // 指向插入的新项 break; case \\\"splice\\\": // splice参数是splice(下标[，数量[，插入的新项]]) inserted = Array.from(arguments).slice(2); // 指向第三个参数 break; } // 判断有没有要插入的新项 if (inserted) { ob.observeArray(inserted); } return result; // 返回原API的原返回值 }, false ); }); \",\"// observer.js 观察者类 // 数据变量的观察者类 // 作用1：为闭包变量创建实例对象，只要递归结构中存在复杂类型就一定会创建新的实例对象 // 作用2：在实例上声明一个响应式变化的 __ob__ 对象，现阶段暂时用不上 // 作用3：遍历实例的全部key值并开启响应式数据劫持 import { def } from \\\"./util.js\\\"; import observe from \\\"./observe\\\"; import defineReactive from \\\"./defineReactive.js\\\"; import { arrayMethods } from \\\"./array.js\\\"; export default class Observer { constructor(value) { // 给需要开启监听的对象声明绑定一个初始化的Observer类，key值为__ob__，且不可被枚举 def(value, \\\"__ob__\\\", this, false); if (Array.isArray(value)) { // 1.如果是数组，将这个数组的原型指向重写后的arrayMethods // `Object.setPrototypeOf`：将第一个参数的原型对象指向到第二个参数 Object.setPrototypeOf(value, arrayMethods); // 2.让数组实现响应式 this.observeArray(value); } else { // 遍历value的key，对每一个属性都开启监听 this.walk(value); } } // 遍历 walk(value) { for (let key in value) { defineReactive(value, key); } } // 数组的特殊遍历 observeArray(arr) { for (let i = 0, l = arr.length; i < l; i++) { // 逐项observe observe(arr[i]); } } } \"]},\"604\":{\"h\":\"完整的数据劫持源码参考\",\"t\":[\"至此，可遍历、递归并且对对象和数组都生效的完整数据劫持原理已经实现，阶段性源码参考如下：\",\"// util.js __ob__属性定义 export const def = function (obj, key, value, enumerable) { Object.defineProperty(obj, key, { value, enumerable, writable: true, configurable: true, }); }; \",\"// defineReactive.js // 响应式数据劫持的核心函数 // 作用1：生成val闭包变量，用以劫持数据 // 作用2：对val变量开启observe类型判断与监听，生成递归结构的观察者类 import observe from \\\"./observe.js\\\"; function defineReactive(data, key, val) { val = val || data[key]; // 定义响应式数据前，先执行一次值类型判断，如果为复杂类型，则会new Observer实例同时遍历key值进入defineReactive的递归执行，直到key的value值为基本类型为止 observe(val); Object.defineProperty(data, key, { // 可枚举 enumerable: true, // 可以被配置，比如可以被delete configurable: true, // getter get() { console.log(`你试图访问${key}属性`); return val; }, // setter set(newValue) { console.log(`你试图改变${key}属性`, newValue); if (val === newValue) { return; } val = newValue; observe(newValue); }, }); } \",\"// array.js import { def } from \\\"./util.js\\\"; const arrayPrototype = Array.prototype; export const arrayMethods = Object.create(arrayPrototype); const methodsNeedChange = [ \\\"push\\\", \\\"pop\\\", \\\"shift\\\", \\\"unshift\\\", \\\"splice\\\", \\\"sort\\\", \\\"reverse\\\", ]; methodsNeedChange.forEach((methodName) => { // 备份原来的方法 const original = arrayPrototype[methodName]; // 定义新方法 def( arrayMethods, methodName, function () { // 执行数组的老方法，保证原API顺利执行 const result = original.apply(this, arguments); // 从顶层对象开始递归调用声明下的数组，已经完成了实例初始化，执行`def(value, \\\"__ob__\\\", this, false);`后当前数组必定包含 __ob__ 属性 const ob = this.__ob__; // 7种方法里有3种方法 push / unshift / splice 能够插入新项，现在要把插入的新项也变为observe响应式数据 let inserted = []; switch (methodName) { case \\\"push\\\": case \\\"unshift\\\": inserted = arguments; // 指向插入的新项 break; case \\\"splice\\\": // splice参数是splice(下标[，数量[，插入的新项]]) inserted = Array.from(arguments).slice(2); // 指向第三个参数 break; } // 判断有没有要插入的新项 if (inserted) { ob.observeArray(inserted); } return result; // 返回原API的原返回值 }, false ); }); \",\"// observer.js 观察者类 // 数据变量的观察者类 // 作用1：为闭包变量创建实例对象，只要递归结构中存在复杂类型就一定会创建新的实例对象 // 作用2：在实例上声明一个响应式变化的 __ob__ 对象，现阶段暂时用不上 // 作用3：遍历实例的全部key值并开启响应式数据劫持 import { def } from \\\"./util.js\\\"; import observe from \\\"./observe\\\"; import defineReactive from \\\"./defineReactive.js\\\"; import { arrayMethods } from \\\"./array.js\\\"; export default class Observer { constructor(value) { // 给需要开启监听的对象声明绑定一个初始化的Observer类，key值为__ob__，且不可被枚举 def(value, \\\"__ob__\\\", this, false); if (Array.isArray(value)) { // 1.如果是数组，将这个数组的原型指向重写后的arrayMethods // `Object.setPrototypeOf`：将第一个参数的原型对象指向到第二个参数 Object.setPrototypeOf(value, arrayMethods); // 2.让数组实现响应式 this.observeArray(value); } else { // 遍历value的key，对每一个属性都开启监听 this.walk(value); } } // 遍历 walk(value) { for (let key in value) { defineReactive(value, key); } } // 数组的特殊遍历 observeArray(arr) { for (let i = 0, l = arr.length; i < l; i++) { // 逐项observe observe(arr[i]); } } } \",\"// 值类型监听判断函数，也是对象观察者模式初始化执行或后续值改变时触发的函数 // 作用1：为复杂数据类型，且没有初始化过Observer实例对象的变量，作new Observer操作 // 作用2：作为defineReactive响应式数据劫持函数的递归操作入口函数，实现多层级复杂类型的递归响应式数据劫持 import Observer from \\\"./observer.js\\\"; export default function observe(value) { // 基本类型不再往下执行，递归的跳出条件 if (typeof value !== \\\"object\\\") return; var ob; if (typeof value.__ob__ !== \\\"undefined\\\") { // 当对象的 __ob__ 不为 undefined 时，说明value已经初始化创建过Observer实例了，此时不再执行new Observer，__ob__是响应式的 ob = value.__ob__; } else { // 对象不存在 __ob__ 属性时，new Observer实例对象并初始化value值 ob = new Observer(value); } return ob; } \",\"// 代码实现 const obj = { a: 1, b: { c: 2, }, }; observe(obj); \",\"执行顺序：\",\"执行observe(obj) ├── new Observer(obj),并执行this.walk()遍历obj的属性，执行defineReactive() ├── defineReactive(obj, a) ├── 执行observe(obj.a) 发现obj.a不是对象，直接返回 ├── 执行defineReactive(obj, a) 的剩余代码 ├── defineReactive(obj, b) ├── 执行observe(obj.b) 发现obj.b是对象 ├── 执行 new Observer(obj.b)，遍历obj.b的属性，执行defineReactive() ├── 执行defineReactive(obj.b, c) ├── 执行observe(obj.b.c) 发现obj.b.c不是对象，直接返回 ├── 执行defineReactive(obj.b, c)的剩余代码 ├── 执行defineReactive(obj, b)的剩余代码 代码执行结束 \",\"调用关系：\",\"调用关系\",\"三个函数相互调用从而形成了递归，与普通的递归有所不同。 有些同学可能会想，只要在 setter 中调用一下渲染函数来重新渲染页面，不就能完成在数据变化时更新页面了吗？确实可以，但是这样做的代价就是：任何一个数据的变化，都会导致这个页面的重新渲染，代价未免太大了吧。我们想做的效果是：数据变化时，只更新与这个数据有关的 DOM 结构，那就涉及到下文的内容了：依赖\"]},\"605\":{\"h\":\"2.实现订阅-发布模式的依赖收集\",\"t\":[\"在 Vue2 中，中等粒度依赖，用到数据的组件都是依赖\",\"在 getter 中收集依赖，在 setter 中触发依赖\",\"核心：Dep 类和 Watcher 类\",\"把依赖收集的代码封装成一个 Dep 类，它专门用来管理依赖，每个 Observer 的实例，成员中都有一个 Dep 的实例\",\"Watcher 是一个中介，数据发生变化时通过 Watcher 中转，通知组件\",\"下图为官方的订阅-发布模式图例\",\"发布订阅模式\",\"依赖就是 Watcher。只有 Watcher 触发的 getter 才会收集依赖，哪个 Watcher 触发了 getter，就把哪个 Watcher 收集到 Dep 中。\",\"Dep 使用订阅-发布模式，当数据发生变化时，会循环依赖列表，把所有的 Watcher 都通知一遍。\",\"代码实现的巧妙之处：Watcher 把自己设置到全局的一个指定位置，然后读取数据，因为读取了数据，所以会触发这个数据的 getter。在 getter 中就能得到当前正在读取数据的 Watcher，并把这个 Watcher 收集到 Dep 中。\",\"更详细的发布订阅模式\"]},\"606\":{\"h\":\"初始化订阅-发布系统\"},\"607\":{\"h\":\"Watcher 类初步实现\",\"t\":[\"Watcher 类作为一个独立的订阅系统，当且仅当依赖的数据发生变化时，接收到数据发生变化的消息时，才会触发 update 更新，最后如果回调函数存在再执行回调（对标 watch 配置项中的 handler）\",\"初步实现如下：\",\"// watcher.js export default class Watcher { constructor(data, expression, cb) { // data: 数据对象，如obj // expression：表达式，如b.c，根据data和expression就可以获取watcher依赖的数据 // cb：依赖变化时触发的回调 this.data = data; this.expression = expression; this.cb = cb; // 初始化watcher实例时订阅数据 this.value = this.get(); } get() { const value = parsePath(this.data, this.expression); return value; } // 当收到数据变化的消息时执行该方法，从而调用cb update() { this.value = parsePath(this.data, this.expression); // 对存储的数据进行更新 cb(); } } function parsePath(obj, expression) { const segments = expression.split(\\\".\\\"); for (let key of segments) { if (!obj) return; obj = obj[key]; } return obj; } \"]},\"608\":{\"h\":\"Dep 类初步实现\",\"t\":[\"创建完 Watcher 类实现订阅系统后，我们还需要一个类来实现发布系统，总结一下接下来需要实现的功能：\",\"有一个数组来存储 watcher，用以存储需要更新的订阅信息。\",\"watcher 实例需要订阅(依赖)数据，也就是获取依赖或者收集依赖。\",\"watcher 的依赖发生变化时触发 watcher 的回调函数，也就是派发更新。\",\"每个数据都应该维护一个属于自己的数组，该数组来存放依赖自己的 watcher，我们可以在 defineReactive 中定义一个数组 dep，这样通过闭包，每个属性就能拥有一个属于自己的 dep\",\"// defineReactive.js // 响应式数据劫持的核心函数 // 作用1：生成val闭包变量，用以劫持数据 // 作用2：对val变量开启observe类型判断与监听，生成递归结构的观察者类 import observe from \\\"./observe.js\\\"; function defineReactive(data, key, val) { const dep = []; val = val || data[key]; // 定义响应式数据前，先执行一次值类型判断，如果为复杂类型，则会new Observer实例同时遍历key值进入defineReactive的递归执行，直到key的value值为基本类型为止 observe(val); Object.defineProperty(data, key, { // 可枚举 enumerable: true, // 可以被配置，比如可以被delete configurable: true, // getter get() { console.log(`你试图访问${key}属性`); return val; }, // setter set(newValue) { console.log(`你试图改变${key}属性`, newValue); if (val === newValue) { return; } val = newValue; observe(newValue); dep.notify(); }, }); } \",\"接下来，再实现收集依赖的功能，实现代码前先总结一下现阶段情况与下阶段目标\",\"从 Watcher 类中不难看出，实例化时会执行 get 方法，get 方法的作用就是获取自己依赖的数据，而我们重写了数据的访问行为，为每个数据定义了 getter，因此 getter 函数就会执行，如果我们在 getter 中把当前的 watcher 添加到 dep 数组中，就可以收集依赖\",\"注意：执行到 getter 时，new Watcher()的 get 方法还没有执行完毕。\",\"new Watcher()时执行 constructor，调用了实例的 get 方法，实例的 get 方法会读取数据的值，从而触发了数据的 getter，getter 执行完毕后，实例的 get 方法执行完毕，并返回值，constructor 执行完毕，实例化完毕。\",\"总体的依赖收集过程就是：渲染页面时碰到插值表达式，v-bind 等需要数据等地方，会实例化一个 watcher,实例化 watcher 就会对依赖的数据求值，从而触发 getter，数据的 getter 函数就会添加依赖自己的 watcher，从而完成依赖收集。我们可以理解为 watcher 在收集依赖，而代码的实现方式是在数据中存储依赖自己的 watcher\",\"实现依赖收集后，我们最后要实现的功能是派发更新，也就是依赖变化时触发 watcher 的回调。从依赖收集部分我们知道，获取哪个数据，也就是说触发哪个数据的 getter，就说明 watcher 依赖哪个数据，因此数据变化的时候，就通过 setter 来派发更新。\"]},\"609\":{\"h\":\"订阅-发布初步实现\",\"t\":[\"配合 vue2 源码完善代码，进一步完善 Watcher 类和 Dep 类，附上阶段源码：\",\"// util.js __ob__属性定义 export const def = function (obj, key, value, enumerable) { Object.defineProperty(obj, key, { value, enumerable, writable: true, configurable: true, }); }; \",\"// defineReactive.js // 响应式数据劫持的核心函数 // 作用1：生成val闭包变量，用以劫持数据 // 作用2：对val变量开启observe类型判断与监听，生成递归结构的观察者类 import Dep from \\\"./dep.js\\\"; import observe from \\\"./observe.js\\\"; export default function defineReactive(data, key, val) { const dep = new Dep(); val = val || data[key]; // 定义响应式数据前，先执行一次值类型判断，如果为复杂类型，则会new Observer实例同时遍历key值进入defineReactive的递归执行，直到key的value值为基本类型为止 observe(val); Object.defineProperty(data, key, { // 可枚举 enumerable: true, // 可以被配置，比如可以被delete configurable: true, // getter get() { console.log(`你试图访问${key}属性`); // 重要！！！get收集依赖 dep.depend(); return val; }, // setter set(newValue) { console.log(`你试图改变${key}属性`, newValue); if (val === newValue) { return; } val = newValue; observe(newValue); // 重要！！！set更新依赖 dep.notify(); }, }); } \",\"// watcher.js import Dep from \\\"./dep.js\\\"; import { pushTarget, popTarget } from \\\"./dep.js\\\"; var uid = 0; export default class Watcher { constructor(data, expression, cb) { // data: 数据对象，如obj // expression：表达式，如b.c，根据data和expression就可以获取watcher依赖的数据 // cb：依赖变化时触发的回调 this.uid = uid++; this.data = data; this.expression = expression; this.cb = cb; // 初始化watcher实例时订阅数据 this.value = this.get(); } get() { // 1.新增watcher目标target的push和pop步骤 // 2.因为js为单线程执行，因此同一时刻仅有一个watcher实例执行，Dep.target必定是当前正处于实例化过程中的watcher // 3.等待value值成功析出之后，将当前实例从targetStack中弹出，保证父子对象的两个watcher实例初始化时不会出现target冲突 let value; pushTarget(this); try { value = parsePath(this.data, this.expression); } finally { popTarget(); } return value; } // 当收到数据变化的消息时执行该方法，从而调用cb update() { const value = this.get(); // 基本类型，新旧值不相等才会执行更新与回调；复杂类型，触发update时必定更新，vue2特性，因此oldValue与newValue也总是相等 if (value !== this.value || typeof value === \\\"object\\\") { const oldValue = this.value; this.value = value; // 对存储的数据进行更新 this.cb.call(this.data, this.value, oldValue); // 调用回调函数，对标Vue2-watch的handler函数 } } } function parsePath(obj, expression) { const segments = expression.split(\\\".\\\"); for (let key of segments) { if (!obj) return; obj = obj[key]; } return obj; } \",\"// dep.js var uid = 0; export default class Dep { static target = null; constructor() { this.uid = uid++; // 存储订阅者数组 subscribes // 数组里实际存放的是 Watcher 的实例对象 this.subs = []; } // 添加watcher依赖到指定的dep实例，当且仅当全局的Dep.target绑定了watcher实例时才会push进去 depend() { if (Dep.target) { this.addSub(Dep.target); } } // 通知更新 notify() { // 浅拷贝 const subs = [...this.subs]; // 遍历执行watcher实例的update方法更新value subs.forEach((s) => s.update()); } addSub(sub) { this.subs.push(sub); } } const targetStack = []; export function pushTarget(_target) { targetStack.push(Dep.target); Dep.target = _target; } export function popTarget() { Dep.target = targetStack.pop(); } \",\"// array.js import { def } from \\\"./util.js\\\"; const arrayPrototype = Array.prototype; export const arrayMethods = Object.create(arrayPrototype); const methodsNeedChange = [ \\\"push\\\", \\\"pop\\\", \\\"shift\\\", \\\"unshift\\\", \\\"splice\\\", \\\"sort\\\", \\\"reverse\\\", ]; methodsNeedChange.forEach((methodName) => { // 备份原来的方法 const original = arrayPrototype[methodName]; // 定义新方法 def( arrayMethods, methodName, function () { // 执行数组的老方法，保证原API顺利执行 const result = original.apply(this, arguments); // 从顶层对象开始递归调用声明下的数组，已经完成了实例初始化，执行`def(value, \\\"__ob__\\\", this, false);`后当前数组必定包含 __ob__ 属性 const ob = this.__ob__; // 7种方法里有3种方法 push / unshift / splice 能够插入新项，现在要把插入的新项也变为observe响应式数据 let inserted = []; switch (methodName) { case \\\"push\\\": case \\\"unshift\\\": inserted = arguments; // 指向插入的新项 break; case \\\"splice\\\": // splice参数是splice(下标[，数量[，插入的新项]]) inserted = Array.from(arguments).slice(2); // 指向第三个参数 break; } // 判断有没有要插入的新项 if (inserted) { ob.observeArray(inserted); } return result; // 返回原API的原返回值 }, false ); }); \",\"// observer.js 观察者类 // 数据变量的观察者类 // 作用1：为闭包变量创建实例对象，只要递归结构中存在复杂类型就一定会创建新的实例对象 // 作用2：在实例上声明一个响应式变化的 __ob__ 对象，现阶段暂时用不上 // 作用3：遍历实例的全部key值并开启响应式数据劫持 import { def } from \\\"./util.js\\\"; import defineReactive from \\\"./defineReactive.js\\\"; import observe from \\\"./observe\\\"; import { arrayMethods } from \\\"./array.js\\\"; import Dep from \\\"./dep.js\\\"; export default class Observer { constructor(value) { // 给需要开启监听的对象声明绑定一个初始化的Observer类，key值为__ob__，且不可被枚举 def(value, \\\"__ob__\\\", this, false); if (Array.isArray(value)) { // 1.如果是数组，将这个数组的原型指向重写后的arrayMethods // `Object.setPrototypeOf`：将第一个参数的原型对象指向到第二个参数 Object.setPrototypeOf(value, arrayMethods); // 2.让数组实现响应式 this.observeArray(value); } else { // 遍历value的key，对每一个属性都开启监听 this.walk(value); } } // 遍历 walk(value) { for (let key in value) { defineReactive(value, key); } } // 数组的特殊遍历 observeArray(arr) { for (let i = 0, l = arr.length; i < l; i++) { // 逐项observe observe(arr[i]); } } } \",\"// 值类型监听判断函数，也是对象观察者模式初始化执行或后续值改变时触发的函数 // 作用1：为复杂数据类型，且没有初始化过Observer实例对象的变量，作new Observer操作 // 作用2：作为defineReactive响应式数据劫持函数的递归操作入口函数，实现多层级复杂类型的递归响应式数据劫持 import Observer from \\\"./observer.js\\\"; export default function observe(value) { // 基本类型不再往下执行，递归的跳出条件 if (typeof value !== \\\"object\\\") return; var ob; if (typeof value.__ob__ !== \\\"undefined\\\") { // 当对象的 __ob__ 不为 undefined 时，说明value已经初始化创建过Observer实例了，此时不再执行new Observer，__ob__是响应式的 ob = value.__ob__; } else { // 对象不存在 __ob__ 属性时，new Observer实例对象并初始化value值 ob = new Observer(value); } return ob; } \",\"// entry.js import observe from \\\"./observe\\\"; import Watcher from \\\"./watcher\\\"; const obj = { a: { m: { n: 5, }, }, b: 10, c: [1, 2, 3, 4], }; observe(obj); console.log(\\\"obj\\\", obj); new Watcher(obj, \\\"b\\\", (val, oldVal) => { console.log(`watcher,b从${oldVal}变成了${val}`); }); obj.b = 50; \"]},\"610\":{\"h\":\"订阅系统完善\",\"t\":[\"至此，Watcher 类的实例化已经可实现对 obj.b 的依赖收集与更新回调。但是仍存在两个问题：1、对象内部属性变化无法监测；2、数组的 7 种方法无法监测。为了实现对复杂类型的精确侦听，还需要对 defineReactive、Observer、arrayMethods 扩充\",\"// defineReactive.js // 响应式数据劫持的核心函数 // 作用1：生成val闭包变量，用以劫持数据 // 作用2：对val变量开启observe类型判断与监听，生成递归结构的观察者类 import Dep from \\\"./dep.js\\\"; import observe from \\\"./observe.js\\\"; export default function defineReactive(data, key, val) { const dep = new Dep(); val = val || data[key]; // 定义响应式数据前，先执行一次值类型判断，如果为复杂类型，则会new Observer实例同时遍历key值进入defineReactive的递归执行，直到key的value值为基本类型为止 let childOb = observe(val); Object.defineProperty(data, key, { // 可枚举 enumerable: true, // 可以被配置，比如可以被delete configurable: true, // getter get() { console.log(`你试图访问${key}属性`); // 重要！！！get收集依赖 dep.depend(); // 改动 // 完善对象的依赖收集 // childOb通过observe嵌套执行，目的是确保父对象内部的子对象可以正确执行依赖收集 if (childOb) { childOb.dep.depend(); } return val; }, // setter set(newValue) { console.log(`你试图改变${key}属性`, newValue); if (val === newValue) { return; } val = newValue; childOb = observe(newValue); // 重要！！！set更新依赖 dep.notify(); }, }); } \",\"// observer.js 观察者类 // 数据变量的观察者类 // 作用1：为闭包变量创建实例对象，只要递归结构中存在复杂类型就一定会创建新的实例对象 // 作用2：在实例上声明一个响应式变化的 __ob__ 对象，现阶段暂时用不上 // 作用3：遍历实例的全部key值并开启响应式数据劫持 import { def } from \\\"./util.js\\\"; import defineReactive from \\\"./defineReactive.js\\\"; import observe from \\\"./observe\\\"; import { arrayMethods } from \\\"./array.js\\\"; import Dep from \\\"./dep.js\\\"; export default class Observer { constructor(value) { // 改动 // 为了确保复杂对象可以被正确侦听，需要给对象的 __ob__ 绑定dep实例 this.dep = new Dep(); // 给需要开启监听的对象声明绑定一个初始化的Observer类，key值为__ob__，且不可被枚举 def(value, \\\"__ob__\\\", this, false); if (Array.isArray(value)) { // 1.如果是数组，将这个数组的原型指向重写后的arrayMethods // `Object.setPrototypeOf`：将第一个参数的原型对象指向到第二个参数 Object.setPrototypeOf(value, arrayMethods); // 2.让数组实现响应式 this.observeArray(value); } else { // 遍历value的key，对每一个属性都开启监听 this.walk(value); } } // 遍历 walk(value) { for (let key in value) { defineReactive(value, key); } } // 数组的特殊遍历 observeArray(arr) { for (let i = 0, l = arr.length; i < l; i++) { // 逐项observe observe(arr[i]); } } } \",\"// array.js import { def } from \\\"./util.js\\\"; const arrayPrototype = Array.prototype; export const arrayMethods = Object.create(arrayPrototype); const methodsNeedChange = [ \\\"push\\\", \\\"pop\\\", \\\"shift\\\", \\\"unshift\\\", \\\"splice\\\", \\\"sort\\\", \\\"reverse\\\", ]; methodsNeedChange.forEach((methodName) => { // 备份原来的方法 const original = arrayPrototype[methodName]; // 定义新方法 def( arrayMethods, methodName, function () { // 执行数组的老方法，保证原API顺利执行 const result = original.apply(this, arguments); // 从顶层对象开始递归调用声明下的数组，已经完成了实例初始化，执行`def(value, \\\"__ob__\\\", this, false);`后当前数组必定包含 __ob__ 属性 const ob = this.__ob__; // 7种方法里有3种方法 push / unshift / splice 能够插入新项，现在要把插入的新项也变为observe响应式数据 let inserted = []; switch (methodName) { case \\\"push\\\": case \\\"unshift\\\": inserted = arguments; // 指向插入的新项 break; case \\\"splice\\\": // splice参数是splice(下标[，数量[，插入的新项]]) inserted = Array.from(arguments).slice(2); // 指向第三个参数 break; } // 判断有没有要插入的新项 if (inserted) { ob.observeArray(inserted); } // 改动 // 数组7方法之一改动时，需要调动数组对象的dep实例开启依赖收集 ob.dep.notify(); return result; // 返回原API的原返回值 }, false ); }); \",\"现在，数组的 7 种方法和对象内部属性可以正常侦听了\",\"const obj = { a: { m: { n: 5, }, }, b: 10, c: [1, 2, 3, 4], }; observe(obj); new Watcher(obj, \\\"b\\\", (val, oldVal) => { console.log(`@watcher,b从${oldVal}变成了${val}`); }); new Watcher(obj, \\\"a.m.n\\\", (val, oldVal) => { console.log(`@watcher,a从${oldVal}变成了${val}`); }); new Watcher(obj, \\\"c\\\", (val, oldVal) => { console.log(`@watcher,c从${oldVal}变成了${val}`); }); obj.a.m.n = 88; obj.b = 99; obj.c.push(5, 6); console.log(obj); \"]},\"611\":{\"h\":\"最终完整源码\"},\"612\":{\"h\":\"util.js\",\"t\":[\"// util.js __ob__属性定义 export const def = function (obj, key, value, enumerable) { Object.defineProperty(obj, key, { value, enumerable, writable: true, configurable: true, }); }; \"]},\"613\":{\"h\":\"defineReactive.js\",\"t\":[\"// defineReactive.js // 响应式数据劫持的核心函数 // 作用1：生成val闭包变量，用以劫持数据 // 作用2：对val变量开启observe类型判断与监听，生成递归结构的观察者类 import Dep from \\\"./dep.js\\\"; import observe from \\\"./observe.js\\\"; export default function defineReactive(data, key, val) { const dep = new Dep(); val = val || data[key]; // 定义响应式数据前，先执行一次值类型判断，如果为复杂类型，则会new Observer实例同时遍历key值进入defineReactive的递归执行，直到key的value值为基本类型为止 let childOb = observe(val); Object.defineProperty(data, key, { // 可枚举 enumerable: true, // 可以被配置，比如可以被delete configurable: true, // getter get() { console.log(`你试图访问${key}属性`); // 重要！！！get收集依赖 dep.depend(); // 改动 // 完善对象的依赖收集 // childOb通过observe嵌套执行，目的是确保父对象内部的子对象可以正确执行依赖收集 if (childOb) { childOb.dep.depend(); } return val; }, // setter set(newValue) { console.log(`你试图改变${key}属性`, newValue); if (val === newValue) { return; } val = newValue; childOb = observe(newValue); // 重要！！！set更新依赖 dep.notify(); }, }); } \"]},\"614\":{\"h\":\"array.js\",\"t\":[\"// array.js import { def } from \\\"./util.js\\\"; const arrayPrototype = Array.prototype; export const arrayMethods = Object.create(arrayPrototype); const methodsNeedChange = [ \\\"push\\\", \\\"pop\\\", \\\"shift\\\", \\\"unshift\\\", \\\"splice\\\", \\\"sort\\\", \\\"reverse\\\", ]; methodsNeedChange.forEach((methodName) => { // 备份原来的方法 const original = arrayPrototype[methodName]; // 定义新方法 def( arrayMethods, methodName, function () { // 执行数组的老方法，保证原API顺利执行 const result = original.apply(this, arguments); // 从顶层对象开始递归调用声明下的数组，已经完成了实例初始化，执行`def(value, \\\"__ob__\\\", this, false);`后当前数组必定包含 __ob__ 属性 const ob = this.__ob__; // 7种方法里有3种方法 push / unshift / splice 能够插入新项，现在要把插入的新项也变为observe响应式数据 let inserted = []; switch (methodName) { case \\\"push\\\": case \\\"unshift\\\": inserted = arguments; // 指向插入的新项 break; case \\\"splice\\\": // splice参数是splice(下标[，数量[，插入的新项]]) inserted = Array.from(arguments).slice(2); // 指向第三个参数 break; } // 判断有没有要插入的新项 if (inserted) { ob.observeArray(inserted); } // 改动 // 数组7方法之一改动时，需要调动数组对象的dep实例开启依赖收集 ob.dep.notify(); return result; // 返回原API的原返回值 }, false ); }); \"]},\"615\":{\"h\":\"dep.js\",\"t\":[\"var uid = 0; export default class Dep { static target = null; constructor() { this.uid = uid++; // 存储订阅者数组 subscribes // 数组里实际存放的是 Watcher 的实例对象 this.subs = []; } // 添加watcher依赖到指定的dep实例，当且仅当全局的Dep.target绑定了watcher实例时才会push进去 depend() { if (Dep.target) { this.addSub(Dep.target); } } // 通知更新 notify() { // 浅拷贝 const subs = [...this.subs]; // 遍历执行watcher实例的update方法更新value subs.forEach((s) => s.update()); } addSub(sub) { this.subs.push(sub); } } const targetStack = []; export function pushTarget(_target) { targetStack.push(Dep.target); Dep.target = _target; } export function popTarget() { Dep.target = targetStack.pop(); } \"]},\"616\":{\"h\":\"watcher.js\",\"t\":[\"import Dep from \\\"./dep.js\\\"; import { pushTarget, popTarget } from \\\"./dep.js\\\"; // watcher.js var uid = 0; export default class Watcher { constructor(data, expression, cb) { // data: 数据对象，如obj // expression：表达式，如b.c，根据data和expression就可以获取watcher依赖的数据 // cb：依赖变化时触发的回调 this.uid = uid++; this.data = data; this.expression = expression; this.cb = cb; // 初始化watcher实例时订阅数据 this.value = this.get(); } get() { // 1.新增watcher目标target的push和pop步骤 // 2.因为js为单线程执行，因此同一时刻仅有一个watcher实例执行，Dep.target必定是当前正处于实例化过程中的watcher // 3.等待value值成功析出之后，将当前实例从targetStack中弹出，保证父子对象的两个watcher实例初始化时不会出现target冲突 let value; pushTarget(this); try { value = parsePath(this.data, this.expression); } finally { popTarget(); } return value; } // 当收到数据变化的消息时执行该方法，从而调用cb update() { const value = this.get(); // 基本类型，新旧值不相等才会执行更新与回调；复杂类型，触发update时必定更新，vue2特性，因此oldValue与newValue也总是相等 if (value !== this.value || typeof value === \\\"object\\\") { const oldValue = this.value; this.value = value; // 对存储的数据进行更新 this.cb.call(this.data, this.value, oldValue); // 调用回调函数，对标Vue2-watch的handler函数 } } } function parsePath(obj, expression) { const segments = expression.split(\\\".\\\"); for (let key of segments) { if (!obj) return; obj = obj[key]; } return obj; } \"]},\"617\":{\"h\":\"observer.js\",\"t\":[\"// observer.js 观察者类 // 数据变量的观察者类 // 作用1：为闭包变量创建实例对象，只要递归结构中存在复杂类型就一定会创建新的实例对象 // 作用2：在实例上声明一个响应式变化的 __ob__ 对象，现阶段暂时用不上 // 作用3：遍历实例的全部key值并开启响应式数据劫持 import { def } from \\\"./util.js\\\"; import defineReactive from \\\"./defineReactive.js\\\"; import observe from \\\"./observe\\\"; import { arrayMethods } from \\\"./array.js\\\"; import Dep from \\\"./dep.js\\\"; export default class Observer { constructor(value) { // 改动 // 为了确保复杂对象可以被正确侦听，需要给对象的 __ob__ 绑定dep实例 this.dep = new Dep(); // 给需要开启监听的对象声明绑定一个初始化的Observer类，key值为__ob__，且不可被枚举 def(value, \\\"__ob__\\\", this, false); if (Array.isArray(value)) { // 1.如果是数组，将这个数组的原型指向重写后的arrayMethods // `Object.setPrototypeOf`：将第一个参数的原型对象指向到第二个参数 Object.setPrototypeOf(value, arrayMethods); // 2.让数组实现响应式 this.observeArray(value); } else { // 遍历value的key，对每一个属性都开启监听 this.walk(value); } } // 遍历 walk(value) { for (let key in value) { defineReactive(value, key); } } // 数组的特殊遍历 observeArray(arr) { for (let i = 0, l = arr.length; i < l; i++) { // 逐项observe observe(arr[i]); } } } \"]},\"618\":{\"h\":\"observe.js\",\"t\":[\"// 值类型监听判断函数，也是对象观察者模式初始化执行或后续值改变时触发的函数 // 作用1：为复杂数据类型，且没有初始化过Observer实例对象的变量，作new Observer操作 // 作用2：作为defineReactive响应式数据劫持函数的递归操作入口函数，实现多层级复杂类型的递归响应式数据劫持 import Observer from \\\"./observer.js\\\"; export default function observe(value) { // 基本类型不再往下执行，递归的跳出条件 if (typeof value !== \\\"object\\\") return; var ob; if (typeof value.__ob__ !== \\\"undefined\\\") { // 当对象的 __ob__ 不为 undefined 时，说明value已经初始化创建过Observer实例了，此时不再执行new Observer，__ob__是响应式的 ob = value.__ob__; } else { // 对象不存在 __ob__ 属性时，new Observer实例对象并初始化value值 ob = new Observer(value); } return ob; } \",\"不过，watch 选项的 deep 深度监听暂时还未实现，这部分放到 computed 与 watch 源码分析里说。\"]},\"619\":{\"h\":\"太长不看-总结\"},\"620\":{\"h\":\"响应式数据声明\",\"t\":[\"Vue2 的响应式原理由数据劫持系统和订阅-发布系统组成，主要实现类是 Observer，最终实现效果是将 data 返回值对象注册为渲染 watcher(render-watcher)\",\"数据劫持系统的核心是Object.defineProperty()，利用闭包变量与 getter/setter 实现变量的响应式处理，此处暂定为响应式声明函数defineReactive\",\"数据劫持系统的具现化体现在 Observer 类上，在 data 的响应式对象初始化时，先“观察”对象 data（observe），通过对象递归逐层实例化 Observer 类，对每个属性都实现Object.defineProperty()数据劫持\",\"Object.defineProperty()只能生效于普通对象，数组内部的数据变化无法正确生效，Vue2 对数组的处理是重写了数组原型上的 7 种方法：push、pop、shift、unshift、splice、sort、reverse，在不影响这 7 中方法的原方法执行的状况下，开启响应式数据声明defineReactive\"]},\"621\":{\"h\":\"订阅-发布系统\",\"t\":[\"订阅-发布系统的核心是依赖收集与依赖更新，借助数据劫持的响应式处理来实现目标变量的依赖收集与依赖更新，主要使用者是 computed(computed-watcher) 和 watch(user-watcher)\",\"订阅-发布系统的具现化体现在 Dep 类和 Watcher 类上。(1)Dep 既是响应式数据的订阅者也是数据更新的发布者，有依赖收集（实际上算是监听收集）方法和通知更新（通知监听更新依赖）方法；(2)Watcher 是出于数据外部的监听器，有依赖获取方法和依赖更新方法；(3)Watcher 实例储存在 Dep 实例中，借由 Dep 发布数据变化的操作，实现精准的数据的实时侦听、数据更新与回调函数执行\",\"Dep 的执行原理是，在 data 的响应式对象初始化时，对象逐层递归实例化 Observer 类的同时，为每个 Observer 实例创建层层嵌套的 Dep 实例，并且在遍历对象内部属性创建响应式数据时，在响应式声明函数defineReactive中也为每个闭包函数创建一个 Dep 实例\",\"Watcher 执行依赖收集的原理是，存在对响应式数据的监听需求时（如 computed、watch 等配置项属性），初始化实例并传入目标数据的值、对象目标路径（如 a.b.m.n）和回调函数，最后获取目标值储存到 Watcher 实例中。由于获取的时候触发了 getter，因此调用 Dep 实例的依赖收集方法，将当前出于活性化的 Watcher 类储存在 Dep 实例中\",\"Watcher 执行依赖更新的原理是，数据变化时触发了 setter，此时调用 Dep 实例的通知更新方法，遍历当前 Dep 实例内部储存的 Watcher 实例，依次调用 Watcher 实例的依赖更新方法，更新数据并执行回调；对于数组方法，则是在触发 7 种方法时，执行数组对象的 Observer 实例内 Dep 实例的通知更新方法来执行\",\"Dep 储存 Watcher 的联动处理依靠全局唯一变量 Window.target（在 Vue2 源码中是 Dep 类的静态属性 Dep.target），由于 JS 单线程的特性，程序中同时只会有一个 Watcher 实例在运行，将 Watcher 实例赋给 Dep.target 后再执行 Dep 的依赖收集储存 Dep.target，最后清空 Dep.target，确保对应目标对象的 Dep 实例可以正确存储目标对象的 Watcher 实例\",\"为了确保defineReactive和数组重写方法中可以正确调用对应的目标对象，Vue2 特意为每个 Observer 类创建一个 __ob__属性，指向 Observer 当前实例对象，以保证在其他闭包函数中对实例的正确引用\",\"可运行项目 demo 详见：\",\"https://github.com/mi-saka10032/vue2-reactive-sourceCode/tree/master/reactive\"]},\"622\":{\"h\":\"watch源码解析\"},\"623\":{\"h\":\"前言\",\"t\":[\"在深入响应式原理中，我们已经了解了 Observer、Dep、Watcher 之间的关系，最后实现了数据的响应式变化与监听回调，也就是实现了 API 中 data 的响应式数据效果，而且从 Watcher 的源码不难看出，Watcher 类的定义很接近于 API 中 watch 的效果，因此本章对 watch 的源码进行解析，进一步加深对三大依赖收集器：data(render-watcher)、computed(computed-watcher)、watch(user-watcher)中 watch 的理解。\",\"在初始化 initState 方法中，如果用户传入的配置有 watch，调用 initWatch 方法。\"]},\"624\":{\"h\":\"initWatch.js\",\"t\":[\"function initWatch(vm: Component, watch: Object) { for (const key in watch) { const handler = watch[key]; // 监听的是数组 if (Array.isArray(handler)) { for (let i = 0; i < handler.length; i++) { // 为数组中每个元素创建watcher createWatcher(vm, key, handler[i]); } } else { createWatcher(vm, key, handler); } } } \"]},\"625\":{\"h\":\"createWatcher.js\",\"t\":[\"接下来监听器创建函数，该函数主要针对 handler 的类型做判断（handler 可以是函数类型，也可以是对象类型，也就是 watch 的简写和完整写法），最后返回实例原型的$watch方法调用\",\"$watch 中创建独属于 watch 的 user-watch 标识符，new 了一个 watcher 实例对象，关键参数有二，options.user 和 options.immediate \",\"options.user，该参数传入 watcher 中实例化时，在 watcher 实例执行依赖更新时，判断出是属于 watch 的监听器，才会执行 cb 回调函数\",\"options.immediate，该参数会在 watcher 实例化之后进行一次判断，如果为 true，则自行执行一次 watcher 的回调函数（函数带错误捕获以防止错误的回调执行）\",\"// createWatcher.js /** * Strict object type check. Only returns true * for plain JavaScript objects. */ function isPlainObject(obj: any): boolean { return Object.prototype.toString.call(obj) === \\\"[object Object]\\\"; } function createWatcher( vm: Component, expOrFn: string | Function, handler: any, options?: Object ) { // 如果是对象（配置项形式），handler取对象中的handler函数 if (isPlainObject(handler)) { options = handler; // 如果是: test:{handler(old,new){}} handler = handler.handler; } // 监听a.b.c（很少使用） if (typeof handler === \\\"string\\\") { handler = vm[handler]; } // 返回实例的原型方法 $watch 的返回值，handler对应cb回调函数，options在handler为对象时取出并赋值(deep immediate sync等) return vm.$watch(expOrFn, handler, options); } // 原型方法$watch Vue.prototype.$watch = function ( expOrFn: string | Function, cb: any, options?: Object ): Function { const vm: Component = this; // 回调如果是对象，调用createWatcher解构 if (isPlainObject(cb)) { return createWatcher(vm, expOrFn, cb, options); } options = options || {}; // 标识这个是用户 user-watch options.user = true; // 同样，创建内部watcher const watcher = new Watcher(vm, expOrFn, cb, options); // **立即监听** if (options.immediate) { const info = `callback for immediate watcher \\\"${watcher.expression}\\\"`; pushTarget(); // 自执行错误捕获函数 invokeWithErrorHandling(cb, vm, [watcher.value], vm, info); popTarget(); } return function unwatchFn() { watcher.teardown(); }; }; \"]},\"626\":{\"h\":\"watcher.js\",\"t\":[\"Watcher 类有一处特别需要注意的地方，就是 Vue2 的 watch API 中 watch 配置项，其中的 deep 属性将允许开启深度监听，每当调用 get 函数时都需要判断this.deep\",\"this.deep为 true 时，需要对 value 值递归式查找其内部嵌套的全部 __ob__ 属性，以触发 get 进行依赖收集\",\"// watcher.js import traverse from './deep.js' var id = 0; // 属性路径解析，通过'a.b.m.n'的字符串解析出对象内部的属性值 function parsePath(path) { path = path.split('.') return function (obj) { path.forEach((key) => { obj = obj[key] }) return obj } } export default class Watcher { // 四个参数分别是组件实例、属性路径、回调函数、配置项信息 constructor(vm, expOrFn , cb,options) { this.vm = vm this.expOrFn = expOrFn //监听的属性 如：a.b.c this.cb = cb // watch 回调 if (options) { this.user = !!options.user //这是个 watch this.deep = !!options.deep //深度监听 } this.deps = []; this.set = {} this.id = id++ if (typeof expOrFn === 'function') { // 如果expOrFn是函数，说明是watch的函数简写，直接将函数绑定给getters this.getters = expOrFn } else { //访问监听的变量 如：a.b.c.d，解析后返回value值获取函数 this.getters = parsePath(this.expOrFn) } //留住 value 调用一次get this.value = this.get(); } get() { //标记target，Dep.target入栈 pushTarget(this) //访问监听的属性 let value = this.getters.call(this.vm, this.vm); // deep开启深度监听，与其他普通watcher最特别的地方 if (this.deep) { traverse(value) } //弹出target防止data上每个属性都产生依赖，只有页面上使用的变量需要依赖，Dep.target出栈 popTarget() return value } run() { let newValue = this.get() //取出旧值 const oldValue = this.value //留住新值 this.value = newValue //用户自己传入的watch，user-watcher标识符，只有watch的配置项才会声明this.user=true if (this.user) { //这里的 cb 就是传入的 watch 回调函数 this.cb.call(this.vm, newValue, oldValue) } } addDep(dep) { let id = dep.id //去重防止dep添加watch多次 if (!this.set[id]) { //watcher添加dep this.deps.push(dep) //给dep添加watch dep.addSub(this) this.set[id] = true; } } upDate() { this.run() } // 从所有依赖项的订阅者列表中删除自身 teardown() { if (this.active) { // vm实例的watch列表中移除，这是一个开销较大的操作，所以如果vm实例正在被销毁，就跳过 if (!this.vm._isBeingDestroyed) { remove(this.vm._watchers, this) } let i = this.deps.length while (i--) { this.deps[i].removeSub(this) } this.active = false } } \"]},\"627\":{\"h\":\"deep.js\",\"t\":[\"watch 配置项中存在 deep 属性，当 deep 为 true 时可以开启深度监听，上面的 Watcher 类中在 deep 为 true 时调用 traverse 函数\",\"实际上 deep 的实现原理就是递归的触发数组或对象的 get 进行依赖收集，又因为 __ob__ 属性仅有数组和对象才有（详见递归侦测对象属性），因此在这里需要声明一个递归式手动依赖管理函数，将它们的依赖收集到 Observer 类的 dep 中完成 deep 深度监听\",\"// deep.js const seenObjects = new Set(); // 不重复添加 export default function traverse(val) { _traverse(val, seenObjects); seenObjects.clear(); } function _traverse(val, seen) { let i, keys; const isA = Array.isArray(val); // val是否是数组 const isO = typeof val === \\\"object\\\"; // val是否是对象 const isF = Object.isFrozen(val); // val是否是冻结对象 // 如果不是array和object，或者是已经冻结对象（源码上还判断了VNode对象，此处暂时忽略不计） if ((!isA && !isO) || isF) { return; // 再见 } if (val.__ob__) { // 只有object和array才有__ob__属性 const depId = val.__ob__.dep.id; // 手动依赖收集器的id if (seen.has(depId)) { // 已经有收集过 return; // 再见 } seen.add(depId); // 没有被收集，添加 } if (isA) { // 是array i = val.length; while (i--) { _traverse(val[i], seen); // 递归触发每一项的get进行依赖收集 } } else { // 是object keys = Object.keys(val); i = keys.length; while (i--) { _traverse(val[keys[i]], seen); // 递归触发子属性的get进行依赖收集 } } } \"]},\"628\":{\"h\":\"太长不看-总结\",\"t\":[\"watch 是三种 watcher 之一的 user-watcher，结合 watch 的配置项来理解：\",\"watch 在 vue 实例初始化时，调用一个initWatch初始化 watch 的函数，遍历 watch 中的属性，遍历过程中会执行以下步骤 \",\"循环遍历调用createWatcher函数，传入（当前组件 vm 实例、watch 属性名、watch 属性值）\",\"在createWatcher函数内对 watch 属性值 handler 进行类型判断，有两种情况：普通 handler 函数或者包含 immediate、deep、handler 函数在内的对象（此处不涉及异步处理，暂不写 sync 属性）\",\"最后调用组件 vm 的原型方法$watch方法，传入（watch 属性名、watch 属性值 handler、handler 中的其他配置选项）\",\"在 Vue 的原型方法$watch，是实现 user-watcher 的关键方法，初始化 Watcher 实例并传入 user 标识符表示该 watcher 实例属于 user-watcher\",\"$watch方法最后判断配置选项中的 immediate 是否为 true，如果为true，则自动执行一次 watcher 入栈 -> 自执行函数调用与错误捕获函数（防止 handler 函数中出现异常） -> watcher 出栈操作，以实现 handler 函数的立即执行效果\",\"在 Watcher 类中，新增两项配置，deep 和 user，user 为 true 表示是 watch 创建的 user-watcher 实例 \",\"当 watcher 实例受 dep 通知，更新依赖值时，只有this.user为 true 才会执行 handler 的回调函数\",\"每次 watcher 实例调用 getter 时，都会对this.deep进行判断，如果为 true 则表示开启深度监听\",\"开启深度监听后，watcher 实例会对当前的 value 值进行地毯式循环+递归查询，逐项触发 getter 执行 dep 的依赖收集，添加当前 watcher 实例。所以当复杂对象内部属性变化时，开启深度监听亦可触发 watch 的 handler 回调\",\"可运行项目 demo 详见：\",\"https://github.com/mi-saka10032/vue2-reactive-sourceCode/tree/master/computed\"]},\"629\":{\"h\":\"computed源码解析\"},\"630\":{\"h\":\"前言\",\"t\":[\"computed 是三大 watcher 中最复杂的一个 watcher(computed-watcher)，因为它不光是惰性缓存，而且只要是在 getter 中有出现过的响应式数据，都需要触发它的响应式变化\",\"首先，根据computed 惰性取值的原理，我们先构建一个配置项，设置惰性的布尔值为 true\",\"const computedWatcherOptions = { lazy: true }\"]},\"631\":{\"h\":\"initComputed.js\",\"t\":[\"接下来，初始化 computed 中的配置项\",\"// 初始化computed import defineComputed from \\\"./defineComputed.js\\\"; import Watcher from \\\"../reactive/watcher.js\\\"; /** * Perform no operation. * Stubbing args to make Flow happy without leaving useless transpiled code * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/). */ function noop(a, b, c) {} const computedWatcherOptions = { lazy: true }; // vm为组件实例，computed为组件中的 computed 配置项 function initComputed(vm: Component, computed: Object) { // 初始化一个 _computedWatchers 属性绑定在组件实例上，用来存储每个计算属性的 watcher 实例 const watchers = (vm._computedWatchers = Object.create(null)); // 是否服务端渲染，在当前场景中，isSSR默认永久为false const isSSR = isServerRendering(); //遍历 computed 配置项 for (const key in computed) { const userDef = computed[key]; // 如果是函数，则该函数默认是getter；不是函数说明是一个对象，则获取对象上面的get函数 const getter = typeof userDef === \\\"function\\\" ? userDef : userDef.get; // 非服务端渲染，当前场景必定为true if (!isSSR) { // 为计算属性创建内部watcher，保存到 watchers 中 // computed实际上就是通过 watcher 实现的，第四个参数是关键 { lazy: true } watchers[key] = new Watcher( vm, getter || noop, noop, computedWatcherOptions ); } // key不能直接绑定在vm实例上，需要通过响应式数据声明 if (!(key in vm)) { defineComputed(vm, key, userDef); } } } \"]},\"632\":{\"h\":\"watcher.js\",\"t\":[\"在初始化最后，vm._computedWatchers 需要根据 computed 对象中的 key-value 实例化 Watcher，vm 也需要根据不同的 key-value 声明响应式数据，因此需要创建一个defineComputed函数，并优化重构响应式原理中的 Watcher 类\",\"Watcher 类中对 computed 重要的属性在于 dirty（脏值），只有 watcher 实例初始化或调用 update 更新依赖值的时候，dirty 为 true\",\"watcher 实例调用 evaluate 方法，即封装后的 get 方法，调用一次响应式 get，随后 dirty 为 false\",\"defineComputed 函数实现目标是为组件实例绑定 set 函数和封装后的 get 函数，当且仅当组件实例上绑定的 watcher 实例的 dirty 为 true 时才调用 get 方法，否则直接返回 watcher.value，跳过 get 方法执行\",\"// watcher.js import { pushTarget, popTarget } from \\\"./dep.js\\\"; let uid = 0; export default class Watcher { constructor(data, expression, cb, options) { // data: 数据对象，如obj // expression：表达式，如b.c，根据data和expression就可以获取watcher依赖的数据 // cb：依赖变化时触发的回调 this.id = uid++; this.data = data; this.expression = expression; this.cb = cb; if (options) { this.lazy = !!options.lazy; // this.lazy=true 默认不执行 这是一个 computed } this.dirty = this.lazy; // computed 看是否需要重新取值 if (typeof expression === \\\"function\\\") { this.getters = expression; } // 初始化watcher实例时订阅数据 // lazy 留住value this.value = this.lazy ? undefined : this.get(); } get() { // 1.新增watcher目标target的push和pop步骤 // 2.因为js为单线程执行，因此同一时刻仅有一个watcher实例执行，Dep.target必定是当前正处于实例化过程中的watcher // 3.等待value值成功析出之后，将当前实例从targetStack中弹出，保证父子对象的两个watcher实例初始化时不会出现target冲突 let value; pushTarget(this); try { value = this.getters.call(this.data, this.data); } finally { popTarget(); } return value; } update() { // 修改属性计算属性依赖的变量重置 dirty，说明value已被修改，外部判断dirty为true会调用evaluate执行一次get()，最后将dirty置为false if (this.lazy) { this.dirty = true; } } evaluate() { //当走到这里时，页面正在渲染中 Dep.target, 已经有一个渲染 watcher 了 this.value = this.get(); // 修改了计算属性里面脏值，直到下次value改变之前，evaluate不会再次调用 this.dirty = false; } } \"]},\"633\":{\"h\":\"defineComputed.js\",\"t\":[\"// defineComputed function noop(a, b, c) {} const sharedPropertyDefinition = { enumerable: true, configurable: true, get: noop, set: noop, }; export default function defineComputed( target: any, key: string, userDef: Object | Function ) { // 非服务端环境才有缓存效果，当前场景必定为true const shouldCache = !isServerRendering(); // 传入的是方法，computed传统写法 if (typeof userDef === \\\"function\\\") { // 此处默认为true，调用 createComputedGetter 方法，createGetterInvoker 仅作了解 sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef); // 传入方法，set为空函数 sharedPropertyDefinition.set = noop; } else { // 传入的是get()和set() // 不是服务端渲染，调用createComputedGetter // 注意，如果computed中某个key不需要缓存，可将cache设置为false // 在当前场景中，userDef中仅传入get()和set()，shouldCache 为 true，cache 为 undefined，因此调用 createComputedGetter 方法创建getter sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop; // 传入set方法绑定 sharedPropertyDefinition.set = userDef.set || noop; } // 代理到vm实例上 Object.defineProperty(target, key, sharedPropertyDefinition); } // 创建computed的getter方法 function createComputedGetter(key) { // 模板上访问计算属性 return function computedGetter() { // 取出创建的 computedWatchers，此处为与key值匹配的watcher实例，在 initComputed 时创建 const watcher = this._computedWatchers && this._computedWatchers[key]; if (watcher) { if (watcher.dirty) { // 如果依赖的数据发生了变化，通过调用watcher的update函数，吧dirty的值变为true，需要重新计算值 watcher.evaluate(); } //计算好的参数返回给用户 return watcher.value; } }; } \"]},\"634\":{\"h\":\"仍未解决的问题-多重嵌套 watcher\",\"t\":[\"经过上面的initComputed、watcher、defineComputed的实现，实际上现在已经能实现 data 数据与 computed 数据的相互依赖，data 数据的变化可以引起 computed 属性重新计算并在 data 数据未发生变化时 computed 数据默认取缓存\",\"但是，笔者在这里发现了一个坑，那就是沿用上面的代码在 demo 中运行，当 computed 属性 A 依赖 computed 属性 B 时，会出现的一个问题：\",\"// entry.js // 将上述代码复制到项目中运行，可以发现问题 import observe from \\\"./reactive/observe.js\\\"; import initComputed from \\\"./computed/initComputed.js\\\"; let visitCount = 0; const vm = { data: { a: { m: { n: 5, }, x: 20, }, b: 10, c: [1, 2, 3, 4], d: 20, e: 30, }, computed: { res() { console.log(\\\"访问res申请通过，访问次数\\\", ++visitCount, \\\"次\\\"); const arr = this.data.c.reduce((a, b) => a + b, 0); return this.data.b + arr; }, dbRes: { get() { return this.data.d + this.data.e; }, set(value) { this.data.d = value - this.data.e; }, }, comRes() { return this.res + 1; }, }, }; observe(vm.data); initComputed(vm, vm.computed); vm.data.c = [1, 2, 3, 4, 5]; vm.data.b = 15; console.log(\\\"monitor\\\", vm.res); // 30 console.log(\\\"monitor\\\", vm.comRes); // 31 vm.data.b = 20; console.log(\\\"monitor\\\", vm.res); // 35 console.log(\\\"monitor\\\", vm.comRes); // 31，没有正确响应，应该输出36 \",\"computed嵌套watcher引发的问题\",\"从上面的 demo 可以看出\",\"vm.res的变化仅在第一次初始化的时候引起了vm.comRes的变化，而第二次vm.res变化之后，vm.comRes 就不再变化了。因为 computed-watcher 本身没有自己的 dep 实例，因此其他依赖这个 watcher 实例的 computed-watcher 是无法正确执行依赖收发的\",\"同样在 watch 监听 computed 属性时，如果按照上面的代码执行，因为缺失 dep 实例，watch 也是无非正确监听 computed-watcher 的\",\"在 Vue2 的实际开发中，也存在 computed 属性计算值完全依赖另一个 computed 属性计算值的情况，是怎么解决的呢？\",\"其实，Vue2 真正的源码早已给出了答案，但是笔者在查询了网上很多博客和文档的源码分析，这一段都没有讲清楚，这一段代码就在 createComputedGetter 函数中\",\"// 创建computed的getter方法 function createComputedGetter(key) { // 模板上访问计算属性 return function computedGetter() { // 取出创建的 computedWatchers，此处为与key值匹配的watcher实例，在 initComputed 时创建 const watcher = this._computedWatchers && this._computedWatchers[key]; if (watcher) { if (watcher.dirty) { // 如果依赖的数据发生了变化，通过调用watcher的update函数，吧dirty的值变为true，需要重新计算值 watcher.evaluate(); } // 真正的关键，解决嵌套watcher的真正方案 if (Dep.target) { // 思路转变，在watcher中收集依赖 watcher.depend(); } //计算好的参数返回给用户 return watcher.value; } }; } \",\"// Dep.target栈结构 const targetStack = []; export function pushTarget(_target) { targetStack.push(_target); Dep.target = _target; } export function popTarget() { targetStack.pop(); Dep.target = targetStack[targetStack.length - 1]; } \"]},\"635\":{\"h\":\"嵌套 watcher 解决方案\",\"t\":[\"先暂时不考虑 watcher.depend()的实现，我们以上面的 demo 为例分析一下这么做的原因：\",\"初始化并首次调用 vm.comRes 的 getter 时，调用这个 computedGetter 函数，这时由于 vm.comRes的 watcher 依赖于 vm.res的 watcher，所以在vm.comRes执行 getter 时，vm.res的 getter 也会执行，并且vm.comRes 的 watcher 先入栈 targetStack，vm.res的 watcher 后入栈 targetStack\",\"代码继续执行，vm.res的 watcher 执行完实例的 get 方法后，Dep.target 的栈数组 targetStack 弹出自己的 watcher，栈内还剩下依赖vm.res的 vm.comRes的 watcher 实例，因为 computed-watcher 自身没有 dep 实例用来收发依赖，所以 watcher 实例内部实际上需要创建一个 deps 数组用来存储 deps 实例，但 watcher 实例自身无需创建 dep 实例，思路与响应式原理中 Deps 存储 watcher 实例的this.subs相同.\",\"watcher和dep之间相互耦合，watcher实例中收集关联的dep依赖存储为this.deps，提供dep新增、收集、移除的方法，到真正需要用到dep方法的时候调用dep实例自身的方法；dep实例中收集关联的watcher监听器实例存储为this.subs，提供watcher新增、收集（实际上是让当前的watcher实例去收集调用它的dep实例）、移除的方法，到真正需要用到watcher方法的时候调用watcher实例自身的方法\",\"上述代码继续执行，栈内剩余的vm.comRes的 watcher 实例需要转存vm.res真正需要的vm.data.b和vm.data.c的 dep 实例，因此对 Watcher 和 Dep 的调整如下\",\"var uid = 0; export default class Dep { static target = null; constructor() { this.id = uid++; // 存储订阅者数组 subscribes // 数组里实际存放的是 Watcher 的实例对象 this.subs = []; } // 添加watcher依赖到指定的dep实例，当且仅当全局的Dep.target绑定了watcher实例时才会push进去 depend() { if (Dep.target) { // !改动! // 不再由实例调用方法添加依赖 // this.addSub(Dep.target); Dep.target.addDep(this); } } // 通知更新 notify() { // 浅拷贝 const subs = [...this.subs]; // 遍历执行watcher实例的update方法更新value subs.forEach((s) => s.update()); } addSub(sub) { this.subs.push(sub); } // 借此完善订阅者定向清除方法 removeSub(sub) { remove(this.subs, sub); } } function remove(arr, item) { if (arr.length) { const index = arr.indexOf(item); if (index > -1) { return arr.splice(index, 1); } } } const targetStack = []; export function pushTarget(_target) { targetStack.push(Dep.target); Dep.target = _target; } export function popTarget() { Dep.target = targetStack.pop(); } \",\"// watcher.js import { pushTarget, popTarget } from \\\"./dep.js\\\"; let uid = 0; export default class Watcher { constructor(data, expression, cb, options) { // data: 数据对象，如obj // expression：表达式，如b.c，根据data和expression就可以获取watcher依赖的数据 // cb：依赖变化时触发的回调 this.id = uid++; this.data = data; this.expression = expression; this.cb = cb; if (options) { this.lazy = !!options.lazy; // this.lazy=true 默认不执行 这是一个 computed } this.dirty = this.lazy; // computed 看是否需要重新取值 // dep依赖实例数组结构、新增的dep数组 this.deps = []; this.newDeps = []; // depId去重set结构、新增的depId去重set结构，防止引入重复dep this.depIds = new Set(); this.newDepIds = new Set(); if (typeof expression === \\\"function\\\") { this.getters = expression; } // 初始化watcher实例时订阅数据 // lazy 留住value this.value = this.lazy ? undefined : this.get(); } get() { // 1.新增watcher目标target的push和pop步骤 // 2.因为js为单线程执行，因此同一时刻仅有一个watcher实例执行，Dep.target必定是当前正处于实例化过程中的watcher // 3.等待value值成功析出之后，将当前实例从targetStack中弹出，保证父子对象的两个watcher实例初始化时不会出现target冲突 let value; pushTarget(this); try { // getter标记，此时触发dep.depend，Dep.target.addDep(this)开始收集依赖，实际上还是在watcher实例中执行收集 value = this.getters.call(this.data, this.data); } finally { popTarget(); // 上方已经重新执行过一次dep收集，此时存储在newDeps和newDepIds中的数据进行无用id判断后真正落实到deps和depIds中 this.cleanupDeps(); } return value; } update() { // 修改属性计算属性依赖的变量重置 dirty，说明value已被修改，外部判断dirty为true会调用evaluate执行一次get()，最后将dirty置为false if (this.lazy) { this.dirty = true; } } evaluate() { //当走到这里时，页面正在渲染中 Dep.target, 已经有一个渲染 watcher 了 this.value = this.get(); // 修改了计算属性里面脏值，直到下次value改变之前，evaluate不会再次调用 this.dirty = false; } // 增加关联的dep依赖实例到当前监听器watcher实例中 addDep(dep) { const id = dep.id; if (!this.newDepIds.has(id)) { // 当前新增的dep实例中没有当前dep.id，则加入这个dep实例，避免重复引入 this.newDepIds.add(id); this.newDeps.push(dep); // 此处使用了十分巧妙的class耦合，看似无关 // 实际上在这里判断出当前dep.id不存在于已有depsId结构中时 // 转而将参数中的dep实例取出，反过来调用dep.addSub实例方法 // 保证dep实例中成功加入当前watcher实例，以后的setter更新 // 必定调用dep.notify通知到当前watcher实例引发更新 if (!this.depIds.has(id)) { dep.addSub(this); } } } // 在watcher实例中开启依赖收集，数量繁多的dep依赖实例与数量稀少的订阅者watcher实例 // 相互之间构成你中有我，我中有你的关系 depend() { let i = this.deps.length; while (i--) { this.deps[i].depend(); } } // 每次执行完依赖更新后 // 多余的dep实例，调用dep.removeSub移除调当前watcher // 新增deps实例的方法后清空用于新增的数据结构 cleanupDeps() { let i = this.deps.length; while (i--) { const dep = this.deps[i]; if (!this.newDepIds.has(dep.id)) { dep.removeSub(this); } } // 1. exchange depIds <--> newDepIds; 2. clear newDepIds let tmp = this.depIds; this.depIds = this.newDepIds; this.newDepIds = tmp; this.newDepIds.clear(); // 1. exchange deps <--> newDeps; 2. clear newDeps tmp = this.deps; this.deps = this.newDeps; this.newDeps = tmp; this.newDeps.length = 0; } } \",\"现在，依赖 computed 属性的 computed 属性值也可以正确响应了\",\"import observe from \\\"./reactive/observe.js\\\"; import initComputed from \\\"./computed/initComputed.js\\\"; let visitCount = 0; const vm = { data: { a: { m: { n: 5, }, x: 20, }, b: 10, c: [1, 2, 3, 4], d: 20, e: 30, }, computed: { res() { console.log(\\\"访问res申请通过，访问次数\\\", ++visitCount, \\\"次\\\"); const arr = this.data.c.reduce((a, b) => a + b, 0); return this.data.b + arr; }, dbRes: { get() { return this.data.d + this.data.e; }, set(value) { this.data.d = value - this.data.e; }, }, comRes() { return this.res + 1; }, }, }; observe(vm.data); initComputed(vm, vm.computed); vm.data.c = [1, 2, 3, 4, 5]; vm.data.b = 15; console.log(\\\"monitor\\\", vm.res); console.log(\\\"monitor\\\", vm.comRes); vm.data.b = 20; console.log(\\\"monitor\\\", vm.res); console.log(\\\"monitor\\\", vm.comRes); \",\"computed实现watcher与dep双向依赖\"]},\"636\":{\"h\":\"太长不看-总结\",\"t\":[\"computed 是三种 watcher 之一的 computed-watcher，也是最复杂的 watcher，结合 computed 的配置项来理解：\",\"computed 在 vue 实例初始化时，调用一个initComputed初始化 computed 的函数，遍历 computed 中的属性，遍历过程中会执行以下步骤 \",\"对其 value 进行类型判断，有两种情况：普通 getter 函数类型或者 getter 与 setter 函数混合的对象类型\",\"在initComputed做类型兼容性判断，并且在当前组件上新建一个 _computedWatchers 对象，开启 computed 属性的监听器\",\"初始化 watcher 时，会传入 getter 方法，与一个{ lazy: true }的值，表示这个 watcher 是惰性取值的\",\"遍历的最后，为当前 computed 属性创建真正的 computed 对象，调用defineComputed函数，传入（当前组件实例、computed 属性名、computed 属性值）\",\"在defineComputed函数中，computed 属性值中的 getter 函数会进行一次函数柯里化，返回一个经过封装的高阶 getter 方法 \",\"该高阶 getter 函数中，从 this 中取出之前已创建好的 this._computedWatchers[key] 对象，其实就是对应的 watcher 实例\",\"每次 getter 的调用，会先判断 watcher 实例的值是否更新（此处记为 dirty，true 表示已更新且未调用 getter，false 表示调用过 getter 无需更新）\",\"如果 watcher 实例更新，则调用 watcher 的 getter 方法获取依赖值，并执行依赖收集\",\"非常重要！！因为 computed-watcher 本身并不具备依赖收集器 dep，为了保证 computed-A 依赖于 computed-B，B 数据变化时 A 能够正确收到更新通知也发生变化，亦或是 user-watcher 能够正确监听到 computed 属性变化，此时需要判断当前处于活化状态的 Dep.target，表明是与当前 watcher 实例密切关联的 watcher 实例，然后手动开启依赖收集watcher.depend()\",\"因为当前函数内仅有 watcher 实例，因此 dep 实例也需要存储在 watcher 实例中，在 watcher 实例中完成依赖的 depend、add、remove 等操作，虽然增加了 Dep 和 Watcher 之间的耦合度，但是解决了嵌套依赖不能正确响应的问题\",\"在将当前 computed 相关的所有 watcher 实例通知相关的 dep 实例收集完成之后，this.value = 依赖值，最后 dirty 置为 false\",\"如果 watcher 实例无需更新，则直接返回 watcher.value，即依赖对象原有的 getter 的值。因为 watcher 实例只要不去更新，this.value就稳定不变，因此 computed 在依赖值不更新时，默认直接返回实例的 value 值，而不是去调用 getter 方法获取，此为惰性取值\",\"defineComputed函数最后，将高阶 getter 方法、可能存在的 setter 方法，一并通过 Object.defineProperty 声明在当前组件实例的 computed 属性名上（vm[key]）\",\"computed 依然是通过 Dep 和 Watcher 收集和更新依赖，不过与普通的 render-watcher 不同之处在于，getter 内部存在 watcher 实例更新判断，如果无需更新则直接返回实例的 value 值，不再调用 watcher 本身的 getter 获取依赖值，实现了数据缓存\",\"可运行项目 demo 详见：\",\"https://github.com/mi-saka10032/vue2-reactive-sourceCode/tree/master/watch\"]},\"637\":{\"h\":\"模板引擎\",\"t\":[\"本章节不是对 Vue 源码的解读，而是对模板引擎的鼻祖 mustache 库的源码解读。熟悉了模板引擎的真正运作机制之后，对 Vue 的模板渲染方法才能有更深刻的认知\"]},\"638\":{\"h\":\"模板引擎历史\",\"t\":[\"模板引擎的出现是为了更优雅地将数据转化为视图\",\"历史上曾经出现的数据转视图的方法\",\"纯 DOM 法：非常笨拙，没有实战价值\",\"数组 join 法：曾经非常流行\",\"ES6 的反引号法：ES6 新增语法糖\",\"模板引擎：解决数据变为视图的最优雅的方法\",\"现在以 mustache 为例讲解模板引擎的使用和源码实现\"]},\"639\":{\"h\":\"mustache 基本使用\",\"t\":[\"mustache 是“胡子”的意思，因为它的嵌入标记{{ }}非常像胡子\",\"{{ }}的语法也被 Vue 沿用，这就是我们学习 mustache 的原因\",\"mustache 是最早的模板引擎库，比 Vue 诞生更早，它的底层实现机理在当时是非常有创造性、轰动性的，为后续模板引擎的发展提供了崭新思路\",\"注意，mustache 的 {{ }} 内是不能像 vue 里那样写表达式\",\"使用 mustache 需要引入 mustache 库，可以直接通过 cdn 方式引入\",\"然后通过 Mustache.render(templateStr, data) 方式生成 dom 模板\"]},\"640\":{\"h\":\"循环模式\",\"t\":[\"import Mustache from \\\"mustache/mustache.mjs\\\"; const templateStr = ` <ul> {{#arr}} <li> <div class=\\\"hd\\\">{{name}}的基本信息</div> <div class=\\\"bd\\\"> <p>姓名：{{name}}</p> <p>性别：{{sex}}</p> <p>年龄：{{age}}</p> </div> </li> {{/arr}} </ul> `; const data = { arr: [ { name: \\\"小明\\\", age: 12, sex: \\\"男\\\" }, { name: \\\"小红\\\", age: 13, sex: \\\"女\\\" }, { name: \\\"小强\\\", age: 14, sex: \\\"男\\\" }, ], }; const res = Mustache.render(templateStr, data); console.log(res); \",\"mustache使用\"]},\"641\":{\"h\":\"数组嵌套\",\"t\":[\"import Mustache from \\\"mustache/mustache.mjs\\\"; const templateStr = ` <ul> {{#arr}} <li> <div class=\\\"hd\\\">{{name}}的基本信息</div> <div class=\\\"bd\\\"> <p>{{name}}的爱好是：</p> <ol> {{#hobbies}} <li>{{.}}</li> {{/hobbies}} </ol> </div> </li> {{/arr}} </ul> `; const data = { arr: [ { name: \\\"小明\\\", age: 12, hobbies: [\\\"游泳\\\"] }, { name: \\\"小红\\\", age: 13, hobbies: [\\\"编程\\\", \\\"写作文\\\", \\\"看报纸\\\"] }, { name: \\\"小强\\\", age: 14, hobbies: [\\\"打台球\\\"] }, ], }; const res = Mustache.render(templateStr, data); console.log(res); const con = document.getElementById(\\\"app\\\"); con.innerHTML = res; \",\"数组嵌套mustache结果\"]},\"642\":{\"h\":\"不循环\",\"t\":[\"mustache不循环\"]},\"643\":{\"h\":\"布尔值\",\"t\":[\"mustache布尔值\"]},\"644\":{\"h\":\"mustache 底层核心机理\",\"t\":[\"在较为简单的示例情况下， 可以用正则表达式实现\",\"<h1>我买了一个{{thing}}，好{{mood}}</h1> \",\"{ \\\"thing\\\": \\\"华为手机\\\", \\\"mood\\\": \\\"开心\\\" } \",\"但是复杂情况下，正则表达式就行不通了\",\"<div> <ul> {{#arr}} <li>{{.}}</li> {{/arr}} </ul> </div> \",\"mustache 模板引擎的作用是将字符串模板变为 dom 模板，最后结合数据挂载到 dom 树上，在页面渲染呈现。这个过程中，mustache 引入了一个名为 tokens 的概念，用来作为“中间人”\",\"mustache核心思想\",\"简而言之， tokens 是模板字符串的 js 嵌套数组表示，说白了就是模板字符串的 js 表示。它是一个数组，里面包含了很多个 token，每个 token 又是基于规则生成的一个数组。\",\"模板解析原理\",\"当模板字符串中有循环存在时，它将被编译为嵌套更深的 tokens\",\"循环tokens\",\"当循环是双重的，那么 tokens 会更深一层\",\"双重tokens\",\"我们可以通过修改 mustache 源码的方式直接在浏览器控制台打印输出 tokens： 在源码中找到 parseTemplate 函数，然后在该函数的函数体末尾处， return 的 nestTokens(squashTokens(tokens)) 其实就是 tokens。 做如下的稍加修改，以便在浏览器中打印查看\",\"const myTokens = nestTokens(squashTokens(tokens)); console.log(myTokens); return myTokens; \",\"例如有这样一个模板字符串\",\"const templateStr = `<div>{{name}}的基本信息</div>`; \",\"则最终打印输出的 tokens 将如下图所示\",\"tokens打印输出效果\"]},\"645\":{\"h\":\"手写实现 mustache\",\"t\":[\"mustache 库底层重点做两个事情：\",\"将模板字符串编译为 tokens 形式\",\"将 tokens 结合数据，解析为 dom 字符串\"]},\"646\":{\"h\":\"实现扫描器类 Scanner\",\"t\":[\"Scanner 类需要实现的功能是：扫描模板字符串，将 {{}} 之外的字符串分割开并返回分割字符串\",\"// scanner.js /** * 扫描器类 */ export default class Scanner { constructor(templateStr) { this.templateStr = templateStr; // position 指针位置 this.pos = 0; // tail 尾巴 初始化时就是模板字符串原文 this.tail = templateStr; } // 内容遍历，没有返回值 scan(tag) { if (this.tail.indexOf(tag) === 0) { // tag有多长，就让指针后移多少位 this.pos += tag.length; this.tail = this.templateStr.substring(this.pos); } } // 指针遍历内容进行扫描，直到遇见指定内容结束，并且能够返回结束之前路过的文字 scanUtil(stopTag) { // 记录执行本方法开始时的pos值 const pos_backup = this.pos; // 尾巴的开头不是stopTag，说明没有扫描到stopTag，pos指针继续右移 while (!this.eos() && this.tail.indexOf(stopTag) !== 0) { // 改变尾巴为从当前指针这个字符开始，到最后的全部字符 this.tail = this.templateStr.substring(++this.pos); } return this.templateStr.substring(pos_backup, this.pos); } // end of string eos() { return this.pos >= this.templateStr.length; } } \"]},\"647\":{\"h\":\"生成 tokens\",\"t\":[\"有了 Scanner 类后，就可以着手去根据传入的模板字符串生成一个 tokens 数组了。最终想要生成的 tokens 里的每一条 token 数组的第一项用 name(数据) 或 text(非数据文本) 或 #(循环开始) 或 /(循环结束) 作为标识符。 新建一个 parseTemplateToTokens.js 文件来实现\",\"// parseTemplateToTokens.js import Scanner from \\\"./scanner.js\\\"; export default function parseTemplateToTokens(templateStr) { let tokens = []; // 实例化一个扫描器，用于扫描模板字符串 const scanner = new Scanner(templateStr); let words; // 遍历寻找开始标记{{与结束标记}} while (!scanner.eos()) { words = scanner.scanUtil(\\\"{{\\\"); // 收集开始标记出现之前的文字 if (words !== \\\"\\\") { tokens.push([\\\"text\\\", words]); } scanner.scan(\\\"{{\\\"); words = scanner.scanUtil(\\\"}}\\\"); /** * 判断从 {{ 和 }} 之间收集到的 word 的开头是不是特殊字符 # 或 /, * 如果是则这个 token 的第一个元素相应的为 # 或 /, 否则为 name */ if (words !== \\\"\\\") { if (words[0] === \\\"#\\\") { tokens.push([\\\"#\\\", words.substring(1)]); } else if (words[0] === \\\"/\\\") { tokens.push([\\\"/\\\", words.substring(1)]); } else { tokens.push([\\\"name\\\", words]); } } scanner.scan(\\\"}}\\\"); } return tokens; } \",\"经过 parseTemplateToTokens 处理之后的 tokens 如下\",\"生成初步tokens\",\"接下来，需要实现 tokens 内部的数组嵌套\"]},\"648\":{\"h\":\"实现 tokens 嵌套\",\"t\":[\"这里我们新建一个 nestTokens.js 文件，定义 nestTokens 函数来做 tokens 嵌套功能，将传入的 tokens 处理成包含嵌套的 nestTokens 数组返回\",\"实现思路：在 nestTokens 中，我们遍历传入的 tokens 的每一个 token，遇到第一项是 # 和 / 的分别做处理，其余的做一个默认处理。大致思路是当遍历到的 token 的第一项为 # 时，就把直至遇到配套的 / 之前，遍历到的每一个 token 都放入一个容器（collector）中，把这个容器放入当前 token 里作为第 3 项（下标 2）元素。\",\"但这里有个问题：在遇到匹配的 / 之前又遇到 # 了怎么办？也就是如何解决循环里面嵌套循环的情况？\",\"解决的思路是新建一个 栈数据类型 的数组（stack），遇到一个 #，就把当前 token 放入这个栈中，让 collector 指向这个 token 的第三个元素。遇到下一个 # 就把新的 token 放入栈中，collector 指向新的 token 的第三个元素。遇到 / 就把栈顶的 token 移出栈，collector 指向移出完后的栈顶 token。这就利用了栈的先进后出的特点，保证了遍历的每个 token 都能放在正确的地方，也就是 collector 都能指向正确的地址。\",\"重要思想：\",\"深层的嵌套结构拉平为栈结构\",\"位于栈顶的数组永远是循环过程中正处于#和/之间的待嵌套包裹的数组，在遇到下一个/结束符之前，其内容都会让收集器推入内部子项\",\"收集器永远都指向栈顶数组的内部子项(下标 2)数组，负责收集嵌套内容。一旦结束嵌套，栈顶数组出栈，收集器指向当前栈顶数组的内部子项(下标 2)数组\",\"// parseTemplateToTokens.js import Scanner from \\\"./scanner.js\\\"; import nestTokens from \\\"./nestTokens.js\\\"; export default function parseTemplateToTokens(templateStr) { // ... return nestTokens(tokens); } \",\"// nestTokens.js export default (tokens) => { const nestTokens = []; const stack = []; let collector = nestTokens; // 一开始让收集器 collector 指向最终返回的数组 nestTokens tokens.forEach((token) => { switch (token[0]) { case \\\"#\\\": stack.push(token); collector.push(token); collector = token[2] = []; // 连等赋值 break; case \\\"/\\\": stack.pop(token); collector = stack.length > 0 ? stack[stack.length - 1][2] : nestTokens; break; default: collector.push(token); break; } }); return nestTokens; }; \"]},\"649\":{\"h\":\"解析 DOM 字符串\",\"t\":[\"通过 Scanner 和嵌套生成函数 parseTemplateToTokens，模板字符串已经成功编译为 tokens，接下来我们需要将 tokens 结合数据解析成 dom 字符串\",\"解析DOM字符串\",\"大致思路是遍历 tokens 数组，根据每条 token 的第一项的值来做不同的处理，为 text 就直接把 token[1] 加入到最终输出的 dom 字符串，为 name 则根据 token[1] 去 data 里获取数据，结合进来。\",\"先声明一个简单的 renderTemplate 函数\",\"// renderTemplate.js export default (tokens, data) => { let domString = \\\"\\\"; tokens.forEach((token) => { switch (token[0]) { case \\\"text\\\": domString += token[1]; break; case \\\"name\\\": // ... break; case \\\"#\\\": // ... break; default: break; } }); return domString; }; \",\"但是！name和#内部的数据结构存在两种复杂情况待处理\"]},\"650\":{\"h\":\"定义 lookup 函数\",\"t\":[\"当 data 里存在多重对象嵌套时，如果需要链式调用对象内部 value，比如 data = { test: { a: { b: 10 } } }，这时如果某个 token 为 [\\\"name\\\", \\\"test.a.b\\\"]，即代表数据的 token 的第 2 项元素是 test.a.b 这样的有多个点符号的值，就需要一个函数来解析其属性路径，获取正确数据\",\"// lookup.js // 思路就是先获取 test.a 的值, 比如说是 temp, 再获取 temp.b 的值, 一步步获取 export default (data, key) => { // 如果传入的 key 里有点符号而且不是仅仅只是点符号 if (key.indexOf(\\\".\\\") !== -1 && key !== \\\".\\\") { const keys = key.split(\\\".\\\"); // 将 key 用 . 分割成一个数组 return keys.reduce((acc, cur) => { return acc[cur]; // 一步步获取 }, data); } // 如果传入的 key 没有点符号，直接返回 return data[key]; }; \"]},\"651\":{\"h\":\"定义 parseArray 函数\",\"t\":[\"另一种情况是数组多重嵌套，也就是当某个 token 的第一项为 \\\"#\\\" 时，要再次递归调用 renderTemplate 函数。这里我们新定义了一个 parseArray 函数来处理。\",\"// parseArray.js import renderTemplate from \\\"./renderTemplate.js\\\"; export default (tokens, data) => { let domString = \\\"\\\"; data.forEach((itemData) => { domString += renderTemplate(tokens, { ...itemData, \\\".\\\": itemData, // 针对简单数组的情况，即模板字符串里的 {{.}} }); }); return domString; }; \",\"最后，完善一开始的 renderTemplate 函数\",\"// renderTemplate.js import lookup from \\\"./lookup.js\\\"; import parseArray from \\\"./parseArray.js\\\"; export default (tokens, data) => { let domString = \\\"\\\"; tokens.forEach((token) => { switch (token[0]) { case \\\"text\\\": domString += token[1]; break; case \\\"name\\\": domString += lookup(data, token[1]); break; case \\\"#\\\": domString += parseArray(token[2], data[token[1]]); break; default: break; } }); return domString; }; \"]},\"652\":{\"h\":\"最终完整源码\"},\"653\":{\"h\":\"index.js\",\"t\":[\"// import './source-code.js' import parseTemplateToTokens from \\\"./parseTemplateToTokens.js\\\"; import renderTemplate from \\\"./renderTemplate.js\\\"; // const templateStr = \\\"我买了一个{{thing}}，好{{mood}}啊\\\"; const templateStr = ` <ul> {{#students}} <li> <div class=\\\"hd\\\">{{name}}的基本信息</div> <div class=\\\"bd\\\"> <p>{{name}}的爱好是：</p> <ol> {{#hobbies}} <li>{{.}}</li> {{/hobbies}} </ol> </div> </li> {{/students}} </ul> `; const data = { students: [ { name: \\\"小明\\\", age: 12, hobbies: [\\\"游泳\\\"] }, { name: \\\"小红\\\", age: 13, hobbies: [\\\"编程\\\", \\\"写作文\\\", \\\"看报纸\\\"] }, { name: \\\"小强\\\", age: 14, hobbies: [\\\"打台球\\\"] }, ], }; // 全局提供SSG_TemplateEngine对象 window.SSG_TemplateEngine = { // 渲染方法 render(templateStr, data) { // 调用parseTemplateToTokens函数，让模板字符串变为tokens数组 const tokens = parseTemplateToTokens(templateStr); // 调用renderTemplate函数，让tokens数组变为dom字符串 document.querySelector(\\\"#app\\\").innerHTML = renderTemplate(tokens, data); }, }; // 调用渲染 SSG_TemplateEngine.render(templateStr, data); \"]},\"654\":{\"h\":\"parseTemplateToTokens.js\",\"t\":[\"import Scanner from \\\"./scanner.js\\\"; import nestTokens from \\\"./nestTokens.js\\\"; export default function parseTemplateToTokens(templateStr) { let tokens = []; // 实例化一个扫描器，用于扫描模板字符串 const scanner = new Scanner(templateStr); let words; // 遍历寻找开始标记{{与结束标记}} while (!scanner.eos()) { words = scanner.scanUtil(\\\"{{\\\"); // 收集开始标记出现之前的文字 if (words !== \\\"\\\") { tokens.push([\\\"text\\\", words]); } scanner.scan(\\\"{{\\\"); words = scanner.scanUtil(\\\"}}\\\"); /** * 判断从 {{ 和 }} 之间收集到的 word 的开头是不是特殊字符 # 或 /, * 如果是则这个 token 的第一个元素相应的为 # 或 /, 否则为 name */ if (words !== \\\"\\\") { if (words[0] === \\\"#\\\") { tokens.push([\\\"#\\\", words.substring(1)]); } else if (words[0] === \\\"/\\\") { tokens.push([\\\"/\\\", words.substring(1)]); } else { tokens.push([\\\"name\\\", words]); } } scanner.scan(\\\"}}\\\"); } return nestTokens(tokens); } \"]},\"655\":{\"h\":\"scanner.js\",\"t\":[\"/** * 扫描器类 */ export default class Scanner { constructor(templateStr) { this.templateStr = templateStr; // position 指针位置 this.pos = 0; // tail 尾巴 初始化时就是模板字符串原文 this.tail = templateStr; } // 内容遍历，没有返回值 scan(tag) { if (this.tail.indexOf(tag) === 0) { // tag有多长，就让指针后移多少位 this.pos += tag.length; this.tail = this.templateStr.substring(this.pos); } } // 指针遍历内容进行扫描，直到遇见指定内容结束，并且能够返回结束之前路过的文字 scanUtil(stopTag) { // 记录执行本方法开始时的pos值 const pos_backup = this.pos; // 尾巴的开头不是stopTag，说明没有扫描到stopTag，pos指针继续右移 while (!this.eos() && this.tail.indexOf(stopTag) !== 0) { // 改变尾巴为从当前指针这个字符开始，到最后的全部字符 this.tail = this.templateStr.substring(++this.pos); } return this.templateStr.substring(pos_backup, this.pos); } // end of string eos() { return this.pos >= this.templateStr.length; } } \"]},\"656\":{\"h\":\"nestTokens.js\",\"t\":[\"/** * 折叠tokens，将#和/之间的tokens整合起来，作为它下标为3的项 */ export default function nestTokens(tokens) { const nestedTokens = []; // 栈结构，存放内部tokens，栈顶（嵌套最里面的）tokens数组中当前操作的tokens小数组 const sections = []; // 收集器，天生指向nestedTokens结果数组，引用类型值，所以指向同一个数组 // 收集器的指向会变化，当遇见#的时候，收集器指向token下标为2的新数组 let collector = nestedTokens; for (let i = 0; i < tokens.length; i++) { const token = tokens[i]; switch (token[0]) { case \\\"#\\\": // 收集器放入token collector.push(token); // 入栈 sections.push(token); // 收集器切换，给token添加下标为2的项并且让收集器指向它 collector = token[2] = []; break; case \\\"/\\\": // 出栈 sections.pop(); // 改变收集器为栈结构队尾（栈顶）那项的下标为2的数组，如果栈顶不存在即长度为0，指回原结果数组 collector = sections.length ? sections[sections.length - 1][2] : nestedTokens; break; default: collector.push(token); } } return nestedTokens; } \"]},\"657\":{\"h\":\"renderTemplate.js\",\"t\":[\"/** * 函数的功能是让tokens数组变为DOM字符串 */ export default function renderTemplate(tokens, data) { let domStr = \\\"\\\"; tokens.forEach((token) => { switch (token[0]) { case \\\"text\\\": domStr += token[1]; break; case \\\"name\\\": // token[1]指的是data对象中的属性，比如data.students，token[1]就是\\\"students\\\" domStr += lookup(data, token[1]); break; case \\\"#\\\": // 因为是 # + / 遍历的数组，所以解析值取token[2]，data[token[1]]是data中数组的属性值 domStr += parseArray(token[2], data[token[1]]); } }); return domStr; } // lookup 对象路径解析函数 //取 test.a 的值, 比如说是 temp, 再获取 temp.b 的值, 一步步获取 function lookup(data, key) { // 如果传入的 key 里有点符号而且不是仅仅只是点符号 if (key.indexOf(\\\".\\\") !== -1 && key !== \\\".\\\") { const keys = key.split(\\\".\\\"); // 将 key 用 . 分割成一个数组 return keys.reduce((acc, cur) => { return acc[cur]; // 一步步获取 }, data); } // 如果传入的 key 没有点符号，直接返回 return data[key]; } // parseArray 数组解析函数 // 遇到数组嵌套的情况，需要递归调用renderTemplate将其内部数组递归殆尽 // 由于mustache在模板中默认将 . 点符号作为数组元素本身，因此，递归时需要将 . 代表的item元素传入 function parseArray(tokens, data) { let domStr = \\\"\\\"; data.forEach((item) => { domStr += renderTemplate(tokens, { ...item, \\\".\\\": item, // 针对简单数组的情况，即模板字符串里的 {{.}} }); }); return domStr; } \"]},\"658\":{\"h\":\"太长不看-总结\",\"t\":[\"Vue 源码中对于 template 模板的插值语法渲染原理，借鉴于 Mustache 模板引擎\",\"Mustache 模板引擎的核心原理是先将模板字符串编译为层次分明的 tokens 数组，再结合 js 数据对象，将 tokens 数组中需要插值的内容插入进去，最终解析为 dom 字符串\",\"tokens 数组的生成依赖扫描器类 Scanner 和 tokens 生成函数\",\"扫描器负责将字符串中的关键字符区分出来，分割成一维数组\",\"tokens 生成函数在数组遍历时，需要借助栈结构的特性，将嵌套的数组不断堆叠在栈顶数组，最后一层一层弹出，按照正确的结构拼接在 tokens 数组中\",\"完整的 tokens 数组生成后，需结合 js 数据对象 data 来插入内容，需要判断内部的解析路径，以及考虑数组的嵌套，合理地使用递归方法，最终生成正确的 DOM 字符串用以渲染页面\",\"mustache流程二览\",\"可运行项目 demo 详见：\",\"https://github.com/mi-saka10032/mustache-demo\"]},\"659\":{\"h\":\"AST抽象语法树\"},\"660\":{\"h\":\"前言\",\"t\":[\"Vue 在编译时会将 Vue 文件中的 template 标签内容通过 模板语法 编译为 AST抽象语法树，再直接转译为 渲染函数(h函数)\",\"语法树渲染过程\",\"渲染函数是 AST 的产物，也是 VNode 的源头\",\"在开始手写 AST 抽象语法树之前，建议先熟悉了解模板引擎的指针思想与栈结构遍历\",\"本章同样也简化了 AST 语法树的源码，仅生成常规闭合标签与内部常规属性的 AST 语法树，了解模板内的插值语法详见模板引擎\"]},\"661\":{\"h\":\"AST 形成\",\"t\":[\"AST 语法树的形成，同样围绕模板字符串的循环遍历，以及标签堆栈和内容堆栈的数据变化进行（为了便于理解此处开辟了双堆栈数组，实际源码可优化压缩至单数组）\",\"循环过程中：\",\"剩余字符串 rest 随指针移动不断缩减长度\",\"首先判断 rest 开头是否满足标签开始标签的正则，判断通过则将标签截取并推入到标签堆栈中，内容堆栈推入一个包含标签属性和 children 空数组的对象{ tag, children: [] }\",\"其次判断 rest 开头是否满足标签结束标签的正则，判断通过则将标签截取，同时标签堆栈 pop 出栈顶标签，判断截取后标签与出栈标签是否相同 \",\"截取标签与出栈标签相同，说明开始与闭合标签对得上，此时让内容堆栈的栈顶对象(pop_arr)出栈，因为栈结构的性质（后进先出），所以弹出的栈顶对象 pop_arr（栈顶标签）必定是前一项栈顶对象的 children，如果弹栈后的内容堆栈长度不为 0，则将 pop_arr 推入到当前内容堆栈的栈顶对象 children 中；如果弹栈后的内容堆栈为 0，说明最后的弹出项就是最终完整的内容结构，在外部声明一个数组 output 接收它\",\"截取标签与出栈标签不同，说明开始与闭合标签对不上，抛出异常 new Error\",\"然后判断 rest 开头是否满足标签结束标签之前的正文内容（开始标签与开始标签之间的文本内容本章节不做判断），判断通过则将文本内容截取，如果内容不为空就把文本内容赋给当前内容堆栈栈顶对象的 text 属性\",\"如果上述判断都未通过，则指针 index 右移一位 \",\"判断开始标签通过的语句中，最后 index 要增加标签长度+2(<>的长度为 2)\",\"判断结束标签通过的语句中，最后 index 要增加标签长度+3(</>的长度为 3)\",\"最后返回 output 数组，即结构正确的 AST 数组\",\"// index.js import parse from \\\"./parse.js\\\"; const templateString = `<div> <h3>哈哈哈哈你好</h3> <ul> <li>A</li> <li>B</li> <li>C</li> </ul> <div> <div>哈哈</div> </div> </div> `; const ast = parse(templateString); console.log(ast); \",\"// parse函数 主函数 export default function parse(templateString) { // 指针 let index = 0; // 剩余部分 let rest = \\\"\\\"; // 开始标记 <div> const startReg = /^<([a-z]+[1-6]?)>/; // 结束标记 </div> const endReg = /^<\\\\/([a-z]+[1-6]?)>/; // 结束标记前的文字 const wordReg = /^([^<]+)<\\\\/[a-z]+[1-6]?>/; // 标签堆栈 const tagStack = []; // 内容堆栈 const contentStack = []; // 输出结果 let output = []; while (index < templateString.length - 1) { rest = templateString.substring(index); // 识别开始标签 if (startReg.test(rest)) { const tag = rest.match(startReg)[1]; // console.log(\\\"检测到开始标记\\\", tag); // 开始标记入栈1 tagStack.push(tag); // 空数组入栈2 contentStack.push({ tag, children: [] }); // <>占两位，额外+2 index += tag.length + 2; } else if (endReg.test(rest)) { const tag = rest.match(endReg)[1]; // console.log(\\\"检测到结束标记\\\", tag); const pop_tag = tagStack.pop(); // tag和tagStack顶部相同，标签必定是封闭闭合的 if (tag === pop_tag) { const pop_arr = contentStack.pop(); const len = contentStack.length; if (len > 0) { // 长度不为0，出栈项往上一项的children里推 contentStack[contentStack.length - 1].children.push(pop_arr); } else if (len === 0) { // 长度为0，最后推出的项就是堆叠完整的AST结构 output = pop_arr; } } else { throw new Error(tagStack[tagStack.length - 1] + \\\"标签没有封闭!\\\"); } // </>占三位，额外+3 index += tag.length + 3; } else if (wordReg.test(rest)) { const word = rest.match(wordReg)[1]; // 检测截取片段内容不为空 if (!/^\\\\s+$/.test(word)) { // console.log(\\\"检测到文字\\\", word); contentStack[tagStack.length - 1].type = 3; contentStack[tagStack.length - 1].text = word; } index += word.length; } else { index++; } } return output; } \",\"最终输出结果：\",\"AST树初步结果\"]},\"662\":{\"h\":\"识别 attrs\",\"t\":[\"上面的 parse 函数已经支持纯净标签与文本内容的 AST 生成，但当标签内书写 class 等属性时，仍会报错，所以需要继续完善补充正则与判断\",\"修改开始标签正则：\",\"const startReg = /^<([a-z]+[1-6]?)(\\\\s[^<]+)?>/;\",\"调整开始标签正则判断内部语句\",\"// 识别开始标签 if (startReg.test(rest)) { const tag = rest.match(startReg)[1]; // attrs内容 const attrs = rest.match(startReg)[2]; // console.log(\\\"检测到开始标记\\\", tag); // 开始标记入栈1 tagStack.push(tag); // 空数组入栈2 contentStack.push({ tag, attrs: parseAttrsString(attrs), children: [] }); // <>占两位，额外+2 再加attrs长度 index += tag.length + (attrs ? attrs.length : 0) + 2; } \",\"attrs 转换函数\",\"// 把attrsString转换为数组返回 export default function parseAttrsString(attrsString) { if (attrsString === null || attrsString === undefined) return []; // 当前是否在引号内 let inYinHao = false; // 断点 let point = 0; // 结果数组，根据引号判断拆分出的字符串存入result中 let result = []; // 遍历attrsString for (let i = 0; i < attrsString.length; i++) { let char = attrsString[i]; if (char === '\\\"') { inYinHao = !inYinHao; } else if (char === \\\" \\\" && !inYinHao) { // 遇见了空格并且不在引号中，并且截取范围不为空值 if (!/^\\\\s*$/.test(attrsString.substring(point, i))) { result.push(attrsString.substring(point, i).trim()); point = i; } } } // 循环结束之后，如果最后引号紧贴标签没有空格比如 <h3 class=\\\"hello\\\" id=\\\"top\\\" data-src=\\\"888\\\"> // data-src会push不到result里面，需要做额外判断 result.push(attrsString.substring(point)); // 根据等号拆分 // 将[\\\"k=v\\\", \\\"k=v\\\", \\\"k=v\\\"]变为[{ name: k, value: v },{ name: k, value: v },{ name: k, value: v }] return result.map((item) => { // 根据等号拆分 const o = item.match(/^(.+)=\\\"(.+)\\\"$/); return { name: o[1], value: o[2] }; }); } \"]},\"663\":{\"h\":\"太长不看-总结\",\"t\":[\"搭配模板引擎中对插值语法{{}}的编译与 data 数据的字符串编译，可以生成数据完整且静态的 DOM 模板字符串（此处插值语法单独处理，实际的 Vue 源码对插值语法解析和 AST 转换是同时进行的）\",\"循环遍历 DOM 模板字符串，通过对开始标签、开始标签内的 attrs 字符串、正文内容、结束标签等正则判断，结合栈结构的原理，解析完开始标签之后，将处于遍历中的 attrs 内容、正文内容推入栈顶对象，解析完结束标签之后栈顶出栈，往上一项栈顶对象的 children 回推，最终生成结构层次分明的 AST 语法树\",\"AST 语法树最后可以经过渲染函数生成虚拟节点对象 VNode，最后根据 diff 算法最小量更新生成真实 DOM 对象，在页面中完成渲染\",\"可运行项目 demo 详见：\",\"https://github.com/mi-saka10032/ast-demo\"]},\"664\":{\"h\":\"虚拟DOM和diff算法\",\"t\":[\"本章节内容参考自\",\"【尚硅谷】Vue 源码解析之虚拟 DOM 和 diff 算法\",\"【Vue 源码】图解 diff 算法 与 虚拟 DOM-snabbdom-最小量更新原理解析-手写源码-updateChildren\",\"补充并完善了里面的一些 bug 和细节\",\"注：本章节只讨论虚拟 DOM 和 diff 算法的核心逻辑，其他的内部属性挂载如{ props: 'xxx', href: 'xxxx' }挂载上树的实现方法不进行讨论\"]},\"665\":{\"h\":\"源头-snabbdom\",\"t\":[\"snabbdom 是著名的虚拟 DOM 库，是 diff 算法的鼻祖，Vue 源码借鉴了 snabbdom\",\"snabbdom 源码用 TS 编写，npm 上提供 build 构建后的 JS 源码 npm i -D snabbdom\",\"外链：https://github.com/snabbdom/snabbdom\"]},\"666\":{\"h\":\"真实 DOM 与虚拟 DOM\",\"t\":[\"真实 DOM：就是 HTML 中的 DOM 结构\",\"<div class=\\\"box\\\"> <h3>我是一个标题</h3> <ul> <li>牛奶</li> <li>咖啡</li> <li>可乐</li> </ul> </div> \",\"虚拟 DOM：用 JS 对象描述 DOM 的层次结构，DOM 中的一切属性在虚拟 DOM 中有对应的属性\",\"{ \\\"sel\\\": \\\"div\\\", \\\"data\\\": { \\\"class\\\": { \\\"box\\\": true } }, \\\"children\\\": [ { \\\"sel\\\": \\\"h3\\\", \\\"text\\\": \\\"我是一个标题\\\" }, { \\\"sel\\\": \\\"ul\\\", \\\"children\\\": [ { \\\"sel\\\": \\\"li\\\", \\\"text\\\": \\\"牛奶\\\" }, { \\\"sel\\\": \\\"li\\\", \\\"text\\\": \\\"咖啡\\\" }, { \\\"sel\\\": \\\"li\\\", \\\"text\\\": \\\"可乐\\\" } ] } ] } \"]},\"667\":{\"h\":\"snabbdom 库实现\",\"t\":[\"h 函数用来产生虚拟节点 VNode\",\"调用：\",\"h('a', { props: { href: 'https://www.baidu.com' }}, '百度')\",\"生成：\",\"{ \\\"sel\\\": \\\"a\\\", \\\"data\\\": { \\\"props\\\": { \\\"href\\\": \\\"https://www.baidu.com\\\" } }, \\\"text\\\": \\\"百度\\\" }\",\"它表示真正的 DOM 节点：\",\"<a href=\\\"https://www.baidu.com\\\">百度</a>\",\"以下是 snabbdom 的虚拟节点从创建到上树的过程\"]},\"668\":{\"h\":\"创建虚拟节点 VNode\",\"t\":[\"import { init, classModule, propsModule, styleModule, eventListenersModule, h, } from \\\"snabbdom\\\"; // 创建出patch函数 const patch = init([ classModule, propsModule, styleModule, eventListenersModule, ]); // 创建虚拟节点 const myVNode1 = h(\\\"a\\\", { props: { href: \\\"https://www.baidu.com\\\" } }, \\\"百度\\\"); console.log(myVNode1); \",\"VNode输出结果\"]},\"669\":{\"h\":\"虚拟节点上树\",\"t\":[\"import { init, classModule, propsModule, styleModule, eventListenersModule, h, } from \\\"snabbdom\\\"; // 创建出patch函数 const patch = init([ classModule, propsModule, styleModule, eventListenersModule, ]); // 创建虚拟节点 const myVNode1 = h( \\\"a\\\", { props: { href: \\\"https://www.baidu.com\\\", target: \\\"_blank\\\", }, }, \\\"百度\\\" ); console.log(myVNode1); // 虚拟节点上树 const container = document.getElementById(\\\"container\\\"); patch(container, myVNode1); \"]},\"670\":{\"h\":\"h 函数嵌套\",\"t\":[\"h(\\\"ul\\\", {}, [h(\\\"li\\\", {}, \\\"牛奶\\\"), h(\\\"li\\\", {}, \\\"咖啡\\\"), h(\\\"li\\\", {}, \\\"可乐\\\")]); \",\"虚拟 DOM：\",\"{ \\\"sel\\\": \\\"ul\\\", \\\"data\\\": {}, \\\"children\\\": [ { \\\"sel\\\": \\\"li\\\", \\\"text\\\": \\\"牛奶\\\" }, { \\\"sel\\\": \\\"li\\\", \\\"text\\\": \\\"咖啡\\\" }, { \\\"sel\\\": \\\"li\\\", \\\"text\\\": \\\"可乐\\\" } ] } \"]},\"671\":{\"h\":\"diff 触发时机\",\"t\":[\"新虚拟 DOM 和老虚拟 DOM 进行 diff（精细化比较），算出应该如何最小量更新，最后反映到真实 DOM 上\",\"真实虚拟DOM比较\"]},\"672\":{\"h\":\"diff 核心逻辑\",\"t\":[\"diff 算法的核心是最小量更新，最重要的属性是 key。key 是这个节点的唯一标识，告诉 diff 算法，在更改前它们是同一个 DOM 节点。\",\"只有是同一个虚拟节点，才进行精细化比较。否则就是暴力删除旧节点再插入新节点。（如何定义是同一个虚拟节点？选择器相同且 key 相同）\",\"只进行同层比较，不进行跨层比较。即使是同一片虚拟节点，但是跨层了，对不起，diff 不触发精细化比较，还是暴力替换。 \",\"由于 diff 算法同层比较的特性，对于父节点发生变化的场景（比如父节点由<ul>编程了<ol>，其内部的节点不再精细化比较而是直接暴力替换）\",\"但是实际 Vue 开发中，极少有这种情况，大多数还是同一节点下的数据更换，所以这是合理的优化机制\"]},\"673\":{\"h\":\"简易源码实现\",\"t\":[\"现在参考 snabbdom 库的实现源码，手写一个简易的虚拟 DOM 和 diff 算法库\"]},\"674\":{\"h\":\"基础- h 函数\",\"t\":[\"h 函数是基础，把需要渲染的文本、对象渲染为虚拟 vnode\",\"手写 h 函数需要关注两点：\",\"函数重载与参数判断\",\"函数嵌套调用\",\"参数可能有多种情况\",\"h(\\\"div\\\"); h(\\\"div\\\", \\\"文字\\\"); h(\\\"div\\\", []); h(\\\"div\\\", h()); h(\\\"div\\\", {}, []); h(\\\"div\\\", {}, \\\"文字\\\"); h(\\\"div\\\", {}, h()); // ... \",\"这里我们默认参数为 3 个，只判断参数有 3 个的情况\",\"// vnode.js const vnode = (sel, data, children, text, elm) => ({ sel, data, children, text, elm, }); export default vnode; \",\"// h.js import vnode from \\\"./vnode.js\\\"; // 编写一个低配版h函数，这个函数必须接收3个参数，缺一不可 // 弱化了重载功能，仅判断三种形态 // 1.h('div', {}, '文字') // 2.h('div', {}, []) // 3.h('div', {}, h()) export default function h(sel, data, c) { // 检查参数个数 if (arguments.length !== 3) { throw new Error(\\\"h函数必须传入3个参数\\\"); } // 检查参数c的类型 if (typeof c === \\\"string\\\" || typeof c === \\\"number\\\") { // 形态1 return vnode(sel, data, undefined, c, undefined); } else if (Array.isArray(c)) { // 形态2 const children = []; for (let i = 0; i < c.length; i++) { // 检查c[i]必须是一个对象 if (!(typeof c[i] === \\\"object\\\" && c[i].hasOwnProperty(\\\"sel\\\"))) { throw new Error(\\\"传入的数组参数中有项不是h函数\\\"); } children.push(c[i]); } return vnode(sel, data, children, undefined, undefined); } else if (typeof c === \\\"object\\\" && c.hasOwnProperty(\\\"sel\\\")) { // 形态3 传入的c是唯一的children const children = [c]; return vnode(sel, data, children, undefined, undefined); } else { throw new Error(\\\"传入的第三个参数类型有误\\\"); } } \",\"// index.js import h from \\\"./h.js\\\"; h(\\\"div\\\", {}, \\\"文字\\\"); // 函数嵌套调用 h(\\\"div\\\", {}, [ h(\\\"p\\\", {}, \\\"嘻嘻\\\"), h(\\\"p\\\", {}, \\\"哈哈\\\"), h(\\\"p\\\", {}, \\\"呵呵\\\"), h(\\\"p\\\", {}, h(\\\"span\\\", {}, \\\"嘎嘎\\\")), ]); h(\\\"div\\\", {}, h(\\\"span\\\", {}, \\\"测试对象\\\")); \",\"注意：上面的index.js中第二种生成方法，并非函数递归，而是 h 函数的嵌套调用，第三个参数中每个元素都是 h 函数调用后返回的数组，再继续往内部嵌套也是如此\"]},\"675\":{\"h\":\"递归-遍历生成 DOM 对象\",\"t\":[\"第一阶段：生成 DOM 对象：经历 h 函数生成 vnode 之后，patch 函数调用 createElement 函数递归生成完整的 DOM 对象，最后在 patch 函数中统一挂载 DOM\",\"diff执行步骤\",\"当前阶段代码只实现新旧节点不同时的暴力替换\",\"// createElement.js // 创建真正节点，将vnode创建为完整的DOM对象并返回 export default function createElement(vnode) { // const fragment = document.createDocumentFragment(); const domNode = document.createElement(vnode.sel); // 有子节点还是有文本，需要判断 if ( vnode.text !== \\\"\\\" && (vnode.children === undefined || vnode.children.length === 0) ) { // 内部是文本文字 domNode.innerText = vnode.text; } else if (Array.isArray(vnode.children) && vnode.children.length > 0) { // 内部是子节点，需要遍历 - 递归创建节点 for (let i = 0; i < vnode.children.length; i++) { // 函数的递归会在 ch 节点不存在children时进入第一个if判断而停止 // 最终所有创建的子节点会逆序挂载上父节点vnode.elm，向外抛出一个层次分明的完整DOM // 由于dom对象之间浅拷贝相互引用，外部的newVNode对象的elm就是完整的DOM对象 const ch = vnode.children[i]; const chDOM = createElement(ch); domNode.appendChild(chDOM); } } // 插入vnode.elm vnode.elm = domNode; // 返回dom对象 return vnode.elm; } \",\"// patch.js import vnode from \\\"./vnode.js\\\"; import createElement from \\\"./createElement.js\\\"; // oldVNode可以传入真实DOM，也可以传入h函数生成的vnode，newVNode必须是vnode // 在页面初始化之时，oldVNode必定为真实DOM（作为承载容器） export default function patch(oldVNode, newVNode) { // 判断传入的第一个参数，是DOM节点还是虚拟节点？ if (oldVNode instanceof HTMLElement) { // 传入的第一个参数 oldVNode 是DOM节点，需要包装虚拟节点 oldVNode = vnode( oldVNode.tagName.toLowerCase(), {}, [], undefined, oldVNode ); } // 判断oldVNode和newVNode是不是同一个节点 if (oldVNode.key === newVNode.key && oldVNode.sel === newVNode.sel) { console.log(\\\"是同一节点，需要精细化比较\\\"); } else { console.log(\\\"不是同一个节点，暴力替换\\\"); // 递归创建dom对象，并且newVNode中的elm属性从父到子均挂载了匹配的dom对象 const newVNodeElm = createElement(newVNode); const oldVNodeElm = oldVNode.elm; if (oldVNodeElm.parentNode && newVNodeElm) { // 旧节点的父节点真实存在，且新节点已创建为dom对象，直接调用DOM方法替换 oldVNodeElm.parentNode.replaceChild(newVNodeElm, oldVNodeElm); } } } \",\"// index.js // 在index.html中创建 div#container 和 button#btn即可运行 import h from \\\"./h.js\\\"; import patch from \\\"./patch.js\\\"; const vdom1 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", {}, \\\"A\\\"), h(\\\"li\\\", {}, \\\"B\\\"), h(\\\"li\\\", {}, [h(\\\"span\\\", {}, \\\"哼?\\\"), h(\\\"span\\\", {}, \\\"哈!\\\")]), h(\\\"li\\\", {}, \\\"D\\\"), ]); const container = document.getElementById(\\\"container\\\"); patch(container, vdom1); const vdom2 = h(\\\"section\\\", {}, [h(\\\"h1\\\", {}, \\\"新h1\\\"), h(\\\"h2\\\", {}, \\\"新h2\\\")]); const btn = document.getElementById(\\\"btn\\\"); btn.onclick = patch.bind(this, vdom1, vdom2); \"]},\"676\":{\"h\":\"比较-同一节点的更新策略(逻辑)\",\"t\":[\"此处是整个章节中最复杂的地方，当前新旧节点为同一节点时，需要执行 diff 算法精细化比较并最小量更新\",\"请先试想一下，新旧节点的更新是否有以下情况：\",\"新节点的增加，可能在旧节点之前、之间、之后\",\"const vdom1 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", { key: \\\"A\\\" }, \\\"A\\\"), h(\\\"li\\\", { key: \\\"B\\\" }, \\\"B\\\"), h(\\\"li\\\", { key: \\\"C\\\" }, \\\"C\\\"), ]); const vdom2 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", { key: \\\"Z\\\" }, \\\"Z\\\"), // 旧节点之前追加 h(\\\"li\\\", { key: \\\"A\\\" }, \\\"A\\\"), h(\\\"li\\\", { key: \\\"B\\\" }, \\\"B\\\"), h(\\\"li\\\", { key: \\\"D\\\" }, \\\"D\\\"), // 旧节点中间追加 h(\\\"li\\\", { key: \\\"C\\\" }, \\\"C\\\"), h(\\\"li\\\", { key: \\\"M\\\" }, \\\"M\\\"), // 旧节点之后追加 ]); \",\"旧节点删除\",\"const vdom1 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", { key: \\\"A\\\" }, \\\"A\\\"), h(\\\"li\\\", { key: \\\"B\\\" }, \\\"B\\\"), h(\\\"li\\\", { key: \\\"C\\\" }, \\\"C\\\"), ]); const vdom2 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", { key: \\\"A\\\" }, \\\"A\\\"), h(\\\"li\\\", { key: \\\"C\\\" }, \\\"C\\\"), ]); \",\"旧节点移位\",\"const vdom1 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", { key: \\\"A\\\" }, \\\"A\\\"), h(\\\"li\\\", { key: \\\"B\\\" }, \\\"B\\\"), h(\\\"li\\\", { key: \\\"C\\\" }, \\\"C\\\"), ]); const vdom2 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", { key: \\\"C\\\" }, \\\"C\\\"), h(\\\"li\\\", { key: \\\"B\\\" }, \\\"B\\\"), h(\\\"li\\\", { key: \\\"A\\\" }, \\\"A\\\"), ]); \",\"以上 3 种情况的随机排列组合...\",\"可以看出，精细化比较与最小量更新的情况非常复杂，如果仍采用之前单纯的新旧 children 循环、递归的方法\",\"因为新节点存在随机插入、旧节点存在随机删除 or 移动的情况，整体结构非常混乱，所以我们需要开辟额外的内存空间用来储存临时结构\",\"新旧 children 之间需要采用双指针与双层循环，外部循环新节点 children，内部循环旧节点 children，判断节点是否需要更新，循环完之后还要判断并过滤掉已经被删除的旧节点\",\"时间复杂度至少为 O(mxn)，这还是没考虑节点 children 内部嵌套 children 的情况\",\"因此，普通的循环-递归方法非常复杂，时间和空间的开销都非常高\",\"直接给出结论：snabbdom 采用了一种经典的 diff 算法优化策略：四指针命中查找（双端比较）\",\"四指针命中查找\",\"按判断的先后顺序，分别是\",\"新前（newBefore）与旧前（oldBefore）\",\"新后（newAfter）与旧后（oldAfter）\",\"新后（newAfter）与旧前（oldBefore）\",\"新前（newBefore）与旧后（oldAfter）\",\"循环结构分析：\",\"新前和旧前的指针分别指向新节点和旧节点 children 的头部\",\"新后和旧后的指针分别指向新节点和旧节点 children 的尾部\",\"循环的持续条件是：旧前指针<=旧后指针 && 新前指针<=新后指针\",\"循环退出后，如果旧后指针>旧前指针，则属于旧节点的指针范围内的子节点对象全部删除；如果新后指针>新前指针，则属于新节点的指针范围内的子节点全部 append 到旧节点的子节点末尾（或者追加到旧节点的子节点头部）\",\"循环内部逻辑分析：\",\"以上条件在循环中按照 1 -> 2 -> 3 -> 4 的顺序依次判断，判断指针对应的对象的 sel 和 key 值是否相同\",\"当其中任意一种判断通过就不再进行后续判断了，满足条件的指针，前指针（新前 or 旧前）右移一位，后指针（新后 or 旧后）左移一位\",\"当情况 3（新后与旧前）发生，那么新后指向的节点（也是旧前节点），需要移动到旧后指向的旧节点之后，旧前节点清除\",\"当情况 4（新前与旧后）发生，那么新前指向的节点（也是旧后节点），需要移动到旧前指向的旧节点之前，旧后节点清除\",\"如果都没有命中判断通过，再使用遍历循环来查找节点，查找成功后，按照上面的情况 4 执行节点插入，新前指针右移一位\",\"第一个demo图例\",\"为了便于理解，现给出多种情况来分析这四种情况\"]},\"677\":{\"h\":\"新前 newStart 与旧前 oldStart\",\"t\":[\"如果命中 ① 了，patch 之后就移动头指针 newStart++ oldStart++\",\"新前与旧前\",\"如果没命中就接着比较下一种情况\"]},\"678\":{\"h\":\"新后 newEnd 与旧后 oldEnd\",\"t\":[\"如果命中 ② 了，patch 后就移动尾指针 newEnd-- oldEnd–\",\"新后与旧后\",\"如果没命中就接着比较下一种情况\"]},\"679\":{\"h\":\"新后 newEnd 与旧前 oldStart\",\"t\":[\"新后与旧前\",\"命中 ③ 复杂情况举例——倒序\",\"命中3倒序\",\"如果没命中就接着比较下一种情况\"]},\"680\":{\"h\":\"新前 newStart 与旧后 oldEnd\",\"t\":[\"如果命中 ④ 了，将 新前 newStart 指向的节点，移动到 旧前 oldStart 之前\",\"新前与旧后\",\"如果没命中就表示四种情况都没有命中\"]},\"681\":{\"h\":\"四种都没命中-遍历旧节点\",\"t\":[\"遍历旧节点中的 key 值，找到了就将旧节点移动到旧前指针 oldStart 之前\",\"四种都没命中\",\"没找到的就是新节点，创建生成新的 DOM 之后也直接插入到旧前指针 oldStart 之前\"]},\"682\":{\"h\":\"循环结束之后\",\"t\":[\"结束后\",\"1.newVnode 中还有剩余\",\"新节点中剩余的都 插入 旧节点 oldEnd 后面 或 oldStart 之前\",\"后面新增\",\"前面新增\",\"2.oldVnode 中还有剩余节点\",\"后面删除\",\"前面删除\",\"最终循环结束\",\"完整流程图如下：\",\"完整流程图\"]},\"683\":{\"h\":\"比较-同一节点的更新策略(代码)\",\"t\":[\"根据上面的四指针命中查找法，实现 diff 算法代码\",\"// patch.js 增加精细化比较时的最小量更新 import vnode from \\\"./vnode.js\\\"; import createElement from \\\"./createElement.js\\\"; import patchVNode from \\\"./patchVNode.js\\\"; export default function patch(oldVNode, newVNode) { // 判断传入的第一个参数，是DOM节点还是虚拟节点？ if (oldVNode instanceof HTMLElement) { // 传入的第一个参数 oldVNode 是DOM节点，需要包装虚拟节点 oldVNode = vnode( oldVNode.tagName.toLowerCase(), {}, [], undefined, oldVNode ); } // 判断oldVNode和newVNode是不是同一个节点 if (oldVNode.key === newVNode.key && oldVNode.sel === newVNode.sel) { console.log(\\\"是同一节点，需要精细化比较\\\"); // 改动 patchVNode(oldVNode, newVNode); } else { console.log(\\\"不是同一个节点，暴力替换\\\"); // 递归创建dom对象，并且newVNode中的elm属性从父到子均挂载了匹配的dom对象 const newVNodeElm = createElement(newVNode); const oldVNodeElm = oldVNode.elm; if (oldVNodeElm.parentNode && newVNodeElm) { // 旧节点的父节点真实存在，且新节点已创建为dom对象，直接调用DOM方法替换 oldVNodeElm.parentNode.replaceChild(newVNodeElm, oldVNodeElm); } } } \",\"// patchVNode.js 精细化比较时待处理的 import createElement from \\\"./createElement.js\\\"; import updateChildren from \\\"./updateChildren.js\\\"; export default function patchVNode(oldVNode, newVNode) { // 新旧节点elm赋值，便于DOM操作 const elm = (newVNode.elm = oldVNode.elm); // 判断新旧vnode是否是同一个对象（引用地址相同） if (oldVNode === newVNode) return; // 判断新vnode有无text属性 if (newVNode.text !== undefined && !newVNode.children?.length) { console.log(\\\"新vnode有text属性\\\"); if (newVNode.text !== oldVNode.text) { // 新旧vnode的text不同，直接让新text替换DOM中的内容，children直接消失 elm.innerText = newVNode.text; } } else { console.log(\\\"新vnode没有text属性\\\"); // 判断旧vnode有没有children const fragment = document.createDocumentFragment(); if (oldVNode.children?.length) { // oldVNode和newVNode均有children，最复杂的情况 updateChildren(elm, oldVNode.children, newVNode.children); } else { // 旧vnode只有text，没有children，新vnode有children elm.innerHTML = \\\"\\\"; // 遍历新vnode的子节点，创建dom上树 for (let i = 0; i < newVNode.children.length; i++) { fragment.appendChild(createElement(newVNode.children[i])); } elm.appendChild(fragment); } } } \",\"import patchVNode from \\\"./patchVNode.js\\\"; import createElement from \\\"./createElement.js\\\"; function checkSameVNode(a, b) { return a.sel === b.sel && a.key === b.key; } export default function updateChildren(parentElm, oldCh, newCh) { // 旧前指针 let oldStartIndex = 0; // 新前指针 let newStartIndex = 0; // 旧后指针 let oldEndIndex = oldCh.length - 1; // 新后指针 let newEndIndex = newCh.length - 1; // 旧前节点 let oldStartVNode = oldCh[0]; // 新前节点 let newStartVNode = newCh[0]; // 旧后节点 let oldEndVNode = oldCh[oldEndIndex]; // 新后节点 let newEndVNode = newCh[newEndIndex]; // keySet const keyMap = new Map(); // 四指针命中查找法，循环进行条件：旧前<=旧后 && 新前<=新后 while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) { // 首先不是判断四种命中，而是先略过已经加了undefined标记的节点项 if (oldStartVNode === null || oldCh[oldStartIndex] === undefined) { oldStartVNode = oldCh[++oldStartIndex]; } else if (oldEndVNode === null || oldCh[oldEndIndex] === undefined) { oldEndVNode = oldCh[--oldEndIndex]; } else if (newStartVNode === null || newCh[newStartIndex] === undefined) { newStartVNode = newCh[++newStartIndex]; } else if (newEndVNode === null || newCh[newEndIndex] === undefined) { newEndVNode = newCh[--newEndIndex]; } else if (checkSameVNode(oldStartVNode, newStartVNode)) { // 1.新前vs旧前 // 再调用patchNode进入子节点内部判断其内部children再度判断 patchVNode(oldStartVNode, newStartVNode); oldStartVNode = oldCh[++oldStartIndex]; newStartVNode = newCh[++newStartIndex]; } else if (checkSameVNode(oldEndVNode, newEndVNode)) { // 2.新后vs旧后 patchVNode(oldEndVNode, newEndVNode); oldEndVNode = oldCh[--oldEndIndex]; newEndVNode = newCh[--newEndIndex]; } else if (checkSameVNode(oldStartVNode, newEndVNode)) { // 3.新后vs旧前 patchVNode(oldStartVNode, newEndVNode); // 移动旧前节点到旧后节点后面 parentElm.insertBefore( oldStartVNode.elm, oldEndVNode.elm.nextElementSibling ); oldStartVNode = oldCh[++oldStartIndex]; newEndVNode = newCh[--newEndIndex]; } else if (checkSameVNode(oldEndVNode, newStartVNode)) { // 4.新前vs旧后 patchVNode(oldEndVNode, newStartVNode); // 移动旧后节点到旧前节点前面 parentElm.insertBefore(oldEndVNode.elm, oldStartVNode.elm); oldEndVNode = oldCh[--oldEndIndex]; newStartVNode = newCh[++newStartIndex]; } else { // 都没有匹配到的情况 console.log(\\\"都没有匹配到\\\"); keyMap.clear(); for (let i = oldStartIndex; i <= oldEndIndex; i++) { const key = oldCh[i]?.key; if (key !== undefined) { keyMap.set(key, i); } } // 寻找新前指针节点的key在keyMap中映射的位置序号 const indexInOld = keyMap.get(newStartVNode.key); if (indexInOld) { // 如果非undefined，则不是新项目 // patch本项 const elmToMove = oldCh[indexInOld]; patchVNode(elmToMove, newStartVNode); // 处理完之后当前项设为undefined oldCh[indexInOld] = undefined; // 将indexInOld指向的原旧节点移动到旧前指针之前 parentElm.insertBefore(elmToMove.elm, oldStartVNode.elm); } else { // 如果undefined，则说明是新项，需要插入到旧前指针之前 parentElm.insertBefore(createElement(newStartVNode), oldStartVNode.elm); } newStartVNode = newCh[++newStartIndex]; } } // 循环结束后，新后>=新前，表明剩余待新增节点 if (newEndIndex >= newStartIndex) { // 此处待新增的节点可能需要追加到待处理新前节点末尾，也可能是在节点头部 for (let i = newStartIndex; i <= newEndIndex; i++) { // beforeElm为null则执行appendChild操作，不为null说明在头部执行新增插入 const beforeElm = newCh[newEndIndex + 1] ? newCh[newEndIndex + 1].elm : null; parentElm.insertBefore(createElement(newCh[i]), beforeElm); } } // 循环结束后，旧后>=旧前，表明剩余待删除节点 if (oldEndIndex >= oldStartIndex) { for (let i = oldStartIndex; i <= oldEndIndex; i++) { if (oldCh[i]) { parentElm.removeChild(oldCh[i].elm); } } } } \"]},\"684\":{\"h\":\"最终完整源码\",\"t\":[\"现附上完整源码，从 index.js 到最底层的 updateChildren.js\"]},\"685\":{\"h\":\"index.js\",\"t\":[\"import h from \\\"./h.js\\\"; import patch from \\\"./patch.js\\\"; const vdom1 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", { key: \\\"A\\\" }, \\\"A\\\"), h(\\\"li\\\", { key: \\\"B\\\" }, \\\"B\\\"), h(\\\"li\\\", { key: \\\"C\\\" }, \\\"C\\\"), h(\\\"li\\\", { key: \\\"D\\\" }, \\\"D\\\"), h(\\\"li\\\", { key: \\\"E\\\" }, \\\"E\\\"), ]); const container = document.getElementById(\\\"container\\\"); patch(container, vdom1); const vdom2 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", { key: \\\"E\\\" }, \\\"E\\\"), h(\\\"li\\\", { key: \\\"Q\\\" }, \\\"Q\\\"), h(\\\"li\\\", { key: \\\"D\\\" }, \\\"D\\\"), h(\\\"li\\\", { key: \\\"C\\\" }, \\\"C\\\"), h(\\\"li\\\", { key: \\\"B\\\" }, \\\"B\\\"), h(\\\"li\\\", { key: \\\"A\\\" }, \\\"A\\\"), ]); const vdom3 = h(\\\"ul\\\", {}, [ h(\\\"li\\\", { key: \\\"Q\\\" }, \\\"Q\\\"), h(\\\"li\\\", { key: \\\"T\\\" }, \\\"T\\\"), h(\\\"li\\\", { key: \\\"E\\\" }, \\\"E\\\"), h(\\\"li\\\", { key: \\\"B\\\" }, \\\"B\\\"), h(\\\"li\\\", { key: \\\"A\\\" }, \\\"A\\\"), h(\\\"li\\\", { key: \\\"D\\\" }, \\\"D\\\"), h(\\\"li\\\", { key: \\\"C\\\" }, \\\"C\\\"), h(\\\"li\\\", { key: \\\"V\\\" }, \\\"V\\\"), ]); const btn = document.getElementById(\\\"btn\\\"); btn.onclick = patch.bind(this, vdom1, vdom2); const btn2 = document.getElementById(\\\"btn2\\\"); btn2.onclick = patch.bind(this, vdom2, vdom3); \"]},\"686\":{\"h\":\"h.js\",\"t\":[\"import vnode from \\\"./vnode.js\\\"; // 编写一个低配版h函数，这个函数必须接收3个参数，缺一不可 // 弱化了重载功能，仅判断三种形态 // 1.h('div', {}, '文字') // 2.h('div', {}, []) // 3.h('div', {}, h()) export default function h(sel, data, c) { // 检查参数个数 if (arguments.length !== 3) { throw new Error(\\\"h函数必须传入3个参数\\\"); } // 检查参数c的类型 if (typeof c === \\\"string\\\" || typeof c === \\\"number\\\") { // 形态1 return vnode(sel, data, undefined, c, undefined); } else if (Array.isArray(c)) { // 形态2 const children = []; for (let i = 0; i < c.length; i++) { // 检查c[i]必须是一个对象 if (!(typeof c[i] === \\\"object\\\" && c[i].hasOwnProperty(\\\"sel\\\"))) { throw new Error(\\\"传入的数组参数中有项不是h函数\\\"); } children.push(c[i]); } return vnode(sel, data, children, undefined, undefined); } else if (typeof c === \\\"object\\\" && c.hasOwnProperty(\\\"sel\\\")) { // 形态3 传入的c是唯一的children const children = [c]; return vnode(sel, data, children, undefined, undefined); } else { throw new Error(\\\"传入的第三个参数类型有误\\\"); } } \"]},\"687\":{\"h\":\"vnode.js\",\"t\":[\"const vnode = (sel, data, children, text, elm) => ({ sel, data, children, text, elm, key: data?.key, }); export default vnode; \"]},\"688\":{\"h\":\"patch.js\",\"t\":[\"import vnode from \\\"./vnode.js\\\"; import createElement from \\\"./createElement.js\\\"; import patchVNode from \\\"./patchVNode.js\\\"; export default function patch(oldVNode, newVNode) { // 判断传入的第一个参数，是DOM节点还是虚拟节点？ if (oldVNode instanceof HTMLElement) { // 传入的第一个参数 oldVNode 是DOM节点，需要包装虚拟节点 oldVNode = vnode( oldVNode.tagName.toLowerCase(), {}, [], undefined, oldVNode ); } // 判断oldVNode和newVNode是不是同一个节点 if (oldVNode.key === newVNode.key && oldVNode.sel === newVNode.sel) { console.log(\\\"是同一节点，需要精细化比较\\\"); patchVNode(oldVNode, newVNode); } else { console.log(\\\"不是同一个节点，暴力替换\\\"); // 递归创建dom对象，并且newVNode中的elm属性从父到子均挂载了匹配的dom对象 const newVNodeElm = createElement(newVNode); const oldVNodeElm = oldVNode.elm; if (oldVNodeElm.parentNode && newVNodeElm) { // 旧节点的父节点真实存在，且新节点已创建为dom对象，直接调用DOM方法替换 oldVNodeElm.parentNode.replaceChild(newVNodeElm, oldVNodeElm); } } } \"]},\"689\":{\"h\":\"createElement.js\",\"t\":[\"// 创建真正节点，将vnode创建为完整的DOM对象并返回 export default function createElement(vnode) { // const fragment = document.createDocumentFragment(); const domNode = document.createElement(vnode.sel); // 有子节点还是有文本，需要判断 if ( vnode.text !== \\\"\\\" && (vnode.children === undefined || vnode.children.length === 0) ) { // 内部是文本文字 domNode.innerText = vnode.text; } else if (Array.isArray(vnode.children) && vnode.children.length > 0) { // 内部是子节点，需要遍历 - 递归创建节点 for (let i = 0; i < vnode.children.length; i++) { // 函数的递归会在 ch 节点不存在children时进入第一个if判断而停止 // 最终所有创建的子节点会逆序挂载上父节点vnode.elm，向外抛出一个层次分明的完整DOM // 由于dom对象之间浅拷贝相互引用，外部的newVNode对象的elm就是完整的DOM对象 const ch = vnode.children[i]; const chDOM = createElement(ch); domNode.appendChild(chDOM); } } // 插入vnode.elm vnode.elm = domNode; // 返回dom对象 return vnode.elm; } \"]},\"690\":{\"h\":\"patchVNode.js\",\"t\":[\"import createElement from \\\"./createElement.js\\\"; import updateChildren from \\\"./updateChildren.js\\\"; export default function patchVNode(oldVNode, newVNode) { // 新旧节点elm赋值，便于DOM操作 const elm = (newVNode.elm = oldVNode.elm); // 判断新旧vnode是否是同一个对象（引用地址相同） if (oldVNode === newVNode) return; // 判断新vnode有无text属性 if (newVNode.text !== undefined && !newVNode.children?.length) { console.log(\\\"新vnode有text属性\\\"); if (newVNode.text !== oldVNode.text) { // 新旧vnode的text不同，直接让新text替换DOM中的内容，children直接消失 elm.innerText = newVNode.text; } } else { console.log(\\\"新vnode没有text属性\\\"); // 判断旧vnode有没有children const fragment = document.createDocumentFragment(); if (oldVNode.children?.length) { // oldVNode和newVNode均有children，最复杂的情况 updateChildren(elm, oldVNode.children, newVNode.children); } else { // 旧vnode只有text，没有children，新vnode有children elm.innerHTML = \\\"\\\"; // 遍历新vnode的子节点，创建dom上树 for (let i = 0; i < newVNode.children.length; i++) { fragment.appendChild(createElement(newVNode.children[i])); } elm.appendChild(fragment); } } } \"]},\"691\":{\"h\":\"updateChildren.js\",\"t\":[\"import patchVNode from \\\"./patchVNode.js\\\"; import createElement from \\\"./createElement.js\\\"; function checkSameVNode(a, b) { return a.sel === b.sel && a.key === b.key; } export default function updateChildren(parentElm, oldCh, newCh) { // 旧前指针 let oldStartIndex = 0; // 新前指针 let newStartIndex = 0; // 旧后指针 let oldEndIndex = oldCh.length - 1; // 新后指针 let newEndIndex = newCh.length - 1; // 旧前节点 let oldStartVNode = oldCh[0]; // 新前节点 let newStartVNode = newCh[0]; // 旧后节点 let oldEndVNode = oldCh[oldEndIndex]; // 新后节点 let newEndVNode = newCh[newEndIndex]; // keySet const keyMap = new Map(); // 四指针命中查找法，循环进行条件：旧前<=旧后 && 新前<=新后 while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) { // 首先不是判断四种命中，而是先略过已经加了undefined标记的节点项 if (oldStartVNode === null || oldCh[oldStartIndex] === undefined) { oldStartVNode = oldCh[++oldStartIndex]; } else if (oldEndVNode === null || oldCh[oldEndIndex] === undefined) { oldEndVNode = oldCh[--oldEndIndex]; } else if (newStartVNode === null || newCh[newStartIndex] === undefined) { newStartVNode = newCh[++newStartIndex]; } else if (newEndVNode === null || newCh[newEndIndex] === undefined) { newEndVNode = newCh[--newEndIndex]; } else if (checkSameVNode(oldStartVNode, newStartVNode)) { // 1.新前vs旧前 // 再调用patchNode进入子节点内部判断其内部children再度判断 patchVNode(oldStartVNode, newStartVNode); oldStartVNode = oldCh[++oldStartIndex]; newStartVNode = newCh[++newStartIndex]; } else if (checkSameVNode(oldEndVNode, newEndVNode)) { // 2.新后vs旧后 patchVNode(oldEndVNode, newEndVNode); oldEndVNode = oldCh[--oldEndIndex]; newEndVNode = newCh[--newEndIndex]; } else if (checkSameVNode(oldStartVNode, newEndVNode)) { // 3.新后vs旧前 patchVNode(oldStartVNode, newEndVNode); // 移动旧前节点到旧后节点后面 parentElm.insertBefore( oldStartVNode.elm, oldEndVNode.elm.nextElementSibling ); oldStartVNode = oldCh[++oldStartIndex]; newEndVNode = newCh[--newEndIndex]; } else if (checkSameVNode(oldEndVNode, newStartVNode)) { // 4.新前vs旧后 patchVNode(oldEndVNode, newStartVNode); // 移动旧后节点到旧前节点前面 parentElm.insertBefore(oldEndVNode.elm, oldStartVNode.elm); oldEndVNode = oldCh[--oldEndIndex]; newStartVNode = newCh[++newStartIndex]; } else { // 都没有匹配到的情况 console.log(\\\"都没有匹配到\\\"); keyMap.clear(); for (let i = oldStartIndex; i <= oldEndIndex; i++) { const key = oldCh[i]?.key; if (key !== undefined) { keyMap.set(key, i); } } // 寻找新前指针节点的key在keyMap中映射的位置序号 const indexInOld = keyMap.get(newStartVNode.key); if (indexInOld) { // 如果非undefined，则不是新项目 // patch本项 const elmToMove = oldCh[indexInOld]; patchVNode(elmToMove, newStartVNode); // 处理完之后当前项设为undefined oldCh[indexInOld] = undefined; // 将indexInOld指向的原旧节点移动到旧前指针之前 parentElm.insertBefore(elmToMove.elm, oldStartVNode.elm); } else { // 如果undefined，则说明是新项，需要插入到旧前指针之前 parentElm.insertBefore(createElement(newStartVNode), oldStartVNode.elm); } newStartVNode = newCh[++newStartIndex]; } } // 循环结束后，新后>=新前，表明剩余待新增节点 if (newEndIndex >= newStartIndex) { // 此处待新增的节点可能需要追加到待处理新前节点末尾，也可能是在节点头部 for (let i = newStartIndex; i <= newEndIndex; i++) { // beforeElm为null则执行appendChild操作，不为null说明在头部执行新增插入 const beforeElm = newCh[newEndIndex + 1] ? newCh[newEndIndex + 1].elm : null; parentElm.insertBefore(createElement(newCh[i]), beforeElm); } } // 循环结束后，旧后>=旧前，表明剩余待删除节点 if (oldEndIndex >= oldStartIndex) { for (let i = oldStartIndex; i <= oldEndIndex; i++) { if (oldCh[i]) { parentElm.removeChild(oldCh[i].elm); } } } } \"]},\"692\":{\"h\":\"太长不看-总结\",\"t\":[\"Vue2 的 VDOM 系统由虚拟节点对象创建函数(h) 和 打包函数(patch)构成\",\"虚拟节点创建函数(h)的主要作用是接收 vue 实例对象，难点在于函数重载（参数排列组合数量很多），将对象属性拆解，最终输出为格式规范的虚拟节点 VNode 对象{ sel, data: { href, src, class, style }, children, text, elm, key: data?.key,}。VNode 最关键的特点是 \",\"每个节点内部都含有属性 key\",\"节点内部的children数组内元素可以嵌套调用 h 函数，生成嵌套模式的 VNode\",\"打包函数(patch)主要作用有 2 点： \",\"将 VNode 中含有 class、props、style、event 等属性的内容，在不同的生命周期或patch阶段(create、update、destroy 等)调用对应的阶段函数进行迭代，实现属性值的更新\",\"在patch阶段中有两种情况，新旧节点的key值和挂载目标元素sel值相同，需要实现在精细化比较函数(patchVNode)对比新旧节点oldVNode和newVNode；新旧节点key值不同或sel值不同时，执行暴力替换新旧DOM元素\",\"在精细化比较函数(patchVNode)中，亦存在两种经典情况，即新节点newVNode中有无子节点的情况，其中当属newVNode和oldVNode都存在子节点(children)的情况最为复杂\",\"在新旧节点均存在children时，会执行四指针命中查找法（以下称双端比较法），在双端比较方法中，新旧子节点数组会分别从两套数组的头部和尾部开始收缩比较，经历四种命中比较方法（新前vs旧前、新后vs旧后、新后vs旧前、新前vs旧后）以及缺省的遍历查找方法（new Map，记录key <--> index映射表以查询乱序节点）更新之后，移动key值相同的节点、增加新节点、删除旧节点，执行DOM元素的最小量更新\",\"Vue2的diff算法，因为只在同层级进行比较，不跨层级比较，所以是广度优先算法，时间复杂度O(n)，极大优化了DOM更新速度。\",\"patch流程图二览\",\"可运行项目 demo 详见：\",\"https://github.com/mi-saka10032/vdom-diff\"]},\"693\":{\"h\":\"模板编译与指令\",\"t\":[\"本章节重在讲解模板编译与指令绑定，串联其他源码内容，因此代码功能实现暂不考虑\"]},\"694\":{\"h\":\"class-Vue 的创建\",\"t\":[\"要点：\",\"各项配置和 data 初始化，data 数据修改为响应式\",\"初始化 data、computed、watch 三大依赖收集器\",\"执行模板编译\",\"// index.js import Compile from \\\"./compile.js\\\"; import observe from \\\"./observe.js\\\"; export default class Vue { constructor(options) { // 把参数options对象存为$options this.$options = options || {}; // 数据 this._data = options.data || undefined; // 数据变为响应式 observe(this._data); // 初始化三大收集器挂载实例对象 this._initData(); this._initComputed(); this._initWatch(); // 首先-模板编译 new Compiler(options.el, this); // 后面会有render函数构建虚拟dom } _initData() { Object.keys(this._data).forEach((key) => { Object.defineProperty(this, key, { get() { return this._data[key]; }, set(newVal) { this._data[key] = newVal; }, }); }); } _initWatch() { const watch = this.$options.watch; Object.keys(watch).forEach((key) => { new Watcher(this, key, watch[key]); }); } } \"]},\"695\":{\"h\":\"Compile 编译类的创建\",\"t\":[\"要点：\",\"编译三部曲：获取 dom(this.node2Fragment)、编译 dom(this.compile)、回填 dom(appendChild)\",\"重点编译 dom 的步骤：fragment 节点内部递归遍历子节点，为插值语法追加 Watcher 监听，识别v-、@等指令，绑定对应节点\",\"v-model指令需要注意双向绑定实现，借助 Watcher 的回调实现数据影响视图，并添加 input 事件监听器反向修改数据实现视图影响数据\",\"// compile.js import Watcher from \\\"./observer/watcher.js\\\"; export default class Compile { constructor(el, vue) { // 绑定实例 this.$vue = vue; // 挂载元素 this.$el = document.querySelector(el); // 如果用户传入挂载元素 if (this.$el) { // 获取dom，让节点变为fragment // 类似于mustache中的tokens，实际上使用的是AST，这里是轻量级的fragment let $fragment = this.node2Fragment(this.$el); // 编译dom this.compile($fragment); // 回填dom，dom上树 this.$el.appendChild(this.$fragment); } } // 最后实际生成的结果是AST抽象语法树 node2Fragment(el) { const fragment = document.createDocumentFragment(); let child; while ((child = el.firstChild)) { fragment.appendChild(child); } return fragment; } // 核心方法 编译时需要对插值语法增加监听 compile(el) { // 得到子元素 const childNodes = el.childNodes; Array.from(childNodes).forEach((node) => { let text = node.textContent; // 表达式文本 // 就是识别{{}}中的数据 let reg = /{{(.*)}}/; // 按元素节点方式编译 if (this.isElementNode(node)) { this.compileElement(node); } else if (this.isTextNode(node) && reg.test(text)) { // 文本 并且有{{}} this.compileText(node, RegExp.$1); } // 遍历编译子节点（递归） if (node.childNodes && node.childNodes.length) { this.compileElement(node); } }); } compileElement(node) { // 不再将HTML结构看做字符串，而是真正的属性列表 const nodeAttrs = node.attributes; // 类数组对象变为数组 Array.from(nodeAttrs).forEach((attr) => { // 分析指令 const attrName = attr.name; const value = attr.value; // 指令都是v-开头 const dir = attrName.substring(2); // 看看是不是指令 if (attrName.indexOf(\\\"v-\\\") === 0) { // v-开头就是指令 if (dir === \\\"model\\\") { new Watcher(this.$vue, value, (value) => { node.value = value; }); let v = this.getVueVal(this.$vue, value); node.value = v; node.addEventListener(\\\"input\\\", (e) => { const newVal = e.target.value; this.setVueVal(this.$vue, value, newVal); v = newVal; }); } else if (dir === \\\"if\\\") { // ... } } }); } compileText(node, name) { node.textContent = this.getVueVal(this.$vue, name); new Watcher(this.$vue, name, (value) => { node.textContent = value; }); } getVueVal(vue, exp) { const val = vue; exp = exp.split(\\\".\\\"); exp.forEach((k) => { val = val[k]; }); return value; } setVueVal(vue, exp, value) { const val = vue; exp = exp.split(\\\".\\\"); exp.forEach((k, i) => { if (i < exp.length - 1) { val = val[k]; } else { val[k] = value; } }); } } \"]},\"696\":{\"h\":\"太长不看-总结\",\"t\":[\"模板编译的执行顺序在初始化依赖收集系统之后，虚拟 DOM 的 render 渲染之前\",\"模板编译侧重于对已有 DOM 节点的获取、编译转化与重新回填\",\"编译转化时的逻辑侧重于插值语法的内容替换以及自定义指令的绑定\",\"在 SPA 项目开发中不涉及模板编译步骤，因为根元素 el 为 div 空节点\",\"模板编译主要用于传统的 cdn 写法和 ssr 服务端渲染的元素节点构建\"]},\"697\":{\"h\":\"总结\",\"t\":[\"此处是对 vue 整体创建流程的总结，不再描述源码\"]},\"698\":{\"h\":\"流程图\",\"t\":[\"newVue流程图\",\"new Vue，随后初始化一系列实例\",\"初始化依赖收集系统（三大收集器的顺序分别为 data、computed、watch）\",\"$mount挂载元素\",\"执行 compile 模板编译\",\"调用 render 函数构建虚拟 DOM\",\"收集虚拟 DOM 中的依赖，设置监听，跟虚拟 DOM 匹配 patch，结合 defineProperty 响应式更新\",\"渲染 DOM 树\",\"以下是简化流程图\",\"newVue简化流程图\"]},\"699\":{\"h\":\"流程详解\"},\"700\":{\"h\":\"初始化\",\"t\":[\"在初始化过程中，我们重点关注依赖收集系统\",\"依赖收集系统是围绕响应式原理 defineProperty、依赖收集器 Dep、侦听器 Watcher 构成的一套订阅-发布系统\",\"其初始化的主要流程为：\",\"初始化 props、data、computed、watch\",\"遍历上述配置项内部属性值，根据不同的数据类型、数据层次的深浅程度，逐层递进地绑定依赖收集器和响应式数据，对computed和watch初始化侦听器 Watcher，同时在 Watcher 内部绑定与该属性值关联的 data 的依赖收集器\",\"响应式数据 get 时，收集器负责 depend 收集依赖，主要是将当前活跃的侦听器 Watcher 实例收入其中\",\"响应式数据 set 时，收集器负责 notify 通知更新，遍历其内部的侦听器 Watcher，强制 Watcher 更新依赖值，实现 computed 和 watch 的响应式变化\",\"注意：computed 的数据变化表现为脏读，也就是惰性缓存；watch 的回调函数执行会推入到执行队列 queue 中，在 id 过滤之后推入到异步任务队列中顺序执行（默认宏任务队列、如果微任务队列空出则进入微任务队列）\"]},\"701\":{\"h\":\"compile 模板编译\",\"t\":[\"模板编译并不是存在于 Vue 的所有构建版本中，它只存在于完整版本，在只包含运行的时候版本中并不存在该阶段，即普通 cdn 引入式非文件组件式项目与 SSR 服务端渲染项目会采用，SPA 项目暂无作用（vue-loader 自动执行编译）\",\"模板编译中有三个步骤：获取 DOM、编译转化 DOM、回填 DOM\",\"获取 DOM 是将 html 中的 DOM 元素获取到 fragment 碎片中，此处实际获取到的结果就是AST 抽象语法树\",\"编译转化 DOM 对插值语法{{}}与v-``@等进行解析，将其实际匹配的值填入进去，并赋予响应式数据效果\",\"回填 DOM 最后让编译好的 fragment 碎片上树\"]},\"702\":{\"h\":\"render 渲染函数\",\"t\":[\"render 渲染函数中有两个步骤：模板引擎解析、构建虚拟 DOM。如果构建虚拟 DOM 时，新旧节点存在差异，还需要执行 diff 算法更新\",\"在 SPA 项目中，vue-loader加载器（vue-cli 和 vite 自带）会将项目路径下每一个 vue 文件的 template 标签部分自动地转换为模板字符串。模板引擎解析会把组件文件中的模板字符串逐个解析，从元素标签名 tag、属性 attrs、内部文本 text、插值语法绑定的 data、子节点 children 等，对子节点的递推转化主要采用堆栈后进先出的特性，精确地绑定 children 上的属性，然后层层推回父节点，最后转换为AST 抽象语法树\",\"得到 AST 语法树之后，通过渲染函数 h 开始转化为虚拟 DOM，渲染时主要考虑的问题是函数重载，渲染函数的参数数量、类型有很多种情况\",\"转化完成后的虚拟 DOM，如果是初次挂载，则通过 patch 将不同的属性（class、style、attr、v-指令等）整合起来，createElement生成真实 DOM；如果存在新旧 DOM 比较且都存在子节点，则需要引入 diff 最小量更新算法（双端比较），在新旧 DOM 的子节点 children 内递归式地循环比较新旧 children，并且新旧 children 的头部尾部都存在往中间不断缩进的指针，以 tag 和 key 值作为判断标准，标记出需要精细更新的节点进行替换，其余旧节点不变，以此实现广度优先下最优时间复杂度的更新算法\"]},\"703\":{\"h\":\"生命周期\",\"t\":[\"生命周期实际上就是根据组件从创建、初始化、更新到销毁过程中，穿插在其中的可调用函数方法，如果 vm 实例中书写了有效的生命周期钩子，则到指定阶段时必定会调用\",\"比如，在new Vue初始化时，执行 initState 开启依赖收集前，会调用 beforeCreate，执行完 initState（前后还会有 initInject 和 initProvide）之后，才是调用 created 函数\",\"同理，在 data 更新的时间节点前后，也会插入 beforeUpdate 和 updated 函数，当然，watch 中的回调函数则是默认在异步队列中执行完毕后才会执行 updated\"]},\"704\":{\"h\":\"Vue源码分析\",\"t\":[\"深入响应式原理\",\"watch 源码分析\",\"computed 源码分析\",\"模板引擎\",\"AST 抽象语法树\",\"虚拟 DOM 和 diff 算法\",\"模板编译与指令\",\"总结\"]},\"705\":{\"h\":\"ReactRouter\",\"t\":[\"本文记录 ReactRouterV6 版本的 API，V5 之前的 API 略过\"]},\"706\":{\"h\":\"概述\"},\"707\":{\"h\":\"三个不同类型的 npm 包\",\"t\":[\"react-router：路由核心库，提供组件、钩子\",\"react-router-dom：包含 react-router 所有内容，并添加专用 DOM 组件\",\"react-router-native：包含 react-router 所有内容，并添加 ReactNative 专用 API\"]},\"708\":{\"h\":\"与 5.X 版本的区别\",\"t\":[\"内置组件变化：移除<Switch/>，新增<Routes/>\",\"语法变化：component={About}变为element={<About/>}\",\"新增多个 hook：useParams、useNavigate、useMatch等\",\"官方明确推荐使用函数式组件\"]},\"709\":{\"h\":\"组件\",\"t\":[\"一级路由组件\",\"// Router.jsx import React from \\\"react\\\"; import { BrowserRouter, Route, Routes, Navigate } from \\\"react-router-dom\\\"; import Home from \\\"../home/Home\\\"; import Goods from \\\"../goods/Goods\\\"; import Customer from \\\"../customer/Customer\\\"; export default function Router() { { /* 所有的路由配置均在 BrowserRouter 内部 */ } return ( <BrowserRouter> {/* 使用 Routes 替换曾经的 Switch */} <Routes> <Route path=\\\"home\\\" element={<Home />} /> <Route path=\\\"goods\\\" element={<Goods />} /> <Route path=\\\"customer\\\" element={<Customer />} /> <Route path=\\\"/\\\" element={<Navigate to=\\\"/home\\\" />} /> </Routes> </BrowserRouter> ); } \"]},\"710\":{\"h\":\"<BrowserRouter>\",\"t\":[\"<BrowserRouter>用于包裹整个应用。react-router-dom 相关组件只有在其内部才能使用\"]},\"711\":{\"h\":\"<HashRouter>\",\"t\":[\"作用与<BrowserRouter>一样，地址切换为 hash(#)模式\"]},\"712\":{\"h\":\"<Routes/> 与 <Route/>\",\"t\":[\"v6 版本移除了先前的<Switch>，替换为<Routes>\",\"<Routes/>与<Route/>要配合使用，并且必须要用<Routes>包裹<Route>\",\"<Route>相当于一个 if 语句，如果其路径与当前 url 匹配，则挂载对应组件\",\"<Route caseSensitive>属性用于指定：匹配时是否区分大小写(默认 false)\",\"当 url 发生变化时，<Routes>监听地址并查询匹配<Route>元素以匹配组件\",\"<Route>可以嵌套使用，且可配合useRoutes()配置路由表，但需要通过<Outlet>组件渲染子路由\",\"示例代码：\",\"<Routes> {/* path属性用于定义路径，element属性用于定义当前路径对应组件 */} <Route path=\\\"/login\\\" element={<Login />} /> {/* 定义嵌套路由，home是一级路由，对应路径 /home */} <Route path=\\\"home\\\" element={<Home />}> {/* test1和test2是二级路由，对应路径/home/test1 /home/test2 */} <Route path=\\\"test1\\\" element={<Test1 />} /> <Route path=\\\"test2\\\" element={<Test2 />} /> </Route> {/* 不写element属性，仅表示嵌套路由，对应路径/users/xxx */} <Route path=\\\"users\\\"> {/* index属性，表明为默认子路由 */} <Route path=\\\"xxx\\\" element={<Demo />} index /> </Route> </Routes> \"]},\"713\":{\"h\":\"<Link>\",\"t\":[\"作用：修改 url，且不发送网络请求（无刷新路由链接）\",\"注意：必须在被<BrowserRouter>包裹的组件中使用\",\"import { Link } from 'react-router-dom function Test() { return ( <div> <Link to='/路径'>按钮</Link> </div> ) } \"]},\"714\":{\"h\":\"<NavLink>\",\"t\":[\"作用与<Link>类似，可实现导航的“高亮”效果\",\"// NavLink默认类名是active，下面是自定义class类名 <NavLink to=\\\"login\\\" className={({ isActive }) => { console.log(\\\"home\\\", isActive); return isActive ? \\\"base one\\\" : \\\"base\\\"; }} > login </NavLink> /* NavLink添加end属性，匹配成功不会有高亮效果 */ <NavLink to=\\\"home\\\" end>Home</NavLink> \"]},\"715\":{\"h\":\"<Navigate>\",\"t\":[\"作用：只要<Navigate>组件被渲染，就会修改路径，切换视图\",\"replace 用于控制跳转模式，默认是 push\",\"import React, { useState } from \\\"react\\\"; import { Navigate } from \\\"react-router-dom\\\"; export default function Home() { const [sum, setSum] = useState(1); return ( <> <h3>Home标题</h3> {sum === 1 ? ( <h4>sum值为{sum}</h4> ) : ( <Navigate to=\\\"/about\\\" replace={true} /> )} <button onClick={() => setSum(2)}>sum点击变2</button> </> ); } \"]},\"716\":{\"h\":\"<Outlet>\",\"t\":[\"当<Route>产生嵌套时，一级组件内部渲染后续子路由需要使用\",\"作用类似于 Vue 中的<router-view></router-view>\"]},\"717\":{\"h\":\"hooks\"},\"718\":{\"h\":\"useRoutes\",\"t\":[\"作用：根据路由表，动态创建<Routes>和<Route>\",\"类似于 Vue 中的new VueRouter()\"]},\"719\":{\"h\":\"useNavigate\",\"t\":[\"作用：返回一个函数用来实现编程式路由导航\",\"语法：\",\"import { useNavigate } from \\\"react-router-dom\\\"; const navigate = useNavigate(); const handle = () => { /// 指定路径 navigate(\\\"/login\\\", { replace: false, state: { a: 1, b: 2 }, }); // 前进后退步数 navigate(-1); }; \"]},\"720\":{\"h\":\"useParams\",\"t\":[\"作用：返回当前匹配路由的 params 参数\",\"例如：声明 path 路径为/users/:id，跳转到该路由组件时，通过const { id } = useParams()接收\"]},\"721\":{\"h\":\"useSearchParams\",\"t\":[\"作用：读取和修改当前位置的 url 中的查询字符串\",\"返回一个包含两个值的数组：当前的 search 参数、更新 search 的函数\",\"import React, { useEffect } from \\\"react\\\"; import { useParams, useSearchParams } from \\\"react-router-dom\\\"; export default function GoodsDetail() { // 获取动态路由的值 const params = useParams(); // 获取查询字符串的值 const [searchParams, setSearchParams] = useSearchParams(); useEffect(() => { // 一个对象，key 为动态字符串的 key console.log(params); // {id: '123'} // 一个对象，但是不可直接点出属性 console.log(typeof searchParams); // object // 输入 http://localhost:3304/goods/123?name=nihao console.log(searchParams.get(\\\"name\\\")); // nihao }, []); const handleAddParams = () => { // 修改 查询字符串 的数据 setSearchParams({ name: \\\"xxx\\\", }); }; return ( <div> <h2 onClick={handleAddParams}>GoodsDetail Page</h2> </div> ); } \"]},\"722\":{\"h\":\"useLocation\",\"t\":[\"作用：获取当前 location 信息，对标原生 location 属性（精简版）\",\"const x = useLocation(); \",\"# x的参考属性 { hash: '', key: 'axga6sx', pathname: '/login', search: '?name=zhangsan&age=18', state: { a: 1, b: 2 } } \"]},\"723\":{\"h\":\"useMatch\",\"t\":[\"作用：返回当前匹配信息，对标原生 match 属性（精简版）\",\"// useMatch需要传递url路径字符串 const match = useMatch('/login/:x/:y) \",\"# match参考属性 { params: { x: '1', y: '10' }, pathname: '/login/1/10', pathnameBase: '/login/1/10', pattern: { path: '/login/:x/:y', caseSensitive: false, end: false } } \"]},\"724\":{\"h\":\"useInRouterContext\",\"t\":[\"判断当前组件是否在<Router>上下文中，是为 true 否为 false\"]},\"725\":{\"h\":\"useNavigationType\",\"t\":[\"返回当前的导航类型：\",\"POP：在浏览器中直接打开这个路由组件，或刷新页面\",\"PUSH：push 方式\",\"REPLACE：replace 方式\"]},\"726\":{\"h\":\"useOutlet\",\"t\":[\"呈现当前组件中渲染的嵌套路由\"]},\"727\":{\"h\":\"useResolvedPath\",\"t\":[\"给定一个 url 值，解析其中的 path、search、hash 值\",\"类似 Vue2 中的this.$router.resolve方法\"]},\"728\":{\"h\":\"withRouter\",\"t\":[\"v5 版本直接给我们提供了 withRouter 方法，用来包裹不在<Route>内的其他组件如<Header>、<Footer>等组件\",\"v6 版本需要我们自己用 HOC 实现\",\"import { useLocation, useNavigate, useParams } from \\\"react-router-dom\\\"; const withRouter = (Component) => (props, ref) => { const location = useLocation(); const navigate = useNavigate(); const params = useParams(); return ( <Component {...props} ref={ref} history={{ location, navigate, params }} /> ); }; export default withRouter; \"]},\"729\":{\"h\":\"动态添加路由\",\"t\":[\"React 和 Vue 的动态添加路由原理都一样，现假设用户已登录成功：\",\"用户登录成功 => 获取用户权限列表 => 获取用户导航菜单列表 => 根据权限和导航生成路由表\"]},\"730\":{\"h\":\"默认路由表\",\"t\":[\"router/index.ts 默认路由\",\"提供组件懒加载导入函数、鉴权组件、路由表等\",\"import { lazy } from \\\"react\\\"; import { Navigate } from \\\"react-router-dom\\\"; // React 组件懒加载 // 快速导入工具函数 const lazyLoad = (moduleName: string) => { const Module = lazy(() => import(`views/${moduleName}`)); return <Module />; }; // 路由鉴权组件 const Appraisal = ({ children }: any) => { const token = localStorage.getItem(\\\"token\\\"); return token ? children : <Navigate to=\\\"/login\\\" />; }; interface Router { name?: string; path: string; children?: Array<Router>; element: any; } const routes: Array<Router> = [ { path: \\\"/login\\\", element: lazyLoad(\\\"login\\\"), }, { path: \\\"/\\\", element: <Appraisal>{lazyLoad(\\\"sand-box\\\")}</Appraisal>, children: [ { path: \\\"\\\", element: <Navigate to=\\\"home\\\" />, }, { path: \\\"*\\\", element: lazyLoad(\\\"sand-box/nopermission\\\"), }, ], }, { path: \\\"*\\\", element: lazyLoad(\\\"not-found\\\"), }, ]; export default routes; \"]},\"731\":{\"h\":\"Store\",\"t\":[\"redux login/action.ts\",\"Redux 提供的 store 中存储登录相关异步请求的方法\",\"登录 => 获取菜单列表 => 格式化转换 => 更新路由表\",\"import { INITSIDEMENUS, UPDATUSERS, LOGINOUT, UPDATROUTES } from \\\"./contant\\\"; import { getSideMenus } from \\\"services/home\\\"; import { loginUser } from \\\"services/login\\\"; import { patchRights } from \\\"services/right-list\\\"; import { handleSideMenu } from \\\"@/utils/devUtils\\\"; import { handelFilterRouter } from \\\"@/utils/routersFilter\\\"; import { message } from \\\"antd\\\"; // 获取导航菜单列表 export const getSideMenusAction = (): any => { return (dispatch: any, state: any) => { getSideMenus().then((res: any) => { const rights = state().login.users.role.rights; const newMenus = handleSideMenu(res, rights); dispatch({ type: INITSIDEMENUS, menus: newMenus }); dispatch(updateRoutesAction()); //import! }); }; }; // 退出登录 export const loginOutAction = (): any => ({ type: LOGINOUT }); // 更新导航菜单 export const updateMenusAction = (item: any): any => { return (dispatch: any) => { patchRights(item).then((res: any) => { dispatch(getSideMenusAction()); }); }; }; // 路由更新 //import! export const updateRoutesAction = (): any => { return (dispatch: any, state: any) => { const rights = state().login.users.role.rights; const menus = state().login.menus; const routes = handelFilterRouter(rights, menus); //import! dispatch({ type: UPDATROUTES, routes }); }; }; // 登录 export const loginUserAction = (item: any, navigate: any): any => { return (dispatch: any) => { loginUser(item).then((res: any) => { if (res.length === 0) { message.error(\\\"用户名或密码错误\\\"); } else { localStorage.setItem(\\\"token\\\", res[0].username); dispatch({ type: UPDATUSERS, users: res[0] }); dispatch(getSideMenusAction()); navigate(\\\"/home\\\"); } }); }; }; \",\"路由菜单转换函数 permission.ts\",\"// 权限列表 和 导航菜单 得出路由表 element暂用字符串表示 后面渲染前再映射 export const handelFilterRouter = ( rights: any, menus: any, routes: any = [] ) => { for (const menu of menus) { if (menu.pagepermisson) { let index = rights.findIndex((item: any) => item === menu.key) + 1; if (!menu.children) { if (index) { const obj = { path: menu.key, element: `sand-box${menu.key}`, }; routes.push(obj); } } else { handelFilterRouter(rights, menu.children, routes); } } } return routes; }; // 返回最终路由表 export const handelEnd = (routes: any) => { defaulyRoutes[1].children = [...routes, ...defaulyRoutes[1].children]; return defaulyRoutes; }; // 映射element 成对应组件 export const handelFilterElement = (routes: any) => { return routes.map((route: any) => { route.element = lazyLoad(route.element); return route; }); }; \"]},\"732\":{\"h\":\"开启监听入口\",\"t\":[\"入口组件 App.tsx\",\"在路由入口处开启 routes 监听，依赖更新后重设 useRoutes，组件结构响应式重构\",\"import routes from \\\"./router\\\"; import { useRoutes } from \\\"react-router-dom\\\"; import { shallowEqual, useSelector } from \\\"react-redux\\\"; import { useState, useEffect } from \\\"react\\\"; import { handelFilterElement, handelEnd } from \\\"@/utils/routersFilter\\\"; import { deepCopy } from \\\"@/utils/devUtils\\\"; function App() { console.log(\\\"first\\\"); const [rout, setrout] = useState(routes); const { routs } = useSelector( (state: any) => ({ routs: state.login.routes }), shallowEqual ); const element = useRoutes(rout); // 监听路由表改变重新渲染 useEffect(() => { // deepCopy 深拷贝state数据 不能影响到store里的数据！ // handelFilterElement 映射对应组件 // handelEnd 将路由表嵌入默认路由表得到完整路由表 const end = handelEnd(handelFilterElement(deepCopy(routs))); setrout(end); }, [routs]); return <div className=\\\"height-all\\\">{element}</div>; } export default App; \",\"最终总结：\",\"在外部 App 组件中引入路由表数据开启 state 管理\",\"使用 useEffect 监听拷贝路由表中的数据，将默认路由表转换成格式完整的路由表后重设路由表\",\"路由表 state 状态变动，引发函数内重新调用 useRoutes，生成新的路由结构嵌入 jsx 中\"]},\"733\":{\"h\":\"路由拦截\",\"t\":[\"路由拦截又称路由守卫，在 Vue 中vue-router提供便捷的 beforeEach、afterEach 来统一管理路由入口与出口，在 React 中我们需要手动实现\",\"现在简化一下场景，路由表配置入口、登录、404 三个组件，对登录状态判断来进行拦截/放行\"]},\"734\":{\"h\":\"路由配置\",\"t\":[\"import Index from \\\"@/views/index/index\\\"; import Login from \\\"@/views/login/index\\\"; import Page404 from \\\"@/views/test/page404\\\"; const routes = [ { path: \\\"/index\\\", element: <Index />, }, { path: \\\"/login\\\", element: <Login />, }, { path: \\\"*\\\", element: <Page404 />, }, ]; export { routes }; \"]},\"735\":{\"h\":\"入口配置\",\"t\":[\"App.jsx\",\"import { useRoutes } from \\\"react-router-dom\\\"; import { routes } from \\\"@/router\\\"; function App() { const elements = useRoutes(routes); return elements; } export default App; \",\"index.js\",\"import React from \\\"react\\\"; import ReactDOM from \\\"react-dom\\\"; import App from \\\"./App\\\"; import { BrowserRouter } from \\\"react-router-dom\\\"; ReactDOM.render( <React.StrictMode> <BrowserRouter> <App /> </BrowserRouter> </React.StrictMode>, document.getElementById(\\\"root\\\") ); \"]},\"736\":{\"h\":\"全局路由拦截\",\"t\":[\"实现思路：控制路由配置的 element 属性，动态调整\"]},\"737\":{\"h\":\"1.封装工具函数\",\"t\":[\"几个工具函数的作用：\",\"setRouteBefore：从外部获取路由守卫函数\",\"lazyLoad：懒加载导入组件，传入导入路径和元信息 meta，把懒加载组件、元信息、路由守卫函数封装进<Guard>组件\",\"transformRoutes：路由配置转化函数，将来自后端的路由数据进行格式化转换，转换为符合react-router路由表格式的数据\",\"import React from \\\"react\\\"; import { Navigate } from \\\"react-router-dom\\\"; import Guard from \\\"./guard\\\"; let handleRouteBefore = null; // 设置路由导航守卫函数 function setRouteBefore(fn) { handleRouteBefore = fn; } // 路由懒加载 function lazyLoad(importFn, meta) { meta = meta || {} const Element = React.lazy(importFn) const lazyElement = ( // fallback提供路由切换时的loading组件，如noprogress这种组件 <React.Suspense fallback={<div><div/>}> <Element _meta={meta}/> </React.Suspense> ) return ( <Guard element={lazyElement} meta={meta} handleRouteBefore={handleRouteBefore} /> ) } // 路由配置列表数据转换 function transformRoutes(routes) { const list = []; routes.forEach((route) => { const obj = { ...route }; if (obj.redirect) { obj.element = <Navigate to={obj.redirect} replace={true} />; } if (obj.component) { obj.element = lazyLoad(obj.component, obj.meta); } delete obj.redirect; delete obj.component; delete obj.meta; if (obj.children) { obj.children = transformRoutes(obj.children); } list.push(obj); }); return list; } export { setRouteBefore, transformRoutes }; \"]},\"738\":{\"h\":\"2.路由容器组件 <Guard>\",\"t\":[\"路由容器组件对路由做了一个包裹，在路由渲染的时候会先执行内部逻辑，调用路由拦截，做统一的路由前置钩子，既能统一处理也能控制拦截跳转\",\"import { Navigate, useLocation, useNavigate } from \\\"react-router-dom\\\"; let temp = null; function Guard({ element, meta, handleRouteBefore }) { meta = meta || {}; const location = useLocation(); const { pathname } = location; const navigate = useNavigate(); if (handleRouteBefore) { if (temp === element) { return element; } const pathRes = handleRouteBefore({ pathname, meta }); const pathResType = Object.prototype.toString .call(pathRes) .match(/s(w+)]/)[1]; if (pathResType === \\\"Promise\\\") { pathRes.then((res) => { if (res && res !== pathname) { navigate(res, { replace: true }); } }); } else { if (pathRes && pathRes !== pathname) { element = <Navigate to={pathRes} replace={true} />; } } } // StrictMode下组件会渲染两次，所以这里用temp变量处理了一下。 temp = element; return element; } export default Guard; \"]},\"739\":{\"h\":\"3.配置文件\",\"t\":[\"结合上面的路由配置，加入路由守卫函数\",\"// 全局路由配置 const routes = [ { path: \\\"/\\\", redirect: \\\"/index\\\", }, { path: \\\"/index\\\", component: () => import(/* webpackChunkName: \\\"index\\\" */ \\\"@/views/index/index\\\"), meta: { title: \\\"首页\\\", needLogin: true, }, }, { path: \\\"/login\\\", component: () => import(/* webpackChunkName: \\\"login\\\" */ \\\"@/views/login/index\\\"), meta: { title: \\\"登录\\\", }, }, { path: \\\"*\\\", component: () => import(/* webpackChunkName: \\\"404\\\" */ \\\"@/views/test/page404\\\"), meta: { title: \\\"404\\\", }, }, ]; /** * @description: 全局路由拦截 * @param {string} pathname 当前路由路径 * @param {object} meta 当前路由自定义meta字段 * @return {string} 需要跳转到其他页时，就返回一个该页的path路径，或返回resolve该路径的promise对象 */ const onRouteBefore = ({ pathname, meta }) => { // 动态修改页面title if (meta.title !== undefined) { document.title = meta.title; } // 判断未登录跳转登录页 if (meta.needLogin) { if (!isLogin) { return \\\"/login\\\"; } } }; export { routes, onRouteBefore }; \",\"只对 component 属性配置的组件处理为懒加载，不想用懒加载的直接使用 element 属性配置\",\"自定义的 meta 数据也会以_meta字段名作为属性传给了每个对应路由组件\",\"routes 是原始路由配置数据，后台管理系统中根据后端数据动态生成导航菜单，配置动态路由权限\",\"拦截函数onRouteBefore会传入到每一个路由容器<Guard>中，对于其返回值，如果存在异步的判断处理，可以 return 一个 promise 对象再 resolve 路径\"]},\"740\":{\"h\":\"4.最后引入守卫函数\",\"t\":[\"import { useRoutes } from \\\"react-router-dom\\\"; import { routes, onRouteBefore } from \\\"@/router\\\"; import { transformRoutes, setRouteBefore } from \\\"@/components/RouterGuard/fn\\\"; function App() { setRouteBefore(onRouteBefore); const elements = useRoutes(transformRoutes(routes)); return elements; } export default App; \",\"最终总结：\",\"在外部 App 组件中引入路由守卫函数，该函数进入闭包引用位置 A\",\"先使用transformRoutes格式化路由表，转换为符合react-router格式规范的路由表，并且路由表中的每一个 element 组件都是包裹了正确路径组件的<Guard>组件\",\"每个<Guard>组件都传入了闭包位置 A 处的路由守卫函数，在正式返回正确的 element 组件前，触发路由守卫函数判断，通过者再正确渲染组件\",\"这部分正确的路由表最后会挂载至 JSX 节点生成 Router 树\"]},\"741\":{\"h\":\"Redux\",\"t\":[\"本章记录基于 Flux 思想在内的多数常用状态管理库，不局限于 Redux\"]},\"742\":{\"h\":\"Flux 架构\",\"t\":[\"Flux 是一种架构思想，解决软件的结构问题，它跟 MVC 架构是同一类东西，但是更加简单和清晰\",\"Facebook Flux 的应用架构利用单向数据流组合 React 中的视图组件，具体流程是：\",\"用户访问 View\",\"View 发出用户的 Action\",\"Dispatcher 收到 Action，要求 Store 进行相应更新\",\"Store 更新后，发出一个'change'事件\",\"View 收到'change'事件后，更新页面\"]},\"743\":{\"h\":\"Redux\",\"t\":[\"Redux 作为应用全局状态管理机而存在，用一个单独的常量状态树（state 对象）保存这一整个应用状态，并且对象不能直接被改变，当数据发生变化，一个新的对象就会被创建（使用 actions 和 reducers），再进行数据跟踪，实现时光旅行\"]},\"744\":{\"h\":\"Redux 使用三原则\",\"t\":[\"state 以单一对象存储在 store 对象中\",\"state 只读（每次都返回一个新对象）\",\"使用纯函数 reducer 执行 state 更新\"]},\"745\":{\"h\":\"Redux 工作流\",\"t\":[\"Redux工作流\"]},\"746\":{\"h\":\"Store\",\"t\":[\"redux 中只有一个 Store，整个应用需要管理的数据都在这个 Store 里面，这个 Store 我们不能直接去改变，只能通过返回新的 Store 去更改它\",\"import { createStore } from \\\"redux\\\"; const store = createStore(reducer); \"]},\"747\":{\"h\":\"Action\",\"t\":[\"这个 action 指的是视图层发起的一个操作，告诉 Store 我们需要改变。比如用户点击了按钮，我们就要去请求列表，列表的数据就会变更。每个 action 必须有一个 type 属性，这表示 action 的名称，然后还可以有一个 payload 属性，这个属性可以带一些参数，用作 Store 变更\",\"Action 是消息的载体，只能被别人操作自己不进行操作\",\"const action = { type: \\\"ADD_ITEM\\\", payload: \\\"new item\\\", // 可选属性 }; \"]},\"748\":{\"h\":\"Reducer\",\"t\":[\"store.dispatch()是 View 发出 Action 的唯一方法，发起 Action 之后会到达 Reducer\",\"Reducer 接收两个参数：当前的 state 和接收到的 action，经过计算，返回一个新的 state\",\"reducer 是一个纯函数，即对于相同的输入，只会有相同的输出，不影响外部的值\"]},\"749\":{\"h\":\"示例代码\",\"t\":[\"store.js\",\"//引入creacteStore,专门用于创建redux中最核心的store对象 import { legacy_createStore as createStore } from \\\"redux\\\"; //引入为Count组件服务的reducer import countRedux from \\\"./reducers\\\"; const store = createStore(countRedux); //暴露出去 export default store; \",\"reducers.js\",\"//接收两个参数 之前的状态preState,和动作对象action //const init=0 export default function countRedux(preState, action) { // 从action对象中拿出：type,data console.log(preState, action); const { type, data } = action; // 根据传进来的type判断要进行的操作 switch (type) { // 如果类型是加，用传进来之前的值+action中的值，返回出去 case \\\"add1\\\": return preState + data; case \\\"add2\\\": return preState - data; default: //返回初始化数据 return 0; } } \",\"视图 view：count.jsx\",\"import React, { Component } from \\\"react\\\"; // 引入状态 import store from \\\"./redux/store.js\\\"; class count extends Component { state = {}; // 组件挂载时调用 componentDidMount() { // 当Redux状态变化时，强制更新render,让页面进行渲染 store.subscribe(() => { this.setState({}); }); } // 加法 add1 = () => { const { value } = this.select; store.dispatch({ type: \\\"add1\\\", data: value * 1 }); }; add2 = () => { const { value } = this.select; //console.log(typeof value)//string store.dispatch({ type: \\\"add2\\\", data: value * 1 }); }; add3 = () => { const { value } = this.select; //console.log(typeof value)//string const count = store.getState(); //string+number=string 所以要把string转number if (count % 2 !== 0) { store.dispatch({ type: \\\"add1\\\", data: value * 1 }); } else { alert(\\\"不符合奇数要求\\\"); } }; add4 = () => { const { value } = this.select; //console.log(typeof value)//string //string+number=string 所以要把string转number setInterval(() => { store.dispatch({ type: \\\"add1\\\", data: value * 1 }); }, 2000); }; render() { return ( <div> {/* 获取状态 */} <h4>{store.getState()}</h4> <select ref={(c) => { this.select = c; }} > <option value=\\\"1\\\">1</option> <option value=\\\"2\\\">2</option> <option value=\\\"3\\\">3</option> <option value=\\\"4\\\">4</option> </select> &nbsp; <button onClick={this.add1}>+</button>&nbsp; <button onClick={this.add2}>-</button>&nbsp; <button onClick={this.add3}>当前求和为奇数再加</button>&nbsp; <button onClick={this.add4}>异步加</button> </div> ); } } export default count; \"]},\"750\":{\"h\":\"Reducer 命名空间\",\"t\":[\"不同的 actions 所处理的属性之间没有联系的，可以把 Reducer 函数拆分，不同函数分管不同属性最终合并 Store\",\"先使用 combineReducers 合并 reducers，在 createStore\",\"import { combineReducers, createStore } from \\\"redux\\\"; const reducers = combineReducers({ a: functionA, b: functionB, c: functionC, }); const store = createStore(reducers); \",\"访问：\",\"(state) => ({ newState: state.a（不同的命名空间） }) \"]},\"751\":{\"h\":\"react-redux\",\"t\":[\"react-redux简化了 redux 的书写流程，使 redux 能更简洁地嵌入到 React 组件中，比如无需组件添加与取消订阅，属性自动获取等\"]},\"752\":{\"h\":\"容器组件与 UI 组件\",\"t\":[\"UI 组件：\",\"只负责 UI 呈现，不带有任何业务逻辑\",\"没有状态，即不使用 state 状态管理\",\"所有数据都由参数 props 提供\",\"不使用任何 redux 的 API\",\"容器组件：\",\"负责管理数据和业务逻辑，不负责 UI 的呈现\",\"带有内部状态\"]},\"753\":{\"h\":\"react-redux 流程\",\"t\":[\"react-redux流程\",\"简化的流程有：\",\"store -> reducers -> combineReducers：reducer 合并\",\"store -> mapStateToProps：状态转 props 属性\",\"actions -> mapDispatchToProps：方法转属性\",\"最终容器组件 = connect(mapStateToProps, mapDispatchToProps：方法转属性)(视图组件)：属性与方法注入\",\"提供者 Provider：提供全局 store\",\"总的来说，react-redux是为了简化 redux 的操作步骤，对视图组件执行 props 属性的按需注入，通过属性直接操作 state 与 action，进一步分离了 redux 与 view 之间的联系，view 组建中不会调用 redux 中的任何 api\",\"从代码风格上来看，react-redux跟vueX风格类似\",\"示例代码详见redux-saga 代码示例引用了react-redux的案例\"]},\"754\":{\"h\":\"Redux异步中间件\",\"t\":[\"redux 自身的 action 函数只支持同步方法，无法识别异步方法并有效执行，因此出现了异步中间件用来增强 redux 功能\",\"工作流程：识别 action 的类型，函数类型执行异步中间件；非函数类型执行同步操作：返回类型值操作 Reducers\"]},\"755\":{\"h\":\"redux-thunk\",\"t\":[\"原理：\",\"function createThunkMiddleware(extraArgument) { return ({ dispatch, getState }) => (next) => (action) => { if (typeof action === \\\"function\\\") { return action(dispatch, getState, extraArgument); } return next(action); }; } const thunk = createThunkMiddleware(); thunk.withExtraArgument = createThunkMiddleware; export default thunk; \",\"store.js\",\"import thunk from \\\"redux-thunk\\\"; import { applyMiddleware } from \\\"redux\\\"; const store = createStore(reducers, applyMiddleware(thunk)); \",\"actions.js\",\"function getWeather(url, params) { return (dispatch, getState) => { axios(url, params) .then((result) => { dispatch({ type: \\\"GET_WEATHER_SUCCESS\\\", payload: result }); }) .catch((err) => { dispatch({ type: \\\"GET_WEATHER_ERROR\\\", error: err }); }); }; } \",\"view.jsx\",\"useEffect(() => { store.dispatch(getAsyncList()); }, []); \",\"dispatch 更改为函数，将 dispatch 作为函数的第一个函数传递进去，在函数内异步操作即可\"]},\"756\":{\"h\":\"redux-promise\",\"t\":[\"redux-thunk适合简单 API 请求场景，redux-promise更适合输入输出操作\",\"源码：\",\"import { isFSA } from \\\"flux-standard-action\\\"; function isPromise(val) { return val && typeof val.then === \\\"function\\\"; } export default function promiseMiddleware({ dispatch }) { return (next) => (action) => { if (!isFSA(action)) { return isPromise(action) ? action.then(dispatch) : next(action); } return isPromise(action.payload) ? action.payload.then( (result) => dispatch({ ...action, payload: result }), (error) => { dispatch({ ...action, payload: error, error: true }); return Promise.reject(error); } ) : next(action); }; } \",\"redux-promise算是``redux-thunk`进一步优化与完善\",\"先判断是不是标准 flux action\",\"如果不是则判断是否 promise，是的话执行action.then(dispatch)，否则执行next(action)\",\"如果是，就判断 payload 是否是 promise，是就 payload.then 获取数据，然后 dispatch 最终的结果，不是则执行 next(action)\",\"简化 actions 写法\",\"const fetchData = (url, params) => fetch(url, params); async function getWeather(url, params) { const result = await fetchData(url, params); if (result.error) { return { type: \\\"GET_WEATHER_ERROR\\\", error: result.error }; } return { type: \\\"GET_WEATHER_SUCCESS\\\", payload: result }; } \"]},\"757\":{\"h\":\"redux-saga\",\"t\":[\"redux-saga是用于代替redux-thunk的异步操作管理中间件。它创建 Sagas 将所有异步操作逻辑存放在一个地方集中处理，以此将同步与异步操作分开维护\"]},\"758\":{\"h\":\"特点\",\"t\":[\"redux-saga算是redux-promise与 Action 订阅发布系统的集成化管理应用\",\"复杂异步\",\"可以使用 takeEvery 打印 logger，便于测试\",\"提供 takeLatest/takeEvery/throttle 方法，便于实现事件监测与节流\",\"提供 cancel/delay 方法，可以取消或延迟异步请求\",\"提供race(effects), [...effects]，支持竞态和并行\",\"提供 channel 机制支持外部事件\"]},\"759\":{\"h\":\"运行流程图\",\"t\":[\"redux-saga\",\"saga 的作用：\",\"监听用户发出的 Action\",\"发现用户发出的 Action 是自己当前的 Action，然后做一些副作用（派发新任务）\",\"store 接收到新的任务，返回新的 State\"]},\"760\":{\"h\":\"示例代码\",\"t\":[\"import React from \\\"react\\\"; import ReactDOM from \\\"react-dom\\\"; import App from \\\"./App\\\"; import { createStore, applyMiddleware, combineReducers } from \\\"redux\\\"; import rootReducer from \\\"./reducers\\\"; /// 开启DevTools工具监听saga import { composeWithDevTools } from \\\"redux-devtools-extension\\\"; import createSagaMiddleware from \\\"redux-saga\\\"; import { Provider } from \\\"react-redux\\\"; import { watchIncrementAsync } from \\\"./sagas/counter\\\"; function* helloSaga() { console.log('Hello Sagas!); } //====1 创建一个saga中间件 const sagaMiddleware = createSagaMiddleware(); //====2 创建store const store = createStore( rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)) ); //==== 3动态执行saga，注意：run函数只能在store创建好之后调用 // 运行成功后，控制台打印'Hello Sagas!' sagaMiddleware.run(helloSaga); ReactDOM.render( <Provider store={store}> <App /> </Provider>, document.getElementById(\\\"root\\\") ); \"]},\"761\":{\"h\":\"核心 API\"},\"762\":{\"h\":\"1.tackEvery\",\"t\":[\"import { takeEvery } from \\\"redux-saga\\\"; function* incrementAsync() { // 延迟1s yield delay(1000); yield put({ type: \\\"increment\\\", }); } // 监听到Action为incrementAsync就会出发incrementAsync函数 function* watchIncrementAsync() { yield takeEvery(\\\"incrementAsync\\\", incrementAsync); } // 注意watchIncrementAsync这个函数必须在主入口index中运行sagaMiddleware.run(watchIncrementAsync); \"]},\"763\":{\"h\":\"2.takeLatest\",\"t\":[\"作用同 takeEvery 一样，唯一的区别是它只关注最后，也就是最近一次发起的异步请求，如果上次请求还未返回，则会被取消。可以理解为异步请求防抖，对同步方法无效\",\"function* watchIncrementAsync() { yield takeLatest(\\\"incrementAsync\\\", fetchData); } \"]},\"764\":{\"h\":\"3.call\",\"t\":[\"异步阻塞调用\",\"用来调用异步函数，将异步函数和函数参数作为 call 函数的参数传入，返回一个 js 对象。saga 引入他的主要作用是方便测试，同时也能让我们的代码更加规范化。\",\"const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms)); function* fetchData() { // 2秒后打印saga（阻塞） // 等同于：yield delay(2000); yield call(delay, 2000); console.log(\\\"saga\\\"); } // 加了call和不加效果是一样的，saga引入他的主要作用是方便测试，同时也能让我们的代码更加规范化。 \"]},\"765\":{\"h\":\"4.fork\",\"t\":[\"异步非阻塞调用，无阻塞的执行 fn，执行 fn 时，不会暂停 Generator\",\"非阻塞任务调用机制：上面我们介绍过 call 可以用来发起异步操作，但是相对于 generator 函数来说，call 操作是阻塞的，只有等 promise 回来后才能继续执行，而 fork 是非阻塞的 ，当调用 fork 启动一个任务时，该任务在后台继续执行，从而使得我们的执行流能继续往下执行而不必一定要等待返回\",\"const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms)); function* fetchData() { // 不用等待2秒，直接可以打印出saga，并发执行 yield fork(delay, 2000); console.log(\\\"saga\\\"); } \"]},\"766\":{\"h\":\"5.put\",\"t\":[\"相当于 dispatch，分发一个 action\",\"yield put({ type: 'incrementAsync'}) \"]},\"767\":{\"h\":\"6.select\",\"t\":[\"相当于 getState，用于获取 store 中相应部分的 state\",\"function* incrementAsync(action) { let state = yield select((state) => console.log(\\\"-----\\\", state)); } \"]},\"768\":{\"h\":\"7.tack\",\"t\":[\"监听 action，暂停 Generator，匹配的 action 被发起时，恢复执行\",\"export function* watchIncrementAsync() { while (true) { yield take(\\\"INCREMENT_ASYNC\\\"); // 监听 yield fork(incrementAsync); } // yield takeLatest(INCREMENT_ASYNC, incrementAsync); //takeLatest } \"]},\"769\":{\"h\":\"8.cancel\",\"t\":[\"创建一个 Effect 描述信息，针对 fork 方法返回的 task ，可以进行取消关闭。cancel(task)\"]},\"770\":{\"h\":\"9.race([...effects])\",\"t\":[\"创建一个 Effect 描述信息，指示 middleware 在多个 Effect 之间运行一个 race(与 Promise.race([...]) 的行为类似)。\",\"race 可以取到最快完成的那个结果，常用于请求超时\",\"import { race, take, call } from 'redux-saga/effects' function* backgroundTask() { while (true) { ... } } function* watchStartBackgroundTask() { while (true) { yield take('START_BACKGROUND_TASK') yield race({ task: call(backgroundTask), cancel: take('CANCEL_TASK') }) } } \"]},\"771\":{\"h\":\"10.all([]...effects)\",\"t\":[\"创建一个 Effect 描述信息，指示 middleware 并行运行多个 Effect，并等待它们全部完成。这是与标准的Promise.all相对应的 API\",\"import { call } from \\\"redux-saga/effects\\\"; // 正确写法, effects 将会同步执行 const [userInfo, repos] = yield[(call(fetch, \\\"/users\\\"), call(fetch, \\\"/repos\\\"))]; // 这两个请求是并行的 \"]},\"772\":{\"h\":\"使用案例\"},\"773\":{\"h\":\"index.js入口文件\",\"t\":[\"import React from \\\"react\\\"; import ReactDOM from \\\"react-dom\\\"; import App from \\\"./App\\\"; import { createStore, applyMiddleware, combineReducers } from \\\"redux\\\"; import rootReducer from \\\"./reducers\\\"; import { composeWithDevTools } from \\\"redux-devtools-extension\\\"; import createSagaMiddleware from \\\"redux-saga\\\"; import { Provider } from \\\"react-redux\\\"; import rootSaga from \\\"./sagas\\\"; //====1 创建一个saga中间件 const sagaMiddleware = createSagaMiddleware(); //====2 创建store const store = createStore( rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)) ); //==== 3动态执行saga，注意：run函数只能在store创建好之后调用 sagaMiddleware.run(rootSaga); ReactDOM.render( <Provider store={store}> <App /> </Provider>, document.getElementById(\\\"root\\\") ); \"]},\"774\":{\"h\":\"App.js入口组件\",\"t\":[\"import React, { Component } from \\\"react\\\"; import { connect } from \\\"react-redux\\\"; import { increment, incrementAsync, decrement } from \\\"./actions/counter\\\"; import \\\"./app.css\\\"; import { get_user } from \\\"./actions/user\\\"; class App extends Component { constructor(props) { super(props); } render() { const { message } = this.props.user; return ( <div className=\\\"App\\\"> <span className=\\\"count\\\">{this.props.counter}</span> <br /> <button onClick={this.props.increment}>同步+1</button> <button onClick={this.props.decrement}>同步-1</button> <button onClick={this.props.incrementAsync}>异步</button> <button onClick={this.props.get_user}>网络请求</button> <h1>{message}</h1> </div> ); } } //映射组件props的数据部分 const mapStateToProps = (state) => { return { counter: state.counter, user: state.user, }; }; //映射组件props的函数部分 // const mapDispatchToProps = (dispatch) => { // return { // increment:(dispatch)=>{dispatch(increment)} // } // }; export default connect(mapStateToProps, { increment, incrementAsync, decrement, get_user, })(App); \"]},\"775\":{\"h\":\"actions文件\",\"t\":[\"// actions/counter.js export const INCREMENT = \\\"INCREMENT\\\"; export const INCREMENT_ASYNC = \\\"INCREMENT_ASYNC\\\"; export const DECREMENT = \\\"DECREMENT\\\"; //count+1 export const increment = () => { return { type: INCREMENT, }; }; //count-1 export const decrement = () => { return { type: DECREMENT, }; }; //异步增加 export const incrementAsync = () => { return { type: INCREMENT_ASYNC, }; }; \",\"// actions/user.js export const get_user = () => { return { type: \\\"FETCH_REQUEST\\\", }; }; \"]},\"776\":{\"h\":\"reducers文件\",\"t\":[\"import { combineReducers } from \\\"redux\\\"; import counter from \\\"./counter\\\"; import user from \\\"./user\\\"; // 合并所有的reduces export default combineReducers({ counter, user, }); \",\"import { INCREMENT, DECREMENT } from \\\"../actions/counter\\\"; const counter = (state = 1, action) => { switch (action.type) { case INCREMENT: return state + 1; case DECREMENT: { return state - 1; } default: return state; } }; export default counter; \",\"const initialState = { message: \\\"等待\\\", age: \\\"20\\\", }; const user = (state = initialState, action) => { switch (action.type) { case \\\"FETCH_REQUEST\\\": return { ...state, message: \\\"请求中\\\", }; case \\\"FETCH_SUCCEEDED\\\": return { ...state, message: \\\"詹姆斯\\\", }; case \\\"FETCH_FAILURE\\\": return { ...state, message: \\\"请求失败\\\", }; default: return state; } }; export default user; \"]},\"777\":{\"h\":\"sagas文件\",\"t\":[\"// saga入口文件index.js import { all } from \\\"redux-saga/effects\\\"; import { counterSagas } from \\\"./counter\\\"; import { userSagas } from \\\"./user\\\"; // 合并所有需要监听的saga export default function* rootSaga() { yield all([...counterSagas, ...userSagas]); } \",\"// 监听counter的actions的saga文件 sagas/counter.js //import { delay } from 'redux-saga'; import { takeEvery, call, put, take, fork, takeLatest, select, all, } from \\\"redux-saga/effects\\\"; import { INCREMENT_ASYNC, INCREMENT_TAKE, DECREMENT } from \\\"../actions/counter\\\"; const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms)); function* incrementAsync(action) { let state = yield select((state) => console.log(state)); //yield fork(delay,2000); //yield delay(2000); yield call(delay, 2000); yield put({ type: \\\"INCREMENT\\\" }); //yield fork(()=>{return put({ type: 'INCREMENT' })}); // yield all([ // //call(delay,2000), // yield put({ type: 'INCREMENT',data:'9898' }), // yield put({ type: 'INCREMENT--' ,data:'000'}), // yield put({ type: 'INCREMENT----' }) // ]) //同步的方式来写异步代码 // yield put({ type: 'INCREMENT' }); } export function* watchIncrementAsync() { while (true) { yield take(\\\"INCREMENT_ASYNC\\\"); yield fork(incrementAsync); yield fork(() => { console.log(\\\"--------\\\"); }); yield fork(() => { console.log(\\\"--------\\\"); }); } yield takeLatest(INCREMENT_ASYNC, incrementAsync); //takeLatest } export const counterSagas = [ //fork(()=>{console.log('---------')}), watchIncrementAsync(), watchIncrementAsync(), watchIncrementAsync(), ]; \",\"// 监听user的actions的saga文件 sagas/user.js import { takeEvery, call, put, all } from \\\"redux-saga/effects\\\"; import axios from \\\"axios\\\"; const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms)); function* fetchUser() { try { //axios.get('https://jsonplaceholder.typicode.com/users') const user = yield call( axios.get, \\\"https://jsonplaceholder.typicode.com/users\\\" ); yield put({ type: \\\"FETCH_SUCCEEDED\\\" }); } catch (e) { yield put({ type: \\\"FETCH_FAILURE\\\" }); } } function* watchFetchUser() { yield all([ takeEvery(\\\"FETCH_REQUEST\\\", fetchUser), // 监听发出Action为FETCH_REQUEST，然后出发请求函数fetchUser ]); } export const userSagas = [watchFetchUser()]; \"]},\"778\":{\"h\":\"案例效果图\",\"t\":[\"redux-saga-result\"]},\"779\":{\"h\":\"总结\",\"t\":[\"redux-saga作为 redux 的中间件，用于更优雅地管理异步\",\"可利用同步的方式处理异步逻辑，便于捕获异常，易于测试\",\"优点：\",\"副作用转移到单独的saga.js中，保持 action 的简单纯粹，使得异步操作集中处理\",\"提供更丰富的 Effects，以及 sagas 的机制（所有的 saga 都可以被中断），处理复杂的异步问题时更方便\",\"每一个 saga 都是一个generator function，代码可以采用同步书写方式处理异步逻辑，代码易读性提高\",\"受益于generator function的 saga 实现，代码异常/请求失败都可以直接通过try/catch语法直接捕获处理\",\"缺点：\",\"generator的调试环境比较糟糕，babel 的source-map经常错位，经常要手动 debugger\",\"redux-saga不强迫捕获异常，没有异常捕获时，出错之后异常难以识别\"]},\"780\":{\"h\":\"redux-observable\",\"t\":[\"redux-observable是基于 RxJs 的实现了 redux 的异步操作管理、比redux-saga学习成本更低的异步中间件。它使用 RxJs 驱动 action 副作用，也不再需要redux-thunk这种异步中间件专门处理异步 action\"]},\"781\":{\"h\":\"核心概念 Epic\",\"t\":[\"Epic 是redux-observable的核心概念和基础模型\",\"它接收一个action stream，输出新的action stream\",\"当一个 action 被 dispatch，历经某个同步或者异步任务，将 dispatch 一个新的 action，携带着它的负载（payload）到 真正的 reducer\",\"Epic 重新定义了 action 的因果关系\",\"function (action$: Observable<Action>, state$: StateObservable<State>): Observable<Action> \"]},\"782\":{\"h\":\"特点\",\"t\":[\"竞态处理\",\"声明式任务处理\",\"测试友好\",\"组件自治\"]},\"783\":{\"h\":\"响应用例\"},\"784\":{\"h\":\"安装依赖\",\"t\":[\"npm install --save rxjs rxjs-compat redux-observable \"]},\"785\":{\"h\":\"index.js入口文件\",\"t\":[\"import React from \\\"react\\\"; import ReactDOM from \\\"react-dom\\\"; import \\\"./index.css\\\"; import App from \\\"./App\\\"; import { createStore, applyMiddleware } from \\\"redux\\\"; import { createEpicMiddleware } from \\\"redux-observable\\\"; import { Provider } from \\\"react-redux\\\"; import rootReducer from \\\"./reducers/root\\\"; import { rootEpic } from \\\"./epics\\\"; const epicMiddleware = createEpicMiddleware(rootEpic); const store = createStore(rootReducer, applyMiddleware(epicMiddleware)); const appWithProvider = ( <Provider store={store}> <App /> </Provider> ); ReactDOM.render(appWithProvider, document.getElementById(\\\"root\\\")); \"]},\"786\":{\"h\":\"actions.js文件\",\"t\":[\"三种 action 对应三种状态，获取、获取成功、获取失败\",\"export const FETCH_WHISKIES = \\\"FETCH_WHISKYS\\\"; export const FETCH_WHISKIES_SUCCESS = \\\"FETCH_WHISKYS_SUCCESS\\\"; export const FETCH_WHISKIES_FAILURE = \\\"FETCH_WHISKYS_FAILURE\\\"; export const fetchWhiskies = () => ({ type: FETCH_WHISKIES, }); export const fetchWhiskiesSuccess = (whiskies) => ({ type: FETCH_WHISKIES_SUCCESS, payload: whiskies, }); export const fetchWhiskiesFailure = (message) => ({ type: FETCH_WHISKIES_FAILURE, payload: message, }); \"]},\"787\":{\"h\":\"rootReducer.js文件\",\"t\":[\"action 的最终执行流向，也对应三种执行状态与默认的初始状态\",\"import { FETCH_WHISKIES, FETCH_WHISKIES_FAILURE, FETCH_WHISKIES_SUCCESS, } from \\\"../actions\\\"; const initialState = { whiskies: [], isLoading: false, error: null, }; export default function rootReducer(state = initialState, action) { switch (action.type) { case FETCH_WHISKIES: return { ...state, // whenever we want to fetch the whiskies, set isLoading to true to show a spinner isLoading: true, error: null, }; case FETCH_WHISKIES_SUCCESS: return { whiskies: [...action.payload], // whenever the fetching finishes, we stop showing the spinner and then show the data isLoading: false, error: null, }; case FETCH_WHISKIES_FAILURE: return { whiskies: [], isLoading: false, // same as FETCH_WHISKIES_SUCCESS, but instead of data we will show an error message error: action.payload, }; default: return state; } } \"]},\"788\":{\"h\":\"rootEpic.js文件\",\"t\":[\"import { combineEpics } from \\\"redux-observable\\\"; // Observable基础类型 import { Observable } from \\\"rxjs\\\"; // 只获取最新的action结果，取消之前的结果 import \\\"rxjs/add/operator/switchMap\\\"; // 遍历流中每个项目执行函数，返回新流Observable import \\\"rxjs/add/operator/map\\\"; // 从非Observable值创建一个Observable/stream import \\\"rxjs/add/observable/of\\\"; // 错误捕获 import \\\"rxjs/add/operator/catch\\\"; // ajax模块 import { ajax } from \\\"rxjs/observable/dom/ajax\\\"; import { FETCH_WHISKIES, fetchWhiskiesFailure, fetchWhiskiesSuccess, } from \\\"../actions\\\"; // 示例请求url地址 const url = \\\"https://evening-citadel-85778.herokuapp.com/whiskey/\\\"; // 相应结果 // { // \\\"count\\\": number, // \\\"next\\\": \\\"url to next page\\\", // \\\"previous\\\": \\\"url to previous page\\\", // \\\"results: array of whiskies // } function fetchWhiskiesEpic(action$, state$) { return action$ .ofType(FETCH_WHISKIES) .switchMap(() => { return ajax .getJSON(url) .map((data) => data.results) .map((whiskies) => whiskies.map((whisky) => ({ id: whisky.id, title: \\\"whisky.title\\\", imageUrl: whisky.img_url, })) ) .map((whiskies) => whiskies.filter((whisky) => !!whisky.imageUrl)); }) .map((whiskies) => fetchWhiskiesSuccess(whiskies)) .catch((error) => Observable.of(fetchWhiskiesFailure(error.message))); } export const rootEpic = combineEpics(fetchWhiskiesEpic); \",\"小结：监听进入 Epic 函数，监听通过 -> 请求数据 -> 数据转换与筛选 -> 最终数据进入成功的 action / 异常捕获数据创建新的 Observable 流手动调用失败的 action\"]},\"789\":{\"h\":\"视图组件\",\"t\":[\"网格组件\",\"import React from \\\"react\\\"; import Whisky from \\\"./Whisky\\\"; const WhiskyGrid = ({ whiskies }) => ( <div style={{ display: \\\"grid\\\", gridTemplateColumns: \\\"1fr 1fr 1fr\\\" }}> {whiskies.map((whisky) => ( <Whisky key={whisky.id} whisky={whisky} /> ))} </div> ); export default WhiskyGrid; \",\"根组件\",\"import React, { Component } from \\\"react\\\"; import { connect } from \\\"react-redux\\\"; import { bindActionCreators } from \\\"redux\\\"; import \\\"./App.css\\\"; import { fetchWhiskies } from \\\"./actions\\\"; import WhiskyGrid from \\\"./components/WhiskyGrid\\\"; class App extends Component { render() { const { fetchWhiskies, isLoading, error, whiskies } = this.props; return ( <div class> <button onClick={fetchWhiskies}>Fetch whiskies</button> {isLoading && <h1>Fetching data</h1>} {!isLoading && !error && <WhiskyGrid whiskies={whiskies} />} {error && <h1>{error}</h1>} </div> ); } } const mapStateToProps = (state) => ({ ...state }); const mapDispatchToProps = (dispatch) => bindActionCreators( { fetchWhiskies, }, dispatch ); export default connect(mapStateToProps, mapDispatchToProps)(App); \"]},\"790\":{\"h\":\"总结\",\"t\":[\"自动响应 redux 的 dispatch，每次触发都会执行我们定义的 Epics 函数\",\"把拉取数据等业务逻辑代码分离到 Epics 函数中，降低代码耦合度，提升维护度\",\"action 都是纯净的对象字面量，不再需要引入redux-thunk\",\"实现 action 的流式传递，action 既是 observable 也是 observer（订阅者与发布者），它是数据流的中转站，既可以订阅上游数据，也能被一个或多个下游订阅\",\"更完整的参考链接详见：https://blog.csdn.net/melxy1997/article/details/118940398\",\"RxJs 官方文档详见：https://cn.rx.js.org/\"]},\"791\":{\"h\":\"Mobx\"},\"792\":{\"h\":\"介绍\",\"t\":[\"原则：任何源自应用状态的东西都应该自动地获得\",\"mobx 利用 getter 和 setter 收集组件的数据依赖关系，从而在数据发生变化时精确锁定组件，使界面更新粒度更加精细\",\"其核心思想实际就是利用了Object.defineProperty和Proxy实现依赖收集与更新\",\"mobx流程\"]},\"793\":{\"h\":\"与 redux 的区别\",\"t\":[\"mobx 写法更偏向 OOP\",\"对一份数据直接进行修改操作，不需要始终返回新数据（内部使用了 immutable）\",\"并非单一 store，可以多 store\",\"redux 默认以 js 原生对象存储数据，mobx 使用可观察对象（Object.defineProperty）\"]},\"794\":{\"h\":\"基本用法\"},\"795\":{\"h\":\"state\",\"t\":[\"import { observable } from \\\"mobx\\\"; //State，被观察者 const todos = observable([ { title: \\\"起床\\\", completed: false, }, { title: \\\"穿⾐\\\", completed: false, }, { title: \\\"洗漱\\\", completed: false, }, ]); \"]},\"796\":{\"h\":\"computed\",\"t\":[\"import { computed } from \\\"mobx\\\"; //Computed values ,由 State 的更新触发 let uncompletedCount = computed( () => todos.filter((todo) => !todo.completed).length ); \"]},\"797\":{\"h\":\"reactions\",\"t\":[\"import { autorun } from \\\"mobx\\\"; //Reactions， 由 State 和 Computed Values 的改变触发执⾏ autorun(() => { console.log( `剩余任务:${uncompletedCount}`, todos .filter((todo) => !todo.completed) .map((todo) => todo.title) .join(\\\", \\\") ); }); \"]},\"798\":{\"h\":\"actions\",\"t\":[\"import { action } from \\\"mobx\\\"; const doTask = action(() => { todos.find((todo) => !todo.completed).completed = true; }); doTask(); \"]},\"799\":{\"h\":\"异步 actions\",\"t\":[\"actions 默认是针对同步方法的，对于嵌套或 async/await 的异步方法往往会出现错误和陷阱\",\"有两种简便写法：\",\"1.runInAction\",\"// .bound bind(this)的语法糖，重定向this @action.bound async getData() { this.test1 = 100 const data = await getDataFromServer(); runInAction(() => { this.test1 = 666 }) } \",\"2.flow\",\"getDataFlows = flow(function* () { let data = yield getDataFromServer(); this.test1 = data + 100; }); \"]},\"800\":{\"h\":\"加入装饰器\",\"t\":[\"mobx 支持在 React 项目中使用装饰器，需要对 babel 进行配置\",\"npm install @babel/plugin-proposal-decorators\",\"修改 package.json， 找到 babel 字段， 添加\\\"plugins\\\": [ \\\"@babel/plugin-proposal-decorators\\\" ]\"]},\"801\":{\"h\":\"在类组件中使用\"},\"802\":{\"h\":\"store\",\"t\":[\"import { observable, action } from \\\"mobx\\\"; class AboutStore { @observable counter = 1; @action add() { this.counter++; } } export default new AboutStore(); \"]},\"803\":{\"h\":\"入口文件\",\"t\":[\"import { Provider } from \\\"mobx-react\\\"; ReactDOM.render( <React.StrictMode> <Router> <Provider homeStore={homeStore} aboutStore={aboutStore}> <App /> </Provider> </Router> </React.StrictMode>, document.getElementById(\\\"root\\\") ); \"]},\"804\":{\"h\":\"视图组件\",\"t\":[\"import { observer, inject } from \\\"mobx-react\\\"; @inject(\\\"aboutStore\\\") @inject(\\\"homeStore\\\") @observer class About extends Component { render() { return ( <div> <h1>About</h1> <p>current counter : {this.props.aboutStore.counter}</p> <p>home counter: {this.props.homeStore.counter}</p> <Link to=\\\"/\\\">去⾸⻚</Link> </div> ); } } \"]},\"805\":{\"h\":\"在函数组件中使用\"},\"806\":{\"h\":\"store\",\"t\":[\"import { observable, action, computed } from \\\"mobx\\\"; export class HomeStore { @observable counter = 1; @computed get doubleCounter() { return this.counter * 2; } @action add() { this.counter++; } } \"]},\"807\":{\"h\":\"context\",\"t\":[\"React 创建 Context 对象\",\"import React from \\\"react\\\"; import { HomeStore } from \\\"../stores/home\\\"; import { AboutStore } from \\\"../stores/about\\\"; export const storesContext = React.createContext({ homeStore: new HomeStore(), aboutStore: new AboutStore(), }); \"]},\"808\":{\"h\":\"useContext\",\"t\":[\"import React, { Component } from 'react'; import { observer } from 'mobx-react'; import { storesContext } from '../storesContext'; const About = observer(() => { const { homeStore, aboutStore } = React.useContext; return ( <div> <h1>About</h1> <p>current counter : {aboutStore.counter}</p> <p>home counter: {homeStore.counter}</p> </div> ) } \"]},\"809\":{\"h\":\"Redux-toolkit\",\"t\":[\"redux-toolkit是目前 redux 官方推荐的编写 redux 逻辑的方法，针对 redux 本身创建 store 繁琐、样板代码过多、依赖外部库等问题进行了优化，调用 API 更加简单快捷\",\"redux 最新版本也已经标记 createStore 方法为弃用，推荐使用 redux-toolkit\",\"yarn add @reduxjs/toolkit react-redux \"]},\"810\":{\"h\":\"入口文件\",\"t\":[\"没有变化\",\"import React from 'react'; import { createRoot } from 'react-dom/client'; import { Provider } from 'react-redux'; import { store } from './app/store'; import App from './App'; import './index.css'; const container = document.getElementById('root')!; const root = createRoot(container); root.render( <Provider store={store}> <App /> </Provider> ); \"]},\"811\":{\"h\":\"store.js\",\"t\":[\"/* app/store.ts */ import { configureStore } from \\\"@reduxjs/toolkit\\\"; import counterReducer from \\\"../features/counter/counterSlice\\\"; import todoReducer from \\\"../features/todo/todoSlice\\\"; export const store = configureStore({ reducer: { counter: counterReducer, todo: todoReducer, }, }); \",\"configureStore 集成了 redux 之前的各种扩展，以对象形式传入，并默认支持redux-DevTools\",\"参数选项表\",\"| 参数 key 值 | 说明 | | reducer | 创建 reducer，传递给 combineReducers 使用 | | middleware | 中间件，传递给 applyMiddleware 使用 | | devTools | 扩展工具，默认为 true | | preloadedState | 初始 state 值，传递给 createStore | | enhancers | 增强 store，传递给 createStore |\"]},\"812\":{\"h\":\"actions&reducers\",\"t\":[\"redux-toolkit加入了 slice，对 action 和 reducer 实现了整合\",\"import { createSlice } from \\\"@reduxjs/toolkit\\\"; export const counterSlice = createSlice({ name: \\\"counter\\\", initialState: { count: 1, }, reducers: { increment(state, { payload }) { state.count = state.count + payload.step; }, decrement(state) { state.count -= 1; }, }, }); export const { increment, decrement } = counterSlice.actions; export const asyncIncrement = (payload) => (dispatch) => { setTimeout(() => { dispatch(increment(payload)); }, 2000); }; export default counterSlice.reducer; \",\"reducers 参数既定义了 reducers，也创建了关联的 actions，最终返回的是一个包含了 actions 和 reducers 的对象\",\"这里直接对 state 进行了修改，因为引用了 immer 的库，底层也是响应式的，总是会返回一个安全不可变的更新值，简化了 reducer 的写法。注意该方式只能在 createSlice 和 createReducer 中编写\",\"异步方法最直接的写法就是采用redux-thunk的方式书写，因为内部已经默认集成了该异步中间件\"]},\"813\":{\"h\":\"视图组件调用\",\"t\":[\"import { useSelector, useDispatch } from \\\"react-redux\\\"; import { increment, asyncIncrement, } from \\\"../toolkit-store/features/counterSlice\\\"; function App() { const { count } = useSelector((state) => state.counter); const dispatch = useDispatch(); return ( <div className=\\\"App\\\"> <button onClick={() => { dispatch(increment({ step: 2 })); }} > {count} </button> <hr /> <button onClick={() => { dispatch(asyncIncrement({ step: 1 })); }} > {count} </button> </div> ); } export default App; \",\"这里可以理解为：\",\"任意组件都能从redux store中读取任意数据\",\"任意组件都能通过dispatch actions引发状态更新（state updates）\"]},\"814\":{\"h\":\"进阶1：副作用处理\",\"t\":[\"createAsyncThunk 支持 thunk，这也是 redux 推荐的方式\",\"下面是推荐写法\",\"export const incrementAsync = createAsyncThunk( \\\"counter/fetchCount\\\", async (amount: number) => { const response = await fetchCount(amount); return response.data; } ); export const counterSlice = createSlice({ name: \\\"counter\\\", initialState, extraReducers: (builder) => { builder .addCase(incrementAsync.pending, (state) => { state.status = \\\"loading\\\"; }) .addCase(incrementAsync.fulfilled, (state, action) => { state.status = \\\"idle\\\"; state.value += action.payload; }) .addCase(incrementAsync.rejected, (state) => { state.status = \\\"failed\\\"; }); }, }); \"]},\"815\":{\"h\":\"进阶2：使用 selector 缓存\",\"t\":[\"当 useSelector 方法涉及到复杂逻辑运算时，且返回一个对象的时候，每次运行都返回了一个新的引用值，会使组件重新渲染，即使返回的数据内容并没有改变，如下带有过滤的 todoList 所示\",\"其原因是复杂数据类型栈地址的变化引发更新机制\",\"const list = useSelector((state: RootState) => { const { todo, visibilityFilter } = state; switch (visibilityFilter) { case VisibilityFilters.SHOW_ALL: return todo; case VisibilityFilters.SHOW_COMPLETED: return todo.filter((t: TodoState) => t.completed); case VisibilityFilters.SHOW_ACTIVE: return todo.filter((t: TodoState) => !t.completed); default: throw new Error(\\\"Unknown filter: \\\" + visibilityFilter); } }); \",\"解决办法是使用 createSelector 函数创建记忆化的 state\",\"const selectTodos = (state: RootState) => state.todo; const selectFilter = (state: RootState) => state.visibilityFilter; // 创建记忆化selector const selectList = createSelector(selectTodos, selectFilter, (todo, filter) => { switch (filter) { case VisibilityFilters.SHOW_ALL: return todo; case VisibilityFilters.SHOW_COMPLETED: return todo.filter((t: TodoState) => t.completed); case VisibilityFilters.SHOW_ACTIVE: return todo.filter((t: TodoState) => !t.completed); default: throw new Error(\\\"Unknown filter: \\\" + filter); } }); // 使用记忆化selector list可在视图中实现缓存 const list = useSelector((state: RootState) => selectList(state)); \"]},\"816\":{\"h\":\"进阶3：范式化state\",\"t\":[\"范式化 state 指的是：\",\"state 中每个特定数据只有一个副本，不存在重复\",\"已范式化的数据保存在表中，项目 ID 是键，项本身是值\",\"也可能有一个特定想用于保存所有 ID 的数组\",\"以上的标准决定了 state 的结构形式为：\",\"{ ids: [\\\"user1\\\", \\\"user2\\\", \\\"user3\\\"], entities: { \\\"user1\\\": {id: \\\"user1\\\", firstName, lastName}, \\\"user2\\\": {id: \\\"user2\\\", firstName, lastName}, \\\"user3\\\": {id: \\\"user3\\\", firstName, lastName}, } } \",\"createEntityAdapter 实现了对范式化结构的存储的一系列标准操作\",\"import { createSlice, PayloadAction, createEntityAdapter, nanoid, EntityState, } from \\\"@reduxjs/toolkit\\\"; import { RootState } from \\\"../../app/store\\\"; export interface TodoPayload { todoId: string; text: string; completed?: boolean; createdTimestamp: number; } /* 创建EntityAdapter */ const todoAdapter = createEntityAdapter<TodoPayload>({ /* 默认值为id */ selectId: (todo) => todo.todoId, /* 对ids进行排序，方法与Array.sort相同，如果不提供，不能保证ids顺序 */ sortComparer: (a, b) => a.createdTimestamp - b.createdTimestamp, }); const todosSlice = createSlice({ name: \\\"todosEntity\\\", initialState: todoAdapter.getInitialState(), reducers: { /* 增 */ addTodo: { reducer( state: EntityState<TodoPayload>, action: PayloadAction<TodoPayload> ) { todoAdapter.addOne(state, action.payload); }, prepare(text: string) { return { payload: { text, todoId: nanoid(), createdTimestamp: Date.now(), }, }; }, }, /* 删 */ removeTodo(state: EntityState<TodoPayload>, action: PayloadAction<string>) { todoAdapter.removeOne(state, action.payload); }, /* 改 */ toggleTodo(state: EntityState<TodoPayload>, action: PayloadAction<string>) { const todo = state.entities[action.payload]; if (todo) { todo.completed = !todo.completed; } }, }, }); /* 查 */ export const { selectAll: selectAllTodos } = todoAdapter.getSelectors( (state: RootState) => state.todoEntity ); /* action */ export const { actions: todoActions } = todosSlice; /* reducer */ export default todosSlice.reducer; \"]},\"817\":{\"h\":\"总结\",\"t\":[\"redux-toolkit仍是以 redux 结构为原型开发的状态管理库，它对 redux 和 react-redux 原本代码冗余、创建复杂的步骤进行了优化，并加入了多种异步解决方案、范式化修改、数据缓存等功能，并提供了 hooks 函数供任意组件使用，是 redux 目前最推荐使用的库\"]},\"818\":{\"h\":\"Dva\",\"t\":[\"Dva 是国人开发的 redux 库，API 数量降至 6 个，更进一步简化了 redux 操作\",\"注意：Dva 近期已经没有维护了，建议使用 Umi\"]},\"819\":{\"h\":\"介绍\",\"t\":[\"dva 首先是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还内置了 react-router 和 fetch，算是一个轻量级的应用框架\",\"dva = React-Router + Redux + Redux-saga\"]},\"820\":{\"h\":\"最简结构\",\"t\":[\"下面是附带了同步、异步 redux 操作、路由注册在内的最简 dva 结构\",\"// 创建应用 const app = dva(); // 注册 Model app.model({ namespace: \\\"count\\\", state: 0, reducers: { add(state) { return state + 1; }, }, effects: { *addAfter1Second(action, { call, put }) { yield call(delay, 1000); yield put({ type: \\\"add\\\" }); }, }, }); // 注册视图 app.router(() => <ConnectedApp />); // 启动应用 app.start(\\\"#root\\\"); \"]},\"821\":{\"h\":\"配置 antd\",\"t\":[\"1、安装 cnpm install antd babel-plugin-import --save 2、在项目的.webpackrc文件添加 { \\\"extraBabelPlugins\\\": [ [\\\"import\\\", { \\\"libraryName\\\": \\\"antd\\\", \\\"libraryDirectory\\\": \\\"es\\\", \\\"style\\\": \\\"css\\\" }] ] } \"]},\"822\":{\"h\":\"dva/router\",\"t\":[\"以下是一个 dva 框架对路由的操作全流程\",\"1、引入 import { Router, Route, Switch } from 'dva/router'; 2、使用 import React from 'react'; import { Router, Route, Switch } from 'dva/router'; import IndexPage from './routes/IndexPage/IndexPage'; import ProductPage from './routes/ProductPage/index' function RouterConfig({ history }) { return ( <Router history={history}> <Switch> <Route path=\\\"/\\\" exact component={IndexPage} /> <Route path=\\\"/product\\\" exact component={ProductPage} /> </Switch> </Router> ); } export default RouterConfig; 3、注册路由,在index.js中 app.router(require('./router').default); .default将路由的RouterConfig配置出来 4、若将Hash路由模式替换成BrowserHistory 1、安装 cnpm install --save history 2、在主入口文件index.js中 import { createBrowserHistory as createHistory } from 'history'; 3、改写初始化app const app = dva({ history: createHistory(), }); 5、路由导航(除了routerRedux和引入方式,其余和react导航相同) 声明式导航: import {Link,NavLink} from 'dva/router' <Link to='/'>跳转</Link> <NavLink to='/'>跳转</NavLink> 编程式导航: 方式一: this.props.history.push('/url') 方式二: import {routerRedux} from 'dva/router' this.props.dispatch(routerRedux.push('/')); 其中: 此种方法不能连接model的方法 即export default connect(mapStateToProps)(App),不能有mapDispatchToProps,否则dispatch会未定义 \"]},\"823\":{\"h\":\"dva/model\",\"t\":[\"流程分析：\",\"1、在model文件夹下创建.js文件 其中这些文件会识别为model文件 src/models下的文件 src/pages/models下的文件 src/pages下所有model.ts文件 2、创建model(即reducer) export default{ namespace:'model名称', state:数据初始值, 其中: 优先级低于app中设置的初始值 const app = dva({ initialState: { count: 1 }, }); reducers:{ 同步方法 xx(state,action){ 改变state的方法 }, xxx(state,action){ 改变state的方法 } }, effects:{ 异步方法 *xx({获取参数名1,获取参数名2,...},{call,put}) { const res=yield call(异步方法,参数1,参数2,...); 异步请求数据后,调用同步方法改变model中的数据 yield put({type:'同步方法名',数据}) } }, subscriptions:{ 订阅监听,在app.start()时被执行 xx({ history, dispatch }) { 监听路由 history.listen(({ pathname }) => { if (pathname === '/') { ... dispatch({ type: 'xx' }); } }); 监听窗口变化 window.onresize=()=>{...} } } 3、在主入口文件index.js中注册model app.model(require('./models/model文件').default); 4、组件连接model(和react-redux写法相同) import {connect} from 'dva' import React,{Component} from 'react' import {connect} from 'dva' class App extends Component{ render() { ... } } 获取model中的状态 const mapStateToProps=(state)=>{ return { productList:state.模块名 } } 分发action(若添加了该参数,则this.props.dispatch无效,不添加可以获取) const mapDispatchToProps=(dispatch)=>{ return { x() { dispatch({ type:'模块名/方法名', 数据 }) } } } this.props.名称调用 export default connect(mapStateToProps,mapDispatchToProps)(App) 5、合并多个model (1)在models下创建index.js入口文件,并添加以下内容 const context=require.context('./',false,/\\\\.js$/); export default context .keys() .filter(item=>item!=='./index.js') .map(key=>context(key)); (2)在index主入口文件,修改app.model为 require('./models').default.forEach(key=>app.model(key.default)); \",\"使用案例：\",\"// model.js import * as api from \\\"../services/example\\\"; export default { namespace: \\\"product\\\", state: { productList: [ { name: \\\"jeff\\\", }, { name: \\\"jack\\\" }, ], }, reducers: { updateList(state, action) { let currenProductList = deepClone(state); currenProductList.productList.push(action.payload); return currenProductList; }, }, effects: { *asyncFun({ payload }, { call, put }) { yield put({ type: \\\"updateList\\\", payload }); }, *asyncPro({ payload }, { call, put }) { const res = yield call(api.getProduct, payload); yield put({ type: \\\"updateList\\\", payload: res.data }); }, }, subscriptions: { setup({ history, dispatch }) { // 监听 history 变化，当进入 `/` 时触发 `load` action history.listen(({ pathname }) => { if (pathname === \\\"/\\\") { console.log(\\\"aa\\\"); // dispatch({ type: 'load' }); } }); }, }, }; //深拷贝方法 function deepClone(arr) { let _obj = JSON.stringify(arr), objClone = JSON.parse(_obj); return objClone; } \",\"// view.js 视图组件 import React, { Component } from \\\"react\\\"; import { connect } from \\\"dva\\\"; import Product from \\\"../../components/Product\\\"; import { Link, NavLink, routerRedux } from \\\"dva/router\\\"; class App extends Component { go = () => { this.props.history.push(\\\"/\\\"); }; go2 = () => { this.props.dispatch(routerRedux.push(\\\"/\\\")); }; go3 = () => { this.props.addAsync({ name: \\\"eason\\\" }); }; render() { const { productList, dispatch } = this.props; return ( <div> <Product dispatch={dispatch} productList={productList} /> <button onClick={() => { this.props.add(); }} > 添加2 </button> <Link to=\\\"/\\\">跳转</Link> <NavLink to=\\\"/\\\">跳转2</NavLink> <button onClick={this.go}>编程式跳转</button> <button onClick={this.go2}>router-redux</button> <button onClick={this.go3}>异步</button> </div> ); } } const mapStateToProps = (state) => { return { productList: state.product, }; }; const mapDispatchToProps = (dispatch) => { return { add() { dispatch({ type: \\\"product/updateList\\\", payload: { name: \\\"tom\\\" }, }); }, addAsync(payload) { console.log(payload); dispatch({ type: \\\"product/asyncFun\\\", payload: payload, }); }, }; }; export default connect(mapStateToProps, mapDispatchToProps)(App); \",\"// 入口文件 import dva from \\\"dva\\\"; import \\\"./index.css\\\"; // import createHistory from 'history/createBrowserHistory'; import { createBrowserHistory as createHistory } from \\\"history\\\"; // 1. Initialize const app = dva({ history: createHistory(), }); // const app=dva(); // 2. Plugins // app.use({}); // 3. Model app.model(require(\\\"./models/example\\\").default); app.model(require(\\\"./models/product\\\").default); // 4. Router app.router(require(\\\"./router\\\").default); // 5. Start app.start(\\\"#root\\\"); \"]},\"824\":{\"h\":\"React-query\",\"t\":[\"react-query是 React 的数据获取库，也是一个 hooks 库，使用很少量的代码完成对服务端的状态管理，且大多数情况下使用查询 useQuery 和修改 useMutation 就可以了\"]},\"825\":{\"h\":\"redux 未能做到的事\",\"t\":[\"redux 可以轻松管理客户端状态，但并不适合处理异步和服务端状态，异步的问题已经由redux-thunk等异步中间件解决了，还剩下服务端状态未能解决\",\"服务端状态有以下几点比较复杂：\",\"缓存（数据未变化时不去请求）\",\"知道数据何时“过时”\",\"在后台更新“过时”的数据\",\"分页、延迟加载等性能优化\",\"结构化共享并存储查询结果\",\"react-query因此出现了，它可以方便地管理服务端的状态\"]},\"826\":{\"h\":\"入口组件\",\"t\":[\"import \\\"./App.css\\\"; import { QueryClient, QueryClientProvider } from \\\"react-query\\\"; import { ReactQueryDevtools } from \\\"react-query/devtools\\\"; import Demo1 from \\\"./components/Demo1\\\"; // 创建一个全局client实例 const queryClient = new QueryClient(); function App() { return ( // 提供clientProvider <QueryClientProvider client={queryClient}> {/* 添加devtools */} {process.env.NODE_ENV === \\\"development\\\" ? ( <ReactQueryDevtools initialIsOpen={false} position=\\\"bottom-right\\\" /> ) : ( \\\"\\\" )} <Demo1 /> </QueryClientProvider> ); } export default App; \"]},\"827\":{\"h\":\"视图组件\",\"t\":[\"视图组件中使用 useQuery 和 useMutation，通过 useQueryClient 获取全局 QueryClient 实例，调用 api 管理 react-query 的请求\",\"import axios from \\\"axios\\\"; import { useMutation, useQuery, useQueryClient } from \\\"react-query\\\"; type dataType = { id: string; title: string; }; const Demo1 = () => { // 访问App QueryClientProvider提供的client const queryClient = useQueryClient(); const query = useQuery(\\\"posts\\\", () => axios.get(\\\"https://jsonplaceholder.typicode.com/posts\\\") ); console.log(query); const { data, isLoading, isError } = query; const { mutate } = useMutation( () => axios.delete(\\\"https://jsonplaceholder.typicode.com/posts/1\\\"), { onSuccess: () => { // 错误处理和刷新 清除缓存信息 queryClient.invalidateQueries(\\\"posts\\\"); }, } ); if (isError) { return <div>error</div>; } if (isLoading) { return <div>loading</div>; } return ( <> <button onClick={() => { mutate(); }} > Delete </button> <ul> {(data?.data as unknown as dataType[])?.map((d) => ( <li key={d.id}>{d.title}</li> ))} </ul> </> ); }; export default Demo1; \"]},\"828\":{\"h\":\"useQuery\",\"t\":[\"useQuery控制台输出\",\"useQuery 接收一个唯一键和一个返回 Promise 的函数以及 config[queryKey, queryFn, config]，可用于在整个程序中重新获取数据、缓存、共享查询等\"]},\"829\":{\"h\":\"状态值\",\"t\":[\"isFetching || status === 'fetching'：类似于 isLoading，不过每次请求时都为 true，所以使用 isFetching 作为 loading 态更好\",\"isLoading || status === 'loading'：查询没有数据，正在获取结果中，只有“硬加载”时才为 true，只要请求在 cacheTime 设定时间内，再次请求就会直接使用 cache，即\\\"isLoading = isFetching + no cached data\\\"\",\"isError || status === 'error'：查询遇到一个错误，此时可以通过 error 获取到错误\",\"isSuccess || status === 'success'：查询成功，并且数据可用，通过 data 获取数据\",\"isIdle || status === 'idle'：查询处于禁用状态\"]},\"830\":{\"h\":\"参数\",\"t\":[\"1.query-keys：作为查询键，指向全局唯一的 useQuery 返回值；可以是字符串，也可以是数组\",\" // A list of todos useQuery('todos', ...) // queryKey === ['todos'] // Something else, whatever! useQuery('somethingSpecial', ...) // queryKey === ['somethingSpecial'] // An individual todo useQuery(['todo', 5], ...) // queryKey === ['todo', 5] // An individual todo in a \\\"preview\\\" format useQuery(['todo', 5, { preview: true }], ...) // queryKey === ['todo', 5, { preview: true }] // A list of todos that are \\\"done\\\" useQuery(['todos', { type: 'done' }], ...) // queryKey === ['todos', { type: 'done' }] \",\"2.query-functions：任何一个返回 Promise 的函数即可\",\"注意：要让 react-query 确定查询出错，查询函数必须抛出异常\",\"const { error } = useQuery([\\\"todos\\\", todoId], async () => { if (somethingGoesWrong) { throw new Error(\\\"Oh no!\\\"); } return data; }); \"]},\"831\":{\"h\":\"并行查询\",\"t\":[\"指并发执行查询，以提高并发性能\",\" function App () { // The following queries will execute in parallel const usersQuery = useQuery('users', fetchUsers) const teamsQuery = useQuery('teams', fetchTeams) const projectsQuery = useQuery('projects', fetchProjects) ... } \",\"下面是更推荐的写法，使用 useQueries 实现\",\"function App({ users }) { const userQueries = useQueries( users.map((user) => { return { queryKey: [\\\"user\\\", user.id], queryFn: () => fetchUserById(user.id), }; }) ); } \"]},\"832\":{\"h\":\"依赖查询\",\"t\":[\"依赖（串行）查询依赖于前面的查询才能执行，在 config 中使用 enabled 属性实现\",\"const { data: user } = useQuery([\\\"user\\\", email], getUserByEmail); const userId = user?.id; const { isIdle, data: projects } = useQuery( [\\\"projects\\\", userId], getProjectsByUser, { enabled: !!userId, } ); \"]},\"833\":{\"h\":\"useMutation\",\"t\":[\"useMutation 用于在执行异步函数之后做下一步操作，并提供了各种执行的生命周期用以修饰执行过程\",\"useMutation(mutationFn, config)\"]},\"834\":{\"h\":\"状态值\",\"t\":[\"与 useQuery 基本相同\"]},\"835\":{\"h\":\"参数\",\"t\":[\"1.mutationFn\",\"执行异步任务并返回 promise 的函数\",\"2.config\",\"onMutate：在触发执行函数之前触发，并传递给执行函数相同的变量。用于回滚乐观更新\",\"onSuccess：执行函数成功后触发，传递成功结果\",\"onSettled：成功或失败都将触发\",\"onError：失败后触发，传递错误\"]},\"836\":{\"h\":\"缓存\",\"t\":[\"react-query 中管理的异步数据均存在缓存\",\"默认情况下， 通过或默认查询实例会将缓存的数据视为过时\",\"查询装载的新实例\",\"窗口重新聚焦\",\"网络已重新连接\",\"可以选择为查询配置重新设置时间间隔\",\"非活跃状态的查询结果默认在 5 分钟后执行垃圾回收\",\"失败的查询将以静默方式默认重试 3 次\",\"通常情况下，通过 queryClient 调取客户端实例来查询缓存\",\"queryClient.getQueryCache：该方法返回此客户端连接到的查询缓存\",\"queryClient.getMutationCache：该方法返回此客户端连接到的执行缓存\",\"queryClient.invalidateQueries：所有匹配的查询都会立即标记为无效，活动查询会在后台重新获取\",\"queryClient.clear：该方法清除所有连接的缓存\"]},\"837\":{\"h\":\"窗口聚焦自动查询\",\"t\":[\"refetchOnWindowFocus 默认为 true，用户短暂离开再返回应用页时，数据就会被标记为过时，这时 react-query 会在后台自动请求新的数据，通过设置 refetchOnWindowFocus 为 false 禁用\",\"const queryClient = new QueryClient({ defaultOptions: { queries: { refetchOnWindowFocus: false, }, }, }); \"]},\"838\":{\"h\":\"模型分析\",\"t\":[\"Query 是 react-query 的底层核心类，主要负责网络数据请求、状态变化处理、内存回收等工作\"]},\"839\":{\"h\":\"网络请求\",\"t\":[\"Query 的网络请求底层通过 Retryer 重试器（Promise）类实现\",\"Query 给 Retryer 指定 fn（请求函数主体）、retry（重试次数）、retryDelay（重试延迟时间），以及一系列状态变化回调函数（比如 onSuccess、onPause 等）\"]},\"840\":{\"h\":\"状态变化\",\"t\":[\"Query 有四种状态，网络请求过程中，Query 的状态会发生变化\",\"export type QueryStatus = 'idle' | 'loading' | 'error' | 'success'\",\"当初始化 Query 时，选项 enabled 设置 false，此时 Query 的状态即为 idle 状态；\",\"loading 状态表示 Query 没有缓存数据，同时正处于请求网络中；\",\"error 状态表示网络请求遇到了异常，可以通过 error 属性获取异常对象；\",\"success 状态表示网络请求正常获得结果，可以通过 data 属性获取响应结果。\",\"Query 使用经典的 reducer 模式处理状态变化。reducer 模式，其实我们并不陌生，Vuex、Redux 等数据状态管理库都是通过 reducer 模式处理数据状态变化的\",\"Query 会在不同的状态变化回调函数中，调用 Dispatch 分发对应的 Action，Dispatch 最终会调用 Reducer 处理状态的变化\",\"Reducer 函数，接受当前状态对象和 Action 对象，经过 Switch 结构处理后，返回新的状态\",\"fetch( options?: QueryOptions, fetchOptions?: FetchOptions ): Promise { this.retryer = new Retryer({ ... onFail: () => { this.dispatch({ type: 'failed' }) }, onPause: () => { this.dispatch({ type: 'pause' }) }, onContinue: () => { this.dispatch({ type: 'continue' }) }, }) ... } private dispatch(action: Action<TData, TError>): void { this.state = this.reducer(this.state, action) } protected reducer( state: QueryState, action: Action ): QueryState { switch (action.type) { case 'fetch': return { ...state, status: 'loading', }), } case 'success': return { ...state, status: 'success', } case 'error': return { ...state, status: 'error', } default: return state } } \"]},\"841\":{\"h\":\"中止请求\",\"t\":[\"Query 实现中止网络请求利用了 AbortController 这个 API\",\"AbortController 表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。使用 AbortController 中止网络请求的基本过程如下：\",\"调用 new AbortController()，构造 AbortController 实例\",\"把 AbortController 实例的 signal 传递给请求方法，使得 AbortController 和请求对象绑定在一起\",\"如果想中止与 AbortController 关联的网络请求时，调用该 AbortController 实例的 abort 方法即可。\",\"Query 也是通过 AbortController 实现中止网络请求。\",\"每次调用 Query 的 fetch 方法时，都会实例化一个 AbortController 对象，并且会把 AbortController.signal 放在 queryFnContext 参数中传递给请求主体 queryFn，开发者可以在请求主体方法 queryFn 手动的绑定 signal。\",\"如果我们想中止 Query 的网络请求，需要调用 Query.cancel，Query.cancel 会调用 Retryer.cancel，不过最终 Retryer 还是会调用 AbortController.abort\"]},\"842\":{\"h\":\"观察者管理\",\"t\":[\"所有使用 Query 的观察者，都要被添加到 Query.observers 数组中。通过 Query.observers 元素长度，可以判断 Query 是否处于活跃状态，当 Query.observers.length === 0 表示没有任何 Observer 在使用 Query 对象，那么，Query 就被视作不活跃的状态，已经具备被垃圾回收的之一条件\",\"一旦 Observer 观察 Query 对象，必须调用 Query.addObserver 方法，把 Observer 添加到 Query.observers 数组中。除此之外，还会停止垃圾回收机制\",\"addObserver(observer: QueryObserver): void { if (this.observers.indexOf(observer) === -1) { this.observers.push(observer) this.hadObservers = true // Stop the query from being garbage collected this.clearGcTimeout() } } \",\"与 Query.addObserver 相反，Query.removeObserver 负责把 observer 从 Query.observers 中移除，同时调度垃圾回收机制，回收 Query 占用的内存\",\"removeObserver(observer: QueryObserver<any, any, any, any, any>): void { if (this.observers.indexOf(observer) !== -1) { this.observers = this.observers.filter(x => x !== observer) if (!this.observers.length) { if (this.cacheTime) { this.scheduleGc() } else { this.cache.remove(this) } } } } \"]},\"843\":{\"h\":\"垃圾回收\",\"t\":[\"react-query 通过 QueryCache 管理所有的 Query 对象，QueryCache 可以看成 Map 结构，key 是 Query 对象的 queryHash 属性（全局唯一的），value 是 Query 对象。一旦 Query 处于无用状态，如果不及时释放其对应的内存，易造成 OOM（内存溢出）\",\"Query 的垃圾回收是通过 Query.scheduleGc 实现的。本质上，就是等待 Query.cacheTime 指定的毫秒时间之后，如果当前 Query 处于不活跃状态，把 Query 从缓存中移除\",\"private scheduleGc(): void { this.clearGcTimeout() if (isValidTimeout(this.cacheTime)) { this.gcTimeout = setTimeout(() => { this.optionalRemove() }, this.cacheTime) } } private optionalRemove() { if (!this.observers.length) { if (this.state.isFetching) { if (this.hadObservers) { this.scheduleGc() } } else { this.cache.remove(this) } } } private clearGcTimeout() { clearTimeout(this.gcTimeout) this.gcTimeout = undefined } \",\"调用 Query.scheduleGc 的时机有两处：\",\"观察者取消观察 Query，触发调用 Query.removeObserver 方法，此时如果没有任何观察者使用 Query 了，会开启垃圾回收\",\"removeObserver(observer: QueryObserver<any, any, any, any, any>): void { if (this.observers.indexOf(observer) !== -1) { this.observers = this.observers.filter(x => x !== observer) if (!this.observers.length) { if (this.cacheTime) { this.scheduleGc() } else { this.cache.remove(this) } } } } \",\"在 react-query 中，除了 Observer 可以实例化一个 Query，也可以通过 QueryClient.prefetchQuery（预请求）创建一个 Query。假若 Query 从未被 Observer 使用的话，该 Query 的内存就会变成僵尸内存。因此，为了确保预请求的 Query 在 cacheTime 时间到了，内存也能被及时释放。Query 的构造函数也会调用 Query.scheduleGc\"]},\"844\":{\"h\":\"原理与本质\"},\"845\":{\"h\":\"场景假设\",\"t\":[\"试想这样一个场景，假设页面上有三个子组件 A, B, C，都需要用到同一个接口的 todo 数据\",\"react-query原理图1\",\"如果直接调用 useQuery，那么三次 useQuery 会发送 3 个相同请求\",\"// compA const { data, isLoading } = useQuery(\\\"todos\\\", fetchTodos); // compB const { data, isLoading } = useQuery(\\\"todos\\\", fetchTodos); // compC const { data, isLoading } = useQuery(\\\"todos\\\", fetchTodos); \",\"react-query原理图2\",\"但实际上请求只会发出一次，因为三个 useQuery，我们都定义了同一个值为 'todos' 的 queryKey，它代表请求唯一标识\"]},\"846\":{\"h\":\"探讨本质\"},\"847\":{\"h\":\"唯一标识\",\"t\":[\"在 react-query 中，代表请求唯一标识的并不是请求的路径 path，而是 queryKey，它作为 useQuery 必传的第一个参数，接收字符串、数组、对象等一切可被序列化的值\",\"上面声明的 queryKey 都为 'todos'，接收到 queryKey 后，useQuery 会在内部找到或者创建与之对应的 Query 实例，Query 实例包含 isLoading，data 等状态，queryKey 与 Query 实例一一对应\",\"于是，三个基本同时发出的请求也都收敛到了 Query 实例内部发出，直接与服务端交互。3 个 queryKey 对应 1 个 Query 实例，所以只会有一次请求\"]},\"848\":{\"h\":\"缓存管理\",\"t\":[\"全局实例化的 QueryClient，会在内部存储所有未过期的 Query，作为一个外部的 store 管理起来。Query 以 map 键值对的方式保存在 store 中，key 为 queryHash，value 为 Query\",\"因此，react-query 本质就是一个外部的状态管理库\",\"react-query原理图3\"]},\"849\":{\"h\":\"触发更新渲染\",\"t\":[\"触发更新渲染的内容比较复杂，简而言之，是在观察者观测到状态变化时，通过调用 React 提供的 API 触发 React 强制更新\",\"更详细的内容详见：https://juejin.cn/post/7169515109172609032#heading-1\"]},\"850\":{\"h\":\"React生态\",\"t\":[\"ReactRouter\",\"Redux\",\"Redux 异步中间件\",\"Mobx\",\"Redux-toolkit\",\"Dva\",\"ReactQuery\"]},\"851\":{\"h\":\"CSS基础\"},\"852\":{\"h\":\"简介\",\"t\":[\"主要使用场景：美化网页，布局页面。\"]},\"853\":{\"h\":\"HTML 的局限性\",\"t\":[\"HTML 只关注内容的语义。\"]},\"854\":{\"h\":\"CSS-网页的美容师\",\"t\":[\"CSS 也是一种标记语言。\",\"主要作用：设置 HTML 页面中的文本内容（字体大小对齐方式）、图片的外形（宽高、边框样式、边距）以及版面的布局和外观显示样式。\",\"总结：HTML 做结构，显示元素内容。CSS 美化 HTML，布局网页。\",\"CSS 最大价值：由 HTML 专注去做结构呈现，样式交给 CSS，即结构与样式分离。\",\"CSS 特点：会自动更新。\",\"CSS 规则：1.类 2.标签 3. ID 4.复合内容\"]},\"855\":{\"h\":\"CSS 语法规范\",\"t\":[\"规则组成：选择器以及一条或多条声明。\",\"选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式\",\"属性和属性值以“键值对”的形式出现\",\"属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等\",\"属性和属性值之间用英文分号 ; 分开\"]},\"856\":{\"h\":\"书写样式\"},\"857\":{\"h\":\"建议展开格式\",\"t\":[\"h3 { color: pink; font-size: 20px; } \"]},\"858\":{\"h\":\"样式大小写\",\"t\":[\"强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。\"]},\"859\":{\"h\":\"空格规范\",\"t\":[\"属性值前面，冒号后面，保留一个空格。\",\"选择器（标签）和大括号中间保留空格。\"]},\"860\":{\"h\":\"基础选择器\",\"t\":[\"基础选择器由单个选择器组成。\",\"基础选择器包括：标签选择器、类选择器、id 选择器和通配符选择器。\"]},\"861\":{\"h\":\"标签选择器\",\"t\":[\"是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。\",\"优点：能快速为页面中同类型的标签统一设置样式。\",\"缺点：不能设计差异化样式，只能选择全部的当前标签。\"]},\"862\":{\"h\":\"类选择器\",\"t\":[\"差异化不同标签，单独一个或几个标签设置。\",\"语法: { 属性 1: 属性值 1; 属性 2: 属性值 2; …… }\",\"结构需要用 class 属性来调用 class 类。\",\"注意\",\"类选择器使用”.”进行标识，后面紧跟类名（自定义，自命名）。\",\"可以理解为给这个标签起了一个名字来表示。\",\"长名称或词组可以使用中横线来为选择器命名。\",\"不要使用纯数字、中文等命名，尽量使用英文字母来表示。\",\"命名规范：见附件（Web 前端开发规范手册.docx）\",\"多类名：在标签class属性中写多个类名，多个类名中间必须用空格分开。\",\"多类名使用场景（面向对象思维）\",\"把标签元素相同的样式（共同的部分）放到一个类里面。\",\"这些标签都可以调用这个公共的类，然后再调用自己独有的类。\",\"节省 CSS 代码，修改方便。\"]},\"863\":{\"h\":\"id 选择器\",\"t\":[\"为标有特定 id 的 HTML 元素指定特定的样式。\",\"HTML 元素以 id 属性来设置 id 选择器\",\"语法：CSS 中 id 选择器以\\\" # \\\"来定义。\",\"注意：id 属性只能在每个 HTML 文档中出现一次。\",\"口诀：样式#定义，结构 id 调用，只能调用一次，别人切勿使用。\",\"id 选择器和类选择器区别\",\"类选择器 class 好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。\",\"id 选择器好比人的身份证号码，全中国唯一，不得重复。\",\"id 选择器和类选择器最大的不同在于使用次数上。\",\"类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 Javascript 搭配使用。\"]},\"864\":{\"h\":\"通配符选择器\",\"t\":[\"使用 * 定义，表示选区页面中所有元素（标签）。\",\"最终总结\",\"基础选择器\",\"作用\",\"特点\",\"使用情况\",\"用法\",\"标签选择器\",\"可以选出所有相同的标签，比如 p\",\"不能差异化选择\",\"较多\",\"p { color: red; }\",\"类选择器\",\"可以选出 1 个或多个标签\",\"可以根据需求选择\",\"非常多\",\".nav { color: red; }\",\"id 选择器\",\"一次只能选择 1 个标签\",\"可以根据需求选择\",\"非常多\",\".nav { color: red; }\",\"通配符选择器\",\"选择所有的标签\",\"选择的太多，有部分不需要\",\"特殊情况使用\",\"* { color: red; }\"]},\"865\":{\"h\":\"CSS 的引入方式\",\"t\":[\"按照 CSS 书写位置（引入方式），CSS 样式表可以分为三大类：\",\"1、行内样式表（行内式）\",\"2、内部样式表（嵌入式）\",\"3、外部样式表（链接式）\"]},\"866\":{\"h\":\"内部样式表\",\"t\":[\"写到 html 页面内部，将所有 CSS 代码抽取出来单独放到<style>标签里。\",\"<style>标签理论上可以放在 HTML 文档任何地方，默认放到<head>标签中。通过此种方式，可以方便控制整个页面中的元素样式设置。\",\"缺点：没有实现结构与样式完全分离。\"]},\"867\":{\"h\":\"行内样式表\",\"t\":[\"元素标签内部的 style 属性中设定 CSS 样式，适合修改简单样式。\",\"例：<div style=\\\"color: red; font-size: 20px;\\\">Hello World!</div>\",\"style 称为标签的属性。\",\"双引号中间，写法要符合 CSS 规范。当前标签设置样式可控。\",\"书写繁琐，没有体现结构与样式分离思想，不推荐使用。只有对当前元素添加简单样式的时候考虑使用。\",\"使用行内样式表设定 CSS，通称行内式引入。\"]},\"868\":{\"h\":\"外部样式表\",\"t\":[\"实际开发都是外部样式表。适合于样式比较多的情况。核心：样式单独写到 CSS 文件中，把 CSS 文件引入到 HTML 页面中使用。\",\"步骤：\",\"1.新建一个后缀名为.css 的样式文件，把所有 CSS 代码都放入此文件中。\",\"2.在 HTML 页面中，使用<link>标签引入这个文件。\",\"<link rel=\\\"stylesheet\\\" href=\\\"css文件路径\\\">\",\"属性\",\"作用\",\"rel\",\"定义当前文档与被链接文档之间的关系，在这里需要指定为\\\"stylesheet\\\"，表示被链接的文档是一个样式表文件。\",\"href\",\"定义所链接外部样式表文件的 URL，可以是相对路径，也可以是绝对路径。\",\"CSS 引入方式总结\",\"属性\",\"作用\",\"作用\",\"作用\",\"作用\",\"行内样式表\",\"书写方便，权重高\",\"结构样式混写\",\"较少\",\"控制一个标签\",\"内部样式表\",\"部分结构和样式相分离\",\"没有彻底分离\",\"较多\",\"控制一个页面\",\"外部样式表\",\"完全实现结构和样式相分离\",\"需要引入\",\"最多，吐血推荐\",\"控制多个页面\"]},\"869\":{\"h\":\"复合选择器\",\"t\":[\"复合选择器可以更准确、更高效地选择目标元素（标签）。\",\"复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的。\",\"常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器等。\"]},\"870\":{\"h\":\"后代选择器（重要）\",\"t\":[\"后代选择器又称为包含选择器，可以选择父元素里面的子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。\",\"语法：元素 1 元素 2\",\"选择元素 1 里面的所有元素 2.\",\"1 和 2 可以是任意基础选择器。\"]},\"871\":{\"h\":\"子选择器（重要）\",\"t\":[\"子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。\",\"语法：元素 1 > 元素 2\",\"元素 1 和 2 中间用大于号隔开。\",\"1 是父级，2 是子级，最终选择元素 2。\",\"元素 2 必须是亲儿子。\"]},\"872\":{\"h\":\"并集选择器\",\"t\":[\"并集选择器可以选择多组标签，同时为他们定义相同的样式。通常用于集体声明。\",\"各选择器通过 , 连接，任何形式的选择器都可以作为并集选择的一部分\",\"语法：元素 1,元素 2\",\"元素 1 和元素 2 中间用逗号隔开。\",\"逗号可以理解为 和、&。\",\"约定的语法规范，并集选择器喜欢竖着写。\"]},\"873\":{\"h\":\"伪类选择器\",\"t\":[\"向某些选择器添加特殊的效果。书写特点冒号显示 :\",\"常用有链接伪类、结构伪类。先了解常用的链接伪类选择器。\",\"a:link 选择所有未被访问的链接\",\"a:visited 选择所有已被访问的链接\",\"a:hover 选择鼠标指针位于其上的链接\",\"a:active 选择活动链接（鼠标按下未弹起的链接）\",\"a:focus 选择光标焦点位于其上的链接\",\"链接伪类选择器注意事项：\",\"1.为了确保生效，请按照 LVHA 循顺序声明：link visited hover active.\",\"2.因为 a 链接在浏览器中具有默认样式，实际工作中都需要给链接单独指定样式。常用写法： a {} + a:hover {} :focus 伪类选择器用于选取获得焦点（光标）的表单元素。\",\"3.注意顺序不能颠倒，先写 link 后写 visited。\",\"一般情况<input>才能获取，主要针对表单元素使用。\",\"复合选择器总结\",\"选择器\",\"作用\",\"特征\",\"使用情况\",\"隔开符号及用法\",\"后代选择器\",\"用来选择后代元素\",\"可以是子孙后代\",\"较多\",\"符号是空格 .nav a\",\"子代选择器\",\"选择最近一级元素\",\"只选亲儿子\",\"较少\",\"符号是大于 .nav>a\",\"并集选择器\",\"选择某些相同样式的元素\",\"可以用于集体声明\",\"较多\",\"符号是逗号 .nav,.header\",\"链接伪类选择器\",\"选择不同状态的链接\",\"大多跟链接相关\",\"较多\",\"重点记住 a{} 和 a:hover 实际开发的写法\",\":focus 选择器\",\"选择获得光标的表单\",\"跟表单相关\",\"较少\",\"input:focus记住这个写法\"]},\"874\":{\"h\":\"CSS属性\"},\"875\":{\"h\":\"显示属性\",\"t\":[\"元素显示模式就是元素（标签）以什么方式进行显示。\",\"HTML 元素一般分为块元素和行内元素两种类型。\"]},\"876\":{\"h\":\"块元素\",\"t\":[\"常见块元素 h1~h6 p div ul ol li，其中 div 是最典型的块元素。\",\"特点：\",\"比较霸道，自己独占一行。\",\"高度、宽度、外边距以及内边距都可以控制。\",\"宽度默认是容器（父级宽度）的 100%。\",\"是一个容器及盒子，里面可以放行内或者块级元素。\",\"注意：\",\"文字类的元素内不能使用块级元素。\",\"<p>标签主要用于存放文字，因此<p>里面不能放块级元素，特别不能放<div>。h1~h6 这种文字类块级元素也不能放其他块级元素。\"]},\"877\":{\"h\":\"行内元素\",\"t\":[\"常见行内元素 a strong b em i del s ins u span，其中 span 是最典型的行内元素，也称为内联元素。\",\"特点：\",\"相邻行内元素在一行上，一行可以显示多个。\",\"高、宽度直接设置无效。\",\"默认宽度为本身内容的宽度。\",\"行内元素只能容纳文本或其他行内元素。\",\"注意：\",\"链接里面不能再放链接。\",\"特殊情况链接<a>里面可以放块级元素，但是转换块级模式更安全。\"]},\"878\":{\"h\":\"行内块元素\",\"t\":[\"<img /><input /><td>，同时具有块元素和行内元素的特点，有些资料称为行内块元素。\",\"特点：\",\"和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）。\",\"默认宽度是本身内容宽度（行内元素特点）。\",\"高度、行高、外边距以及内边距都可以控制（块级元素特点）。\",\"元素显示模式总结\",\"元素模式\",\"元素排列\",\"设置样式\",\"默认宽度\",\"包含\",\"块级元素\",\"一行只能放一个块级元素\",\"可以设置宽度高度\",\"容器的 100%\",\"容器级可以包含任何标签\",\"行内元素\",\"一行可以放多个行内元素\",\"不可以直接设置宽度高度\",\"它本身内容的宽度\",\"容纳文本或其他行内元素\",\"行内块元素\",\"一行放多个行内块元素\",\"可以这是宽度高度\",\"它本身内容的宽度\"]},\"879\":{\"h\":\"元素显示模式转换\",\"t\":[\"块元素转换：display: block;\",\"行内元素转换：display: inline;\",\"行内块元素转换：display:inline-block;\"]},\"880\":{\"h\":\"小技巧 单行文字垂直居中代码\",\"t\":[\"CSS 没有提供文字垂直居中代码，实现方法：让文字的行高 line-height == 盒子高度 div.height。\"]},\"881\":{\"h\":\"字体属性\",\"t\":[\"字体属性定义 字体系列、大小、粗细和文字样式。\"]},\"882\":{\"h\":\"字体系列 font-family\",\"t\":[\"CSS 使用 font-family 属性定义文本的字体系列。\",\"各字体之间必须使用英文逗号隔开。\",\"一般情况下，如果有空格隔开的多个单词组成的字体，加引号。\",\"尽量使用系统默认自带字体，保证任何用户浏览器都能正确显示。\",\"最常见的字体：\",\"body{font-family:’Microsoft YaHei’,tahoma,arial,’Hiragino Sans GB’;}\"]},\"883\":{\"h\":\"字体大小 font-size\",\"t\":[\"CSS 使用 font-size 属性定义字体大小。\",\"px（像素）大小是我们网页的最常用的单位。谷歌浏览器默认 16px。\",\"不同浏览器可能默认显示的字号大小不一致，尽量给一个明确值大小，不要默认太小。\",\"可以给 body 指定整个页面文字的大小。\"]},\"884\":{\"h\":\"字体粗细 font-weight\",\"t\":[\"CSS 使用 font-weight 属性设置文本字体的粗细。\",\"参数：\",\"normal number400\",\"bold number700\",\"bolder IE5 + 特粗体\",\"lighter IE5 + 细体\",\"number IE5 + 100 200 300 ……\",\"实际开发中，提倡使用数字表示加粗或者变细。\"]},\"885\":{\"h\":\"文本风格 font-style\",\"t\":[\"CSS 使用 font-style 属性设置文本的风格。\",\"属性值：\",\"normal 默认值，浏览器显示标准样式 font-style: normal;\",\"italic 浏览器会显示斜体的字体样式。\",\"注意：平时很少给文字加斜体，反而要给斜体标签改不倾斜字体\"]},\"886\":{\"h\":\"大小写显示 font-variant\",\"t\":[\"font-variant 属性主要用于定义小型大写字母文本\",\"font-variant 属性设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小\",\"值\",\"描述\",\"small-caps\",\"浏览器会显示小型大写字母的字体。0\",\"inherit\",\"规定应该从父元素继承 font-variant 属性的值。\"]},\"887\":{\"h\":\"font 属性复合使用\",\"t\":[\"font:font-sytle font-variant font-weight font-size/line-height font-family;\",\"顺序依次为 风格 粗细 大小 样式。不能颠倒顺序，属性间以空格隔开。必须至少保留 font-size 和 font-family 属性。\",\"字体属性总结\",\"属性\",\"表示\",\"注意点\",\"font-size\",\"字号\",\"我们通常用的单位是 px 像素，一定要跟上单位\",\"font-family\",\"字体\",\"实际工作中按照团队约定来写字体\",\"font-weight\",\"字体粗细\",\"记住加粗是 700 或者 bold，不加粗是 normal 或者 400，记住数字不要跟单位\",\"font-style\",\"字体样式\",\"记住倾斜是 italic，不倾斜是 normal，工作中我们最常用 normal\",\"font\",\"字体连写\",\"1.字体连写是有顺序的，不能随意换位置 2.其中字号和字体必须同时出现\"]},\"888\":{\"h\":\"文本属性\",\"t\":[\"CSStext 文本属性可定义文本外观（颜色、对齐文本、装饰文本、文本缩进、行间距等）。\"]},\"889\":{\"h\":\"文本颜色 color\",\"t\":[\"表示：预定义颜色、十六进制（#FF0000）（最常用）、RGB 代码(rgb(255,0,0)或者 rgb(100%,0%,0%))。\"]},\"890\":{\"h\":\"对齐文本 text-align\",\"t\":[\"用于设置元素内文本内容的水平对齐方式。\",\"left 左对齐（默认） right 右对齐 center 居中对齐\"]},\"891\":{\"h\":\"装饰文本 text-decoration\",\"t\":[\"规定添加到文本的修饰。可添加下划线、删除线、上划线等。\",\"none 默认无装饰线 underline 下划线，链接 a 自带下划线\",\"overline 上划线（几乎不用） line-through 删除线（不常用）\"]},\"892\":{\"h\":\"文本缩进 text-indent\",\"t\":[\"指定文本的第一行缩进，通常是将段落的首行缩进。\",\"px:像素单位 em:相对单位，相对当前元素的倍数。\"]},\"893\":{\"h\":\"行间距 line-height\",\"t\":[\"设置行间距离（行高）。控制文字行与行之间的距离。\",\"行间距=上间距+文本高度+下间距。\"]},\"894\":{\"h\":\"文本转换 text-transform\",\"t\":[\"对标签中的文本值做大小写转换。\",\"值\",\"描述\",\"none\",\"默认。定义带有小写字母和大写字母的标准的文本。\",\"capitalize\",\"文本中的每个单词以大写字母开头。1\",\"uppercase\",\"定义仅有大写字母。全部大写 1\",\"lowercase\",\"定义无大写字母，仅有小写字母。全部小写 1\",\"inherit\",\"规定应该从父元素继承 text-transform 属性的值。\"]},\"895\":{\"h\":\"单词间距 word-spacing\",\"t\":[\"word-spacing 属性增加或减少单词间的空白（即单词间隔）。\",\"值\",\"描述\",\"normal\",\"默认。定义单词间的标准空间。\",\"length\",\"定义单词间的固定空间。\",\"inherit\",\"规定应该从父元素继承 word-spacing 属性的值。\"]},\"896\":{\"h\":\"字符间距 letter-spacing\",\"t\":[\"letter-spacing 属性增加或减少字符间的空白（字母或中文在间距）。\",\"值\",\"描述\",\"normal\",\"默认。规定字符间没有额外的空间。\",\"length\",\"定义字符间的固定空间（允许使用负值）。\",\"inherit\",\"规定应该从父元素继承 letter-spacing 属性的值。\"]},\"897\":{\"h\":\"文本溢出 text-overflow\",\"t\":[\"text-overflow 属性指定当文本溢出包含它的元素时，应该如何显示。可以设置溢出后，文本被剪切、显示省略号 (...) 或显示自定义字符串（不是所有浏览器都支持）。\",\"值\",\"描述\",\"clip\",\"剪切文本\",\"ellipsis\",\"显示省略符号…来代表被修剪的文本\",\"string\",\"使用给定的字符串来代表被修剪的文本\",\"initial\",\"设置为属性默认值\",\"inherit\",\"从父元素继承该属性值\"]},\"898\":{\"h\":\"元素间距 white-space\",\"t\":[\"用于处理元素内的空白，只在一行内显示。\",\"值\",\"描述\",\"normal\",\"默认。空白会被浏览器忽略。\",\"pre\",\"空白会被浏览器保留。其行为方式类似 HTML 中的<pre>标签。0\",\"nowrap\",\"文本不会换行，文本会在在同一行上继续，直到遇到<br>标签为止。0.5\",\"pre-wrap\",\"保留空白符序列，但是正常地进行换行。0\",\"pre-line\",\"合并空白符序列，但是保留换行符。\",\"inherit\",\"规定应该从父元素继承 white-space 属性的值。\"]},\"899\":{\"h\":\"单词换行 word-wrap\",\"t\":[\"word-wrap 属性允许长单词或 URL 地址换行到下一行。\",\"值\",\"描述\",\"normal\",\"只在允许的断字点换行（浏览器保持默认处理）\",\"break-word\",\"在长单词或 URL 地址内部进行换行\"]},\"900\":{\"h\":\"单词断行 word-break\",\"t\":[\"word-break 属性指定非 CJK 脚本的断行规则。\",\"提示:CJK 脚本是中国，日本和韩国（\\\"中日韩\\\"）脚本\",\"值\",\"描述\",\"normal\",\"使用浏览器默认的换行规则\",\"break-all\",\"允许在单词内换行\",\"keep-all\",\"只能在半角空格或连字符处换行\",\"word-bread、word-wrap、white-space 区别\",\"white-space、word-wrap 和 word-break 通常用来解决如下问题：\",\"强制字符串过长在一行显示；\",\"单词太长，希望折成多行显示（避免溢出）；\",\"保留空格（敲了 10 个空格，最终只显示 1 个）\",\"保留回车（敲了 10 个回车，浏览器完全不显示）\",\"但三者仍有区别：\",\"white-space 属性设置如何处理元素内的空白\",\"word-wrap 属性用来标明是否允许浏览器在单词内进行断句\",\"word-break 属性用来标明怎么样进行单词内的断句\",\"单行文本超出显示省略号方法详见 溢出文字省略号显示\"]},\"901\":{\"h\":\"背景属性\",\"t\":[\"通过背景属性，可以给页面元素添加背景样式。\",\"背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。\"]},\"902\":{\"h\":\"背景颜色 background-color\",\"t\":[\"背景颜色为红色：{ background-color: red }\",\"一般情况下背景颜色默认值 transparent（透明）。\"]},\"903\":{\"h\":\"背景图片 background-image\",\"t\":[\"实际开发常见于 logo 或者一些装饰性的小图片或者超大背景图，优点是非常便于控制位置（精灵图也是一种运用场景）。\",\"{ background-image: none | url (url) } （默认平铺）\"]},\"904\":{\"h\":\"背景平铺 background-repeat\",\"t\":[\"对背景图像实现平铺。\",\"{ background-repeat: repeat | no-repeat | repeat-x | repeat-y }\"]},\"905\":{\"h\":\"背景图片位置 background-position\",\"t\":[\"改变图片在背景中的位置。\",\"{ background-position: x y; }\",\"x 坐标和 y 坐标，可以使用方位名词或精确单位。\",\"参数是方位名词\",\"前后顺序无关：left top / top left 效果一致。\",\"只指定了一个方位名词，另一个值省略，第二个值默认居中对齐。\",\"参数是精确单位\",\"第一个是 x 坐标，第二个是 y 坐标。\",\"只指定一个数值，那该数值一定是 x 坐标，y 坐标默认垂直居中。\",\"参数是混合单位\",\"方位名词和精确单位混用，第一个是 x 坐标，第二个是 y 坐标。\"]},\"906\":{\"h\":\"背景图像固定 background-attachment\",\"t\":[\"设置背景图像是否固定或者随着页面的其余部分滚动。后期可以制作视差滚动效果。\",\"{ background-attachment: scroll | fixed 滚动/固定 }\"]},\"907\":{\"h\":\"背景复合写法\",\"t\":[\"简写属性没有特定书写顺序，一般书写规范：\",\"background:背景颜色 图片地址 背景平铺 背景图像滚动 背景图片位置。\"]},\"908\":{\"h\":\"背景色半透明\",\"t\":[\"{ background: rgba(0, 0, 0, 0.3); }（一般习惯把 0.3 的 0 省略掉）\",\"最后一个参数是 alpha 透明度，取值范围 0~1。\",\"背景总结\",\"属性\",\"作用\",\"值\",\"background-color\",\"背景颜色\",\"预定义的颜色值/十六进制/RGB(A)代码\",\"background-image\",\"背景图片\",\"url(图片路径)\",\"background-repeat\",\"是否平铺\",\"repeat/no-repeat/repeat-x/repeat-y\",\"background-position\",\"背景位置\",\"length/position 分别是 x 和 y 坐标\",\"background-attachment\",\"背景附着\",\"scroll（背景滚动）/fixed（背景固定）\",\"背景简写\",\"书写更简单\",\"背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;\",\"背景色半透明\",\"背景颜色半透明\",\"background: rgba(0,0,0,0.3); 后面必须是 4 个值\"]},\"909\":{\"h\":\"边框属性\",\"t\":[\"边框组成：边框宽度（粗细）、边框样式、边框颜色。\",\"语法：border : border-width border-style border-color\",\"border-style: none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\",\"详细参数\",\"none: 无边框。与任何指定的 border-width 值无关\",\"hidden：隐藏边框。IE 不支持\",\"dashed：虚线边框，当 border 不定义边框指定的一面，就默认四条边都是实线边框。也可以虚线跟实线定义\",\"dotted：虚线边框，dashed 是短竖线，而 dotted 边框是由点组成的。主要还是点状的频率不同，dotted 频度高，dashed 的频度偏小\",\"solid：实线边框\",\"double：双线边框。两条单线与其间隔的和等于指定的 border-width 值\",\"groove：根据 border-color 值画 3D 凹槽\",\"ridge：根据 border-color 值画菱形边框\",\"inset：根据 border-color 值画 3D 凹边\",\"outset：根据 border-color 值画 3D 凸边\",\"常用：solid dashed dotted\",\"额外内容1：表格细线边框 border-collapse\",\"语法：border-collapse: collapse; 相邻边框合并在一起。\",\"因为常态下边框会额外增加盒子的实际大小，解决方案：\",\"测量盒子大小的时候，不量边框。\",\"如果测量的时候包含了边框，则需要宽高减去边框厚度。\",\"额外内容2：边框图像 border-image\",\"border-image 属性可以通过一些简单的规则，将一副图像划分为 9 个单独的部分，浏览器会自动使用相应的部分来替换边框的默认样式。border-image 属性是五个 border-image-* 属性的简写，其语法格式如下：\",\"border-image：border-image-source || border-image-slice [ / border-image-width | / border-image-width ? / border-image-outset ]? || border-image-repeat\",\"border-image-source：定义边框图像的路径；\",\"border-image-slice：定义边框图像从什么位置开始分割；\",\"border-image-width：定义边框图像的厚度（宽度）；\",\"border-image-outset：定义边框图像的外延尺寸（边框图像区域超出边框的量）；\",\"border-image-repeat：定义边框图像的平铺方式。\"]},\"910\":{\"h\":\"边框扩展与阴影属性\"},\"911\":{\"h\":\"圆角边框 border-radius\",\"t\":[\"语法：border-radius: length;\",\"参数值可以为数值或百分比的形式。\",\"正方形设置为一个圆，数值修改为高度或宽度的一半，或直接写 50%。\",\"矩形设置高度的一半就可以。\",\"该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角。\"]},\"912\":{\"h\":\"盒子阴影 box-shadow\",\"t\":[\"语法：box-shadow: h-shadow v-shadow blur spread color inset;\",\"值\",\"描述\",\"h-shadow\",\"必需。水平阴影的位置，允许负值\",\"v-shadow\",\"必需。垂直阴影的位置，允许负值\",\"blur\",\"可选。模糊距离\",\"spread\",\"可选。阴影的尺寸\",\"color\",\"可选。阴影的颜色，参阅 CSS 颜色值\",\"inset\",\"可选。将外部阴影(默认值 outset)改为内部阴影\"]},\"913\":{\"h\":\"文字阴影 text-shadow\",\"t\":[\"语法：text-shadow: h-shadow v-shadow blur color;\",\"多重阴影：阴影属性之间用 逗号 隔开\",\"值\",\"描述\",\"h-shadow\",\"必需。水平阴影的位置，允许负值\",\"v-shadow\",\"必需。垂直阴影的位置，允许负值\",\"blur\",\"可选。模糊距离\",\"color\",\"可选。阴影的颜色，参阅 CSS 颜色值\"]},\"914\":{\"h\":\"元素显示与隐藏\",\"t\":[\"本质：让一个元素在页面中隐藏或者显示出来。\",\"display 显示隐藏\",\"display 隐藏元素后，不再占有原来的位置。\",\"后面应用极其广泛，搭配 JS 可以做很多的网页特效。\",\"visibility 显示隐藏\",\"visibility 属性用于指定一个元素应可见还是隐藏。\",\"visibility: visible; 元素可视\",\"visibility: hidden; 元素隐藏\",\"visibility 隐藏元素后，继续占有原来的位置。\",\"overflow 溢出显示隐藏\",\"指定了如果内容溢出了一个元素的框（超过其指定高度及宽度时），超出部分隐藏 overflow: hidden。\",\"如果有定位的盒子，请慎用 overflow: hidden 因为它会隐藏多余部分\",\"属性值\",\"描述\",\"visible\",\"不剪切内容也不添加滚动条\",\"hidden\",\"不显示超过对象尺寸的内容，超出的部分隐藏\",\"scroll\",\"不管超出内容否，始终显示滚动条\",\"auto\",\"超出自动显示滚动条，不超出则不显示\"]},\"915\":{\"h\":\"CSS技巧\"},\"916\":{\"h\":\"精灵图\",\"t\":[\"精灵技术主要针对于背景图片使用，就是把多个小背景图片整合到一张大图片中。\",\"这个大图片也称为 sprites 精灵图或者雪碧图。\",\"移动背景图片位置，此时可以使用 background-position。\",\"移动的距离就是这个目标图片的 x 和 y 坐标，注意网页中的坐标有所不同。\",\"因为一般情况下都是往上往左移动，所以数值是负值。\",\"使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。\",\"缺点\",\"图片文件比较大\",\"图片本身放大和缩小会失真\",\"一旦图片制作完毕想要更换非常复杂\",\"总结\",\"精灵图主要针对于小的背景图片使用。\",\"主要借助于背景位置来实现 background-position。\",\"一般情况下精灵图都是负值。（x 轴右边走是正值，左边走是负值，y 轴同理）\"]},\"917\":{\"h\":\"字体图标 iconfont （重要）\",\"t\":[\"提供了一种方便高效的图标使用方式，展示的是图标，本质属于字体\",\"优点：轻量级 轻、灵活性 强、兼容性 高\",\"三种引用方式：\",\"​ 1. unicode 引用（原始）\",\"​ 2. font-class 引用（unicode 引用的升级）\",\"​ 3. symbol 引用（未来主流）但目前暂时不接触\",\"以阿里巴巴矢量图库引用为例展示三种引用方式（以下内容取自阿里巴巴矢量库使用帮助）：\"]},\"918\":{\"h\":\"unicode 引用\",\"t\":[\"unicode 是字体在网页端最原始的应用方式，特点是：\",\"兼容性最好，支持 ie6+，及所有现代浏览器。\",\"支持按字体的方式去动态调整图标大小，颜色等等。\",\"但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。\",\"注意：新版 iconfont 支持多色图标，这些多色图标在 unicode 模式下将不能使用，如果有需求建议使用 symbol 的引用方式\",\"第一步：拷贝项目下面生成的 font-face\",\"@font-face { font-family: \\\"iconfont\\\"; src: url(\\\"iconfont.eot\\\"); src: url(\\\"iconfont.eot?#iefix\\\") format(\\\"embedded-opentype\\\"), url(\\\"iconfont.woff\\\") format(\\\"woff\\\"), url(\\\"iconfont.ttf\\\") format(\\\"truetype\\\"), url(\\\"iconfont.svg#iconfont\\\") format(\\\"svg\\\"); } \",\"第二步：定义使用 iconfont 的样式\",\".iconfont { font-family: \\\"iconfont\\\" !important; font-size: 16px; font-style: normal; -webkit-font-smoothing: antialiased; -webkit-text-stroke-width: 0.2px; -moz-osx-font-smoothing: grayscale; } \",\"第三步：挑选相应图标并获取字体编码，应用于页面\",\"<i class=\\\"iconfont\\\">&#x33;</i> \"]},\"919\":{\"h\":\"font-class 引用\",\"t\":[\"font-class 是 unicode 使用方式的一种变种，主要是解决 unicode 书写不直观，语意不明确的问题。\",\"与 unicode 使用方式相比，具有如下特点：\",\"兼容性良好，支持 ie8+，及所有现代浏览器。\",\"相比于 unicode 语意明确，书写更直观。可以很容易分辨这个 icon 是什么。\",\"因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 unicode 引用。\",\"不过因为本质上还是使用的字体，所以多色图标还是不支持的。\",\"第一步：拷贝项目下面生成的 fontclass 代码\",\"<link href=\\\"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.css\\\" /> \",\"第二步：挑选相应图标并获取类名，应用于页面：\",\"<i class=\\\"iconfont icon-xxx\\\"></i> \"]},\"920\":{\"h\":\"symbol 引用\",\"t\":[\"这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个 svg 的集合，与上面两种相比具有如下特点：\",\"支持多色图标了，不再受单色限制。\",\"通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。\",\"兼容性较差，支持 ie9+,及现代浏览器。\",\"浏览器渲染 svg 的性能一般，还不如 png。\",\"第一步：拷贝项目下面生成的 symbol 代码：\",\"<script src=\\\"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\\\" /> \",\"第二步：加入通用 css 代码（引入一次就行）：\",\"<style type=\\\"text/css\\\"> .icon { width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor; overflow: hidden; } </style> \",\"第三步：挑选相应图标并获取类名，应用于页面：\",\"<svg class=\\\"icon\\\" aria-hidden=\\\"true\\\"> <use xlink:href=\\\"#icon-xxx\\\"></use> </svg> \"]},\"921\":{\"h\":\"CSS 三角\"},\"922\":{\"h\":\"等腰三角\"},\"923\":{\"h\":\"直角三角\"},\"924\":{\"h\":\"行内(块)垂直属性 vertical-align\",\"t\":[\"经常用于设置图片或者表单（行内块元素）和文字垂直对齐\",\"官方解释：用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或者行内块元素有效。\",\"vertical-align: baseline | top | middle | bottom; \",\"值\",\"描述\",\"baseline\",\"默认。元素放置在父元素的基线上。\",\"sub\",\"垂直对齐文本的下标。\",\"super\",\"垂直对齐文本的上标\",\"top\",\"把元素的顶端与行中最高元素的顶端对齐\",\"text-top\",\"把元素的顶端与父元素字体的顶端对齐\",\"middle\",\"把此元素放置在父元素的中部。\",\"bottom\",\"使元素及其后代元素的底部与整行的底部对齐。\",\"text-bottom\",\"把元素的底端与父元素字体的底端对齐。\",\"length\",\"将元素升高或降低指定的高度，可以是负数。\",\"% 使用\",\"line-height 属性的百分比值来排列此元素。允许使用负值。\",\"inherit\",\"规定应该从父元素继承 vertical-align 属性的值。\",\"图片、表单默认属于行内块元素，默认的 vertical-align 是 baseline 基线对齐\",\"此时可以给图片、表单这些行内块元素的 vertical-align 属性设置为 middle 就可以让文字和图片垂直居中对齐了。\",\"图片底部默认留白缝隙解决方法\",\"图片底侧会有一个空白缝隙，原因是行内块元素和文字的基线对齐\",\"解决方法有两种：\",\"​1. 给图片添加 vertical-align:middle | top | bottom 等（提倡使用）\",\"把图片转换为块级元素 display: block;\"]},\"925\":{\"h\":\"溢出文字省略号显示\"},\"926\":{\"h\":\"单行文本溢出显示省略号\",\"t\":[\"overflow: hidden;（文字长度超出限定宽度，则隐藏超出的内容） white-space: nowrap;（设置文字在一行显示，不能换行） text-overflow: ellipsis;（规定当文本溢出时，显示省略符号来代表被修剪的文本） \"]},\"927\":{\"h\":\"多行文本溢出显示省略号\",\"t\":[\"多行文本溢出显示省略号，有较大兼容性问题，适合于 webkit 浏览器或移动端（移动端大部分是 webkit 内核）\",\"-webkit-line-clamp: 2;（用来限制在一个块元素显示的文本的行数，2 表示最多显示 2 行。为了实现该效果，它需要组合其他的 WebKit 属性） display: -webkit-box;（和 1 结合使用，将对象作为弹性伸缩盒子模型显示 ） -webkit-box-orient: vertical;（和 1 结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 ） overflow: hidden;（文本溢出限定的宽度就隐藏内容） text-overflow: ellipsis;（多行文本的情况下，用省略号 “…” 隐藏溢出范围的文本) \"]},\"928\":{\"h\":\"元素绝对居中方式\"},\"929\":{\"h\":\"CSS特性\"},\"930\":{\"h\":\"层叠性\",\"t\":[\"相同选择器给设置相同的样式，此时一个样式会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突问题。\",\"原则：\",\"样式冲突，就近原则。\",\"样式不冲突，不会层叠。\"]},\"931\":{\"h\":\"继承性\",\"t\":[\"子标签会继承父标签的某些样式，比如文本颜色和字号等。\",\"恰当使用继承可以简化代码，降低样式复杂性。\",\"子元素可以继承父元素的样式（text- , font- , line- , color 这些元素开头的可以继承）\",\"额外内容 1：行高的继承性\",\"行高可以跟单位也可以不跟单位\",\"父元素如果设置行高 1.5，子元素没有设置行高，则子元素继承父元素行高 1.5。写法优势为子元素可根据自己文字大小自动调整行高。\"]},\"932\":{\"h\":\"优先级\",\"t\":[\"当同一个元素指定多个选择器，就会有优先级产生。\",\"选择器相同，执行层叠性。\",\"选择器不同，根据选择器权重执行。\",\"选择器\",\"选择器权重\",\"继承 或者 *\",\"0,0,0,0\",\"元素选择器\",\"0,0,0,1\",\"类选择器，伪类选择器\",\"0,0,1,0\",\"ID 选择器\",\"0,1,0,0\",\"行内样式 style \\\"\\\"\",\"1,0,0,0\",\"!important 重要的\",\"∞ 无穷大\",\"注意\",\"权重由 4 组数字组成，但是不会有进位。\",\"可以理解为类选择永远大于元素选择器，id 选择器永远大于类选择器，以此类推。\",\"等级判断从左向右，如果某一位数值相同，则判断下一位数值。\",\"继承的权重是 0，如果该元素没有直接选中，不管父元素权重多高，子元素继承后权重仍为 0。\",\"额外内容 2：权重叠加\",\"复合选择器权重叠加\",\"权重虽然会叠加，但是永远不会有进位。\"]},\"933\":{\"h\":\"2.CSS\",\"t\":[\"CSS：表现用于设置网页元素的版式、颜色、大小等外观样式，Web标准三大组成中的表现\",\"CSS基础\",\"CSS特性\",\"CSS属性\",\"CSS3新属性\",\"CSS技巧\",\"页面布局\",\"移动端布局\",\"预编译语言\",\"浏览器与编译器\"]},\"934\":{\"h\":\"浏览器与编译器\"},\"935\":{\"h\":\"浏览器私有前缀\",\"t\":[\"浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加。\",\"-moz-：代表 firefox 私有属性\",\"-ms-：代表 ie 私有属性\",\"-webkit-：代表 safari、chrome 私有属性\",\"-o-：代表 Opera 私有属性\",\"示例：\",\"-moz-border-radius: 10px; -ms-border-radius: 10px; -webkit-border-radius: 10px; -o-border-radius: 10px; border-radius: 10px; \"]},\"936\":{\"h\":\"Emmet 语法\",\"t\":[\"Emmet 语法的前身是 Zen coding，使用缩写，提高 html/css 编写速度，Vscode 内部已集成语法。\"]},\"937\":{\"h\":\"快速生成 HTML 结构语法\",\"t\":[\"1.生成标签，直接输入标签名，按 tab 键。\",\"2.生成多个标签，加上*，如 div*3。\",\"3.如果有父子级关系的标签，可以用> 比如 ul>li。\",\"4.如果有兄弟关系的标签，用 + 比如 div+p。\",\"5.如果生成带有类名或者 id 名字的，直接写 .demo 或 #two tab 键。\",\"6.如果生成的 div 类名是有顺序的，可以用自增符号$。\",\"7.如果想要在生成的标签内部写内容可以用{}。\"]},\"938\":{\"h\":\"快速生成 CSS 样式语法\",\"t\":[\"CSS 基本采取简写形式。\",\"w200 按 tab 可生成 width: 200px;\",\"lh26 按 tab 可生成 line-height: 26px;\"]},\"939\":{\"h\":\"快速格式化代码\",\"t\":[\"格式化文档：Shift + Alt + F，对齐格式。\",\"formatOnType:true\",\"formatOnSave:true\",\"设置一次即可，可自动保存格式化代码。\"]},\"940\":{\"h\":\"Chrome 调试工具\",\"t\":[\"Chrome 浏览器提供了非常好用的调试工具，可以用来调试 HTML 结构和 CSS 样式。（按下 F12or 右击页面空白 → 检查）\",\"ctrl+滚轮可以放大开发者工具代码大小。\",\"左边是 HTML 元素结构，右边是 CSS 样式。\",\"右边 CSS 样式可以改动数值（左右箭头或者直接输入）和查看颜色。\",\"ctrl+0 复原浏览器大小。\",\"如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误。\",\"如果有样式，但是样式前面有黄色叹号提示，则是样式属性书写错误。\"]},\"941\":{\"h\":\"移动端布局\"},\"942\":{\"h\":\"现状\"},\"943\":{\"h\":\"浏览器现状\",\"t\":[\"UC QQ 欧朋 百度手机 360 安全 谷歌 搜狗手机 猎豹 以及其他杂牌浏览器。\",\"以上均为移动端浏览器。\",\"兼容移动端主流浏览器，处理 Webkit 内核浏览器即可。\"]},\"944\":{\"h\":\"手机屏幕\",\"t\":[\"移动端设备屏幕尺寸非常多，碎片化严重。\",\"Android 设备有多重分辨率：480x800，480x854，540x960，720x1280，1080x1920 等，甚至 2K、4K 屏等。\",\"近年来 iPhone 的碎片化也加剧了，其设备的主要分辨率有：640x960，640x1136，750x1334，1242x2208 等。\",\"作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px。\"]},\"945\":{\"h\":\"移动端调试方法\",\"t\":[\"Chrome DevTools（谷歌浏览器）模拟手机调试\",\"搭建本地 Web 服务器，手机和服务器一个局域网内，通过手机访问服务器\",\"使用外网服务器，直接 IP 或域名访问。\"]},\"946\":{\"h\":\"视口\",\"t\":[\"视口就是浏览器显示页面内容的屏幕区域，视口可以分为布局视口、视觉视口和理想视口\"]},\"947\":{\"h\":\"布局视口 layout-viewport\",\"t\":[\"一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期 PC 端页面在手机上显示的问题\",\"iOS，Android 基本都将这个视口分辨率设置为 980px，所以 PC 上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。\"]},\"948\":{\"h\":\"视觉视口 visual-viewport\",\"t\":[\"它是用户正在看到的网站区域。注意：是网站的区域。\",\"我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来宽度。\"]},\"949\":{\"h\":\"理想视口 ideal-viewport\",\"t\":[\"为了使网站在移动端有最理想的浏览和阅读宽度而设定\",\"理想视口，对设备来讲，是最理想的视口尺寸\",\"需要手动添写 meta 视口标签通知浏览器操作\",\"meta 视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽\"]},\"950\":{\"h\":\"视口标签 meta\",\"t\":[\"<meta name=\\\"viewport\\\" content=\\\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\\\" /> \",\"属性\",\"解释说明\",\"width\",\"宽度设置的是 viewport 宽度，可以设置 device-width 特殊值\",\"initial-scale\",\"初始缩放比，大于 0 的数字\",\"maximum-scale\",\"最大缩放比，大于 0 的数字\",\"minimum-scale\",\"最小缩放比，大于 0 的数字\",\"user-scalable\",\"用户是否可以缩放，yes or no(1 or 0)\",\"标准 viewport 设置\",\"视口宽度和设备保持一致\",\"视口默认缩放比例 1.0\",\"不允许用户自行缩放\",\"最大允许的缩放比例 1.0\",\"最小允许的缩放比例 1.0\"]},\"951\":{\"h\":\"二倍图\"},\"952\":{\"h\":\"物理像素&物理像素比\",\"t\":[\"物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。\",\"开发时候的 1px 不是一定等于 1 个物理像素的。\",\"一个 px 能显示的物理像素点的个数，称为物理像素比或者屏幕像素比。\",\"设备\",\"尺寸(英寸)\",\"开发尺寸(px)\",\"物理像素比(dpr)\",\"iphone3G\",\"3.5\",\"320*480\",\"1.0\",\"iphone4/4s\",\"3.5\",\"320*480\",\"2.0\",\"iphone5/5s/5c\",\"4.0\",\"320*568\",\"2.0\",\"HTC One M8\",\"4.5\",\"360*640\",\"3.0\",\"iphone6\",\"4.7\",\"375*667\",\"2.0\",\"Nexus 4\",\"4.7\",\"384*640\",\"2.0\",\"Nexus 5x\",\"5.2\",\"411*731\",\"2.6\",\"iphone6 Plus\",\"5.5\",\"414*736\",\"3.0\",\"Samsung Galaxy Note 4\",\"5.7\",\"480*853\",\"3.0\",\"Sony Xperia Z Ultra\",\"6.4\",\"540*960\",\"2.0\",\"Nexus 7('12)\",\"7.0\",\"600*960\",\"1.3\",\"iPad Mini\",\"7.9\",\"768*1024\",\"1.0\"]},\"953\":{\"h\":\"多倍图\",\"t\":[\"在标准 viewport 设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题\",\"通常使用二倍图，但也有 3 倍图 4 倍图的情况，看实际需求。\"]},\"954\":{\"h\":\"背景缩放 background-size\",\"t\":[\"属性：background-size: 背景图片宽度 背景图片高度;\",\"属性值可以是 px(50px 50px)、方向词(left center)、cover、contain。\",\"只写一个参数，高度省略的会等比例缩放。\",\"里面的单位可以跟%，相对于父盒子而言。\",\"cover：把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。\",\"contain：把图像扩展至最大尺寸，以使宽度和高度完全适应内容区域。\"]},\"955\":{\"h\":\"其他图片格式\",\"t\":[\"DPG 图片压缩技术：京东自主研发的图片压缩技术，能够兼容 jpeg，压缩后的图片和 webp 的清晰度对比没有差距。\",\"webp 图片格式：谷歌开发的一种旨在加快图片加载速度的图片格式，图片压缩体积大约只有 jpeg 的 2/3，节省大量服务器宽带资源和数据空间。\"]},\"956\":{\"h\":\"移动端开发选择\"},\"957\":{\"h\":\"单独制作移动端页面（主流）\",\"t\":[\"通常情况下，网站域名前面加 m（mobile）可以打开移动端。通过判断设备，如果是移动设备打开，则跳转至移动端页面。\"]},\"958\":{\"h\":\"响应式页面兼容移动端（其次）\",\"t\":[\"通过判断屏幕宽度来改变样式，以适应不同终端。\",\"缺点：制作麻烦，需要花很大精力去调兼容性问题。\"]},\"959\":{\"h\":\"移动端常见布局\",\"t\":[\"移动端布局和 PC 端有所区别：\",\"1.单独制作移动端页面（主流）\",\"流式布局（百分比布局）\",\"flex 弹性布局（强烈推荐）\",\"less+rem+媒体查询布局\",\"混合布局\",\"2.响应式页面兼容移动端（其次）\",\"媒体查询\",\"bootstrap\"]},\"960\":{\"h\":\"流式布局\",\"t\":[\"流式布局，就是百分比布局，也称非固定像素布局。\",\"通过盒子的宽度设置成百分比来根据屏幕的宽度进行伸缩，不受固定像素的限制，内容向两侧填充。\",\"流式布局方式是移动 web 开发使用的比较常见的布局方式。\",\"max-width：最大宽度；min-width：最小宽度。height 同理\",\"视口标签与样式初始化示例：\",\"<meta name=\\\"viewport\\\" content=\\\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\\\" /> \",\"body { margin: 0 auto; min-width: 320px; max-width: 640px; background: #fff; font-size: 14px; font-family: -apple-system, Helvetica, sans-serif; line-height: 1.5; color: #666; } \"]},\"961\":{\"h\":\"flex 布局\",\"t\":[\"详见 CSS3 新属性-flex 布局\"]},\"962\":{\"h\":\"rem 适配布局（重要）\",\"t\":[\"流式布局和 flex 布局带来的问题：\",\"页面布局文字能否随着屏幕大小变化而变化？\",\"流式布局和 flex 布局主要针对于宽度布局，高度如何设置？\",\"怎么样让屏幕发生变化的时候元素高度和宽度等比例缩放？\",\"rem + 媒体查询 + less 预编译语言 提供了解决方案\"]},\"963\":{\"h\":\"rem\",\"t\":[\"rem（root em）是一个相对单位，类似于 em，em 是父元素字体大小。\",\"不同的是 rem 的基准是相对于 html 元素的字体大小。\",\"比如，根元素(html)设置 font-size=12px;非根元素设置 width:2rem;则换成 px 表示就是 24px。\",\"rem 的优点就是可以通过修改 html 里面的文字大小来改变页面中元素的大小，可以整体控制\"]},\"964\":{\"h\":\"媒体查询\",\"t\":[\"媒体查询是 CSS3 新语法。\",\"使用@media 查询，可以针对不同的媒体类型定义不同的样式\",\"@media 可以针对不同的屏幕尺寸设置不同的样式\",\"当你重置浏览器大小的过程中，页面也会跟随重置\",\"目前针对很多手机、平板等设备都用得到多媒体查询\",\"语法：\",\"@media mediatype and|not|only (media feature) { CSS-Code; } \",\"@media only screen and (max-width: 500px) { .gridmenu { width: 100%; } .gridmain { width: 100%; } .gridright { width: 100%; } } \",\"用@media 开头注意 @符号\",\"mediatype：媒体类型\",\"关键字 and not only\",\"media feature 媒体特性必须有小括号包含\",\"媒体类型 mediatype\",\"all：所有设备\",\"print：打印机和打印预览\",\"screen：电脑屏幕、平板电脑、手机等\",\"关键字 not and only\",\"关键字将媒体类型或多个媒体特性连接到一起作为媒体查询条件。\",\"not: not 运算符用于否定媒体查询，如果不满足这个条件则返回 true，否则返回 false。 如果出现在以逗号分隔的查询列表中，它将仅否定应用了该查询的特定查询。 如果使用 not 运算符，则还必须指定媒体类型。\",\"only: only 运算符仅在整个查询匹配时才用于应用样式，并且对于防止较早的浏览器应用所选样式很有用。 当不使用 only 时，旧版本的浏览器会将 screen and (max-width: 500px) 简单地解释为 screen，忽略查询的其余部分，并将其样式应用于所有屏幕。 如果使用 only 运算符，则还必须指定媒体类型。\",\", (逗号) 逗号用于将多个媒体查询合并为一个规则。 逗号分隔列表中的每个查询都与其他查询分开处理。 因此，如果列表中的任何查询为 true，则整个 media 语句均返回 true。 换句话说，列表的行为类似于逻辑或 or 运算符。\",\"and: and 操作符用于将多个媒体查询规则组合成单条媒体查询，当每个查询规则都为真时则该条媒体查询为真，它还用于将媒体功能与媒体类型结合在一起。\",\"媒体特性\",\"媒体特性必须加小括号包含\",\"width：页面可见区域宽度\",\"min-width：页面最小可见区域宽度\",\"max-width：页面最大可见区域宽度\",\"注意：为了防止混乱，媒体查询要按照从小到大或者从大到小的顺序来写。\",\"示例代码：\",\"引入资源\",\"当样式比较繁多的时候，我们可以针对不同的媒体使用不同 stylesheets(样式表)\",\"原理就是直接在 link 中判断设备的尺寸，然后引用不同的 css 文件。\",\"语法：\",\"<link rel=\\\"stylesheets\\\" media=\\\"mediatype and|not|only (media feature)\\\" href=\\\"***.css\\\"> \",\"link 引入同样遵循从小到大的方法\"]},\"965\":{\"h\":\"less 变量转换 rem\",\"t\":[\"通过在 less 中声明变量，确定默认设计稿和默认等分数下的基准尺寸值，其余 px 属性写成(实际大小 px / 基准尺寸值) rem\",\"// 此处默认设计稿750px与15等分，默认基准尺寸值 750 / 15 = 50px @width: 50px; .content { width: (100px / @width) rem; height: (50px / @width) rem; } \",\"less 详见 预编译语言#变量\"]},\"966\":{\"h\":\"实时响应式适配方案实现\",\"t\":[\"响应式屏幕样式方案由 媒体查询 + less + rem 共同组成\",\"一般情况下我们以一套或两套效果图适应大部分的屏幕，放弃极端屏或对其优雅降级，牺牲一些效果。现在基本以 750 为准。\",\"① 假设设计稿是 750px\",\"② 假设我们把整个屏幕划分为 15 等份（划分标准不一，可以是 20 份也可以是 10 等份）\",\"③ 每一份作为 html 字体大小，这里就是 50px\",\"④ 在 320px 设备的时候，字体大小为 320 / 15 就是 21.33px\",\"⑤ 用我们页面元素的大小，除以不同的 html 字体大小会发现它们比例还是相同的\",\"⑥ 比如我们以 750 为标准设计稿\",\"⑦ 一个 100*100 像素的页面元素在 750 屏幕下，就是 100 / 50 转换为 rem 是 2rem * 2rem，比例还是 1 比 1\",\"⑧ 320 屏幕下，html 字体大小为 21.33，则 2rem = 42.66px，此时宽和高都是 42.66，宽和高的比例还是 1 比 1\",\"⑨ 已经能实现不同屏幕下 页面元素盒子等比例缩放的效果\",\"元素 font-size 取值方法\",\"① 最后的公式：页面元素的 rem 值 = 页面实际元素值(px) / （屏幕宽度 / 划分的份数）\",\"② 屏幕宽度 / 划分的份数 就是 html font-size 的大小\",\"③ 或者：页面元素的 rem 值 = 页面实际元素值(px) / html font-size 字体大小\",\"重点\",\"媒体查询提供不同设备、不同屏幕下 html 根元素的 font-size 字体大小基准值\",\"在已知设计稿宽度（如 750px）和切割份数（如 15 等份）的前提下，以 750 / 15 = 50px 的 font-size 为基准进行宽高比例计算，此时通过 less 中的变量声明 @width = 50px; 以及 less 允许的四则运算方式，样式表中所有涉及 px 单位的书写均可表示为 (实际大小 / @width) rem，以此实现全尺寸属性的比例化。\",\"其余设备屏幕下的 html font-size 字体大小基准值，根据媒体查询动态调整，同时全元素尺寸属性通过 rem 比例数值动态调整尺寸。\",\"现阶段可实现的技术方案有限，后期学习 js 和框架之后有两种方案可选：\",\"① script 引入 flexible.js 提供的默认 750 / 15 等份媒体查询方法可提供媒体查询与设备的匹配关系方案，开发者只需要关注 rem 尺寸比例即可。\",\"② 前端工程化之后，开发者更是直接正常书写 px 属性，项目整体打包之前，打包软件会对项目全局样式进行预扫描和预处理，将全部的 px 属性根据媒体查询匹配方案自动转换为 rem 比例值，最后再统一导入样式文件。\"]},\"967\":{\"h\":\"页面布局(核心)\",\"t\":[\"网页布局过程：\",\"先准备好相关的网页元素，网页元素基本都是盒子 Box。\",\"利用 CSS 设置好盒子样式，然后摆放到相应位置。\",\"往盒子里面装内容。\",\"网页布局的核心本质：利用 CSS 摆盒子。\"]},\"968\":{\"h\":\"盒子模型\",\"t\":[\"所谓盒子模型：就是把 HTML 页面中的布局元素看作是一个矩形盒子，盛装内容的容器。\",\"CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，包括：border 边框、margin 外边距、padding 内边距和 content 实际内容。\",\"盒子模型\"]},\"969\":{\"h\":\"内边距 padding\",\"t\":[\"设置内边距，即边框与内容之间的距离。\",\"属性\",\"作用\",\"padding-top\",\"上内边距\",\"padding-right\",\"右内边距\",\"padding-bottom\",\"下内边距\",\"padding-left\",\"左内边距\",\"复合写法\",\"值的个数\",\"表达意思\",\"padding: 5px;\",\"1 个值，代表上下左右都有 5px 内边距\",\"padding: 5px 10px;\",\"2 个值，代表上下内边距 5px，左右内边距 10px\",\"padding: 5px 10px 20px;\",\"3 个值，代表上内边距 5px，左右内边距 10px，下内边距 20px\",\"padding: 5px 10px 20px 30px;\",\"4 个值，上是 5 像索 右 10 像素下 20 像素左是 30 像素顺时针\",\"padding 同样影响盒子实际大小\",\"内容和边框有了距离，添加了内边距。\",\"padding 影响了盒子实际大小。\",\"盒子若已有宽高，此时再指定内边框，会撑大盒子。解决方案：如果保证盒子跟效果图大小保持一致，让宽高减去多出来的内边距大小。\",\"内边距撑开盒子，当导航栏字数不一样多使用 padding 最合适。\",\"如果盒子本身没有指定 width/height 属性，则此时 padding 不会撑开盒子大小\"]},\"970\":{\"h\":\"外边距 margin\",\"t\":[\"设置外边距，即控制盒子和盒子之间的距离。\",\"属性\",\"作用\",\"margin-top\",\"上外边距\",\"margin-right\",\"右外边距\",\"margin-bottom\",\"下外边距\",\"margin-left\",\"左外边距\",\"复合写法与 padding 完全一致。\",\"外边距可以让块级盒子水平居中，但是必须满足两个条件：\",\"1.盒子必须指定了 width.\",\"2.盒子左右的外边距都设置为 auto.\",\"margin: 0 auto; 上下 0 外边距，左右居中。\",\"注意：以上方法是让块级元素水平居中，行内元素或行内块元素给其父元素添加 text-align:center 即可。\"]},\"971\":{\"h\":\"外边距合并与塌陷（重要）\",\"t\":[\"使用 margin 定义块元素的垂直外边距时，可能会出现外边距合并或塌陷。\",\"相邻块元素垂直外边距合并\",\"上下相邻的两个兄弟块元素相遇，上面有 margin-bottom，下面又 margin-top，垂直间距取两个值中的较大者，该现象称为相邻块元素垂直外边距的合并。\",\"解决方案：尽量只给一个盒子添加 margin 值。\",\"嵌套块元素垂直外边距塌陷\",\"两个嵌套关系的父子块元素，父元素有上外边距同时子元素也有子外边距，此时父元素会塌陷较大的外边距值。\",\"示例：红色 div 上下外边距均为 0，左右居中。红色 div 内嵌套的黄色 div 上部外边距 50px。由于嵌套块元素垂直外边距塌陷，导致整个 div 全下陷 50px。\",\"解决方案：\",\"为父元素定义上边框；\",\"为父元素定义上内边距；\",\"为父元素添加 overflow:hidden。\"]},\"972\":{\"h\":\"清除内外边距\",\"t\":[\"网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此布局前首先要清除网页元素的内外边距。\",\"* { padding: 0; margin: 0; } \",\"注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了。\"]},\"973\":{\"h\":\"怪异盒模型 border-box\",\"t\":[\"CSS 两种通过 box-sizing 来指定盒模型，content-box / border-box（CSS3 新属性），计算盒子大小的方式因此改变。\",\"浏览器默认使用 content-box 盒模型。\",\"box-sizing:content-box 盒子大小为 width/height + padding + border（默认）\",\"box-sizing:border-box 盒子大小为 width/height\",\"如果盒子模型我们改为 box-sizing: border-box，那么 padding 和 border 就不会撑大盒子，将不会再影响盒子实际大小（前提 padding 和 border 不会超过 width/height）\",\"现开发已经普遍大量使用 border-box 盒模型。\"]},\"974\":{\"h\":\"浮动\",\"t\":[\"CSS 提供了三种传统布局方式：普通流（标准流）、浮动、定位。\"]},\"975\":{\"h\":\"标准流\",\"t\":[\"标签按照规定好默认方式排列。\",\"块级元素独占一行，从上向下顺序排列。\",\"行内元素按照顺序，从左到右顺序排列，碰到父元素边缘自动换行。\",\"我们前面学习的就是标准流，标准流是最基本的布局方式。\",\"注意：实际开发中，一个页面基本都包含了这三种布局方式（移动端会学习新的布局方式）。\"]},\"976\":{\"h\":\"浮动\",\"t\":[\"很多布局效果，标准流没办法完成，可利用浮动完成。浮动可以改变元素标签默认的排列方式。\",\"浮动最典型的应用：让多个块级元素一行内排列显示。\",\"网页布局第一准则\",\"多个块元素纵向排列找标准流，多个块级元素横向排列找浮动。\"]},\"977\":{\"h\":\"定义\",\"t\":[\"float 用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。\",\"语法：选择器 { float : 属性值; }\",\"属性值：none（默认值，元素不浮动）; left 向左浮动; right 向右浮动。\"]},\"978\":{\"h\":\"浮动特性（重难点）\",\"t\":[\"浮动元素脱离标准普通流的控制(浮)移动到指定位置(动)(脱标)，浮动的盒子不再保留原先的位置\",\"如果多个盒子都设置了浮动，则他们会按照属性值一行内显示并且顶端对齐排列。\",\"浮动的元素是互相贴靠在一起的(不会有缝隙)，如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。\",\"浮动元素会具有行内块元素特性。\",\"任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。\",\"如果行内元素有了浮动，不需要转换元素显示就可以直接给宽度和高度\",\"块级盒子如果没有设置宽度，默认宽度和父级一样宽，添加浮动后，大小根据内容决定。行内元素同理\"]},\"979\":{\"h\":\"浮动元素应用场景\",\"t\":[\"为了约束浮动元素位置，我们网页布局一般采取的策略是：\",\"先用表主流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置.符合网页布局第一准则。\"]},\"980\":{\"h\":\"浮动布局注意点\",\"t\":[\"浮动和标准流的父盒子搭配\",\"先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。\",\"一个元素浮动，理论上其余的兄弟元素也要浮动\",\"浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流。理想中的状态，让子盒子撑开父盒子。\",\"网页布局第二准则\",\"先设置盒子大小，之后设置盒子的位置。\",\"常见网页布局示例：\",\"layout1\",\"layout2\",\"layout3\"]},\"981\":{\"h\":\"清除浮动\"},\"982\":{\"h\":\"为什么需要清除浮动\",\"t\":[\"父盒子不方便给高度，子盒子浮动不占有位置，父级盒子高度为 0，影响下面的标准流盒子。\",\"由于浮动元素不再占有原文档流的位置，所以它会对后面的元素排版产生影响。\"]},\"983\":{\"h\":\"本质\",\"t\":[\"清除浮动的本质是清除浮动元素造成的影响。\",\"如果父盒子本身有高度，则不需要清除浮动。\",\"清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度就不会影响下面的标准流。\"]},\"984\":{\"h\":\"语法\",\"t\":[\"选择器 { clear: 属性值; }\",\"left: 不允许左侧有浮动元素（清除左侧浮动）\",\"right: 不允许右侧有浮动元素（清除右侧浮动）\",\"both: 同时清除左右两侧浮动的影响\",\"实际工作中，几乎只用 clear: both;\",\"清除浮动的策略是：闭合浮动。只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子\"]},\"985\":{\"h\":\"清除浮动四方法\",\"t\":[\"额外标签法（隔墙法），W3C 推荐做法。\",\"额外标签法也称为隔墙法，是 W3C 推荐的做法。\",\"额外标签法在浮动元素末尾添加一个空的标签。clear: both;\",\"优点：通俗易懂，书写方便。\",\"缺点：添加许多无意义的标签，结构化较差。\",\"注意：要求这个新的空标签必须是块级元素。\",\"父级添加 overflow 属性。\",\"可以给父级添加 overflow 属性，将其属性设置为 hidden、auto 或 scroll。\",\"优点：代码简洁。\",\"缺点：无法显示溢出的部分。\",\"父级添加 after 伪元素。\",\":after 方式是额外标签法升级版，也是给父元素添加。\",\".clearfix:after { content: \\\"\\\"; display: block; height: 0; clear: both; visibility: hidden; } /* IE6、7专有 */ .clearfix { *zoom: 1; } \",\"优点：没有增加标签，结构更简单。\",\"缺点：照顾低版本浏览器。\",\"代表网站：百度、淘宝、网易等。\",\"父级添加双伪元素。\",\"给父元素添加\",\".clearfix:before, .clearfix:after { content: \\\"\\\"; display: table; } .clearfix:after { clear: both; } .clearfix { *zoom: 1; } \",\"优缺点同上。\"]},\"986\":{\"h\":\"定位\"},\"987\":{\"h\":\"为什么需要定位\",\"t\":[\"某个元素可以自由地在一个盒子内移动位置，并且压住其他盒子。\",\"滚动窗口的时候，盒子是固定在屏幕某个位置的。\",\"以上效果，标准流或浮动都无法快速实现，需要定位来实现。\",\"定位与浮动的区别\",\"浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子。\",\"定位则是可以让盒子自由地在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。\"]},\"988\":{\"h\":\"定位组成\",\"t\":[\"将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。\",\"定位=定位模式+边偏移。\"]},\"989\":{\"h\":\"定位模式 position\",\"t\":[\"用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。\",\"值\",\"语义\",\"static\",\"静态定位\",\"relative\",\"相对定位\",\"absolute\",\"绝对定位\",\"fixed\",\"固定定位\",\"sticky\",\"粘性定位\"]},\"990\":{\"h\":\"位置属性\",\"t\":[\"盒子移动到的最终位置，有 top bottom left right 四个属性。\"]},\"991\":{\"h\":\"静态定位 statics\",\"t\":[\"元素的默认定位方式，无定位的意思。\",\"属性 position: static;\",\"特点：\",\"静态定位按照标准流特性摆放位置，它没有边偏移。\",\"2.布局时很少使用。\"]},\"992\":{\"h\":\"相对定位 relative（重要）\",\"t\":[\"元素在移动位置的时候，相对于它原来的位置来说的。\",\"属性 position: relative;\",\"特点：\",\"相对于自己原来的位置来移动（移动位置的时候参照点是自己原来的位置）\",\"原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。（不脱标，继续保留原来位置）\"]},\"993\":{\"h\":\"绝对定位 absolute（重要）\",\"t\":[\"绝对定位是元素在移动位置的时候，相对于它祖先元素而言的。\",\"属性 position: absolute;\",\"特点：\",\"如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document 文档）。\",\"如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。\",\"绝对定位不再占有原先的位置（脱标）。\"]},\"994\":{\"h\":\"固定定位 fixed（重要）\",\"t\":[\"固定定位是元素固定于浏览器可视区的位置。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变。\",\"属性 position: fixed;\",\"特点：\",\"以浏览器的可视窗口为参照点移动元素。\",\"跟父元素没有任何关系。\",\"不随滚动条滚动。\",\"固定定位不再占有原先的位置。\",\"固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。\",\"小技巧（固定在版心右侧位置）\",\"1.让固定定位的盒子 left:50%，走到浏览器可视区一半位置。\",\"2.让固定定位的盒子 margin-left:版心宽度一半距离，再移动版心宽度一半的位置。\"]},\"995\":{\"h\":\"粘性定位 sticky（了解）\",\"t\":[\"sticky 跟前面四个属性值都不一样，它会产生动态效果，很像 relative 和 fixed 的结合：一些时候是 relative 定位（定位基点是自身默认位置），另一些时候自动变成 fixed 定位（定位基点是视口）。\",\"属性 选择器 { position: sticky; top: 10px; }\",\"sticky 能够形成\\\"动态固定\\\"的效果。比如，百度新闻首页的导航栏，初始加载时在自己的默认位置（relative 定位）\",\"滚动条下滑变成固定定位，页面滚回去又会变成相对定位\",\"特点：\",\"以浏览器的可视窗口为参照点移动元素（固定定位特点）\",\"粘性定位占有原先的位置（相对定位特点）\",\"必须添加 top 、left、right、bottom 其中一个才有效\",\"跟页面滚动搭配使用。兼容性较差，IE 不支持。\"]},\"996\":{\"h\":\"叠放次序 z-index\",\"t\":[\"在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z-index 来控制盒子的前后次序（z 轴）\",\"属性 z-index: 1;\",\"特点：\",\"数值可以是正整数、负整数或 0，默认 auto，数值越大，盒子越靠上。\",\"如果属性值相同，则按照书写顺序，后来者居上。\",\"数字后面不能加单位。\",\"只有开启定位的盒子 z-index 属性才能生效。\"]},\"997\":{\"h\":\"子绝父相\",\"t\":[\"子级或内部的元素是绝对定位的话，父级或外部元素要使用相对定位。\",\"子级绝对定位，不会占有位置，可以放到父盒子里面任何一个地方，不会影响其他的兄弟盒子。\",\"父盒子需要加定位限制子盒子在外部的父盒子内部显示。\",\"父盒子布局时，需要占有位置，因此父亲只能是相对定位。\",\"总结：因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，所以是绝对定位。\"]},\"998\":{\"h\":\"定位特殊性\",\"t\":[\"行内元素添加绝对或固定定位，可以直接设置高度和宽度。\",\"块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。\",\"脱标的盒子不会触发外边距塌陷（外边距合并）。浮动元素、绝对定位（固定定位）元素都不会触发外边距合并问题。\",\"绝对定位（固定定位）会完全压住盒子。\",\"浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片。）下图文字为<p>内文字。\",\"效果演示：\"]},\"999\":{\"h\":\"定位总结\",\"t\":[\"相对定位、固定定位、绝对定位两大特点：\",\"1.是否占有位置（脱标）；2.以谁为基准点移动位置。\",\"定位终点：子绝父相。\",\"定位模式\",\"是否脱标\",\"移动位置\",\"是否常用\",\"static 静态定位\",\"否\",\"不能使用边偏移\",\"很少\",\"relative 相对定位\",\"否（占有位置）\",\"相对于自身位置移动\",\"常用\",\"absolute 绝对定位\",\"是（不占有位置）\",\"带有定位的父级\",\"常用\",\"fixed 固定定位\",\"是（不占有位置）\",\"浏览器可视区\",\"常用\",\"sticky 粘性定位\",\"否（占有位置）\",\"浏览器可视区\",\"当前阶段少\"]},\"1000\":{\"h\":\"CSS 属性书写顺序（重要）\",\"t\":[\"建议遵循顺序：\",\"布局定位属性： display / position / float / clear / visibility / overflow（建议 display 第一个写，关系到显示模式）\",\"自身属性：width / height / margin / padding / border / background\",\"文本属性：color / font / text-decoration / text-align / vertical-align / white-space / break-word\",\"其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background: linear-gradient\"]},\"1001\":{\"h\":\"页面布局整体思路\",\"t\":[\"确定页面的版心（可视区域）。\",\"分析页面中的行模块，以及每个行模块中的列模块。页面布局第一准则。\",\"一行中的列模块经常浮动布局，先确定每个列的大小之后确定列的位置。页面布局第二准则。\",\"制作 HTML 结构，遵循现有结构、后有样式的原则。结构永远最重要。\",\"先理清楚布局结构，再写代码尤为重要。\"]},\"1002\":{\"h\":\"网页布局总结\",\"t\":[\"标准流\",\"可以让盒子上下排列或左右排列，垂直的块级盒子显示用标准流布局。\",\"浮动\",\"可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子水平显示就用浮动布局。\",\"定位\",\"定位最大的特点是有层叠的概念，可以让多个盒子前后叠压来显示。如果元素自由在某个盒子内移动就用定位布局。\"]},\"1003\":{\"h\":\"预编译语言\",\"t\":[\"CSS 作为一门标记性语言，语法相对简单，对使用者的要求较低，但同时也带来一些问题\",\"需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码\",\"CSS 预处理器便是针对上述问题的解决方案\"]},\"1004\":{\"h\":\"预编译语言\",\"t\":[\"扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便\",\"本质上，预编译语言是 CSS 的超集\",\"包含一套自定义的语法及一个解析器，根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件\",\"CSS 预编译语言在前端里面有三大优秀的预编处理器，分别是：\",\"sass\",\"less\",\"stylus\"]},\"1005\":{\"h\":\"sass\",\"t\":[\"2007 年诞生，最早也是最成熟的 CSS 预处理器，拥有 Ruby 社区的支持和 Compass 这一最强大的 CSS 框架，目前受 LESS 影响，已经进化到了全面兼容 CSS 的 Scss\",\"文件后缀名为.sass 与 scss，可以严格按照 sass 的缩进方式省去大括号和分号\"]},\"1006\":{\"h\":\"less\",\"t\":[\"2009 年出现，受 SASS 的影响较大，但又使用 CSS 的语法，让大部分开发者和设计师更容易上手，在 Ruby 社区之外支持者远超过 SASS\",\"其缺点是比起 SASS 来，可编程功能不够，不过优点是简单和兼容 CSS，反过来也影响了 SASS 演变到了 Scss 的时代\"]},\"1007\":{\"h\":\"stylus\",\"t\":[\"Stylus 是一个 CSS 的预处理框架，2010 年产生，来自 Node.js 社区，主要用来给 Node 项目进行 CCSSss 预处理支持\",\"所以 Stylus 是一种新型语言，可以创建健壮的、动态的、富有表现力的 CSS。比较年轻，其本质上做的事情与 SASS/LESS 等类似。\"]},\"1008\":{\"h\":\"特性\",\"t\":[\"由于各语言的功能函数各不相同，此处不作详细记录。\"]},\"1009\":{\"h\":\"基本使用\",\"t\":[\"less 和 scss\",\".box { display: block; } \",\"sass\",\".box display: block \",\"stylus\",\".box display: block \"]},\"1010\":{\"h\":\"嵌套\",\"t\":[\"三者的嵌套语法都是一致的，甚至连引用父级选择器的标记 & 也相同\",\"区别只是 Sass 和 Stylus 可以用没有大括号的方式书写\",\".a { &.b { color: red; } } \"]},\"1011\":{\"h\":\"变量\",\"t\":[\"变量无疑为 CSS 增加了一种有效的复用方式，减少了原来在 CSS 中无法避免的重复「硬编码」\",\"less 声明的变量必须以@开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号:分隔开\",\"@red: #c00; strong { color: @red; } \",\"sass 声明的变量跟 less 十分的相似，只是变量名前面使用@开头\",\"$red: #c00; strong { color: $red; } \",\"stylus 声明的变量没有任何的限定，可以使用$开头，结尾的分号;可有可无，但变量与变量值之间需要使用=\",\"在 stylus 中我们不建议使用@符号开头声明变量\",\"red = #c00 strong color: red \"]},\"1012\":{\"h\":\"作用域\",\"t\":[\"CSS 预编译器把变量赋予作用域，也就是存在生命周期。就像 js 一样，它会先从局部作用域查找变量，依次向上级作用域查找\",\"sass 中不存在全局变量\",\"编译前：\",\"$color: black; .scoped { $bg: blue; $color: white; color: $color; background-color: $bg; } .unscoped { color: $color; } \",\"编译后：\",\".scoped { color: white; /*是白色*/ background-color: blue; } .unscoped { color: white; /*白色（无全局变量概念）*/ } \",\"所以，在 sass 中最好不要定义相同的变量名\",\"less 与 stylus\",\"less 与 stylus 的作用域跟 javascript 十分的相似，首先会查找局部定义的变量，如果没有找到，会像冒泡一样，一级一级往下查找，直到根为止\",\"编译前：\",\"@color: black; .scoped { @bg: blue; @color: white; color: @color; background-color: @bg; } .unscoped { color: @color; } \",\"编译后：\",\".scoped { color: white; /*白色（调用了局部变量）*/ background-color: blue; } .unscoped { color: black; /*黑色（调用了全局变量）*/ } \"]},\"1013\":{\"h\":\"混入\",\"t\":[\"混入（mixin）应该说是预处理器最精髓的功能之一了，简单点来说，Mixins 可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用\",\"可以在 Mixins 中定义变量或者默认参数\",\"less\",\"在 less 中，混合的用法是指将定义好的 ClassA 中引入另一个已经定义的 Class，也能够传递参数，参数变量为@声明\",\"编译前：\",\".alert { font-weight: 700; } .highlight(@color: red) { font-size: 1.2em; color: @color; } .heads-up { .alert; .highlight(red); } \",\"编译后：\",\".alert { font-weight: 700; } .heads-up { font-weight: 700; font-size: 1.2em; color: red; } \",\"sass\",\"sass 声明 mixins 时需要使用 @mixin，后面紧跟 mixin 的名，也可以设置参数，参数名为变量$声明的形式，调用的时候使用 @include + mixin 名称\",\"@mixin large-text { font: { family: Arial; size: 20px; weight: bold; } color: #ff0000; } .page-title { @include large-text; padding: 4px; margin-top: 10px; } \",\"stylus\",\"stylus 中的混合和前两款 CSS 预处理器语言的混合略有不同，他可以不使用任何符号，就是直接声明 Mixins 名，然后在定义参数和默认值之间用等号（=）来连接\",\"error(borderWidth = 2px) { border: borderWidth solid #F00; color: #F00; } .generic-error { padding: 20px; margin: 4px; error(); /* 调用error mixins */ } .login-error { left: 12px; position: absolute; top: 20px; error(5px); /* 调用error mixins，并将参数 borderWidth 的值指定为5px */ } \"]},\"1014\":{\"h\":\"计算\",\"t\":[\"预编译期允许对数字，颜色，变量的操作，支持加、减、乘、除或更复杂的综合运算\",\"less、sass、stylus 的计算语法相同。当在属性值中使用/时，必须用圆括号括起来，为了避免某些属性对 / 运算符的误判\",\"@file: 5%; @base-color: lightblue; .cor { width: @file * 10; //50% background-color: @base-color + #111; } @color-black: #000000; .content { h3 { color: @color-black; // #000000 } p { color: @color-black + #888888; // #888888 } } \"]},\"1015\":{\"h\":\"条件判断\",\"t\":[\"less\",\"less 没有我们平常使用的 if，else 条件判断，而是用 when 来实现这种用法\",\"(),()相当于 JS 中的||\",\"/* 当下边 div 中 .size 传入的第一个参数是100px或者第二个参数是100px才会执行*/ .size(@width,@height) when (@width = 100px),(@height = 100px) { width: @width; height: @height; } div { .size(100px,100px); background: red; } \",\"()and()相当于 JS 中的&&\",\"/* 当下边 div 中 .size 传入的第一个参数是100px并且第二个参数是100px才会执行*/ .size(@width,@height) when (@width = 100px) and (@height = 100px) { width: @width; height: @height; } div { .size(100px,100px); background: red; } \",\"sass\",\"sass 中的条件判断和 less 一样 sass 中也支持条件判断，只不过 sass 中的条件判断支持得更为彻底\",\"sass 中支持的条件判断如下：\",\"@if(条件语句){}\",\"@else if(条件语句){}\",\"... ...\",\"@else(条件语句){}\",\"sass 中当条件不为 false 或者 null 时就会执行 {} 中的代码，和 less 一样 sass 中的条件语句支持通过 >、>=、<、<=、== 进行判断\",\"@mixin triangle($dir, $width, $color) { width: 0; height: 0; border-width: $width; border-style: solid solid solid solid; @if ($dir == Up) { border-color: transparent transparent $color transparent; } @else if ($dir == Down) { border-color: $color transparent transparent transparent; } @else if ($dir == Left) { border-color: transparent $color transparent transparent; } @else if ($dir == Right) { border-color: transparent transparent transparent $color; } } div { @include triangle(Left, 50px, blue); } \",\"stylus\",\"stylus 的条件判断写法较 sass 而言更加简洁\",\"box(x, y, margin-only = false) if margin-only margin y x else padding y x body box(5px, 10px, true) \"]},\"1016\":{\"h\":\"循环\",\"t\":[\"less\",\"less 的循环本质上是自递归调用\",\"移动端适配方案 - less 写法\",\"@defaultRemValue: 32px; @defaultWidth: 750px; .LoopScreenArray(@n, @i: 1, @argu) when (@i <= @n) { @value: extract(@argu, @i); @media only screen and (min-width: unit(@value, px)) { html, body { font-size: unit( @value / @defaultWidth * @defaultRemValue, px ) !important; /* no */ } } .LoopScreenArray(@n, @i+1, @argu); // less的循环本质上是自递归调用 } // 屏幕适配 .LoopScreen(@a, @b, @c, @d, @e, @f, @g, @h, @i, @j, @k, @l, @m, @n, @o, @p, @q, @r) { .LoopScreenArray(length(@arguments), 1, @arguments); } .LoopScreen(240px, 320px, 360px, 375px, 414px, 480px, 540px, 600px, 640px, 667px, 720px, 750px, 768px, 800px, 834px, 1024px, 1080px, 1440px); \",\"sass\",\"sass 中直接支持循环语句，分别是 for 循环和 while 循环\",\"ul { li { width: 100%; height: 50px; border: 1px solid #000; font-size: 20px; color: #fff; background: red; // 5、6、7、8 @for $i from 5 through 8 { &:nth-child(#{$i}) { background: deepskyblue; } } } } ul { li { width: 100%; height: 50px; border: 1px solid #000; font-size: 20px; color: #fff; background: red; // 5、6、7 @for $i from 5 to 8 { &:nth-child(#{$i}) { background: deepskyblue; } } } } \",\"两者的区别 through 包头包尾，to 包头不包尾\",\"ul { li { width: 100%; height: 50px; border: 1px solid #000; font-size: 20px; color: #fff; background: red; $i: 5; @while ($i <= 8) { &:nth-child(#{$i}) { background: deepskyblue; } $i: $i + 1; } } } \",\"stylus\",\"stylus 允许通过 for/in 对表达式进行迭代形式如下\",\" for <val-name> [, <key-name>] in <expression>\",\"for num in (1..10) .box{num} animation: box + num 5s infinite @keframes box{num} 0% { left: 0px } 100% { left: (num * 30px) } \"]},\"1017\":{\"h\":\"模块化 import\",\"t\":[\"模块化就是将 Css 代码分成一个个模块\",\"sass、less、stylus 三者的使用方法都如下所示\",\"@import \\\"./common\\\"; @import \\\"./github-markdown\\\"; @import \\\"./mixin\\\"; @import \\\"./variables\\\"; \"]},\"1018\":{\"h\":\"HTML5新特性\"},\"1019\":{\"h\":\"新增 input 特性\",\"t\":[\"autocomplete:规定是否使用输入字段的自动完成功能。主要作用为自动填充，提交之后后退表单属性保留。\",\"autofocus:规定输入字段在页面加载时是否获得焦点。\",\"multiple:允许多选。如果使用该属性，则允许一个以上的值。\",\"pattern:规定输入字段的值的正则表达式。\",\"placeholder:规定帮助用户填写输入字段的提示。\",\"readonly:指示字段的值初始化后无法被修改。\",\"required:指示输入字段的值是必需的。\",\"step:规定输入字的合法数字间隔。\",\"list:引用包含输入字段的预定义选项的 datalist。与 datalist 标签配合使用组成下拉框。\",\"list 示例代码：\",\"<div> <input list=\\\"browsers\\\" name=\\\"browser\\\" /> <datalist id=\\\"browsers\\\"> <option value=\\\"Internet Explorer\\\" /> <option value=\\\"Firefox\\\" /> <option value=\\\"Chrome\\\" /> <option value=\\\"Opera\\\" /> <option value=\\\"Safari\\\" /> </datalist> </div> \",\"效果：\",\"formaction:\",\"formaction\",\"新 type 属性:\",\"新增input特性\",\" text email url TEL search number 范围 颜色 月 周 日期 时间 日期时间 当地日期时间\"]},\"1020\":{\"h\":\"新增结构化标签\",\"t\":[\"新结构标签，实质上为语义标签，便于盒子模型的理解，提高网页的 SEO（中文名：搜索引擎优化，有利于提高网站访问量）\",\"<header>：头部\",\"<nav>：导航栏\",\"<article>：带标题、主体内容的一大段文章\",\"<aside>：侧边栏\",\"<section>：章节栏\",\"<section>：章节栏\",\"<hgroup>：分组。使用 <hgroup> 标签对网页或区段（section）的标题进行组合\",\"<footer>：尾部\",\"<figure></figure>：用作文档中插图的图像\",\"<hr>：生成灰色水平分割线，自动居中对齐。宽度高度可重新设置\",\"<pre>：被包围在 pre 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体\",\"<fieldset>：与<legend>标签配合使用。<fieldset>标签内包含<legend>标签和其他标签，<legend>内文本作为标题，其他标签作为正文，生成一个包含特殊边界的框\",\"示例代码:\",\"<fieldset> <legend>legend标题</legend> <p><正文文本/p></p> </fieldset> \",\"效果：\",\"legend标题\",\"正文文本\"]},\"1021\":{\"h\":\"视频标签 video\",\"t\":[\"语法\",\"<video src=\\\"文件地址\\\" controls=\\\"controls\\\"></video> \",\"属性\",\"值\",\"描述\",\"autoplay\",\"autoplay\",\"如果出现该属性，则视频在就绪后马上播放。\",\"controls\",\"controls\",\"如果出现该属性，则向用户显示控件，比如播放按钮。\",\"height\",\"pixels\",\"设置视频播放器的高度。\",\"loop\",\"loop\",\"如果出现该属性，则当媒介文件完成播放后再次开始播放。\",\"muted\",\"muted\",\"规定视频的音频输出应该被静音。\",\"poster\",\"URL\",\"规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。\",\"preload\",\"preload\",\"如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 \\\"autoplay\\\"，则忽略该属性。\",\"src\",\"url\",\"要播放的视频的 URL。\",\"width\",\"pixels\",\"设置视频播放器的宽度。\"]},\"1022\":{\"h\":\"音频标签 audio\"},\"1023\":{\"h\":\"HTML基础\"},\"1024\":{\"h\":\"HTML 与浏览器基础\"},\"1025\":{\"h\":\"掌握网页基本组成\",\"t\":[\"网站：在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。\",\"网页：网站中的一“页”，通常是 HTML 格式的文件，要通过浏览器来阅读。\",\"网页是构成网站的基本元素，通常的网站以.htm 或.html 后缀结尾，俗称为 HTML 文件。\",\"网页的形成：前端人员开发代码 → 浏览器显示代码（解析、渲染）→ 生成最后的 Web 页面\"]},\"1026\":{\"h\":\"HTML 是什么\",\"t\":[\"HTML 是超文本标记语言（Hyper Text Markup Language）\",\"属于标记语言，非编程语言。\",\"超文本的含义：1、超越文本限制；2、超级链接文本。\"]},\"1027\":{\"h\":\"常用浏览器\",\"t\":[\"浏览器是网页显示、运行的平台。常用的浏览器有 IE(Edge)、FireFox、Chrome、Safari 和 Opera。\",\"浏览器内核（渲染引擎）：负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。\",\"Chrome 内核：Blink，属于 WebKit 的分支。国内一般浏览器都会采用 WebKit/Blink 内核。\",\"由于浏览器内核的差异性，显示原生 html 会有所差异：\",\"从服务器接收的数据会存放在一个临时的文件夹。接收我们缓存的数据(chrome://version/)\",\"临时文件夹作用：第二次访问同一个网站速度会变快，因为第一次浏览的时候，大部分文件已经缓存在本地。\"]},\"1028\":{\"h\":\"Web 标准的三大组成部分\",\"t\":[\"Web标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。\",\"为什么需要 Web 标准\",\"遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一之外，还有以下优点：\",\"让 Web 的发展前景更广阔。\",\"内容能被更广泛的设备访问。\",\"更容易被搜寻引擎搜索。\",\"降低网站流量费用。\",\"使网站更易于维护。\",\"提高页面浏览速度。\",\"三大部分组成包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。\",\"结构：用于对网页元素进行整理和分类，现阶段主要学的是 HTML。\",\"表现：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是 CSS。\",\"行为：网页模型的定义以及交互的编写，现阶段主要学的是 Javascript。\",\"Web标准提出的最佳体验方案：结构、表现、行为相分离。\",\"简单理解：结构写到 HTML 文件中，表现写到 CSS 文件中，行为写到 Javascript 文件中。\",\"构成理解：结构=身体、表现=外观装饰、行为=行为动作。三者中结构最重要。\"]},\"1029\":{\"h\":\"HTML 标签\",\"t\":[\"元素、标签与属性\",\"元素：HTML 元素就是构成 HTML 文件的基本对象。\",\"标签：标记 HTML 元素。\",\"属性：为 HTML 元素提供各种附加信息，总是以键值对的形式出现，属性总是在 HTML 元素的开始标签中进行定义。\"]},\"1030\":{\"h\":\"标签书写注意规范\",\"t\":[\"①HTML 标签是由尖括号包围的关键词，例如<html />。\",\"②HTML 标签通常是成对出现的，例如<html>和</html>，我们称为双标签。标签中的第一个标签是开始标签，第二个标签是结束标签。\",\"③ 有些特殊的标签必须是单个标签（极少情况），例如<br />，我们称为单标签。\",\"④ 双标签关系可以分为两类：包含关系和并列关系。\",\"包含：\",\"<head>\",\"​ <title></title>\",\"<head>\",\"并列：\",\"<head></head>\",\"<body></body>\"]},\"1031\":{\"h\":\"HTML 骨架标签\",\"t\":[\"每个网页都会有一个基本的结构标签（骨架标签），页面内容也是在这些基本标签上书写。HTML 页面也被称为 HTML 文档。\",\"HTML 页面也被称为 HTML 文档。\",\"标签名\",\"定义\",\"说明\",\"<html></html>\",\"HTML 标签\",\"页面中最大的标签，我们称为 根标签\",\"<head></head>\",\"文档头部\",\"注意在 head 标签中我们必须要设置的标签是 title\",\"<title></title>\",\"文档标题\",\"让页面拥有一个属于自己的网页标题\",\"<body></body>\",\"文档主体\",\"元素包含文档的所有内容，页面内容基本都放到 body 里面\",\"额外内容：开发工具（建议使用VsCode）\",\"掌握文件新建、保存，插件安装。HTML 基础结构标签快捷输入键: !\",\"Open in Default Browser (Alt + B)\",\"Ctrl +/Ctrl – 放大缩小视图\",\"插件安装：\",\"插件\",\"作用\",\"Chinese（Simplified）LanguagePack for VS Code\",\"中文（简体）语言包\",\"Open in Browser\",\"右击选择浏览器打开 html 文件\",\"JS-CSS-HTML Formatter\",\"每次保存，都会自动格式化 js css 和 html 代码\",\"Auto Rename Tag\",\"自动重命名配对的 HTML/XML 标签\",\"CSS Peek\",\"样式追踪\",\"根标签、头部标签、标题标签、主体标签的关系\"]},\"1032\":{\"h\":\"1. <!DOCTYPE> 文档类型声明标签\",\"t\":[\"<!DOCTYPE>文档类型声明，作用就是告诉浏览器使用哪种 HTML 版本来显示网页。\",\"<!DOCTYPE html> 代码含义：当前页面采取的是 HTML5 版本来显示网页。\",\"注意：\",\"<!DOCTYPE>声明位于文档中的最前面位置，处于</html>标签之前。\",\"<!DOCTYPE>不是一个 HTML 标签，是文档类型声明标签。\"]},\"1033\":{\"h\":\"2. <html lang> 语言种类（全局属性）\",\"t\":[\"用于定义当前文档显示的语言。\",\"en 英语; zh-CN 中文\",\"实际文档显示与语言定义之间非强制关系。该属性对浏览器起提示作用，告诉浏览器这个页面采取某种语言来显示。\"]},\"1034\":{\"h\":\"3. <meta charset> 字符集\",\"t\":[\"<head>标签内，通过标签的 charset 属性规定 HTML 文档使用的字符编码。\",\"常用值：GB2312 BIG5 GBK UTF-8，UTF-8也被称为万国码，最常用的字符编码。\",\"以上三类代码 VSCode 自动生成，不需要重写。\",\"根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。\"]},\"1035\":{\"h\":\"4.标题标签 <h1> - <h6> （重要）\",\"t\":[\"HTML 提供了 6 个等级的网页标题，<h1>-<h6>。一个标题独占一行，加了标题标签的文字加粗，字号变大。\",\"标题一共六级选，\",\"文字加粗一行显。\",\"由大到小依次减，\",\"从重到轻随之变。\",\"语法规范书写后，\",\"具体效果刷新见。\"]},\"1036\":{\"h\":\"5.段落和换行标签（重要）\",\"t\":[\"<p>标签用于定义段落，可以将整个网页分为若干个段落。\",\"特点：1、文本在一个段落中会根据浏览器窗口的大小自动换行。\",\"​ 2、段落和段落之间保有空隙。\",\"<br>单标签，用于某段文本强制换行显示。\",\"特点：1、单标签。2、简单地开始新一行，不插入段落的间距。\"]},\"1037\":{\"h\":\"6.文本格式化标签\",\"t\":[\"标签语义：突出重要性。\",\"语义\",\"标签\",\"说明\",\"加粗\",\"<strong></strong>或者<b></b>\",\"更推荐使用<strong>标签 语义更强烈\",\"倾斜\",\"<em></em>或者<i></i>\",\"更推荐使用<em>标签 语义更强烈\",\"删除线\",\"<del></del>或者<s></s>\",\"更推荐使用<del>标签 语义更强烈\",\"下划线\",\"<ins></ins>或者<u></u>\",\"更推荐使用<ins>标签 语义更强烈\"]},\"1038\":{\"h\":\"7. <div> 和 <span> 标签\",\"t\":[\"<div>和<span>没有语义，是装内容的一个盒子。\",\"特点：1、<div>标签用来布局，但是一行只能放一个<div>。大盒子\",\"​ 2、<span>标签用来布局 ，一行上可以放多个<span>。小盒子\"]},\"1039\":{\"h\":\"8. <sup> 和 <sub> 标签\",\"t\":[\"<sup></sup>上标文本标签\",\"<sub></sub>下标文本标签\"]},\"1040\":{\"h\":\"9.注释\",\"t\":[\"如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签，HTML 中的注释以””结束。\",\"<!—注释语句 --> 快捷键 Ctrl + /\",\"注释标签里面的内容是给程序员看的，这个代码时不执行不显示到页面中的。\"]},\"1041\":{\"h\":\"超链接标签 <a>\",\"t\":[\"<a>用于定义超链接，作用是从一个页面链接到另一个页面。\"]},\"1042\":{\"h\":\"链接的语法格式\",\"t\":[\"<a href=”跳转目标” target=”目标窗口的弹出方式”> 文本或图像 </a>\",\"href:用于指定链接目标的 url 地址，必须属性。当为标签应用 href 属性时，它就具有了超链接功能。\",\"target:用于指定链接页面的打开方式，其中_self 为默认值，_blank 为在新窗口中打开方式。\"]},\"1043\":{\"h\":\"链接的分类\",\"t\":[\"外部链接。例如<a href=\\\"https://www.baidu.com\\\">百度</a>\",\"内部链接。网站内部页面之间的相互链接，直接链接内部页面名称。\",\"空链接：如果当时没有确定链接目标时，<a href=\\\"#\\\"> 首页</a>。\",\"下载链接：如果 href 里面地址是一个文件或者压缩包，会下载这个文件。\",\"网页元素链接：在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接。\",\"锚点链接：点击链接后，可以快速定位到页面中的某个位置。\",\"锚点：<a href=”#abc”> xxx</a>\",\"目标：<a id=”abc”> xxxx</a>\"]},\"1044\":{\"h\":\"图片标签 <img>\",\"t\":[\"<img>标签用于定义 HTML 页面中的图像。\",\"<img src=”图像URL”/>\",\"src 是<img>标签的必须属性，用于制定图像文件的路径和文件名。\",\"其他属性\",\"属性\",\"属性值\",\"说明\",\"src\",\"图片路径\",\"必须属性\",\"alt\",\"文本\",\"替换文本，图像路径无效时的代替文字\",\"title\",\"文本\",\"提示文本，鼠标放到图像上的提示文字\",\"width\",\"像素\",\"设置图像宽度\",\"height\",\"像素\",\"设置图像高度\",\"border\",\"像素\",\"设置图像的边框粗细\",\"width 和 height，修改其中一个像素值，另一个等比例缩放。\",\"alt 替换文本；title 提示文本。\",\"图像标签注意点：\",\"图像标签可以拥有多个属性，必须写在标签名的后面。\",\"属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。\",\"属性采取键值对，即 key=”value”的格式，属性=”属性值”。\"]},\"1045\":{\"h\":\"相对路径的三种形式\",\"t\":[\"目录文件夹和根目录（目录文件夹第一层）\",\"相对路径：以引用文件所在位置为参考基础，建立出的目录路径。\",\"绝对路径：目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。\",\"相对路径分类\",\"符号\",\"说明\",\"同一级路径\",\".\",\"图像文件位于 HTML 文件同一级 如<img src=\\\"baidu.gif\\\" />\",\"下一级路径\",\"/\",\"图像文件位于 HTML 文件下一级 如<img src=\\\"images/baidu.gif\\\" />\",\"上一级路径\",\"../\",\"图像文件位于 HTML 文件上一级 如<img src=\\\"../baidu.gif\\\" />\"]},\"1046\":{\"h\":\"表格标签\",\"t\":[\"表格是实际开发中非常常用的标签：\"]},\"1047\":{\"h\":\"表格的主要作用\",\"t\":[\"表格主要用于显示、展示数据，因为它可以让数据显示得非常的规整，可读性非常好。特别是后台展示数据的时候， 能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理。\",\"小总结：表格不是用来布局页面的，而是用来展示数据的。\"]},\"1048\":{\"h\":\"表格的基本语法\",\"t\":[\"<table><table>是用于定义表格的标签。\",\"<tr><tr>标签用于定义表格中的行，必须嵌套在<table><table>标签中。\",\"<td><td>用于定义表格中的单元格，必须嵌套在<tr><tr>标签中。\",\"字母 td 指表格是数据 table data，即数据单元格的内容。\",\"一般表头单元格位于表格的首行/首列，文本内容加粗居中显示。\",\"<th>标签表示 HTML 表格的表头部分(table head 缩写)。\",\"提醒：表格标签这部分属性我们实际开发不常用，后面通过CSS设置。\",\"属性名\",\"属性值\",\"描述\",\"align\",\"left、center、right\",\"规定表格相对周围元素的对齐方式\",\"border\",\"1或\\\"\\\"\",\"规定表格单元是否拥有边框，默认为\\\"\\\"，表示没有边框\",\"cellpadding\",\"像素值\",\"规定单元边沿与其内容之间的空白，默认1像素\",\"cellspacing\",\"像素值\",\"规定单元格之间的空白，默认2像素\",\"width\",\"像素值或百分比\",\"规定表格的宽度\",\"一般默认 cellpadding 和 cellspacing 设置为 0；表格浏览器中对齐 align。\",\"style属性：style=\\\" border-collapse: collapse\\\"，表示将相邻边框合并。不写该属性，则默认值是 separate 不合并边框。\"]},\"1049\":{\"h\":\"表格结构标签\",\"t\":[\"使用场景：因为表格可能很长，为了更好表示表格语义，可以将表格分割为表格头部和表格主体两大部分。\"]},\"1050\":{\"h\":\"合并单元格\",\"t\":[\"合并单元格方式\",\"跨行合并 rowspan=”合并单元格的个数”\",\"跨列合并 colspan=”合并单元格的个数”\",\"目标单元格\",\"跨行：最上侧单元格为目标单元格，写合并代码。\",\"跨列：最左侧单元格为目标单元格，写合并代码。\",\"合并单元格的步骤\",\"先确定是跨行还是跨列合并。\",\"找到目标单元格，写上合并方式=合并的单元格数量。\",\"删除多余的单元格。\"]},\"1051\":{\"h\":\"列表标签\",\"t\":[\"表格是用来显示数据的，那么列表就是用来布局的。\",\"列表最大的特点就是整齐、整洁、有序，布局更加自由和方便。\",\"列表分类：无序列表、有序列表、自定义列表。\"]},\"1052\":{\"h\":\"无序列表（重点）\",\"t\":[\"<ul>标签表示 HTML 页面中项目的无序列表，列表项使用<li>标签定义。\",\"无序列表的各个列表项之间没有顺序级别之分，是并列的。\",\"ul 中只能嵌套 li，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。\",\"<li></li>之间相当于一个容器，可以容纳所有元素。\",\"无序列表会带有自己的样式属性，实际使用时，使用 CSS 设置。\",\"属性 type: disc 实心圆 square 实心方块 circle 空心圆,更改无序列表前面的点。\"]},\"1053\":{\"h\":\"有序列表（理解）\",\"t\":[\"<ol>标签用于定义有序列表，列表排序以数字显示，并且使用<li>标签来定义列表项。\",\"ol 中只能嵌套 li，直接在<ol></ol>标签中输入其他标签或文字的做法是不被允许的。\",\"属性 type：阿拉伯数字、罗马数字、英文字母大小写，start: 起始的数字项。\"]},\"1054\":{\"h\":\"自定义列表\",\"t\":[\"自定义列表常用语对属于或名词进行解释和描述，定义列表的列表项前没有任何项目符号。\",\"<dl>标签用于定义描述列表（或定义列表），该标签会与<dt>（定义项目/名字）和<dd>（描述每一个项目/名字）一起使用。\",\"<dl></dl>里面只能包含<dt><dd>。\",\"dt 和 dd 个数没有限制，经常是一个 dt 对应多个 dd。\"]},\"1055\":{\"h\":\"表单标签\",\"t\":[\"表单需求：收集用户信息，跟用户进行交互，收集资料。\",\"HTML中完整的表单通常由表单域、表单控件（也称为表单元素）和提示信息 3 个部分构成。\"]},\"1056\":{\"h\":\"<form> 标签\",\"t\":[\"用于定义表单域，实现用户信息的收集和传递。\",\"<form>会把它范围内的表单元素信息提交给服务器。\",\"<form action=\\\"url地址\\\" method=\\\"提交方式\\\" name=\\\"表单域名称\\\">\",\" 表单元素控件 \",\"</form>\",\"暂时不用表单域提交数据，写上 form 标签即可。\",\"method: post 加密提交 get 明文提交\"]},\"1057\":{\"h\":\"表单控件（表单元素）\",\"t\":[\"表单元素是允许用户在表单中输入或者选择的内容控件。\",\"input 输入表单元素（单标签）\",\"type 属性\",\"属性值\",\"描述\",\"button\",\"定义可点击按钮（多数情况下，用于通过Javascript启动脚本）\",\"checkbox\",\"定义复选框\",\"file\",\"定义输入字段和“浏览”按钮，按文件上传\",\"hidden\",\"定义隐藏的输入字段\",\"image\",\"定义图像形式的提交按钮\",\"password\",\"定义密码字段，该字段中的字符被掩码\",\"radio\",\"定义单选按钮\",\"reset\",\"定义重置按钮，重置按钮会清除表单中的所有数据\",\"submit\",\"定义提交按钮，提交按钮会把表单数据发送到服务器\",\"text\",\"定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符\",\"input 其他属性\",\"属性\",\"属性值\",\"描述\",\"name\",\"由用户自定义\",\"定义input元素的名称\",\"value\",\"由用户自定义\",\"规定input元素的值\",\"checked\",\"checked\",\"规定此input元素首次加载时应当被选中\",\"maxlength\",\"正整数\",\"规定输入字段中的字符的最大长度\",\"radio&checkbox\",\"性别表单控件 radio 必须有相同的名字 name 才能多选一。checkbox 同理。\",\"设置 checked 属性之后，页面打开默认选中按这个按钮。\",\"maxlength 是用户在表单元素输入的最大字符数，一般较少使用。\",\"<label>标签\",\"<label>标签为 input 元素定义标注（标签）。\",\"<label>用于绑定一个表单元素，当点击<label>标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上，用于增加用户体验。\",\"<label for=\\\"abc\\\">xxx</label>\",\"<input type=\\\"text\\\" name=\\\"123\\\" id=\\\"abc\\\">\",\"select 下拉表单元素\",\"<select name=\\\"\\\" id=\\\"\\\">\",\"<option value=\\\"\\\">选项1</option>\",\"<option value=\\\"\\\">选项2</option>\",\"<option value=\\\"\\\">选项3</option>\",\"</select>\",\"<select>中至少包含一对<option>。\",\"在<option>中定义 selected = “selected”，当前项即为默认选中项。\",\"textarea 文本域元素\",\"使用场景：当用户输入内容较多的情况下，需要使用<textarea>标签。\",\"该标签用于定义多行文本输入的控件。\",\"通过<textarea>标签可以轻松地创建多行文本输入框。\",\"cols=”每行中的字符数”,rows=”显示的行数”，实际开发中用 CSS 来改变大小。\",\"写在最后：学会查阅文档\",\"https://www.w3school.com.cn\",\"https://developer.mozilla.org/zh-CN/\"]},\"1058\":{\"h\":\"1.HTML\",\"t\":[\"HTML：用于对网页元素进行整理和分类，Web标准三大组成中的结构\",\"HTML基础\",\"HTML5新特性\"]},\"1059\":{\"h\":\"BOM\",\"t\":[\"全称 Browser Object Model 浏览器对象模型\",\"BOM 可以使我们通过 JS 来操作浏览器\",\"在 BOM 中为我们提供了一组对象，用来完成对浏览器的操作\"]},\"1060\":{\"h\":\"BOM 对象\"},\"1061\":{\"h\":\"Window：\",\"t\":[\"整个浏览器的窗口，同时也是网页中的全局对象。\",\"下面的 Navigator、Location 这些对象都属于 window 属性。\"]},\"1062\":{\"h\":\"事件\",\"t\":[\"onload\",\"window.onload 是窗口 (页面）加载事件，当文档内容完全加载完成会触发该事件(包括图像、脚本 文件、CSS 文件等)。\",\"注意：\",\"1.有了 window.onload ，就可以把 JS 代码写到页面元素的上方，因为 onload 是等页面内容全 部加载完毕，再去执行处理函数\",\"2.window.onload 传统注册事件方式 只能写一次，如果有多个，会以最后一个 window.onload 为准\",\"3.如果使用 addEventListener 则没有限制\",\"onresize\",\"window.onresize 是调整窗口大小加载事件, 当触发时就调用的处理函数。\",\"1.只要窗口大小发生像素变化，就会触发这个事件\",\"2.经常利用这个事件完成响应式布局\",\"3.window.innerWidth：获取当前屏幕的宽度\"]},\"1063\":{\"h\":\"方法\",\"t\":[\"open()\",\"打开新窗口\",\"语法：\",\"window.open(URL,name,parameters)\",\"URL 为子窗口页面地址\",\"name 为子窗口句柄\",\"parameters 为窗口参数(各参数用逗号分隔)\",\"close()\",\"close() 方法用于关闭浏览器窗口。\",\"setInterval()\",\"按照指定的周期（以毫秒计）来调用函数或计算表达式。\",\"参数：\",\"1.回调函数，该函数每隔一段时间被调用一次。\",\"2.每次调用间隔的时间，单位毫秒。\",\"返回值：一个 Number 类型的数据。数字用来作为定时器的唯一标识。\",\"clearInterval()\",\"关闭一个定时器\",\"方法中需要一个定时器的标识作为参数，这样将关闭标识对应定时器。\",\"clearInterval()可以接收任意参数，如果参数标识有效，则停止对应定时器。\",\"如果参数无效，则不执行。\",\"setTimeout()\",\"延时调用一个函数，不马上执行，而是隔一段时间以后再执行。\",\"与定时调用区别：定时调用执行多次，延时调用只执行一次。\"]},\"1064\":{\"h\":\"Navigator\",\"t\":[\"当前浏览器的信息，通过该对象可以识别不同浏览器。由于历史原因，Navigator 对象中大部分属性已经不能帮助识别浏览器了。\",\"一般只会使用 userAgent（字符串）来判断浏览器信息\",\"userAgent：包含浏览器信息内容，不同浏览器内容不同。\",\"IE11 已去除微软和 IE 相关标识，现在也不能通过 userAgent 识别浏览器是否为 IE 了。\",\"现在常通过一些浏览器中特有对象，判断浏览器信息。\",\"比如：ActiveXObject\"]},\"1065\":{\"h\":\"Location：\",\"t\":[\"当前浏览器的地址栏信息。通过它可以获取地址栏信息，操作浏览器跳转页面。\",\"直接打印 location：获取到地址栏信息（当前页面的完整路径）。\",\"修改 location 为完整路径 or 相对路径，会自动跳转到该路径，并且生成相应历史记录。\",\"属性\",\"描述\",\"hash\",\"设置或返回从井号（#）开始的 URL（锚）\",\"host\",\"设置或返回主机名和当前 URL 的端口号\",\"hostname\",\"设置或返回当前 URL 的主机名\",\"href\",\"设置或返回完整的 URL\",\"pathname\",\"设置或返回当前 URL 的路径部分\",\"port\",\"设置或返回当前 URL 的端口号\",\"protocol\",\"设置或返回当前 URL 的协议\",\"search\",\"设置或返回从问号（?）开始的 URL（查询部分）\",\"属性\",\"描述\",\"assign()\",\"跳转到其他页面，作用和直接修改 location 一样\",\"reload()\",\"重新加载当前页面，作用和刷新一样。方法中传递 true，强制清空缓存刷新页面\",\"replace()\",\"使用一个新的页面替换当前页面，调用完毕后跳转页面。不会生成历史记录，不能使用回退按钮\"]},\"1066\":{\"h\":\"从输入 URL 到页面加载的全过程\",\"t\":[\"1.DNS 域名解析\",\"2.建立 TCP 连接\",\"3.发送 HTTP 请求\",\"4.服务器返回响应结果（处理请求并返回 HTTP 报文）\",\"5.浏览器解析 THML\",\"6.浏览器渲染页面\",\"7.连接结束\"]},\"1067\":{\"h\":\"History\",\"t\":[\"浏览器的历史记录，可以通过该对象操作浏览器的历史记录。由于隐私原因，该对象不能获取到具体历史记录，只能操作浏览器向前 or 向后翻页。而且该操作只在当次访问时有效。\",\"属性\",\"描述\",\"length\",\"返回浏览器历史列表中的 URL 数量\",\"方法\",\"描述\",\"back()\",\"加载 history 列表中的前一个 URL\",\"forward()\",\"加载 history 列表中的下一个 URL\",\"go()\",\"加载 history 列表中的某个具体页面\",\"go()\",\"跳转到指定页面\",\"需要一个整数作为参数：\",\"1：向前跳转1个页面 等于forward()\",\"2：向前跳转2个页面\",\"-1：向后跳转一个页面 等于back()\",\"-2：向后跳转2个页面\"]},\"1068\":{\"h\":\"Screen：\",\"t\":[\"用户的屏幕信息，可获取到用户的显示器相关信息。（用的较少）。\"]},\"1069\":{\"h\":\"总结\",\"t\":[\"这些BOM对象在浏览器中都是作为window对象的属性保存的，可以通过window对象来使用，也可以直接使用。\"]},\"1070\":{\"h\":\"定时器应用\"},\"1071\":{\"h\":\"思想\",\"t\":[\"定时器设置，通过启动/停止事件给定时器设置关键值，用于启动和停止定时器。\",\"定时器放置于事件中的时候，由于事件不断调用导致定时器叠加，所以每次定时器函数调用时必须先清除定时器再向下执行。\"]},\"1072\":{\"h\":\"设置\",\"t\":[\"定义一个变量timer，用来保存定时器标识。\",\"参数：\",\"obj，执行动画的对象。\",\"attr：要执行动画的样式，比如：left top width height\",\"target：执行动画的目标位置。\",\"speed，移动速度。\",\"判断speed正负值，如果从左向右移，speed为正；如果从右向左移，speed为负。\",\"回调函数，这个函数将会在动画执行完毕之后执行。\"]},\"1073\":{\"h\":\"两个及以上元素调用同一个定时器响应函数\",\"t\":[\"无法调用同一个timer变量，因为后一个元素触发响应时总会清除前一个timer定时器。\",\"需要给对象添加obj.timer属性，对象自己保存自己的定时器标识。\"]},\"1074\":{\"h\":\"执行机制\"},\"1075\":{\"h\":\"JS是单线程\",\"t\":[\"单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务，这样所导致的问题 是：如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。\"]},\"1076\":{\"h\":\"同步和异步\",\"t\":[\"同步任务：都在主线程上执行，形成一个执行栈。\",\"异步任务：JS 的异步是通过回调函数实现的，异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）,一般而言，异步任务有以下三种类型：\",\"1.普通事件，如 click、resize 等\",\"2.资源加载，如 load、error 等\",\"3.定时器，包括 setInterval、setTimeout 等\",\"为了解决这个问题，JS 的设计者将这种耗时很长的任务先挂起，并添加到一个叫做任务队列 的处理机制中，等到其他任务执行完毕后，才会来执行它，这种任务叫做异步任务，而其他先被执 行的任务叫做同步任务。\",\"异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数\",\"3.执行流程\",\"1.先执行执行栈中的同步任务\",\"2.异步任务（回调函数）放入任务队列中\",\"3.一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被 读取的异步任务结束等待状态，进入执行栈，开始执行\",\"由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环\"]},\"1077\":{\"h\":\"DOM\",\"t\":[\"全称 Document Object Model 文档对象模型\",\"文档：整个 HTML 网页文档。\",\"对象：网页中的每一个部分都转换为了对象。\",\"模型：使用模型表示对象之间的关系，方便获取对象。\"]},\"1078\":{\"h\":\"节点介绍\",\"t\":[\"Node，是构成网页的最基本组成部分，网页中的每一个部分都可以称为一个节点。\",\"html 标签、属性、文本、注释、文档都是一个节点，具体类型不同。\",\"节点的类型不同，属性和方法也都不尽相同。\",\"常用节点分类\",\"nodeName\",\"noeType\",\"nodeValue\",\"文档节点\",\"#document\",\"9\",\"null\",\"元素节点\",\"标签名\",\"1\",\"null\",\"属性节点\",\"属性名\",\"2\",\"属性值\",\"文本节点\",\"$text\",\"3\",\"★ 文本内容\"]},\"1079\":{\"h\":\"文档节点#document\",\"t\":[\"document 代表整个 HTML 文档，网页中的所有节点都是它的子节点。\",\"document 对象作为 window 对象的属性存在，不用获取可以直接使用。\",\"通过该对象我们可以在整个文档访问内查找节点对象，并可以通过该对象创建各种节点对象。\"]},\"1080\":{\"h\":\"HTML 结构相关\",\"t\":[\"document.head\",\"document.title\",\"document.body\",\"document.documentElement\"]},\"1081\":{\"h\":\"url 相关\",\"t\":[\"document.URL\",\"document.baseURI\",\"document.documentURI\",\"document.cookie\"]},\"1082\":{\"h\":\"元素节点 Element\",\"t\":[\"HTML 各种标签都是元素节点，最常用的一个节点。\"]},\"1083\":{\"h\":\"属性节点 Attr\",\"t\":[\"标签中的一个一个的属性，属性节点并非是元素节点的子节点，而是元素节点的一部分。\",\"可以通过元素节点来获取指定的属性节点。\",\"注意：一般不使用属性节点。\"]},\"1084\":{\"h\":\"文本节点 Text\",\"t\":[\"HTML 标签以外的文本内容，任意非 HTML 的文本都是文本节点，包括可以字面解释的文本内容。\",\"一般作为元素节点的子节点存在。\",\"获取文本节点时，一般先要获取元素节点，通过元素节点获取文本节点。\",\"注意：浏览器已经提供文档节点对象，这个对象是 window，可以在页面中直接使用，文档节点代表整个网页\"]},\"1085\":{\"h\":\"元素节点\",\"t\":[\"通过 document 对象调用\",\"getElementById()：通过 id 属性获取一个元素节点对象\",\"getElementsByTagName()：通过标签名获取一组元素节点对象\",\"getElementsByName()：通过 name 属性获取一组元素节点对象\",\"1.根据 ID 获取元素后，通过 innerHTML 可以获取到元素内部 HTML 代码。\",\"2.根据标签名或 name 获取一组对象时，返回一个类数组对象，即使查询到的元素只有一个，也会封装到数组中返回。\",\"3.innerHTML 对于自结束标签，这个属性没有意义。如果需要读取元素节点属性，直接使用 元素.属性名 注意：class 属性不能采用这种方式\",\"4.读取 class 属性时需要使用元素 .className\"]},\"1086\":{\"h\":\"获取节点属性\"},\"1087\":{\"h\":\"获取子节点\",\"t\":[\"childNodes：表示当前节点的所有子节点。\",\"childNodes 会获取包括文本节点在内的所有节点，根据 DOM 标签标签间空白也会当成空白节点\",\"IE8 及以下的浏览器中不会将空白文本当成子节点\",\"children：获取当前元素的所有子元素。\",\"firstChild：表示当前节点的第一个子节点。\",\"firstElementChild：获取当前元素的第一个子元素。\",\"firstElementChild 不支持 IE8 以下浏览器\",\"lastChild：表示当前节点的最后一个子节点。\",\"lastElementChild：获取当前元素的最后一个子元素。\",\"与上面同理\"]},\"1088\":{\"h\":\"获取父节点和兄弟节点\",\"t\":[\"parentNode：当前节点的父节点\",\"previousSibling：当前节点的前一个兄弟节点，可能会获取到空白文本\",\"previousElementSibling：获取前一个兄弟元素，IE8 以下不支持\",\"nextSibling：当前节点的后一个兄弟节点\",\"nextElementSibling：获取后一个兄弟元素，IE8 以下不支持\"]},\"1089\":{\"h\":\"元素拷贝\",\"t\":[\"cloneNode( true / false ) false：浅拷贝；true：深拷贝。\"]},\"1090\":{\"h\":\"inner\",\"t\":[\"innerHTML：设置或获取位于对象起始和结束标签内的 HTML\",\"-innerText：设置或获取位于对象起始和结束标签内的文本。标签名不会被解析，当作字符原样输出\"]},\"1091\":{\"h\":\"outer\",\"t\":[\"outerHTML：设置或获取对象及其内容的 HTML 形式。与 innerHTML 不同的是，对象本身的标签也包含进去了。在设置 outerHTML 时，和 innerHTML 一样\",\"outerText：设置(包括标签)或获取(不包括标签)对象的文本\",\"区别\",\"innerHTML 与 outerHTML 在设置对象的内容时包含的 HTML 会被解析，而 innerText 与 outerText 则不会 ​ 在设置时，innerHTML 与 innerText 仅设置标签内的文本，而 outerHTML 与 outerText 设置包括标签在内的文本\"]},\"1092\":{\"h\":\"获取节点方法\",\"t\":[\"getElementById()\",\"通过 id 属性获取一个元素节点对象\",\"getElementsByTagName()\",\"通过标签名获取一组元素节点对象\",\"getElementsByName()\",\"通过 name 属性获取一组元素节点对象\",\"getElementsByClassName()\",\"通过元素 class 属性值查询一组元素节点对象，IE8 以下不支持。\",\"document.querySelector()\",\"根据一个 CSS 选择器来查询一个元素节点对象\",\"虽然 IE8 中没有 getElementsByClassName()但是可以使用 querySelector()代替。\",\"使用该方法总会返回唯一的一个元素。\",\"document.querySelectorAll()\",\"该方法和 querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回。\",\"即使符合条件的元素只有一个，也会返回数组。\"]},\"1093\":{\"h\":\"其余节点方法\",\"t\":[\"1.获取 body 标签\",\"document.body\",\"保存的是 body 的引用。\",\"2.获取 html 根标签\",\"document.documentElement\",\"保存 html 根标签\",\"3.获取页面中所有元素\",\"document.all == document.getElementByTagName(\\\"*\\\");\"]},\"1094\":{\"h\":\"增删改节点方法\",\"t\":[\"方法\",\"描述\",\"appendChild()\",\"把新的子节点添加到指定节点\",\"removeChild()\",\"删除子节点\",\"replaceChild()\",\"替换子节点\",\"insertBefore()\",\"在指定的子节点前面插入新的子节点\",\"createAttribute()\",\"创建属性节点\",\"createElement()\",\"创建元素节点\",\"cratedTextNode()\",\"创建文本节点\",\"getAttribute()\",\"返回指定的属性值\",\"setAttribute()\",\"把指定属性设置或修改为指定的值\",\"createAttribute()、createTextNode()只能在 document 对象下创建\",\"createElement()可以在任何元素节点下创建\",\"注意：使用 innerHTML 也可以完成 DOM 的增删改的相关操作\",\"ul.innerHTML += \\\"<li>abc<li>\\\"; \",\"一般两种方式结合使用\",\"元素自删：A.parentNode.remove(A)\"]},\"1095\":{\"h\":\"动态创建元素\",\"t\":[\"document.write()：直接将内容写入页面的内容流，但是文档流执行完毕，会导致整个页面全部重绘。\",\"element.innerHTML：将内容写入某个 DOM 节点，不会导致页面全部重绘，创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂。\",\"document.createElement()：创建多个元素效率稍低一点，但是结构更清晰。\"]},\"1096\":{\"h\":\"属性节点\",\"t\":[\"attributes 获取属性节点的集合\",\"getAttributeNode 获取属性节点对象\",\"getAttribute(\\\"class\\\")获取属性节点的值\",\"setAttribute(\\\"class\\\",\\\"name\\\")设置属性节点的值 （可设置非标准属性）\",\"hasAttribute(\\\"class\\\") 判断属性节点是否存在\"]},\"1097\":{\"h\":\"classList\",\"t\":[\"classList 属性返回元素的类名，作为 DOMTokenList 对象。该属性用于在元素中添加，移除及切换 CSS 类。\"]},\"1098\":{\"h\":\"add()\",\"t\":[\"add(class1, class2, ……)\",\"在元素中添加一个或多个类名。\",\"如果指定的类名已存在，则不会添加\"]},\"1099\":{\"h\":\"contains()\",\"t\":[\"contains(class)\",\"返回布尔值，判断指定的类名是否存在。\",\"可能值：true，元素已包含了该类名；false，元素不存在该类名。\"]},\"1100\":{\"h\":\"item()\",\"t\":[\"item(index)\",\"返回元素中索引值对应的类名，索引值从 0 开始。\",\"如果索引值在区间范围外返回 null\"]},\"1101\":{\"h\":\"remove()\",\"t\":[\"remove(class1, class2, ……)\",\"移除元素中一个或多个类名。\",\"注意：移除不存在的类名，不会报错。\"]},\"1102\":{\"h\":\"toggle()\",\"t\":[\"toggle(class, true|false)\",\"在元素中切换类名。\",\"第一个参数为要在元素中移除的类名，并返回 false。\",\"如果该类名不存在则会在元素中添加类名，并返回 true。\",\"第二个是可选参数，是个布尔值用于设置元素是否强制添加或者移除类，不管该类名是否存在。\",\"注意：IE 或 Opera 12 及其更早版本不支持第二个参数。\"]},\"1103\":{\"h\":\"dataset\",\"t\":[\"添加自定义属性之后，在 JS 中可以通过元素的 dataset 属性访问自定义属性。dataset 属性的值是一个 DOMStringMap 实例，也就是一个键值对的映射。在这个映射中，每个 data-* 形式的属性都会有一个对应的属性，只不过属性名没有 data- 前缀。\"]},\"1104\":{\"h\":\"CSS 操作\"},\"1105\":{\"h\":\"读取设置内联样式\",\"t\":[\"语法：\",\"​ 元素.style.样式名 = 样式值;\",\"注意：如果 CSS 样式名中含有\\\"-\\\"，这种样式不合法，需要改为驼峰命名法。\",\"通过 style 设置的样式都是内联样式，内联样式优先级很高，所以 JS 修改样式基本会立即显示。\",\"如果原有样式中写了!important，样式拥有最高优先级，JS 也无法覆盖，会导致 JS 修改失败。\",\"通过 style 属性设置和读取的都是内联样式。\"]},\"1106\":{\"h\":\"获取元素样式\",\"t\":[\"IE 语法：\",\"​ 元素.currentStyle.样式名 注意！只有 IE 浏览器支持\",\"如果当前元素没有设置该样式，则获取默认值。\",\"其他浏览器 语法：\",\"​ getComputedStyle()方法，window 方法，可直接使用。 IE8 以下不支持\",\"需要两个参数：1、获取样式的元素；2、可传递伪元素，一般为 null。\",\"通用语法：\",\"function getStyle(obj, name) { return window.getComputedStyle ? getComputedStyle(obj, null)[name] : obj.currentStyle[name]; } \",\"如果获取的样式没有设置，则会获取到真实值，而不是默认值。\",\"通过上述两种语法获取的样式都是只读的，不能写。如果要修改必须通过 style 属性。\",\"// 将获取到的首个p标签隐藏 document.querySelector(\\\"p\\\").style.display = \\\"none\\\"; \"]},\"1107\":{\"h\":\"元素宽高移动属性\"},\"1108\":{\"h\":\"元素偏移量 offset 系列\",\"t\":[\"1.获得元素距离带有定位父元素的位置\",\"2.获得元素自身的大小（宽度高度）\",\"注意： 返回的数值都不带单位。\",\"offsetWidth、offsetHeight\",\"获取元素的整个宽度和高度，包括内容区、内边距和边框\",\"offsetParent\",\"可以用来获取当前元素的定位父元素\",\"会获取到离当前元素最近的开启了定位的祖先元素\",\"offsetLeft、offsetTop\",\"当前元素相对于其定位父元素的水平偏移量\",\"当前元素相对于其定位父元素的垂直偏移量\",\"offset 与 style 的区别\",\"offset\",\"style\",\"offset 可以得到任意样式表中的样式值\",\"style 只能得到行内样式表中的样式值\",\"offset 系列获得的数值是没有单位的\",\"style.width 获得的是带有单位的字符串\",\"offsetWidth 包含 padding+border+width\",\"style.width 获得不包含 padding 和 border 的值\",\"offsetWidth 等属性只读，不可赋值\",\"style.width 是可读写属性\",\"想要获取元素大小位置，offset 更合适\",\"想要给元素更改值，需要用 style 改变\"]},\"1109\":{\"h\":\"元素可视区系列\"},\"1110\":{\"h\":\"clientTop、clientLeft\",\"t\":[\"返回元素上边框、左边框的大小，不带 px 返回数字，只读属性不能修改。\"]},\"1111\":{\"h\":\"clientWidth、clientHeight\",\"t\":[\"这两个属性可以获取元素的可见宽度和高度\",\"这些属性都是不带 px 的，返回都是一个数字，可以直接进行计算\",\"会获取元素宽度和高度，包括内容区和内边距\",\"这些属性都是只读的，不能修改\"]},\"1112\":{\"h\":\"元素滚动系列\"},\"1113\":{\"h\":\"scrollWidth、scrollHeight\",\"t\":[\"可以获取元素整个滚动区域的宽度和高度\"]},\"1114\":{\"h\":\"scrollLeft、scrollTop\",\"t\":[\"可以获取水平滚动条滚动的距离\",\"可以获取垂直滚动条滚动的距离\"]},\"1115\":{\"h\":\"滚动到底\",\"t\":[\"当满足 scrollHeight - scrollTop == clientHeight\",\"说明垂直滚动条到底\",\"当满足 scrollWidth - scrollLeft == clientWidth\",\"说明水平滚动条到底\",\"chrome 认为浏览器的滚动条是 body 的，可以通过 body.scrollTop 来获取\",\"2021 年更新：chrome 不再认为滚动条是 body 的，只能通过 document.documentElement.scrollTop 来获取。\"]},\"1116\":{\"h\":\"三大系列对比\",\"t\":[\"| 三大系列大小对比 | 作用 | | element.offsetWidth | 返回自身包括 padding、边框、内容区的宽度，返回数值不带单位 | | element.clientWidth | 返回自身包括 padding、内容区的宽度，不含边框，返回数值不带单位 | | element.scrollWidth | 返回自身实际的宽度，不含边框，返回数值不带单位 |\"]},\"1117\":{\"h\":\"事件\",\"t\":[\"文档或浏览器窗口中发生的一些特定的交互瞬间。当事件的响应函数被触发时，浏览器每次会将一个事件对象作为实参传递进响应函数，在事件对象中封装了当前事件相关的一切信息，比如：鼠标坐标、键盘按键、鼠标滚轮滚动方向。\",\"JS 与 HTML 之间的交互是通过事件实现的。\",\"鼠标事件\",\"触发条件\",\"onclick\",\"鼠标点击左键触发\",\"onmouseover\",\"鼠标经过触发\",\"onmouseout\",\"鼠标离开触发\",\"onfocus\",\"获得鼠标焦点触发\",\"onblur\",\"失去鼠标焦点触发\",\"onmousemove\",\"鼠标移动触发\",\"onmouseup\",\"鼠标弹起触发\",\"onmousedown\",\"鼠标按下触发\"]},\"1118\":{\"h\":\"弃用写法\",\"t\":[\"事件对应属性中设置 js 代码，当事件被触发时，代码执行。\",\"<div onclick=\\\"alert('点击测试')\\\">点击测试文本</div> \",\"耦合不方便维护、不推荐使用。\"]},\"1119\":{\"h\":\"代码加载\",\"t\":[\"浏览器在加载一个页面时，按照自上向下顺序加载，读取到一行就运行一行，如果将 script 标签写到页面上边，在代码执行时，页面还没有加载。\",\"将 js 代码编写到页面下部，目的是在页面加载完毕之后再执行 js 代码。\",\"onload 事件会在整个页面加载完成之后触发，可以确保代码执行时所有 DOM 对象已经加载完毕。\",\"pageshow 事件：在 load 事件后触发，根据事件对象中的 persisted 来判断是否是缓存中的页面触发的 pageshow 事件，注意这个事件给 window 添加。\"]},\"1120\":{\"h\":\"for 异步执行\",\"t\":[\"for 循环会在页面加载完成之后立即执行，而响应函数会在超链接被点击时时才执行。当响应函数执行时，for 循环早已执行完毕。\"]},\"1121\":{\"h\":\"滚动条事件 onscroll\"},\"1122\":{\"h\":\"clientX、clientY\",\"t\":[\"获取鼠标指针的水平、垂直坐标\"]},\"1123\":{\"h\":\"pageX、PageY\",\"t\":[\"获取鼠标相对于当前页面坐标。\",\"IE8 以下不支持。\"]},\"1124\":{\"h\":\"页面被卷去的头部\",\"t\":[\"如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条，当滚动条向下滚动时， 页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll 事件。\",\"三大获取方案：\",\"1.声明了 DTD，使用 document.documentElement.scrollTop\",\"2.未声明 DTD，使用 document.body.scrollTop\",\"3.新方法 window.pageYOffset 和 window.pageXOffset，IE9 开始支持\",\"<script> function getScroll() { return { left: window.pageXOffset || document.documentElement.scrollLeft || doc ument.body.scrollLeft || 0, top: window.pageYOffset || document.documentElement.scrollTop || docum ent.body.scrollTop || 0 }; } // 使用的时候：getScroll().left </script> \"]},\"1125\":{\"h\":\"事件冒泡\",\"t\":[\"事件的向上传导，当后代元素上的事件触发时，其祖先元素的相同事件也会被触发。\",\"在开发中大部分情况冒泡都是有用的，如果不希望发生事件冒泡可以通过事件来取消冒泡。\",\"event.cancelBubble = true;\"]},\"1126\":{\"h\":\"新增 mouseenter\",\"t\":[\"当鼠标移动到元素上时就会触发 mouseenter 事件，类似于 mouseover，它们两者之间的差别是：\",\"1.mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发\",\"2.mouseenter 只会经过自身盒子触发，这是因为 mouseenter 不会冒泡\",\"3.与 mouseenter 对应的还有 mouseleave（鼠标移出）。\"]},\"1127\":{\"h\":\"事件委派\",\"t\":[\"将事件统一绑定给元素的共同祖先元素，后代元素触发时，一直冒泡到祖先元素，通过祖先元素来处理事件。\",\"优点：减少事件绑定次数，提高程序性能。\",\"Event.target 返回触发时此事件的元素（事件的目标节点）。\"]},\"1128\":{\"h\":\"事件绑定\"},\"1129\":{\"h\":\"传统绑定\",\"t\":[\"使用 对象.事件 = 函数 的形式绑定响应函数，\",\"function f(e) { console.log(e.target.innerText); } div.onclick = f; \",\"它只能同时为一个元素的一个事件绑定一个响应函数，\",\"不能绑定多个，后面会覆盖前边。\",\"如果 对象.事件 = null，则事件无触发。\"]},\"1130\":{\"h\":\"事件监听器\",\"t\":[\"addEventListener() IE8 不支持\",\"通过这个方法也可以为元素绑定响应函数\",\"参数：1、事件字符串，不要 on；2、回调函数，事件触发时被调用；3、是否在捕获阶段触发，需要一个布尔值，一般都传 false。\",\"使用 addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，这样当事件被触发时，响应函数将会按照函数绑定顺序执行。\",\"注意：该方法里的 this 是绑定事件对象。\",\"attachEvent() IE8 支持\",\"参数：1、事件的字符串，要 on；2、回调函数。\",\"后绑定先执行，执行顺序和 addEvnetListener()相反。\",\"注意：该方法里的 this 是 window。\"]},\"1131\":{\"h\":\"定义绑定函数\",\"t\":[\"定义一个函数，用来为指定元素绑定响应函数\",\"参数：obj，要绑定事件的对象；eventStr，事件字符串（不要 on）；callback，回调函数。\",\"若需要同时兼容 IE8 和其他浏览器，需要统一 this。常用于将 IE8 中的 this 对象改为事件对象\",\"核心：在匿名函数中调用 回调函数.call ，根据 call()里传递的对象作为函数中 this 对象来实现\"]},\"1132\":{\"h\":\"事件传播\",\"t\":[\"网景公司和微软公司对传播理解不同\",\"微软公司：事件从内向外传播，最后触发祖先元素事件。事件在冒泡阶段执行。\",\"网景公司：事件由外向内传播，最先触发祖先元素事件。\",\"W3C：事件传播分为 3 个阶段\"]},\"1133\":{\"h\":\"1、捕获阶段\",\"t\":[\"捕获阶段时从最外层祖先元素开始，向目标元素进行事件捕获，默认不会触发事件。\"]},\"1134\":{\"h\":\"2、目标阶段\",\"t\":[\"事件捕获到目标元素，捕获结束开始在目标元素上触发事件。\"]},\"1135\":{\"h\":\"3、冒泡阶段\",\"t\":[\"事件从目标元素向他的祖先元素开始传递。\"]},\"1136\":{\"h\":\"4、捕获阶段触发\",\"t\":[\"addEventListener()第三个参数设置为 true。一般不会希望在捕获阶段触发事件，所以一般设为 false。\",\"IE8 没有捕获阶段。\"]},\"1137\":{\"h\":\"拖拽事件\"},\"1138\":{\"h\":\"拖拽流程\",\"t\":[\"1.当鼠标在被拖拽元素上按下时，开始拖拽\",\"2.当鼠标移动时被拖拽元素跟随鼠标移动\",\"3.当鼠标松开时，被拖拽元素固定在当前位置\",\"4.最好设置鼠标移入/移出元素时，才可触发鼠标按下和松开事件\"]},\"1139\":{\"h\":\"鼠标与元素的相对位移量\",\"t\":[\"1.鼠标按下时，设置鼠标偏移量 clientX、clientY 相对于元素的 offset 偏移量。\",\"2.鼠标移动时减去上述偏移量。\"]},\"1140\":{\"h\":\"拖拽异常\",\"t\":[\"旧版本浏览器：拖拽网页内容时，浏览器默认搜索引擎中搜索内容，此时导致拖拽功能异常，属于浏览器默认行为。\",\"如果不希望这个行为发生，可通过 return false 取消这个行为。\",\"新版本浏览器基本取消了这个异常行为。\"]},\"1141\":{\"h\":\"IE:setCapture\",\"t\":[\"IE 浏览器支持，火狐调用不会报错，chrome 调用报错。\",\"调用一个元素的 setCaputre()方法之后，这个元素会把下一次所有的鼠标事件捕获到自身上。\",\"鼠标松开时，取消 释放事件捕获 release\"]},\"1142\":{\"h\":\"ondrag\",\"t\":[\"IE8 及以下不支持\",\"ondrag 事件在元素或者选取的文本被拖动时触发\",\"注意： 为了让元素可拖动，需要使用 HTML5 draggable 属性。\",\"提示： 链接和图片默认是可拖动的，不需要 draggable 属性。\",\"在拖动目标上触发事件 (源元素):\",\"ondragstart - 用户开始拖动元素时触发\",\"ondrag - 元素正在拖动时触发\",\"ondragend - 用户完成元素拖动后触发\",\"释放目标时触发的事件:\",\"ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件\",\"ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件\",\"ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件\",\"ondrop - 在一个拖动过程中，释放鼠标键时触发此事件\",\"注意：在拖动元素时，每隔 350 毫秒会触发 ondrag 事件。\"]},\"1143\":{\"h\":\"滚轮事件\"},\"1144\":{\"h\":\"滚轮流程\",\"t\":[\"滚轮向下滚动，元素变长。滚轮向上滚动，元素变短。\"]},\"1145\":{\"h\":\"事件名称\",\"t\":[\"onmousewheel：老版本浏览器名称，\",\"老版本火狐使用 DOMMouseScroll 绑定滚动，需要通过 addEventListener()绑定\",\"当前新版名称：onwheel\"]},\"1146\":{\"h\":\"获取滚轮长度\",\"t\":[\"1.判断滚轮滚动方向 事件属性 event.wheelDelta\",\"向上滚 120 向下滚-120\",\"2.火狐旧版本不支持 需使用 event.detail（当前测试新版本火狐也支持 wheelDelta）\",\"向上滚-3 向下滚 3\"]},\"1147\":{\"h\":\"浏览器滚动条滚动\",\"t\":[\"滚轮滚动时，浏览器滚动条会随之滚动。\",\"这是浏览器的默认行为，如果不希望发生，可以取消\",\"return false;\"]},\"1148\":{\"h\":\"注意\",\"t\":[\"使用 addEventListener()方法绑定响应函数，取消默认行为时不能使用 returen false;\",\"需要使用 event 取消默认行为 event.preventDefault(); （IE8 不支持）\"]},\"1149\":{\"h\":\"键盘事件\"},\"1150\":{\"h\":\"事件名称\",\"t\":[\"onkeydown：按键按下；onkeyup：按键松开。\",\"键盘事件一般都会绑定给一些可以获取到焦点的对象。或者是 document。\"]},\"1151\":{\"h\":\"onkeydown\",\"t\":[\"如果一直按着某个按键不松手，事件会一直触发。\",\"onkeydown 连续触发时，第一次和第二次会间隔略长，其他会非常快。\",\"设计是为了防止误操作。\",\"文本框中输入内容，属于 onkeydown 默认行为，如果 onkeydown 取消了默认行为，则输入的内容，不会出现在文本框中。\"]},\"1152\":{\"h\":\"键盘属性\",\"t\":[\"属性\",\"描述\",\"altKey\",\"返回当事件触发时，ALT 是否被按下\",\"button\",\"返回当事件触发时，某个鼠标按钮是否被按下\",\"clientX\",\"返回当事件触发时，鼠标指针的水平是否被按下\",\"clientY\",\"返回当事件触发时，鼠标指针的垂直坐标是否被按下\",\"ctrlKey\",\"返回当事件触发时，CTRL 键是否被按下\",\"metaKey\",\"返回当事件触发时，meta 键是否被按下\",\"relatedTarget\",\"返回与事件的目标节点相关的节点\",\"screenX\",\"返回当事件触发时，鼠标指针距离屏幕的水平坐标\",\"screenY\",\"返回当事件触发时，鼠标指针距离屏幕的垂直坐标\",\"shiftKey\",\"返回当事件触发时，SHIFT 键是否被按下\"]},\"1153\":{\"h\":\"key\",\"t\":[\"老版本浏览器：keyCode 获取按键编码，新版本使用 key\",\"keyCode：返回定义键码值编码\",\"key：返回按键字符或字符串\"]},\"1154\":{\"h\":\"键盘移动元素\",\"t\":[\"← ↑ → ↓ keyCode 37 38 39 40，届时可通过 switch 实现。\"]},\"1155\":{\"h\":\"断点调试方法\",\"t\":[\"1.JavaScript 调试\",\"JS 报错提示。\",\"2.JavaScript 调试工具\",\"浏览器 Console\",\"3.console.log()方法\",\"4.Sources 设置断点\",\"5.debugger 关键字\",\"6.Event Listener Breakpoints\",\"事件监听器断点，即根据事件名称进行断点设置。当事件被触发时，断点到事件绑定的位置。 事件监听器断点，列出了所有页面及脚本事件，包括：鼠标、键盘、动画、定时器、XHR 等等。极 大的降低了事件方面业务逻辑的调试难度。\"]},\"1156\":{\"h\":\"ES6+\"},\"1157\":{\"h\":\"ES6\"},\"1158\":{\"h\":\"1.let\",\"t\":[\"1.变量不能重复声明\",\"2.块级作用域\",\"3.不存在变量提升\",\"4.不影响作用域链\"]},\"1159\":{\"h\":\"2.const\",\"t\":[\"1.一定要赋初始值\",\"2.一般常量使用大写（规范）\",\"3.值不能修改\",\"4.块级作用域\",\"5.对于数组和对象的元素修改无影响\"]},\"1160\":{\"h\":\"3.解构赋值\",\"t\":[\"1.数组的解构\",\"const arr = [1, 2, 3, 4]; let [A, B, C, D] = arr; console.log(A); console.log(B); console.log(C); console.log(D); \",\"2.对象的解构\",\"const obj = { name: \\\"ZhangSan\\\", age: 18, gender: \\\"male\\\", address: \\\"China\\\", }; let { name, age, gender, address } = obj; console.log(name); console.log(age); console.log(gender); console.log(address); \"]},\"1161\":{\"h\":\"4.模板字符串`\",\"t\":[\"1.声明\",\"let str = `abc`; \",\"2.内容中可以出现换行符\",\"3.变量拼接 ${}\"]},\"1162\":{\"h\":\"5.简化对象写法\",\"t\":[\"ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。\",\"let name = \\\"ZhangSan\\\"; let change = function () { console.log(1); }; const obj = { name, change, }; console.log(obj); \"]},\"1163\":{\"h\":\"6.箭头函数 =>\",\"t\":[\"1.this 是静态的，this 始终指向函数声明时所在作用域下的 this 的值。\",\"2.不能作为构造实例化对象。\",\"3.不能使用 arguments 变量。\",\"4.箭头函数简写\",\"1）形参只有一个，省略小括号。\",\"2）代码体只有一条语句，省略花括号。此时 return 必须省略，语句执行结果就是函数返回值。\"]},\"1164\":{\"h\":\"7.函数参数默认值\",\"t\":[\"允许给函数参数赋值初始值\",\"1.形参初始值具有默认值的参数，一般位置要靠后（规范）\",\"2.与解构赋值结合\",\"function connect(host, username, password, port) { console.log(host); console.log(username); console.log(password); console.log(port); } connect({ host: 1, username: 2, password: 3, port: 4, }); \"]},\"1165\":{\"h\":\"8.rest 剩余参数\",\"t\":[\"rest 用于获取函数实参，用来代替 arguments\",\"rest 参数必须放到参数最后\",\"//ES5获取实参 function date() { console.log(arguments); } date(1, 2, 3, 4); //ES6获取实参 function date2(...args) { console.log(args); } date2(1, 2, 3, 4); \"]},\"1166\":{\"h\":\"9.扩展运算符\",\"t\":[\"扩展运算符能将数组转换为逗号分隔的参数序列\",\"1.数组合并\",\"2.数组克隆\",\"3.伪数组转为真正数组\"]},\"1167\":{\"h\":\"10.Symbol（第七种数据类型）\",\"t\":[\"Symbol 表示独一无二的值，它是 JS 第七种数据类型，类似字符串的数据类型。\"]},\"1168\":{\"h\":\"特点\",\"t\":[\"1.Symbol 值是唯一的，用来解决命名冲突的问题\",\"2.Symbol 值不能与其他数据进行运算\",\"3.Symbol 定义的对象属性不能使用 for……in……循环遍历，但是可以使用 Reflect.ownKeys 来获取对象的所有键名\",\"4.不能与其他数据进行运算\"]},\"1169\":{\"h\":\"语法\",\"t\":[\"Symbol.for 创建以键名为导向的 Symbol，两个 for 相同的变量，他们的值也是相同的。\",\"let s = Symbol(); let s2 = Symbol(\\\"abc\\\"); let s3 = Symbol(\\\"abc\\\"); console.log(s2 === s3); let s4 = Symbol.for(\\\"abc\\\"); let s5 = Symbol.for(\\\"abc\\\"); console.log(s4 === s5); \"]},\"1170\":{\"h\":\"应用\",\"t\":[\"Symbol 值可以由程序创建，并可以作为属性名，而且不用担心属性名冲突\",\"调用 Symbol() 方法将创建一个新的 Symbol 类型的值，并且该值不与其它任何值相等。\",\"与数字和字符串一样，Symbol 类型的值也可以作为对象的属性名，正是由于它不与任何其它值相等，对应的属性也不会发生冲突\"]},\"1171\":{\"h\":\"内置值\",\"t\":[\"值\",\"描述\",\"Symbol.hasInstance\",\"当其他对象使用 instanceof 运算符，判断是否为该对象实例时，调用这个方法\",\"Symbol.isConcatSpreadable\",\"对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开\",\"Symbol.unscopables\",\"该对象指定了使用 width 关键字时，那些属性会被 width 环境排除\",\"Symbol.match\",\"当执行 str.match(myObject)时，如果该属性存在，会调用它，返回该方法的返回值\",\"Symbol.replace\",\"当执行 str.replace(myObject)时，如果该属性存在，会调用它，返回该方法的返回值\",\"Symbol.search\",\"当执行 str.search(myObject)时，如果该属性存在，会调用它，返回该方法的返回值\",\"Symbol.split\",\"当执行 str.split(myObject)时，如果该属性存在，会调用它，返回该方法的返回值\",\"Symbol.iterator\",\"对象进行 for...of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器\",\"Symbol.toPrimitive\",\"改对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值\",\"Symbol.toStringTag\",\"在该对象上面调用 toString 方法时，返回该方法的返回值\",\"Symbol.species\",\"创建衍生对象时，会使用该属性\"]},\"1172\":{\"h\":\"11.迭代器\",\"t\":[\"Iterator 是一种接口，为不同数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。主要供 for……of 使用\",\"原生具备 Iterator 接口的数据\",\"Array Arguments Set Map String TypedArray NodeList\"]},\"1173\":{\"h\":\"原理\",\"t\":[\"1.创建一个指针对象，指向当前数据结构的起始位置\",\"2.第一次调用对象 next 方法，指针自动指向数据结构的第一个成员\",\"3.接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员\",\"4.每调用 next 方法返回一个包含 value 和 done 属性的对象\",\"const obj = { name: \\\"class\\\", status: [1, 2, 3, 4, 5, 6], [Symbol.iterator]() { let index = 0; return { next: () => { return index < this.status.length ? { value: this.status[index++], done: false } : { value: undefined, done: true }; }, }; }, }; let iterator = obj[Symbol.iterator](); let flag = true; while (flag) { let temp = iterator.next(); console.log(temp); temp.done === false ? (flag = true) : (flag = false); } \"]},\"1174\":{\"h\":\"12.生成器\",\"t\":[\"生成器是一个特殊的函数\",\"异步编程 纯回调函数\",\"yield：函数代码分割符\",\"function* gen() { // console.log(111); yield \\\"一只没有耳朵\\\"; // console.log(222); yield \\\"一只没有尾巴\\\"; // console.log(333); yield \\\"真奇怪\\\"; // console.log(444); } let iterator = gen(); console.log(iterator.next()); console.log(iterator.next()); console.log(iterator.next()); console.log(iterator.next()); \",\"打印结果：\",\"生成器打印结果\",\"yield **** 的返回值是 iterator.next() next 括号中的实参\",\"iterator.next(123)\",\"let res = yield ****;\",\"延时打印案例（解决回调地狱）\",\"function one() { setTimeout(() => { console.log(111); }, 1000); } function two() { setTimeout(() => { console.log(222); }, 2000); } function three() { setTimeout(() => { console.log(333); }, 3000); } function* gen() { yield one(); yield two(); yield three(); } let iterator = gen(); while (!iterator.next().done) {} \"]},\"1175\":{\"h\":\"13. Promise\",\"t\":[\"Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。\"]},\"1176\":{\"h\":\"语法\",\"t\":[\"1）Promise 构造函数：Promise(resolve,reject)\",\"resolve()将异步请求成功的结果返回给构造函数对象，reject()将失败的结果返回给构造函数对象。\"]},\"1177\":{\"h\":\"方法\",\"t\":[\"2）Promise.prototype.then(function(value){\",\"},function(reason){\",\"})\",\"then 方法内传递两个函数作为参数，第一个函数的第一个参数 value 为对象 resolve 返回的值，第二个函数的第二个参数 reason 为对象 reject 返回的值。\",\"then 方法的返回结果是 Promise 对象，对象状态由回调函数的执行结果来决定：\",\"1.回调函数返回结果是非 promise 类型的属性，状态为成功，返回值为对象的成功的值\",\"2.回调函数返回结果是 promise 类型的属性，then 的返回值状态取决于返回值的状态。\",\"链式调用\",\"p.then 返回值接 p.then\",\"3）Promise.prototype.catch 方法\",\"reason 捕捉\"]},\"1178\":{\"h\":\"14.Set\",\"t\":[\"ES6 新增数据结构\",\"size add delete has clear\",\"应用：\",\"1.去重\",\"let arr = [1, 3, 2, 4, 1, 85, 6, 1, 2, 3]; let result = [...new Set(arr)]; console.log(result); \",\"2.交集\",\"let arr = [1, 3, 2, 4, 1, 85, 6, 1, 2, 3]; let arr2 = [1, 3, 65, 85, 1, 7, 8, 9]; let result = [...new Set(arr)].filter((item) => new Set(arr2).has(item)); console.log(result); \",\"3.并集\",\"let arr = [1, 3, 2, 4, 1, 85, 6, 1, 2, 3]; let arr2 = [1, 3, 65, 85, 1, 7, 8, 9]; let result = [...new Set([...arr, ...arr2])]; console.log(result); \",\"4.差集\",\"let arr = [1, 3, 2, 4, 1, 85, 6, 1, 2, 3]; let arr2 = [1, 3, 65, 85, 1, 7, 8, 9]; let result = [...new Set(arr)].filter((item) => !new Set(arr2).has(item)); console.log(result); \"]},\"1179\":{\"h\":\"15.Map\",\"t\":[\"键值对结合\",\"for……of 遍历\",\"size set get has clear\"]},\"1180\":{\"h\":\"16.类\",\"t\":[\"1.静态成员\",\"类里面，static 关键字\",\"2.继承\",\"extends 关键字\",\"3.重写\",\"同方法名\",\"4.get set\",\"对参数进行读写\"]},\"1181\":{\"h\":\"17.数值扩展\",\"t\":[\"1）Number.EPSILON JS 最小精度 2.22………………E-16\",\"function equal(a, b) { return Math.abs(a - b) < Number.EPSILON; } console.log(equal(0.1 + 0.2, 0.3)); \",\"2）二进制 0b 八进制 0o 十六进制 0x\",\"3）Number.isFinite 是否为有限数\",\"4）Number.isNaN 是否为 NaN\",\"5）Number.parseInt 字符串转整型 Number.parseFloat 字符串转浮点型\",\"6）Number.isInteger 是否为整数\",\"7）Math.trunc 抹掉小数部分\",\"8）Math.sign 判断为正数、负数、0（1 -1 0）\"]},\"1182\":{\"h\":\"18.对象扩展\"},\"1183\":{\"h\":\"1.Object.is\",\"t\":[\"与 === 基本一致，有两个特殊\",\"+0 -0 值不相等；NaN 等于 NaN\"]},\"1184\":{\"h\":\"2.Object.assign\",\"t\":[\"对象合并，后一个对象会覆盖掉前一个对象的重名属性。\"]},\"1185\":{\"h\":\"3.Object.setPrototypeOf\",\"t\":[\"设置原型对象（any obj，prototype obj）\"]},\"1186\":{\"h\":\"19.模块化\",\"t\":[\"模块化是指将一个大的程序文件，拆分成许多晓得文件，然后将小文件组合起来。\"]},\"1187\":{\"h\":\"1.好处：\",\"t\":[\"1.防止命名冲突。2.代码复用。3.高维护性\"]},\"1188\":{\"h\":\"2.模块化规范：\",\"t\":[\"CommonsJS => NodeJS、Browserify\",\"AMD => requireJS\",\"CMD => seaJS\"]},\"1189\":{\"h\":\"3.模块化语法：\",\"t\":[\"export 命令用于规定模块的对外接口\",\"import 命令用于输入其他模块提供的功能\",\"//第一种引入方法 <script type=\\\"module\\\"> import * as m1 from \\\"../JSOO/JSOO.js\\\"; console.log(m1); </script> //第二种引入方法 <script src=\\\"xxx\\\" type=\\\"module\\\"></script> \"]},\"1190\":{\"h\":\"4.暴露模块数据语法\",\"t\":[\"分别暴露：\",\"export let test = 123;\",\"统一暴露：\",\"export {test, fun};\",\"默认暴露：\",\"export default\",\"export\",\"export default test;\"]},\"1191\":{\"h\":\"5.引入模块数据语法\",\"t\":[\"1.通用的导入方式\",\"import * as m1 from \\\"\\\";\",\"2.解构赋值方式\",\"import {test, school} from \\\"\\\";\",\"import {default as test} from \\\"\\\";\",\"如果有重复引入的变量名字，会冲突报错，需要 as 重命名\",\"3.简便形式 针对默认暴露\",\"import m1 from \\\"\\\";\",\"m1 为引入模块的默认变量\"]},\"1192\":{\"h\":\"6.babel 转换器模块化流程（node vue）\",\"t\":[\"1.安装工具 babel-cli babel-preset-env browserify(webpack)\",\"2.npx babel src/.js -d dist/js\",\"3.打包 npx browserify dist/js/app.js -o dist/bundle.js\",\"demo：引入 jquery\",\"npx browserify dist/js/app.js -o dist/bundle.js\"]},\"1193\":{\"h\":\"ES7\"},\"1194\":{\"h\":\"1.指数操作符\",\"t\":[\"** 功能与 Math.pow 相同\",\"// 25 console.log(5 ** 2); \"]},\"1195\":{\"h\":\"2.Array.from\",\"t\":[\"将类数组或可遍历对象转换为真正的数组\",\"let obj = { [0]: \\\"a\\\", [1]: \\\"b\\\", [2]: \\\"c\\\", length: 3, //此处length是必须的 }; let arr = Array.from(obj); console.log(arr); \",\"方法还可接受第二个参数，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\"]},\"1196\":{\"h\":\"3.数组方法（重要）\",\"t\":[\"find：用于找出第一个符合条件的数组成员，如果没有找到返回 undefined。\",\"findIndex：用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1。\",\"includes：表示某个数组是否包含给定的值，返回布尔值。\",\"迭代方法：forEach() map() filter() some() every()\"]},\"1197\":{\"h\":\"forEach\",\"t\":[\"array.forEach(function (value, index, arr) {}); \",\"value：数组当前项的值\",\"index：数组当前项索引\",\"arr：数组对象\"]},\"1198\":{\"h\":\"filter\",\"t\":[\"array.filter(function (value, index, arr) {}); \",\"创建一个新数组，新数组中的元素通过检查指定数组中符合条件的所有元素，主要用于筛选数组。注意返回一个新数组\",\"参数原理一致。\"]},\"1199\":{\"h\":\"some\",\"t\":[\"array.some(function (value, index, arr) {}); \",\"检测数组中是否有满足条件的元素，返回布尔值。找到为 true 找不到为 false。\",\"找到第一个满足条件的元素即终止循环，不在继续查找。\"]},\"1200\":{\"h\":\"map\",\"t\":[\"map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。\",\"map() 方法按照原始数组元素顺序依次处理元素。\"]},\"1201\":{\"h\":\"every\",\"t\":[\"every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。\",\"如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。\",\"如果所有元素都满足条件，则返回 true。\"]},\"1202\":{\"h\":\"4.字符串方法\",\"t\":[\"startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值。\",\"endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值。\",\"repeat()：表示将原字符串重复 n 次，返回一个新字符串。\",\"s.padStart(num,str)：num 表示需要增加的字符串长度，str 为需要增加的字符串。\",\"s.padEnd(num,str)：num 表示需要增加的字符串长度，str 为需要增加的字符串。\",\"如果 s 的长度大于 num 则返回 s 原字符串。如果 num 大于 str 的字符串长度，则会循环添加 str 直到填充长度为 num。\",\"trim()方法会从两端删除空白字符。不影响原串，返回新串。\"]},\"1203\":{\"h\":\"ES8\"},\"1204\":{\"h\":\"1.async await\",\"t\":[\"async 和 await 两种语法结合可以让异步代码像同步代码一样。\"]},\"1205\":{\"h\":\"1.async 函数\",\"t\":[\"async 函数的返回值为 promise 对象，\",\"promise 对象的结果由 async 函数执行的返回值决定。\",\"返回值不是 Promise 类型的对象，返回的结果是成功 promise 对象\",\"抛出错误，返回的结果是失败的 promise\",\"返回的结果是 promise 对象，取决于 resolve 和 reject 谁来返回\"]},\"1206\":{\"h\":\"2.await 表达式\",\"t\":[\"1.await 必须写在 async 函数中\",\"2.await 右侧的表达式一般为 promise 对象\",\"3.await 返回的是成功的 promise 值\",\"4.await 的 promise 失败了，会抛出异常，需要通过 try……catch 处理\",\"async function mainFun() { try { let result = await p; console.log(result); } catch (e) { console.log(e); } } const p = new Promise((resolve, reject) => { resolve(\\\"error\\\"); }); mainFun(); \"]},\"1207\":{\"h\":\"3.发送 ajax 请求\",\"t\":[\"function sendAjax(url) { return new Promise((resolve, reject) => { const x = new XMLHttpRequest(); x.open(\\\"GET\\\", url); x.send(); x.onreadystatechange = () => { if (x.readyState === 4) { if (x.status >= 200 && x.status <= 300) { resolve(x.response); } else reject(x.status); } }; }); } async function mainTest() { try { let result = await sendAjax(\\\"https://api.apiopen.top/getJoke\\\"); console.log(result); } catch (e) { console.log(e); } } mainTest(); \"]},\"1208\":{\"h\":\"2.对象方法扩展\"},\"1209\":{\"h\":\"Object.keys Object.values\",\"t\":[\"读取所有的键 读取所有的值（Symbol 除外）\"]},\"1210\":{\"h\":\"Object.entries\",\"t\":[\"创建当前对象的键值对数组，每个元素内含有两个子元素，属性名和值。\",\"用于创建 Map 数据结构\"]},\"1211\":{\"h\":\"Object.getOwnPropertyDescriptors()\",\"t\":[\"获取对象属性的描述对象\"]},\"1212\":{\"h\":\"Object.create(proto，[propertiesObject])\",\"t\":[\"第一个参数为原型对象，第二个参数为键值对内容\"]},\"1213\":{\"h\":\"ES9\"},\"1214\":{\"h\":\"1.扩展运算符与 rest 参数\",\"t\":[\"function fun(...args) { console.log(args); } fun(1, 2, 3, 4, 5); \",\"同时为对象也提供了像数组一样的扩展运算符\",\"let one = { name: \\\"wang\\\", }; let two = { age: 20, }; let three = { gender: \\\"male\\\", }; let four = { address: \\\"China\\\", }; let combine = { ...one, ...two, ...three, ...four }; console.log(combine); \"]},\"1215\":{\"h\":\"2.正则命名分组捕获\",\"t\":[\"let str = `775244743@qq.com`; const reg = /(.*)@(.*).(.*)/; console.log(reg.exec(str)); \",\"正则未分组\",\"添加分组名：\",\"在小括号内，最前面添加?<>，尖括号内为分组名字，作为 group 属性的属性名。\",\"let str = `775244743@qq.com`; const reg = /(?<id>.*)@(?<host>.[^.]*).(?<address>.*)/; console.log(reg.exec(str)); \",\"正则分组\"]},\"1216\":{\"h\":\"3.正则反向断言\",\"t\":[\"(?<=***)判断字符的前面是否为某字符串\",\"let str = `123456abcrth126`; const reg = /(?<=th)\\\\d*/; console.log(reg.exec(str)); \"]},\"1217\":{\"h\":\"4.dotAll 模式\",\"t\":[\"dot：元字符 除换行符以外的任意单个字符\",\"模式修正符 s\",\"let obj = `{ name: \\\"zhangsan\\\", age: 18, job: \\\"front\\\", }`; const reg = /.*?name: (.*?),.*?age: (.*?),.*?job: (.*?),.*?/s; console.log(reg.exec(obj)); \",\"reg 修饰符 s：可以将 . 元字符修正为可匹配换行符的单个字符。\"]},\"1218\":{\"h\":\"5.Object.fromEntries\",\"t\":[\"效果与 Object.entries 相反，接收 n*2 的二维数组，返回对象。\"]},\"1219\":{\"h\":\"ES10\"},\"1220\":{\"h\":\"1.trimStart trimEnd\",\"t\":[\"指定清除字符串左侧 or 右侧的空白\"]},\"1221\":{\"h\":\"2.flat flatMap\",\"t\":[\"flat\",\"将多维数组转为低维数组 flat() 括号内可传数字，表示为拉平深度\",\"const arr = [1, 2, 3, [4, 5], [6, 7, [8, 9]]]; const result = arr.flat(2); console.log(result); \",\"flatMap\",\"如果 map 执行回调后返回的是二维数组，则再执行一次展平操作。\",\"const arr = [1, 2, 3, 4]; const result = arr.flatMap(item => [item * 2]); console.log(result); \"]},\"1222\":{\"h\":\"3. Symbol.prototype.description\",\"t\":[\"获取 Symbol 指向的字符串\"]},\"1223\":{\"h\":\"ES11\"},\"1224\":{\"h\":\"1.私有属性\",\"t\":[\"前面带了 #的变量\",\"class Person { name; #age; #weight; constructor(name, age, weight) { this.name = name; this.#age = age; this.#weight = weight; this._age = age; this._weight = weight; } get age() { return this._age; } set age(value) { this._age = value; } get weight() { return this._weight; } set weight(value) { this._weight = value; } } const person = new Person(\\\"小红\\\", 18, \\\"45kg\\\"); console.log(person.age); \"]},\"1225\":{\"h\":\"2.Promise.allSettled\",\"t\":[\"allSettled 括号内传递一个 promise 的数组，不限成功失败，均返回成功。\",\"static relative absloute fixed stick inhertive initial unset\",\"静态 相对 绝对 固定 粘性 继承 初始 无设置\",\"none 不占位\",\"visi 占位\",\"都是隐藏\"]},\"1226\":{\"h\":\"3.Promise.all\",\"t\":[\"all 括号内传递一个 promise 的数组，仅全部 p 对象都成功，才返回成功。\"]},\"1227\":{\"h\":\"4.matchAll 方法\",\"t\":[\"返回符合匹配结果的全局数组，修饰符加了 g，可迭代。\"]},\"1228\":{\"h\":\"5.可选链操作符\",\"t\":[\"可选链操作符（?.），在访问子属性之前，不再需要明确地校验当前属性的状态，再并用短路计算获取最终结果\",\"const name = adventurer?.cat?.name; \",\"通过使用 ?. 操作符取代 . 操作符，JavaScript 会在尝试访问 adventurer.cat.name 之前，先隐式地检查并确定 adventurer.cat 既不是 null 也不是 undefined 。如果 adventurer.cat 是 null 或者 undefined ，表达式将会短路计算直接返回 undefined。\",\"等价于以下表达式：\",\"let temp = adventurer.cat; let name = temp === null || temp === undefined ? undefined : temp.name; \"]},\"1229\":{\"h\":\"6.动态创建 import\",\"t\":[\"import 返回值为 promise 对象，then 方法返回值为 module 对象。\",\"const btn = document.querySelector(\\\"button\\\"); btn.onclick = () => { import(\\\"../ES6.js\\\").then( (value) => { console.log(value); value.fun(); }, (reason) => { console.log(reason); } ); }; \"]},\"1230\":{\"h\":\"7. BigInt（第八种数据类型）\",\"t\":[\"在普通整型数字基础上加上小写字母 n\",\"let n = 100n;\",\"大整型转换 BigInt(n)\",\"用于大数值运算。当数值运算超过最大安全整型数值后，需要用 BigInt 进行运算。\",\"let max = Number.MAX_SAFE_INTEGER; console.log(BigInt(max) + BigInt(5)); \"]},\"1231\":{\"h\":\"8.绝对全局对象 globalThis\",\"t\":[\"全局属性 globalThis 包含全局的 this 值，类似于全局对象（global object）。\",\"在以前，从不同的 JavaScript 环境中获取全局对象需要不同的语句。在 Web 中，可以通过 window、self 或者 frames 取到全局对象，但是在 Web Worker 中，只有 self 可以。在 Node.js 中，它们都无法获取，必须使用 global。\",\"globalThis 提供了一个标准的方式来获取不同环境下的全局 this 对象（也就是全局对象自身）。不像 window 或者 self 这些属性，它确保可以在有无窗口的各种环境下正常工作。所以，你可以安心的使用 globalThis，不必担心它的运行环境。为便于记忆，你只需要记住，全局作用域中的 this 就是 globalThis。\"]},\"1232\":{\"h\":\"Javascript基础\"},\"1233\":{\"h\":\"JS 历史介绍\",\"t\":[\"JS 诞生于 1995 年，出现主要是用于处理网页中的前端验证（检查用户输入内容是否符合一定规则）。\",\"市面上存在两个版本的 JS，分别是 JavaScript 和 JScript，为了确保标准一致，制定了共同的标准名为 ECMAScript。\",\"历史时间表\",\"不同浏览器的不同实现方式\",\"不同浏览器实现\",\"ECMAScript 是 JavaScript 标准，所以一般情况下这两个词认为是一个意思，但实际上 JavaScript 的含义要更大一些。\",\"一个完整的 JavaScript 实现应该由以下三个部分构成：\",\"ECMAScript：JavaScript 标准\",\"BOM：Browser Object Model 浏览器对象模型\",\"DOM：Document Object Model 文档对象模型\"]},\"1234\":{\"h\":\"基础语法\"},\"1235\":{\"h\":\"写入方式\",\"t\":[\"行内、内联、外联\",\"同样的，JS 虽然可以写在标签属性中，但是结构与行为耦合，不方便维护，不推荐使用。\",\"推荐方式：将 JS 代码编写到外部 JS 文件中，然后通过 script 标签引入。写到外部文件中可以在不同的页面中同时使用，也可以利用浏览器缓存机制。\",\"script 标签一旦用于引入外部文件，就不能在该标签内编写代码了，即使编写了浏览器也会忽略。\"]},\"1236\":{\"h\":\"执行顺序\",\"t\":[\"从上到下逐行执行\"]},\"1237\":{\"h\":\"基础输出语句\",\"t\":[\"alert(); 控制浏览器弹出一个警示框\",\"document.write(); 让计算机在页面 body 中输出一个内容\",\"console.log(); 向控制台输出一个内容\"]},\"1238\":{\"h\":\"书写规范\",\"t\":[\"严格区分大小写\",\"每一条语句以 ; 结尾（非强制）\",\"忽略多个空格和换行\"]},\"1239\":{\"h\":\"字面量与变量\",\"t\":[\"字面量：就是数据，是源程序的组成部分之一。\",\"变量：本质上是内存中的一块空间，这块空间有数据类型、名字、字面值。变量是内存中存储数据的最基本单元。\",\"变量声明关键字：var\",\"// 声明一个字面为数字1的变量，变量名为a var a = 1; \"]},\"1240\":{\"h\":\"标识符\",\"t\":[\"js 语法中的标识符包括变量名、函数名、属性名。\",\"由字母、数字、_、$组成\",\"不能以数字开头\",\"不能是 ES 中的关键字或保留字\",\"关键字和保留字\",\"其他不建议字符\",\"驼峰命名法\",\"骆驼式命名法（Camel-Case）又称驼峰命名法，是电脑程式编写时的一套命名规则（惯例）。正如它的名称 CamelCase 所表示的那样，是指混合使用大小写字母来构成变量和函数的名字。程序员们为了自己的代码能更容易的在同行之间交流，所以多采取统一的可读性比较好的命名方式。\",\"骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。\",\"小驼峰命名法：camelCase\",\"下划线命名法：snake_case\",\"js 底层保存标识符实际采用 Unicode 编码，所以所有 UTF-8 内容理论上均可作为标识符。\"]},\"1241\":{\"h\":\"数据类型（重要）\",\"t\":[\"js 现阶段的数据类型有六种\",\"Number 数值型\",\"Boolean 布尔型\",\"String 字符串，注意在书写时需要用引号括起来，字符串内部的引号注意加转移字符 \\\\\",\"Null 空类型\",\"Undefined 未定义类型\",\"Object 对象\",\"除了 Object 是引用数据类型，其他都是基本数据类型。\"]},\"1242\":{\"h\":\"转义字符\",\"t\":[\"\\\\\\\" 表示 \\\"\",\"\\\\' 表示 '\",\"\\\\n 表示换行\",\"\\\\t 表示制表符\"]},\"1243\":{\"h\":\"Number\",\"t\":[\"js 中所有的数值都是 Number 类型，包括整数、浮点。\",\"注意：\",\"当变量超过了 Number.MAX_VALUE 时，返回 Infinity\",\"Number 变量被赋予了非数字值，返回 NaN(Not A Number)。使用 type of 检查 NaN，返回 Number\"]},\"1244\":{\"h\":\"Null\",\"t\":[\"Null 类型只有一个值，就是 Null，专门用来表示一个空对象。typeof 检查返回 Object\"]},\"1245\":{\"h\":\"Undefined\",\"t\":[\"声明变量不赋值，就为 undefined\"]},\"1246\":{\"h\":\"String\",\"t\":[\"字符串\"]},\"1247\":{\"h\":\"Object\",\"t\":[\"对象\"]},\"1248\":{\"h\":\"强制类型转换\"},\"1249\":{\"h\":\"1. 转换 String\",\"t\":[\"方法一：.toString() 不会影响原变量 null 和 undefined 没有 toString 方法，空指针异常\",\"方法二：String()函数，跟方法一不同之处在于，null 和 undefined 会直接转换为 null 和 undefined\"]},\"1250\":{\"h\":\"2.转换 Number\",\"t\":[\"方法一：Number()函数\",\"纯数字字符串，转换为数字。\",\"字符串有非数字内容，转换 NaN。\",\"空串或者是一个全空格的字符串，转换为 0。\",\"布尔值转换为 0 和 1。\",\"null 转为 0。\",\"undefined 转换为 NaN。\",\"方法二：\",\"parseInt() 字符串转为整数\",\"parseFloat() 字符串转为浮点数\",\"转换有效位置从字符串首字符为数字开始，非数字字符结束。如果首字符不是数字，返回 NaN\"]},\"1251\":{\"h\":\"3.转换 Boolean\",\"t\":[\"方法一：Boolean 函数\",\"数字 → 布尔，除了 0 和 NaN，其他都是 true\",\"字符串 → 布尔，除了空串，其他都是 true\",\"null 和 undefined 都是 false\",\"方法二：任意数据类型两次取反，转换布尔值。\"]},\"1252\":{\"h\":\"其他进制数字\",\"t\":[\"十六进制 0x 开头\",\"八进制 0 开头\",\"二进制 0b 开头\",\"注意：parseInt()里面可以传递第二个参数，指定数字进制\"]},\"1253\":{\"h\":\"运算符\",\"t\":[\"运算符也叫操作符，计算一个或多个值，返回运算结果\"]},\"1254\":{\"h\":\"算数运算符\"},\"1255\":{\"h\":\"1.加号 +\",\"t\":[\"字符串两两相加，效果为字符串拼接\",\"任何值与字符串相加，均转换为字符串再拼接\",\"转换字符串快捷方法：任意类型+ \\\"\\\"\"]},\"1256\":{\"h\":\"2.减乘除模 - * / %\",\"t\":[\"任何值做减乘除模运算时都会转为 Number。\",\"转换 Number 快捷方法：任意类型 -0 *1 /1 \\\"\\\"\"]},\"1257\":{\"h\":\"一元运算符\",\"t\":[\"正号 + 负号 -\",\"转换方法与 Number 函数一致。\"]},\"1258\":{\"h\":\"自增和自减\",\"t\":[\"++i 先自增，后赋值参与运算\",\"i++先赋值参与运算，后自增\",\"var i = 1; var j = 1; // a的值是6 var a = i++ + 5; // 2 console.log(i); //7 b的值是7 var b = ++j + 5; // 2 console.log(j); console.log(a); console.log(b); \"]},\"1259\":{\"h\":\"逻辑运算符\",\"t\":[\"&& 短路与 || 短路或 ! 非\",\"非布尔值两次取反，返回 true\",\"短路与：1.第一个值为 true，返回第二个值；2.第一个值为 false，返回第一个值。（注意返回原值）\",\"短路或：1.第一个值为 true，返回第一个值；2.第一个值为 false，返回第二个值。（注意返回原值）\"]},\"1260\":{\"h\":\"赋值运算符\",\"t\":[\"+= -= *= /=\",\"变量对等号右边的字面量做相应的四则运算，得到的结果重新赋值给当前变量\",\"var a = 1; var b = 2; var c = 3; var d = 4; a += 1; // 2 b -= 2; // 0 c *= 2; // 6 d /= 2; // 2 \"]},\"1261\":{\"h\":\"关系运算符\",\"t\":[\"大于 >\",\"小于 <\",\"等于 ==（仅为值比较）\",\"不等于 !=（仅为值比较）\",\"全等 ===（全等，包含类型比较）\",\"不全等 !==（不全等，包含类型比较）\",\"1.比较字符串时，比较的是字符串的字符编码，且一位一位进行比较。\",\"因此比较两个字符串型数字一定要转型，否则可能得到不可预期结果。\",\"2.其他类型跟 Number 比较，转换为数字后再比较。\",\"3.Null、Undefined 跟数字比较均为 false，没有可比性。\",\"4.NaN 不等于任何值\"]},\"1262\":{\"h\":\"Unicode 编码\",\"t\":[\"\\\\u + 4 位 Unicode 编码\",\"网页 html 中的 Unicode 编码使用： &# + 编码。注意此处编码为十进制\"]},\"1263\":{\"h\":\"三元运算符\",\"t\":[\"条件表达式 ? 语句 1 : 语句 2;\",\"判断表达式的值，如果是 true 则取值 1，如果是 false 则取值第二个 0；\"]},\"1264\":{\"h\":\"空值合并操作符\",\"t\":[\"比较 ?? 左右两侧的值，如果左侧为 null 或 undefined，返回右侧值，否则返回左侧值\",\"null ?? \\\"hi\\\"; // 'hi' undefined ?? \\\"hey\\\"; // 'hey' false ?? \\\"hola\\\"; // false 0 ?? \\\"bonjour\\\"; // 0 \\\"first\\\" ?? \\\"second\\\"; // first \"]},\"1265\":{\"h\":\"逗号操作符\",\"t\":[\"( _ , _ , _ , _)对每个操作数求值（从左到右），并返回最后一个操作数的值。\",\"var a=1 , b=2 , c=3 相当于： var a=1 var b=2 var c=3 \",\"a = ((b = 1), (c = 2)); //连续执行和赋值 console.log(a); //返回2 console.log(b); //返回1 console.log(c); //返回2 \"]},\"1266\":{\"h\":\"隐式类型转换\",\"t\":[\"上述运算在两变量类型不相同时均遵循隐式类型转换\"]},\"1267\":{\"h\":\"流程控制语句\"},\"1268\":{\"h\":\"条件判断语句 if\",\"t\":[\"单 if：满 30 减 20 用程序表示\",\"var a = 30; if (a >= 30) { console.log(a - 20); } \",\"如果语句块之间只有一行代码，大括号可以省略\",\"if-else：满 100 减 20 否则打九折\",\"var a = 90; if (a >= 100) { console.log(a - 20); } else { console.log(a * 0.9); } \"]},\"1269\":{\"h\":\"条件分支语句 switch\",\"t\":[\"switch 语句用于基于不同的条件来执行不同的动作\",\"switch(n) { case 1: 执行代码块 1 break; case 2: 执行代码块 2 break; default: 与 case 1 和 case 2 不同时执行的代码 } \",\"工作原理：首先设置表达式 n（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 break 来阻止代码自动地向下一个 case 运行\",\"default 关键词\",\"default 关键词用来规定匹配不存在时做的事情\",\"var x; var d = new Date().getDay(); switch (d) { case 6: x = \\\"今天是星期六\\\"; break; case 0: x = \\\"今天是星期日\\\"; break; default: x = \\\"期待周末\\\"; } // 如果今天不是星期六或星期日，则会输出默认的消息 console.log(x); \"]},\"1270\":{\"h\":\"循环语句\",\"t\":[\"循环结构的执行步骤\",\"声明循环变量；\",\"判断循环条件;\",\"执行循环体操作；\",\"更新循环变量；\",\"然后循环执行 2-4，直到条件不成立，跳出循环。\"]},\"1271\":{\"h\":\"1. while 循环\",\"t\":[\"var num = 1; //1、声明循环变量 while (num <= 10) { //2、判断循环条件; document.write(num + \\\"<br />\\\"); //3、执行循环体操作； num++; //4、更新循环变量； } \",\"while 循环()中的表达式，运算结果可以是各种类型，但是最终都会转为真假，转换规则如下。\",\"① Boolean：true 为真，false 为假；\",\"② String：空字符串为假，所有非空字符串为真；\",\"③ Number：0 为假，一切非 0 数字为真；\",\"④ null/Undefined/NaN:全为假；\",\"⑤ Object：全为真。\"]},\"1272\":{\"h\":\"2.do-while 循环\",\"t\":[\"while 循环特点：先判断后执行；\",\"do-while 循环特点：先执行再判断，即使初始条件不成立，do-while 循环至少执行一次；\",\"var num = 10; do { document.write(num + \\\"<br />\\\"); //10 9 8 7 6 5 4 3 2 1 0 num--; } while (num >= 0); document.write(num); //-1js \"]},\"1273\":{\"h\":\"3.for 循环\",\"t\":[\"for 有三个表达式：① 声明循环变量；② 判断循环条件；③ 更新循环变量。\",\"三个表达式之间，用;分割，for 循环三个表达式都可以省略，但是两个“;”缺一不可。\",\"for 循环的执行特点：先判断再执行，与 while 相同\",\"for 循环三个表达式都可以有多部分组成，第二部分多个判断条件用&& ||连接，第一三部分用逗号分割；\",\"for (var num = 1; num <= 10; num++) { document.write(num + \\\" <br />\\\"); //1 2 3 4 5 6 7 8 9 10 } \"]},\"1274\":{\"h\":\"4. for-in 循环\",\"t\":[\"for-in 循环主要用于遍历对象\",\"for()中的格式：for(keys in zhangsan){}\",\"keys 表示 obj 对象的每一个键值对的键！！所有循环中，需要使用 obj[keys] 来取到每一个值！！！\",\"for-in 循环，遍历时不仅能读取对象自身上面的成员属性，也能延续原型链遍历出对象的原型属性所以，可以使用 hasOwnProperty 判断一个属性是不是对象自身上的属性。obj.hasOwnProperty(keys)==true 表示这个属性是对象的成员属性，而不是原先属性\",\"//声明一个Peson类 function Person() { this.name = \\\"张三\\\"; this.age = 14; this.func1 = function () {}; } //实例化这个类 var zhangsan = new Person(); //使用for-in遍历这个对象 for (keys in zhangsan) { console.log(zhangsan[keys]); } \"]},\"1275\":{\"h\":\"5.for-of 循环\",\"t\":[\"ES6 借鉴 C++、Java、C# 和 Python 语言，引入了 for...of 循环，作为遍历所有数据结构的统一的方法。\",\"一个数据结构只要部署了 Symbol.iterator 属性，就被视为具有 iterator 接口，就可以用 for...of 循环遍历它的成员。也就是说，for...of 循环内部调用的是数据结构的 Symbol.iterator 方法。 for...of 循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如 arguments 对象、DOM NodeList 对象）、 Generator 对象，以及字符串。\",\"var arr = [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"]; for (let a in arr) { console.log(a); // 0 1 2 3 } for (let a of arr) { console.log(a); // a b c d } \"]},\"1276\":{\"h\":\"6. forEach 循环\",\"t\":[\"forEach()方法需要一个函数作为参数，这个函数由我们创建但不由我们调用，称为回调函数。\",\"数组中有几个元素函数执行几次，每次执行时，浏览器会将遍历元素以实参形式传递进来。\",\"foreach 遍历无法通过 break 跳出循环，如需要跳出，需要添加 try……catch 代码块\",\"浏览器会在回调函数中传递三个参数：\",\"1、当前正在遍历的元素；2、当前正在遍历的元素索引；3、正在遍历的数组。\",\"var arr = [1, 2, 3, 4]; arr.forEach((item, index, array) { console.log(item); console.log(index); console.log(array); }); \"]},\"1277\":{\"h\":\"7.循环控制语句\",\"t\":[\"1、break：跳出本层循环，继续执行循环后面的语句。如果循环有多层，则 break 只能跳出一层。\",\"2、continue：跳过本次循环剩余的代码，继续执行下一次循环。\",\"① 对于 for 循环，continue 之后执行的语句，是循环变量更新语句 i++；\",\"② 对于 while、do-while 循环，continue 之后执行的语句，是循环条件判断；因此，使用这两个循环时，必须将 continue 放到 i++之后使用，否则，continue 将跳过 i++进入死循环。\"]},\"1278\":{\"h\":\"jQuery\"},\"1279\":{\"h\":\"概述\",\"t\":[\"jQuery 是 Javascript 的 library 库，包含封装好的特定的集合（方法和函数）。\",\"jQuery 为了快速方便地操作 DOM，里面基本都是函数（方法），封装 JS 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。\",\"学习 jQuery 本质：学习调用这些函数（方法）。\",\"优点：\",\"轻量级。核心文件才几十 kb，不影响页面加载速度\",\"跨浏览器兼容。基本兼容了现在主流的浏览器\",\"链式编程、隐式迭代\",\"对事件、样式、动画支持，大大简化了 DOM 操作\",\"支持插件扩展开发。有丰富的第三方插件，如树形菜单、日期控件、轮播图等。\",\"6 免费、开源\"]},\"1280\":{\"h\":\"基本使用\"},\"1281\":{\"h\":\"版本\",\"t\":[\"1.x：兼容 IE 678 等低版本浏览器，不再更新\",\"2.x：不兼容 IE 678 等低版本浏览器，不再更新\",\"3.x：不兼容 IE 678 等低版本浏览器，是官方主要更新维护的版本\"]},\"1282\":{\"h\":\"入口函数\",\"t\":[\"$(function(){ ...; }); \",\"$(document).ready(function(){ ... }); \",\"等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成封装。\",\"相当于原生 JS 中的 DOMContentLoaded。\",\"不同于原生 JS 中的 load 事件，是等页面文档、外部 js 文件、css 文件、图片加载完毕才执行代码。\",\"更推荐第一种方式。\"]},\"1283\":{\"h\":\"顶级对象 $\",\"t\":[\"$是 jQuery 别称，在代码中可使用 jQuery 代替 $。\",\"$是 jQuery 的顶级对象，相当于原生 JS 的 window。把元素包装成 jQuery 对象就可以使用 jQuery 方法。\"]},\"1284\":{\"h\":\"jQuery 对象和 DOM 对象\",\"t\":[\"用原生 JS 获取来的对象就是 DOM 对象。\",\"用 jQuery 对象获取的元素就是 jQuery 对象。\",\"jQuery 对象本质：利用$对 DOM 对象包装后产生对象（伪数组形式存储）。\",\"DOM 对象和 jQuery 对象可以相互转换。\",\"DOM→jQuery $(DOM 对象)\",\"$(\\\"div\\\")[index] index是索引号 \",\"jQuery→DOM\",\"$(\\\"div\\\").get(index) index是索引号 \"]},\"1285\":{\"h\":\"常用 API\"},\"1286\":{\"h\":\"基础选择器\",\"t\":[\"$(\\\"选择器\\\"); \",\"名称\",\"用法\",\"描述\",\"ID 选择器\",\"$(\\\"#id\\\")\",\"获取指定 ID 的元素\",\"全选选择器\",\"$(\\\"*\\\")\",\"匹配所有元素\",\"类选择器\",\"$(\\\".class\\\")\",\"获取同一类 class 的元素\",\"标签选择器\",\"$(\\\"div\\\")\",\"获取同一类标签的所有元素\",\"并集选择器\",\"$(\\\"div,p,li\\\")\",\"选取多个元素\",\"交集选择器\",\"$(\\\"li.current\\\")\",\"交集元素\"]},\"1287\":{\"h\":\"层级选择器\",\"t\":[\"名称\",\"用法\",\"描述\",\"子代选择器\",\"$(\\\"ul>li\\\")\",\"使用>号，获取亲儿子层级元素；注意，并不会获取孙子层级的元素\",\"后代选择器\",\"$(\\\"ul li\\\")\",\"使用空格，代表后代选择器，获取 ul 下所有的 li 元素，包括孙子等\"]},\"1288\":{\"h\":\"隐式迭代（重要）\",\"t\":[\"遍历内部 DOM 元素（伪数组形式存储）的过程叫做隐式迭代。\",\"给匹配到的元素进行循环遍历，执行相应的方法，不需要再次循环，简化操作方便调用。\"]},\"1289\":{\"h\":\"筛选选择器\",\"t\":[\"语法\",\"用法\",\"描述\",\":first\",\"$(\\\"li:first\\\")\",\"获取第一个 li 元素\",\":last\",\"$(\\\"li:last\\\")\",\"获取最后一个 li 元素\",\":eq(index)\",\"$(\\\"li:eq(2)\\\")\",\"获取到的 li 元素中，选择索引号为 2 的元素，索引 index 从 0 开始\",\":odd\",\"$(\\\"li:odd\\\")\",\"获取到的 li 元素中，选择索引号为奇数的元素\",\":even\",\"$(\\\"li:even\\\")\",\"获取到的 li 元素中，选择索引号为偶数的元素\"]},\"1290\":{\"h\":\"筛选方法\",\"t\":[\"语法\",\"用法\",\"描述\",\"parent()\",\"$(\\\"li\\\").parent()\",\"查找父级\",\"children(selector)\",\"$(\\\"ul\\\").children(\\\"li\\\")\",\"相当于$(\\\"ul>li\\\")，最近一级（儿子）\",\"find(selector)\",\"$(\\\"ul\\\").find(\\\"li\\\")\",\"相当于$(\\\"ul li\\\")，后代选择\",\"siblings(selector)\",\"$(\\\".first\\\").siblings(\\\"li\\\")\",\"查找兄弟节点，不包括自己本身\",\"nextAll([expr])\",\"$(\\\".first\\\").nextAll()\",\"查找当前元素之后所有的同辈元素\",\"prevAll([expr])\",\"$(\\\".first\\\").prevAll()\",\"查找当前元素之前所有的同辈元素\",\"hasClass(class)\",\"$(\\\"div\\\").hasClass(\\\"protected\\\")\",\"检查当前的元素是否含有某个特定类，如果有则返回 true\",\"eq(index)\",\"$(\\\"li\\\").eq(2)\",\"相当于$(\\\"li:eq(2)\\\")，index 从 0 开始\"]},\"1291\":{\"h\":\"排他思想\",\"t\":[\"隐式迭代，所有按钮统一绑定事件统一赋予属性。\",\"this 元素改变。\",\"其余兄弟元素 this.siblings() 去掉背景颜色\",\"链式编程（节省代码量，优雅）\",\"$(this).css(\\\"color\\\", \\\"red\\\").siblings().css(\\\"color\\\", \\\"red\\\"); \"]},\"1292\":{\"h\":\"样式操作\"},\"1293\":{\"h\":\"操作 CSS 方法\",\"t\":[\"jQuery 可以使用 css 方法来修改简单元素样式；也可以操作类，修改多个样式。\"]},\"1294\":{\"h\":\"只写 属性名，返回属性值\",\"t\":[\"$(this).css(\\\"color\\\"); \"]},\"1295\":{\"h\":\"参数是 属性名，属性值，逗号分隔\",\"t\":[\"设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号。\",\"$(this).css(\\\"color\\\", \\\"red\\\"); \"]},\"1296\":{\"h\":\"参数可以是对象形式\",\"t\":[\"方便设置多组样式。属性名和属性值用冒号隔开，属性可以不用加引号。\",\"$(this).css({ color: \\\"white\\\", \\\"font-size\\\": \\\"20px\\\" }); \",\"注意：如果是复合属性需要采用驼峰命名法书写。\"]},\"1297\":{\"h\":\"设置类样式方法\",\"t\":[\"作用等同于以前的 classList，可以操作类样式，主要操作类里面的参数不要加点。\"]},\"1298\":{\"h\":\"添加类\",\"t\":[\"$(\\\"div\\\").addClass(\\\"current\\\"); \"]},\"1299\":{\"h\":\"删除类\",\"t\":[\"$(\\\"div\\\").removeClass(\\\"current\\\"); \"]},\"1300\":{\"h\":\"切换类\",\"t\":[\"$(\\\"div\\\").toggleClass(\\\"current\\\"); \"]},\"1301\":{\"h\":\"类操作与 className 区别\",\"t\":[\"原生 JS 中 className 会覆盖元素原先类名。\",\"jQuery 只对指定类进行操作，不影响原先的类名。\"]},\"1302\":{\"h\":\"动画效果\"},\"1303\":{\"h\":\"显示隐藏\",\"t\":[\"1.语法规范\",\"show([speed, [easing], [fn]]); hide([speed, [easing], [fn]]); toggle([speed, [easing], [fn]]); \",\"2.显示参数\",\"参数都可以省略，无动画则直接显示。\",\"speed：三种预定速度之一的字符串（\\\"slow\\\" \\\"normal\\\" or \\\"fast\\\"）或表示动画时长的毫秒数值（如：1000）。\",\"easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。\",\"fn：回调函数，在动画完成时执行的函数，每个元素执行一次。\"]},\"1304\":{\"h\":\"滑动效果\",\"t\":[\"1.语法规范\",\"slidedown([speed, [easing], [fn]]); slideup([speed, [easing], [fn]]); slidetoggle([speed, [easing], [fn]]); \",\"2.切换效果参数\",\"参数都可以省略。\",\"speed：三种预定速度之一的字符串（\\\"slow\\\" \\\"normal\\\" or \\\"fast\\\"）或表示动画时长的毫秒数值（如：1000）。\",\"easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。\",\"fn：回调函数，在动画完成时执行的函数，每个元素执行一次。\"]},\"1305\":{\"h\":\"事件切换\",\"t\":[\"hover([over], out); \",\"事件切换就是鼠标经过和离开的复合写法。\",\"over：鼠标移到元素上要触发的函数（相当于 mouseenter）\",\"out：鼠标移出元素要出发的函数（相当于 mouseleave）\",\"如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数。\"]},\"1306\":{\"h\":\"动画队列及停止\",\"t\":[\"stop(); \",\"stop()方法用于停止动画效果。\",\"注意：stop()写到动画或者效果前面，相当于停止结束上一次的动画。\"]},\"1307\":{\"h\":\"淡入淡出效果\",\"t\":[\"fadeIn([spped], [easing], [fn]); fadeOut([spped], [easing], [fn]); faddToggle([spped, [easing], [fn]]); \",\"参数都可以省略。\",\"speed：三种预定速度之一的字符串（\\\"slow\\\" \\\"normal\\\" or \\\"fast\\\"）或表示动画时长的毫秒数值（如：1000）。\",\"easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。\",\"fn：回调函数，在动画完成时执行的函数，每个元素执行一次。\",\"faddTo([spped],opacity,[easing],[fn]]) \",\"opacity 透明度必须写，取值 0-1 之间。\",\"speed：种预定速度之一的字符串（\\\"slow\\\" \\\"normal\\\" or \\\"fast\\\"）或表示动画时长的毫秒数值（如：1000）。必须写。\",\"easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。\",\"fn：回调函数，在动画完成时执行的函数，每个元素执行一次。\"]},\"1308\":{\"h\":\"自定义动画 animate\",\"t\":[\"animate(params, [speed], [easing], [fn]); \",\"params：想要更改的样式属性，以对象形式传递，必须写。属性名可以不带引号，如果是复合属性则需要采取驼峰命名法 borderLeft。其余参数都可以省略。\",\"speed：三种预定速度之一的字符串（\\\"slow\\\" \\\"normal\\\" or \\\"fast\\\"）或表示动画时长的毫秒数值（如：1000）。\",\"easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。\",\"fn：回调函数，在动画完成时执行的函数，每个元素执行一次。\"]},\"1309\":{\"h\":\"属性操作\"},\"1310\":{\"h\":\"prop()\",\"t\":[\"获取：\",\"prop(\\\"属性\\\"); \",\"设置：\",\"prop(\\\"属性\\\", \\\"属性值\\\"); \"]},\"1311\":{\"h\":\"attr()\",\"t\":[\"可获取自定义属性\",\"获取：\",\"attr(\\\"属性\\\"); //类似于原生getAttribute() \",\"设置：\",\"attr(\\\"属性\\\", \\\"属性值\\\"); //类似于原生setAttribute() \"]},\"1312\":{\"h\":\"数据缓存 data()\",\"t\":[\"data()方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据全部清除。\",\"获取：\",\"data(\\\"key\\\"); \",\"添加：\",\"data(\\\"key\\\", \\\"value\\\"); \",\"同时也可以读取 H5 自定义属性 data-index，得到的是 Number\"]},\"1313\":{\"h\":\":checked 选择器\",\"t\":[\"查找被选中的表单元素\"]},\"1314\":{\"h\":\"内容文本值\"},\"1315\":{\"h\":\"html()\",\"t\":[\"相当于原生 innerHTML\",\"html() //获取元素内容\",\"html(\\\"内容\\\") //设置元素的内容\"]},\"1316\":{\"h\":\"text()\",\"t\":[\"相当于原生 inner Text\",\"text() //获取文本内容\",\"text(\\\"内容\\\") //设置文本内容\"]},\"1317\":{\"h\":\"val()\",\"t\":[\"相当于原生 value\",\"val() //获取表单值\",\"val(\\\"内容\\\") //设置表单值\"]},\"1318\":{\"h\":\"元素操作\"},\"1319\":{\"h\":\"遍历元素\",\"t\":[\"隐式迭代默认对同一类元素做了同样操作，如果需要设置不同操作，需要遍历。\",\"$(\\\"div\\\").each(function (index, domEle) { xxx; }); \",\"index：每个元素的索引号；domEle：每个 DOM 元素对象，不是 jQuery 对象。\",\"要想使用 jQuery 方法，需要转换：$(domEle)。\",\"$.each(object, function (index, element) { xxx; }); \",\"$.each()方法可用于遍历任何对象。主要用于数据处理，比如数组、对象。\",\"里面的函数有 2 个参数：index 是索引号；element 遍历内容\",\"功能比较强大，可以遍历数组、对象。\"]},\"1320\":{\"h\":\"创建元素\",\"t\":[\"语法：\",\"$(\\\"<li></li>\\\"); \"]},\"1321\":{\"h\":\"添加元素\",\"t\":[\"内部添加\",\"element.append(\\\"内容\\\"); \",\"类似于原生 appendChild\",\"外部添加\",\"element.after(\\\"内容\\\"); //把内容放入目标元素后面 element.before(\\\"内容\\\"); //把内容放入目标元素前面 \",\"内部添加元素，生成之后，它们是父子关系。\",\"外部添加元素，生成之后，它们是兄弟关系。\"]},\"1322\":{\"h\":\"删除元素\",\"t\":[\"element.remove(); //删除匹配元素自身 element.empty(); //删除匹配元素集合中的所有子节点 element.html(\\\"\\\"); //清空匹配的元素内容 \",\"第二行和第三行都为清空，效果相同。\"]},\"1323\":{\"h\":\"尺寸位置操作\"},\"1324\":{\"h\":\"尺寸操作\",\"t\":[\"语法\",\"用法\",\"width() / height()\",\"取得匹配元素宽度和高度值，只算 width / height\",\"innerWidth() / innerHeight()\",\"取得匹配元素宽度和高度值 包含 padding\",\"outerWidth() / outerHeight()\",\"取得匹配元素宽度和高度值 包含 padding、border\",\"outerWidth(true) / outerHeight(true)\",\"取得匹配元素宽度和高度值 包含 padding border margin\"]},\"1325\":{\"h\":\"位置操作\",\"t\":[\"offset() 设置或获取元素偏移\",\"返回被选元素相对于文档的偏移坐标，跟父级无关。\",\"offset().left offset().top\",\"可设置元素偏移 offset({top:10 , left: 30 });\",\"position() 获取距离带有定位父级位置的偏移\",\"如果没有定位父级，以文档为准\",\"可读不可写\",\"scrollTop()/scrollLeft() 设置或获取被卷去头部或左侧\",\"scrollTop()设置或返回被选元素被卷去头部。\",\"页面滚动条滚动长度 $(document).scrollTop()。\"]},\"1326\":{\"h\":\"事件操作\"},\"1327\":{\"h\":\"事件注册\",\"t\":[\"单个事件注册\",\"element.事件(function () {}); $(\\\"div\\\").click(function () {}); \",\"其他事件和原生基本一致。\"]},\"1328\":{\"h\":\"事件处理 on\",\"t\":[\"on()方法在匹配元素上绑定一个或多个事件的函数\",\"element.on(events, [selector], fn); \",\"events：一个或多个用空格分隔的事件类型。\",\"selector：元素的子元素选择器。\",\"fn：回调函数。\",\"优势 1：可以绑定多个事件，多个处理程序\",\"$(\\\"div\\\").on({ mouseover: function () {}, mouseout: function () {}, click: function () {}, }); \",\"如果处理程序相同\",\"$(\\\"div\\\").on(\\\"mouseover mouseout\\\", function () { $(this).toggleClass(\\\"current\\\"); }); \",\"优势 2：\",\"事件委派。子元素绑定事件可委派给父元素，把原来加给子元素身上的事件绑定在父元素身上，当父元素内部的子元素满足触发条件时再触发\",\"$(\\\"ul\\\").on(\\\"click\\\", \\\"li\\\", function () { alert(\\\"hello world\\\"); }); \",\"在此之前有 bind()，live()，delegate()等方法来处理事件绑定或事件委派，最新版本用 on。\",\"优势 3：\",\"动态创建的元素，click()没有办法绑定事件，on()可以给动态生成的元素绑定事件。\"]},\"1329\":{\"h\":\"事件处理 off\",\"t\":[\"off()方法可以移除通过 on()方法添加的事件处理程序。\",\"$(\\\"p\\\").off(); // 解绑p元素所有事件处理程序 $(\\\"p\\\").off(\\\"click\\\"); // 解绑p元素上面的点击事件 $(\\\"ul\\\").off(\\\"click\\\", \\\"li\\\"); // 解绑事件委托 \",\"如果有的事件只想触发一次，可以使用 one()来绑定事件。\"]},\"1330\":{\"h\":\"自动触发事件\",\"t\":[\"有些事件希望自动触发，比如轮播图自动播放跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件。\",\"element.click(); //第一种简写 element.trigger(\\\"type\\\"); //第二种自动触发模式 $(\\\"p\\\").on(\\\"click\\\", function () { alert(); }); $(\\\"p\\\").trigger(\\\"click\\\"); element.triggerHandler(type); //第三种自动触发模式 \",\"第三种自动触发模式不会触发元素默认行为\",\"例如不会触发 input 光标焦点闪烁事件\"]},\"1331\":{\"h\":\"事件对象\",\"t\":[\"element.on(events, [selector], function (event) {}); \",\"阻止默认行为：event.preventDefault() return false\",\"阻止冒泡：event.stopPropagation()\"]},\"1332\":{\"h\":\"对象拷贝\",\"t\":[\"将对象拷贝（合并）给另外一个对象使用，此时可以使用$.extend()方法\",\"$.extend([deep], target, object1, [objectN]); \",\"deep：true 深拷贝；false 默认 浅拷贝。\",\"target：要拷贝的目标对象。\",\"object1：待拷贝到第一个对象的对象。\",\"ObjectN：待拷贝的第 N 个对象的对象。\",\"浅拷贝：把被拷贝对象复杂数据类型的地址拷给目标对象，修改目标对象会影响被拷贝对象。冲突属性会覆盖掉。\",\"深拷贝：前面加 true，完全克隆（拷贝对象而不是地址），修改目标不会影响被拷贝对象。不冲突属性会合并。\"]},\"1333\":{\"h\":\"多库共存\",\"t\":[\"jQuery 使用$ 作为标识符，其他 js 也会用$()作为标识符，这样一起使用会冲突。\",\"需求：需要一个解决方案，让 jQuery 和其他的 js 库不冲突，可以同时存在。\",\"解决方案：\",\"把里面的$符号统一改为 jQuery。例如 jQuery(\\\"div\\\")\",\"jQuery 变量规定新名称：$.noConflict() var xx = $.noConflict();\"]},\"1334\":{\"h\":\"插件封装\"},\"1335\":{\"h\":\"局部封装\",\"t\":[\"$.fn.extend({ fun: function () { xxxxx; }, }); \",\"封装完成后，fun 即为对象方法。\"]},\"1336\":{\"h\":\"全局封装\",\"t\":[\"$.extend({ fun: function () { xxxxx; }, }); \",\"封装完成后，$.fun 即为全局方法。\"]},\"1337\":{\"h\":\"Object对象\"},\"1338\":{\"h\":\"对象\",\"t\":[\"基本数据类型都是单一的值，值和值之间没有任何联系，构不成整体。\",\"对象是一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。\"]},\"1339\":{\"h\":\"内建对象\",\"t\":[\"由 ES 标准中定义的对象，在任何的 ES 的实现中都可以使用。\",\"Math String Number Boolean\",\"平时使用的强制类型转换实际上调用的就是 String、Number 这些内建对象的方法\"]},\"1340\":{\"h\":\"宿主对象\",\"t\":[\"JS 运行环境提供的对象，主要指浏览器提供的对象：BOM、DOM。\"]},\"1341\":{\"h\":\"自定义对象\",\"t\":[\"自行创建对象，使用构造函数。new Object()\",\"常规语法：对象.属性名\",\"属性名：不强制要求遵守标识符命名规范。\",\"写法：\",\"obj.name=\\\"***\\\" obj[\\\"name\\\"]=\\\"***\\\" obj={name:\\\"***\\\", ​ gender:\\\"***\\\", ​ age:***\\\" }; \",\"对象字面值的属性名可以加引号也可以不加，建议不加。\",\"如果要使用一些特殊的名字，则必须加引号。\",\"属性名和属性值是一组一组的键值对结构。\",\"键值之间使用 : 连接，多个键值对之间使用 , 隔开\",\"如果一个属性之后没有其他的属性，就不要写 ,\"]},\"1342\":{\"h\":\"函数\",\"t\":[\"函数也是一个对象，函数可以封装一些功能（代码），在需要时可以执行这些功能。\"]},\"1343\":{\"h\":\"语法\",\"t\":[\"var fun = new Function();\",\"实际开发中很少使用构造函数来创建函数对象。更多使用函数声明创建。\",\"function 函数名([形参 1, 形参 2, ……]) {\",\"​ 语句……\",\"}\"]},\"1344\":{\"h\":\"参数\",\"t\":[\"1.调用函数时解析器不会检查实参类型，所以要注意是否有可能接收到非法参数。\",\"2.同时解析器也不会检查实参的数量。多余的实参不会被赋值。\",\"3.如果实参的数量少于形参的数量，则没有对应实参的形参将是 undefined。\",\"4.实参可以是任意数据类型，可以是对象，也可以是函数。\",\"注意：\",\"fun()：是调用函数的意思，相当于使用函数返回值\",\"fun：是函数对象，相当于直接使用函数对象\"]},\"1345\":{\"h\":\"返回值\",\"t\":[\"1.返回值可以是任意数据类型，可以是对象也可以是函数。\",\"2.返回值 return 如果不跟任何值则返回 undefined，不写 return 也返回 undefined。\"]},\"1346\":{\"h\":\"IIFE 立即执行函数\",\"t\":[\"语法：(function() { * * * * * *})();\",\"函数定义完，立即被调用，这种函数叫做立即执行函数。往往只会执行一次。\"]},\"1347\":{\"h\":\"方法\",\"t\":[\"函数可以成为对象的属性，如果一个函数作为一个对象的属性保存，那么称这个函数是这个对象的方法。\",\"var obj = { test: function () { console.log(\\\"hello\\\"); }, }; // \\\"hello\\\" obj.test(); \"]},\"1348\":{\"h\":\"作用域\",\"t\":[\"作用域指一个变量的作用范围\"]},\"1349\":{\"h\":\"全局作用域\",\"t\":[\"全局作用域指直接编写在 script 标签中的 js 代码。\",\"全局作用域在页面打开时创建，在页面关闭时销毁。\",\"在全局作用域中有一个全局对象 window，它代表的是一个浏览器窗口，由浏览器创建，可直接使用。\",\"全局作用域中创建的变量都会作为 window 对象属性保存，创建的函数作为 window 对象方法保存。\",\"变量声明提前，使用 var 关键字声明的变量，会在所有代码执行之前被声明（但是不赋值）。但是如果声明变量时不使用 var 关键字，则变量不会被声明提前。\",\"函数声明提前，使用函数声明形式创建的函数 function 函数 K{}，它会在所有代码执行之前声明。但是使用函数表达式 var fun = function(){}创建的函数，能提前声明对象，但不会被赋值。\",\"全局作用域中的变量都是全局变量，在页面的任意部分都可以访问得到。\",\"// undefined，不会报错 console.log(carName); var carName = \\\" Volvo\\\"; // 此处可调用 carName 变量 function myFunction() { // 函数内可调用 carName 变量 } \"]},\"1350\":{\"h\":\"函数作用域\",\"t\":[\"调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁。\",\"每调用一次函数就会创建一个新的函数作用域，他们之间相互独立。\",\"函数作用域中可以访问到全局作用域变量，在全局作用域中无法访问到函数作用域的变量。\",\"函数作用域中操作变量时，会先在自身作用域中寻找，如果有就直接使用，没有则向上一级作用域寻找直到向全局作用域寻找。如果全局作用域仍未找到，则报错 ReferenceError。\",\"在函数中要访问全局变量可以使用 window 对象。\",\"在函数作用域也有提前声明特性，使用 var 关键字声明变量，会在函数中所有代码执行前提前声明。函数声明同理。\",\"如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。\",\"定义形参就相当于在函数作用域中声明了变量\",\"以下实例中 carName 在函数内，但是为全局变量。\",\"// 此处可调用 carName 变量 function myFunction() { carName = \\\"Volvo\\\"; // 此处可调用 carName 变量 } \"]},\"1351\":{\"h\":\"数组 Array\",\"t\":[\"数组是一个对象，使用数字作为索引操作元素，不同于普通对象使用字符串作为属性名操作。\"]},\"1352\":{\"h\":\"常见特性\",\"t\":[\"如果读取不存在的索引，不会报错而是返回 undefined。\",\"对非连续数组，length 获取数组最大索引+1 长度。（尽量不要创建非连续数组）\",\"修改的 length 大于原长度，多余部分会空出来。\",\"给数组最后一个元素后面添加元素：arr[length] = xxx;\"]},\"1353\":{\"h\":\"字面量\",\"t\":[\"数组中的元素可以是任意数据类型\",\"var arr = [];\",\"var arr2 = new Array( );\",\"小区别：\",\"arr = [10] 创建一个单元素 10 的数组\",\"arr = new Array(10) 创建一个长度为 10 的数组\"]},\"1354\":{\"h\":\"常用数组方法\"},\"1355\":{\"h\":\"1. push\",\"t\":[\"该方法可以向数组的末尾添加一个或多个元素，并返回数组的新长度\",\"可以将要添加的元素作为方法的参数传递，这些元素会自动添加到数组末尾\",\"该方法会将数组新的长度作为返回值返回\"]},\"1356\":{\"h\":\"2. pop\",\"t\":[\"该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回\"]},\"1357\":{\"h\":\"3. unshift\",\"t\":[\"向数组开头添加一个或多个元素，并返回新的数组长度\",\"向前边插入元素以后，其他的元素索引会依次调整\"]},\"1358\":{\"h\":\"4. shift\",\"t\":[\"可以删除数组的第一个元素，并将被删除的元素作为返回值返回\"]},\"1359\":{\"h\":\"5. slice\",\"t\":[\"可以用来从数组提取指定元素\",\"该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回\",\"参数：\",\"1.截取开始的位置索引，包含开始索引\",\"2.截取结束的位置索引，不包含结束索引\",\"第二个参数可以省略不写，此时会截取从开始索引往后的所有元素\",\"索引可以传递一个负值，如果传递一个负值，则从后往前计算\"]},\"1360\":{\"h\":\"6. splice\",\"t\":[\"可以用于删除数组中的指定元素\",\"使用 splice() 会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值数组返回\",\"参数：\",\"表示开始位置的索引\",\"表示删除的数量\",\"第三个及以后可以传递一些新的元素，这些元素将会自动插入到开始位置索引前\"]},\"1361\":{\"h\":\"7. concat\",\"t\":[\"可以连接两个或多个数组，并将新的数组返回\",\"该方法不会对原数组产生影响\"]},\"1362\":{\"h\":\"8. join\",\"t\":[\"该方法可以将数组转换为一个字符串\",\"该方法不会对原数组产生升影响，而是将转换后的字符串作为结果返回\",\"在 join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符。如果不指定连接符，则默认使用 , 作为连接符。\"]},\"1363\":{\"h\":\"9. reverse\",\"t\":[\"该方法用来反转数组（前边的去后边，后边的去前边）\",\"该方法会直接修改原数组\"]},\"1364\":{\"h\":\"10. sort\",\"t\":[\"可以用来对数组中的元素进行排序\",\"也会影响原数组，默认会按照 Unicode 编码进行排序\",\"即时对于纯数字的数组，使用 sort() 排序时，也会按照 Unicode 编码来排序，所以对数字进行默认排序时，可能会得到错误结果。\",\"我们可以在 sort()添加一个回调函数，来指定排序规则\",\"回调函数中需要定义两个形参，浏览器将会分别使用数组中的元素作为实参自动调用回调函数，使用哪个元素调用不确定，但肯定的是数组中 a 一定在 b 前面\",\"浏览器会根据回调函数的返回值来决定元素的顺序：\",\"如果返回一个大于 0 的值，则元素会交换位置\",\"如果返回一个小于 0 的值，则元素位置不变\",\"如果返回一个 0，则认为两个元素相等，也不交换位置\"]},\"1365\":{\"h\":\"11. indexOf\",\"t\":[\"检索一个数组是否含有指定元素。\",\"如果数组中含有该元素，则返回其第一次出现的数组元素索引。如果没有返回-1。\",\"可以指定第二个参数，指定开始查找的位置。\"]},\"1366\":{\"h\":\"12. lastIndexOf\",\"t\":[\"可返回一个指定的字符串值最后出现的位置，如果指定第二个参数 start，则在一个字符串中的指定位置从后向前搜索\",\"注意： 该方法将从后向前检索字符串，但返回是从起始位置 (0) 开始计算子字符串最后出现的位置。 看它是否含有字符串。\",\"开始检索的位置在字符串的 start 处或字符串的结尾（没有指定 start 时）。\",\"如果没有找到匹配字符串则返回 -1 。\"]},\"1367\":{\"h\":\"日期 Date\",\"t\":[\"在 JS 中使用 Date 对象表示一个时间\",\"如果直接使用构造函数创建 Date 对象，会封装为当前代码执行时间。\",\"日期格式 new Date(\\\"01/01/2021 00:00:00\\\"); （括号内参数仅为 1 个，表示为毫秒）\",\"方法\",\"描述\",\"getDate()\",\"从 Date 对象返回一个月中的某一天(1~31)\",\"getDay()\",\"从 Date 对象返回一周中的某一天(0~6)\",\"getMonth()\",\"从 Date 对象返回月份(0~1)\",\"getFullYear()\",\"从 Date 对象以四位数字返回年份\",\"getYear()\",\"请使用 getFullYear()方法代替\",\"getHours()\",\"返回 Date 对象的小时(0~23)\",\"getMinutes()\",\"返回 Date 对象的分钟(0~59)\",\"getSeconds()\",\"返回 Date 对象的秒数(0~59)\",\"getMilliseconds()\",\"返回 Date 对象的毫秒(0~999)\",\"getTime()\",\"返回 1970 年 1 月 1 日至今的毫秒数\",\"Date.now()\",\"立即获取当前日期相对 1970 年 1 月 1 日的毫秒数时间戳\"]},\"1368\":{\"h\":\"数学 Math\",\"t\":[\"Math 不是构造函数，属于一个工具类不用创建对象，封装了数学运算相关属性和方法。\"]},\"1369\":{\"h\":\"对象属性\",\"t\":[\"值\",\"描述\",\"E\",\"返回算术常量 e，即自然对数的底数(约等于 2.718)\",\"LN2\",\"返回 2 的自然对数(约等于 0.693)\",\"LN10\",\"返回 10 的自然对数(约等于 2.302)\",\"LOG2E\",\"返回以 2 为底的 e 的对数(约等于 1.414)\",\"LOG10E\",\"返回以 10 为底的 e 的对数(约等于 0.434)\",\"PI\",\"返回圆周率(约等于 3.14159)\",\"SQRT1_2\",\"返回 2 的平方根的倒数(约等于 0.707)\",\"SQRT2\",\"返回 2 的平方根(约等于 1.414)\"]},\"1370\":{\"h\":\"对象方法\",\"t\":[\"方法\",\"描述\",\"abs(x)\",\"返回数的绝对值\",\"acos(x)\",\"返回数的反余弦值\",\"asin(x)\",\"返回数的反正弦值\",\"atan(x)\",\"以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值\",\"atan2(y,x)\",\"返回从 x 轴到点(x,y)的角度（介于 -PI/2 与 PI/2 弧度之间）\",\"ceil(x)\",\"对数进行上舍入（进一法）\",\"cos(x)\",\"返回数的余弦值\",\"exp(x)\",\"返回 e 的指数\",\"floor(x)\",\"对数进行下舍入（取余法）\",\"log(x)\",\"返回数的自然对数(底为 e)\",\"max(x,y)\",\"返回 x 和 y 中的最大值\",\"min(x,y)\",\"返回 x 和 y 中的最小值\",\"pow(x,y)\",\"返回 x 的 y 次幂\",\"random()\",\"返回 0~1 之间的随机数\",\"round(x)\",\"把数四舍五入为最接近的整数\",\"sin(x)\",\"返回数的正弦\",\"sqrt(x)\",\"返回数的平方根\",\"tan(x)\",\"返回角的正切\",\"toSource(x)\",\"返回该对象的源代码\",\"valueOf()\",\"返回 Math 对象的原始值\",\"生成 x~y 之间的随机数公式：\",\"Math.round(Math.random() * (y-x) + x)\"]},\"1371\":{\"h\":\"包装类\",\"t\":[\"js 的包装类指 String() Number() Boolean()\",\"注意：实际应用中基本不会使用基本数据类型对象，因为使用时会带来不可预期的结果。\",\"包装类的实际应用：对基本数据类型的值去调用属性和方法时，浏览器临时使用包装类将其转换为对象，再调用属性和方法，调用完毕后转为基本数据类型。\"]},\"1372\":{\"h\":\"字符串 String\",\"t\":[\"之所以把字符串放到对象章节，是因为字符串底层也是以字符数组的形式保存的。字符串很多方法与数组方法有异曲同工之处。\"]},\"1373\":{\"h\":\"字符串获取\",\"t\":[\"1.charAt()\",\"返回字符串中指定位置的字符，根据索引获取指定字符。\",\"2.charCodeAt()\",\"获取指定位置字符的字符编码（Unicode 编码）。\",\"3.String.formCharCode()\",\"根据字符编码去获取字符。\"]},\"1374\":{\"h\":\"字符串拼接\",\"t\":[\"concat()\",\"返回值：拼接两个或多个字符串，作用和 + 一样。\"]},\"1375\":{\"h\":\"目录查找\",\"t\":[\"1.indexOf()\",\"检索一个字符串是否含有指定内容。\",\"如果字符串中含有其内容，则返回其第一次出现的索引。如果没有返回-1。\",\"可以指定第二个参数，指定开始查找的位置。\",\"2.lastIndexOf()\",\"从后往前寻找索引\",\"也可以指定开始查找的位置，此处指定位置为正向指定。\"]},\"1376\":{\"h\":\"字符串截取\",\"t\":[\"1.slice()\",\"slice() 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。\",\"string.slice(start, end); \",\"参数\",\"描述\",\"start\",\"必须。要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。\",\"end\",\"可选。紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。\",\"该方法的两个参数均为位置坐标，和 subtring 比较像，区别就是该方法支持负数，并且不会交换位置，始终是从 start 到 end，如果该区间不存在，那么返回''。\",\"slice() 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.slice(1,5) < \\\"1234\\\" \",\"当start或者end为负值时，定位方式和substr一，从右往左数，从1开始。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.slice(1,-1) //起始点从第1（包括）开始，结束点为从右往左数第1个（不包括） < \\\"12345678\\\" \",\"start到end的顺序始终是从左到右，如果最终start的位置在end的右边，那么返回''。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.slice(2,1) //2所在的位置是'2'，1所在的位置是'1'，从2=>1，方向相反，返回为空 < \\\"\\\" > a.slice(-2,1) //-2所在的位置是'8'，1所在的位置是'1'，从8=>1，方向相反，返回为空 < \\\"\\\" > a.slice(-2,-1) //-2所在的位置是'8'，-1所在的位置是'9'，从8=>9，方向正常，返回为'8' < \\\"8\\\" \",\"其他情况和substring处理方式一致 。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.slice('xx','5.5') // => a.slice(0,5) < \\\"01234\\\" \",\"2.substring()\",\"substring() 方法用于提取字符串中介于两个指定下标之间的字符。\",\"string.substring(start, stop); \",\"参数\",\"描述\",\"start\",\"必需。一个 非负的整数 ，规定要提取的子串的第一个字符在 string​​ 中的位置。\",\"stop\",\"可选。一个 非负的整数 ，比要提取的子串的最后一个字符在 ​string​​ 中的位置多 1。 如果省略该参数，那么返回的子串会一直到字符串的结尾。\",\"substring() 方法返回的子串包括 start 处的字符，但不包括 stop 处的字符。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substring(1,5) < \\\"1234\\\" \",\"如果参数 start 与 stop 相等，那么该方法返回的就是一个空串(即长度为 0 的字符串)。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substring(1,1) < \\\"\\\" \",\"如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substring(5,1) //=>a.substring(1,5) < \\\"1234\\\" \",\"如果 start 和 stop 有负数，那么会把该参数自动转为 0，然后继续上述规则。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substring(5,-1) //=> a.substring(5,0) //=> a.substring(0,5) < \\\"1234\\\" \",\"如果 start 和 stop 有正小数(负数直接进行第 4 条)，那么会把该参数向下取整，然后继续上述规则。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substring(5,2.5) //=> a.substring(5,2) //=> a.substring(2,5) < \\\"234\\\" \",\"如果 start 和 stop 有字符串，那么会先进行 parseInt()，如果转换结果为 NaN，那么就转换为 0，其余情况继续上述规则。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substring(5,'2.5') //=> a.substring(5,2) //=> a.substring(2,5) < \\\"234\\\" > a.substring(5,'ss') //=> a.substring(5,NaN) //=> a.substring(5,0) //=> a.substring(0,5) < \\\"01234\\\" \",\"3.substr()\",\"substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。\",\"string.substr(start, length); \",\"参数\",\"描述\",\"start\",\"必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。\",\"length\",\"可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 string 的开始位置到结尾的字串。\",\"该方法与 substring()最大的区别在于第二个参数是你需要截取字符串的长度，而不是位置。\",\"substr() 方法返回的子串从 start 处的字符开始(包括)往后截取 length 长度，如果超过最末端就到最末端结束。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substr(1,5) < \\\"12345\\\" > a.substr(1,15) // 只会到最末端，多了没用 < \\\"123456789\\\" \",\"start 可以取负值，表示从字符串尾部往头部开始数(从右到左，注意是从 1 开始，比如-1 指字符串中最后一个字符)，但是截取长度还是从左到右，如果超过最末端就到最末端结束。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substr(-4,2) // -4表示从右开始数第4个，就是'6'，然后取2个长度的字符串，就是'67' < \\\"67\\\" \",\"如果 length 为负值，那么会直接当成 0 处理，最终返回\\\"\\\"。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substr(4,-2) //=> a.substr(4,0) < \\\"\\\" \",\"如果 start 或者 length 为小数，那么会截取小数部分。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substr(1.2,5.2) //=> a.substr(1,5) < \\\"12345\\\" \",\"如果 start 和 length 有字符串，那么会先进行 parseInt()，如果转换结果为 NaN，那么就转换为 0，其余情况继续上述规则。\",\"//chrome控制台 > var a = '0123456789' < undefined > a.substr('aa','5') //=> a.substr(0,5) < \\\"01234\\\" \"]},\"1377\":{\"h\":\"字符串拆分\",\"t\":[\"split()\",\"将字符串拆分为数组\",\"参数：需要一个字符串作为参数，将会根据该字符串拆分数组。\"]},\"1378\":{\"h\":\"3.Javascript\"},\"1379\":{\"h\":\"Javascript\",\"t\":[\"Javascript：网页模型的定义以及交互的编写，Web标准三大组成中的行为\",\"Javascript基础\",\"Object对象\",\"正则表达式\",\"DOM\",\"BOM\",\"JQuery\",\"高阶面向对象\",\"ES6+\"]},\"1380\":{\"h\":\"正则表达式\",\"t\":[\"正则表达式是一种通用的工具，在 JavaScript、PHP、Java、Python、C++ 等几乎所有的编程语言中都能使用；但是，不同编程语言对正则表达式语法的支持不尽相同，有的编程语言支持所有的语法，有的仅支持一个子集。本节讲到的正则表达式语法适用于 JavaScript。\",\"正则表达式的语法体现在字符模式上。字符模式是一组特殊格式的字符串，它由一系列特殊字符和普通字符构成，其中每个特殊字符都包含一定的语义和功能。\"]},\"1381\":{\"h\":\"描述功能\",\"t\":[\"根据正则表达式语法规则，大部分字符仅能够描述自身，这些字符被称为普通字符，如所有的字母、数字等。\",\"元字符就是拥有特动功能的特殊字符，大部分需要加反斜杠进行标识，以便于普通字符进行区别，而少数元字符，需要加反斜杠，以便转译为普通字符使用。JavaScript 正则表达式支持的元字符如表所示。\",\"元字符\",\"描述\",\".\",\"查找单个字符，除了换行和行结束符\",\"\\\\w\",\"查找单词字符\",\"\\\\W\",\"查找非单词字符\",\"\\\\d\",\"查找数字\",\"\\\\D\",\"查找非数字字符\",\"\\\\s\",\"查找空白字符\",\"\\\\S\",\"查找非空白字符\",\"\\\\b\",\"匹配单词边界\",\"\\\\B\",\"匹配非单词边界\",\"\\\\0\",\"查找 NUL 字符\",\"\\\\n\",\"查找换行符\",\"\\\\f\",\"查找换页符\",\"\\\\r\",\"查找回车符\",\"\\\\t\",\"查找制表符\",\"\\\\v\",\"查找垂直制表符\",\"\\\\xxx\",\"查找以八进制数 xxxx 规定的字符\",\"\\\\xdd\",\"查找以十六进制数 dd 规定的字符\",\"\\\\uxxxx\",\"查找以十六进制 xxxx 规定的 Unicode 字符\",\"表示字符的方法有多种，除了可以直接使用字符本身外，还可以使用 ASCII 编码或者 Unicode 编码来表示。\",\"示例 1\",\"下面使用 ASCII 编码定义正则表达式直接量。\",\"var r = /\\\\x61/; var s = \\\"JavaScript\\\"; var a = s.match(s); \",\"由于字母 a 的 ASCII 编码为 97，被转换为十六进制数值后为 61，因此如果要匹配字符 a，就应该在前面添加“\\\\x”前缀，以提示它为 ASCII 编码。\",\"示例 2\",\"除了十六进制外，还可以直接使用八进制数值表示字符。\",\"var r = /\\\\141/; var s = \\\"JavaScript\\\"; var a = s.match(r); \",\"使用十六进制需要添加“\\\\x”前缀，主要是为了避免语义混淆，而八进制则不需要添加前缀。\",\"示例 3\",\"ASCII 编码只能够匹配有限的单字节字符，使用 Unicode 编码可以表示双字节字符。Unicode 编码方式：“\\\\u”前缀加上 4 位十六进制值。\",\"var r = \\\"/\\\\u0061/\\\"; var s = \\\"JavaScript\\\"; var a = s.match(s); \",\"在 RegExp() 构造函数中使用元字符时，应使用双斜杠。\",\"var r = new RegExp(\\\"\\\\\\\\u0061\\\"); \",\"转义字符 \\\\\",\"RegExp() 构造函数的参数只接受字符串，而不是字符模式。在字符串中，任何字符加反斜杠还表示字符本身，如字符串“\\\\u”就被解释为 u 本身，所以对于“\\\\u0061”字符串来说，在转换为字符模式时，就被解释为“u0061”，而不是“\\\\u0061”，此时反斜杠就失去转义功能。解决方法：在字符 u 前面加双反斜杠。\"]},\"1382\":{\"h\":\"描述字符范围\",\"t\":[\"在正则表达式语法中，放括号表示字符范围。在方括号中可以包含多个字符，表示匹配其中任意一个字符。如果多个字符的编码顺序是连续的，可以仅指定开头和结尾字符，省略中间字符，仅使用连字符~表示。如果在方括号内添加脱字符^前缀，还可以表示范围之外的字符。例如：\",\"[abc]：查找方括号内任意一个字符。\",\"[^abc]：查找不在方括号内的字符。\",\"[0-9]：查找从 0 至 9 范围内的数字，即查找数字。\",\"[a-z]：查找从小写 a 到小写 z 范围内的字符，即查找小写字母。\",\"[A-Z]：查找从大写 A 到大写 Z 范围内的字符，即查找大写字母。\",\"[A-z]：查找从大写 A 到小写 z 范围内的字符，即所有大小写的字母。\",\"示例 1\",\"字符范围遵循字符编码的顺序进行匹配。如果将要匹配的字符恰好在字符编码表中特定区域内，就可以使用这种方式表示。\",\"匹配任意 ASCII 字符：\",\"var r = /[\\\\u0000-\\\\u00ff]/g; \",\"匹配任意双字节的汉字：\",\"var r = /[^\\\\u0000-\\\\u00ff]/g; \",\"匹配任意大小写字母和数字：\",\"var r = /[a-zA-Z0-9]/g; \",\"使用 Unicode 编码设计，匹配数字：\",\"var r = /[\\\\u0030-\\\\u0039]/g; \",\"使用下面字符模式可以匹配任意大写字母：\",\"var r = /[\\\\u0041-\\\\u004A]/g; \",\"使用下面字符模式可以匹配任意小写字母：\",\"var r = /[\\\\u0061-\\\\u007A]/g; \",\"示例 2\",\"在字符范围内可以混用各种字符模式。\",\"var s = \\\"abcdez\\\"; //字符串直接量 var r = /[abce-z]/g; //字符a、b、c，以及从e~z之间的任意字符 var a = s.match(r); //返回数组[\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"e\\\",\\\"z\\\"] \",\"示例 3\",\"在中括号内不要有空格，否则会误解为还要匹配空格。\",\"var r = /[0-9]/g; \",\"示例 4\",\"字符范围可以组合使用，以便设计更灵活的匹配模式。\",\"var s = \\\"abc4 abd6 abe3 abf1 abg7\\\"; //字符串直接量 var r = /ab[c-g][1-7]/g; //前两个字符为ab，第三个字符为从c到g，第四个字符为1~7的任意数字 var a = s.match(r); //返回数组[\\\"abc4\\\",\\\"abd6\\\",\\\"abe3\\\",\\\"abf1\\\",\\\"abg7\\\"] \",\"示例 5\",\"使用反义字符范围可以匹配很多无法直接描述的字符，达到以少应多的目的。\",\"var r = /[^0123456789]/g; \",\"在这个正则表达式中，将会匹配除了数字以外任意的字符。反义字符类比简单字符类的功能更强大和实用。\"]},\"1383\":{\"h\":\"选择匹配\",\"t\":[\"选择匹配类似于 JavaScript 的逻辑与运算，使用竖线|描述，表示在两个表达式分组的匹配结果中任选一个。例如：\",\"匹配任意数字或字母\",\"var r = /\\\\w+|\\\\d+/; \",\"可以定义多重选择模式。设计方法：在多个表达式分组之间加入选择操作符。\",\"var r = /(abc)|(efg)|(123)|(456)/; \",\"为了避免歧义，应该为选择操作的多个表达式分组加上小括号。\",\"示例\",\"设计对提交的表单字符串进行关键词过滤。先设计一个关键词列表，然后使用竖线把它们连接在一起，定义选择匹配模式，最后使用字符串的 replace() 方法把所有关键字符替换为可以显示的编码格式。代码如下：\"]},\"1384\":{\"h\":\"重复匹配\",\"t\":[\"在正则表达式语法中，定义了一组重复类量词，如表所示。它们定义了重复匹配字符的确数或约数。\",\"量词\",\"描述\",\"n+\",\"匹配任何包含至少一个 n 的字符串\",\"n\\\\*\",\"匹配任何包含零个或多个 n 的字符串\",\"n?\",\"匹配任何包含零个或一个 n 的字符串\",\"n{x}\",\"匹配包含 x 个 n 的序列的字符串\",\"n{x,y}\",\"匹配包含最少 x 个、最多 y 个 n 的序列的字符串\",\"n{x,}\",\"匹配包含至少 x 个 n 的序列的字符串\",\"示例\",\"下面结合示例进行演示说明，先设计一个字符串：\",\"var s = \\\"ggle gogle google gooogle goooogle gooooogle goooooogle gooooooogle goooooooogle\\\"; \",\"如果仅匹配单词 ggle 和 gogle，可以设计：\",\"var r = /go?gle/g; var a = s.match(r); \",\"量词?表示前面字符或表达式分组为可有可无，等效于：\",\"var r = /go{0,1}gle/g; var a = s.match(r); \",\"如果匹配第 4 个单词 gooogle，可以设计：\",\"var r = /go{3}gle/g; var a = s.match(r); \",\"等效于：\",\"var r = /gooogle/g; var a = s.match(r); \",\"如果匹配第 4 个到第 6 个之间的单词，可以设计：\",\"var r = /go{3,5}gle/g; var a = s.match(r); \",\"如果匹配所有单词，可以设计：\",\"var r = /go*gle/g; var a = s.match(r); \",\"量词*表示前面字符或表达式可以不出现，或者重复出现任意多次。等效于：\",\"var r = /go(0,)gle/g; var a = s.match(r); \",\"如果匹配包含字符“o”的所有词，可以设计：\",\"var r = /go+gle/g; var a = s.match(r); \",\"量词+表示前面字符或表达式分组至少出现 1 次，最多重复次数不限。等效于：\",\"var r = /go{1,}gle/g; var a = s.match(r); \",\"重复类量词总是出现在它们所作用的字符或表达式分组后面。如果想作用于多个字符，需要使用小括号把它们包裹在一起形成一个表达式分组。\"]},\"1385\":{\"h\":\"惰性匹配\",\"t\":[\"重复类量词都具有贪婪性，在条件允许的前提下，会匹配尽可能多的字符。\",\"?、{n} 和 {n,m} 重复类具有弱贪婪性，表现为贪婪的有限性。\",\"*、+ 和 {n,} 重复类具有强贪婪性，表现为贪婪的无限性。\",\"示例 1\",\"越是排在左侧的重复类量词匹配优先级越高。下面示例显示当多个重复类量词同时满足条件时，会在保证右侧重复类量词最低匹配次数基础上，使最左侧的重复类量词尽可能占有所有字符。\",\"var s = \\\"<html><head><title></title></head><body></body></html>\\\"; var r = /(<.*>)(<.*>)/ var a = s.match(r); //左侧表达式匹配\\\"<html><head><title></title></head><body></body></html>\\\" console.log(a[1])； console.log(a[2]); //右侧表达式匹配“</html>” \",\"与贪婪匹配相反，惰性匹配将遵循另一种算法：在满足条件的前提下，尽可能少的匹配字符。定义惰性匹配的方法：在重复类量词后面添加问号?限制词。贪婪匹配体现了最大化匹配原则，惰性匹配则体现最小化匹配原则。\",\"示例 2\",\"下面示例演示了如何定义匹配模式。\",\"var s = \\\"<html><head><title></title></head><body></body></html>\\\"; var r = /<.*?>/; var a = s.match(r); //返回单个元素数组[\\\"<html>\\\"] \",\"在上面示例中，对于正则表达式 /<.*?>/ 来说，它可以返回匹配字符串 \\\"<>\\\"，但是为了能够确保匹配条件成立，在执行中还是匹配了带有 4 个字符的字符串“html”。惰性取值不能够以违反模式限定的条件而返回，除非没有找到符合条件的字符串，否则必须满足它。\",\"针对 6 种重复类惰性匹配的简单描述如下：\",\"{n,m}?：尽量匹配 n 次，但是为了满足限定条件也可能最多重复 m 次。\",\"{n}?：尽量匹配 n 次。\",\"{n,}?：尽量匹配 n 次，但是为了满足限定条件也可能匹配任意次。\",\"??：尽量匹配，但是为了满足限定条件也可能最多匹配 1 次，相当于 {0,1}?。\",\"+?：尽量匹配 1 次，但是为了满足限定条件也可能匹配任意次，相当于 {1,}?。\",\"*? ：尽量不匹配，但是为了满足限定条件也可能匹配任意次，相当于 {0,}?。\"]},\"1386\":{\"h\":\"边界量词\",\"t\":[\"边界就是确定匹配模式的位置，如字符串的头部或尾部，具体说明如表所示。\",\"量词\",\"说明\",\"^\",\"匹配开头，在多行检测中，会匹配一行的开头\",\"$\",\"匹配结尾，在多行检测中，会匹配一行的结尾\",\"下面代码演示如何使用边界量词。先定义字符串：\",\"var s = \\\"how are you\\\"; \",\"匹配最后一个单词\",\"var r = /\\\\w+$/; var a = s.match(r); //返回数组[\\\"you\\\"] \",\"匹配第一个单词\",\"var r = /^\\\\w+/; var a = s.match(r); //返回数组[\\\"how\\\"] \",\"匹配每一个单词\",\"var r = /\\\\w+/g; var a = s.match(r); //返回数组[\\\"how\\\",\\\"are\\\",\\\"you\\\"] \"]},\"1387\":{\"h\":\"声明词量\",\"t\":[\"声明表示条件的意思。声明词量包括正向声明和反向声明两种模式。\"]},\"1388\":{\"h\":\"正向声明\",\"t\":[\"指定匹配模式后面的字符必须被匹配，但又不返回这些字符。语法格式如下：\",\"匹配模式 (?= 匹配条件)\",\"声明包含在小括号内，它不是分组，因此作为表达式分组。\",\"下面代码定义一个正前向生命的匹配模式。\",\"var s = \\\"one : 1; two : 2\\\"; var r = /\\\\w*(?==)/; //使用正前向声明，指定执行匹配必须满足的条件 var a = s.match(r); //返回数组[\\\"two\\\"] \",\"在上面示例中，通过?==锚定条件，指定只有在 \\\\w* 所能够匹配的字符后面跟随一个等号字符，才能够执行 \\\\w* 匹配。所以，最后匹配的字符串“two”，而不是字符串“one”。\"]},\"1389\":{\"h\":\"反向声明\",\"t\":[\"与正向声明匹配相反，指定接下来的字符都不必被匹配。语法格式如下：\",\"匹配模式(?! 匹配条件)\",\"下面代码定义一个反前向生命的匹配模式。\",\"var s = \\\"one : 1; two : 2\\\"; var r = /\\\\w*(?!=)/; //使用正前向声明，指定执行匹配不必满足的条件 var a = s.match(r); //返回数组[\\\"one\\\"] \",\"在上面示例中，通过?!=锚定条件，指定只有在“\\\\w*”所能够匹配的字符后面不跟随一个等号字符，才能够执行 \\\\w*匹配。所以，最后匹配的是字符串“one”，而不是字符串“two”。\"]},\"1390\":{\"h\":\"表达式分组\",\"t\":[\"使用小括号可以对字符模式进行任意分组，在小括号内的字符串表示为表达式分组。表达式分组具有独立的匹配功能，保存独立的匹配结果；同时，小括号后的量词将会作用于整个表达式分组。\",\"通过分组可以在一个完整的字符模式中定义一个或多个表达式分组。当正则表达式成功地匹配目标字符串后，也可以从目标字符串中抽出与表达式分组相匹配的子内容。\",\"示例\",\"在下面代码中，不仅能匹配出每个变量声明，同时还抽出每个变量及其值。\",\"var s = \\\"ab=21, bc=45, cd=43\\\"; var r = /(\\\\w+)=(\\\\d*)/g; while ((a = r.exec(s))) { console.log(a); //返回类似[\\\"ab=21\\\",\\\"bc=45\\\",\\\"cd=43\\\"]三个数组 } \"]},\"1391\":{\"h\":\"反向引用\",\"t\":[\"在字符模式中，后面的字符可以引用前面的表达式分组。实现方法如下：\",\"+ 数字\",\"数字指定了表达式分组在字符模式中的顺序。如“\\\\1”引用的是第 1 个表达式分组，“\\\\2”引用的是第 2 个表达式分组。\",\"示例 1\",\"在下面代码中，通过引用前面表达式分组匹配的文本，实现成组匹配字符串。\",\"var s = \\\"<h1>title<h1><p>text<p>\\\"; var r = /(<\\\\w+>\\\\w+<\\\\/?\\\\w+>)|1/g; var a = s.match(r); //返回数组[\\\"<h1>title<h1>\\\",\\\"<p>text<p>\\\"] \",\"由于表达式分组可以相互嵌套，它们的顺序将根据左括号的顺序来确定。例如，下面示例定义匹配模式包含多个表达式分组。\",\"var s = \\\"abc\\\"; var r = /(a(b(c)))/; var a = s.match(r); //返回数组[\\\"abc\\\",\\\"abc\\\",\\\"bc\\\",\\\"c\\\"] \",\"在这个模式中，共产生了 3 个反向引用，第一个是“(a(b(c)))”，第二个是“(b(c))”，第三个是“(C)”。它们引用的匹配文本分别是字符串“abc”、“bc”和“c”。\",\"对表达式分组的引用，是指引用前面表达式分组所匹配的文本，而不是表达式分组的匹配模式。如果要引用前面表达式分组的匹配模式，则必须使用下面方式，只有这样才能够达到匹配目的。\",\"var s = \\\"<h1>title</h1><p>text</p>\\\"; var r = /(<\\\\w+>\\\\w+<\\\\/?\\\\w+>).*(<\\\\w+>\\\\w+<\\\\/?\\\\w+>)/g; var a = s.match(r); //返回数组[\\\"<h1>title</h1>\\\",\\\"<p>text</p>\\\"] \",\"反向引用在开发中主要有以下几种常规用法。\",\"示例 2\",\"在正则表达式对象的 test() 方法中，以及字符串对象的 match() 和 search() 等方法中使用。在这些方法中，反向引用的值可以从 RegExp() 构造函数中获得。\",\"var s = \\\"abcdefghijklmn\\\"; var r = /(\\\\w)(\\\\w)(\\\\w)/; r.test(s); console.log(RegExp.$1); //返回第1个表达式分组匹配的字符a console.log(RegExp.$2); //返回第2个表达式分组匹配的字符b console.log(RegExp.$3); //返回第3个表达式分组匹配的字符c \",\"通过上面示例可以看到，正则表达式执行匹配检测后，所有表达式分组匹配的文本都被分组存储在 RegExp() 构造函数的属性内，通过前缀符号$与正则表达式中表达式分组的编号来引用这些临时属性。其中属性 $1 标识符指向第 1 个值引用，属性 $2 标识符指向第 2 个值引用。\",\"示例 3\",\"可以直接在定义的字符模式中包含反向引用。这可以通过使用特殊转义序列（如 \\\\1、\\\\2 等）来实现。\",\"var s = \\\"abcbcacba\\\"; var r = /(\\\\w)(\\\\w)(\\\\w)\\\\2\\\\3\\\\1\\\\3\\\\2\\\\1/; var b = r.test(s); //验证正则表达式是否匹配该字符串 console.log(b); //返回true \",\"在上面示例的正则表达式中，“\\\\1”表示对第 1 个反向引用 (\\\\w) 所匹配的字符 a 进行引用，“\\\\2”表示对第 2 个反向引用 (\\\\w) 所匹配的字符串 b 进行引用，“\\\\3”表示对第 3 个反向引用 (\\\\w) 所匹配的字符 c 进行引用。\",\"示例 4\",\"可以在字符串对象的 replace() 方法中使用。通过使用特殊字符序列$1、$2、$3 等来实现。例如，在下面的示例中将颠倒相邻字母和数字的位置。\",\"var s = \\\"aa11bb22c3d4e5f6\\\"; var r = /(\\\\w+?)(\\\\d+)/g; var b = s.replace(r, \\\"$2$1\\\"); console.log(b); //返回字符串“aa11bb22c3 d4e5f6” \",\"在上面例子中，正则表达式包括两个分组，第 1 个分组匹配任意连续的字母，第 2 个分组匹配任意连续的数字。在 replace() 方法的第 2 个参数中，$1 表示对正则表达式中第 1 个表达式分组匹配文本的引用，而 $2 表示对正则表达式中第 2 个表达式分组匹配文本的引用，通过颠倒 $1 和 $2 标识符的位置，即可实现字符串的颠倒来替换原字符串。\"]},\"1392\":{\"h\":\"禁止引用\",\"t\":[\"反向引用会占用一定的系统资源，在较长的正则表达式中，反向引用会降低匹配速度。如果分组仅仅是为了方便操作，可以禁止反向引用。\",\"实现方法：在左括号的后面加上一个问号和冒号。\",\"var s1 = \\\"abc\\\"; var r = /(?:\\\\w*?)|(?:\\\\d*?)/; var a = r.test(s1); \",\"非引用型分组必须使用表达式分组，但是又不希望存储无用的匹配信息，或者希望提高匹配速度来说，是非常重用的方法。\"]},\"1393\":{\"h\":\"高阶面向对象\"},\"1394\":{\"h\":\"值类型和引用类型\"},\"1395\":{\"h\":\"判断方式\",\"t\":[\"typeof 判断值类型\",\"instanceof 判断引用类型\"]},\"1396\":{\"h\":\"存储机制\",\"t\":[\"基本数据类型存放于栈内存。在 JS 中用于在编译器和内存中保存变量、方法调用。\",\"引用类型存放于堆内存。它的赋值是堆内存地址的引用（指针）， 所以两个变量指向的还是同一个对象，对任何一个的操作都会相互的影响。（浅拷贝概念）。\"]},\"1397\":{\"h\":\"实例对象创建方法\",\"t\":[\"1.new 操作符 + 2.对象字面量表示\"]},\"1398\":{\"h\":\"代码块解析\",\"t\":[\"对于采用大括号表示的语句，JS 一律解释为代码块。\",\"在大括号外加上圆括号，解释为对象。\"]},\"1399\":{\"h\":\"静态方法\"},\"1400\":{\"h\":\"点表示法和方括号表示法\",\"t\":[\"方括号表示法总是能代替点表示法,但点表示法却不一定能全部代替方括号表示法。\",\"方括号表示法可以用变量名作为属性名,点表示法不能。\",\"方括号表示法可以用纯数字为属性名,点表示法不能。\",\"方括号表示法可以用打空格的字符串为属性名,点表示法不能。\"]},\"1401\":{\"h\":\"in 运算符\",\"t\":[\"in 运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回 true， 否则返回 false。它的左边是一个字符串，表示属性名，右边是一个对象。\"]},\"1402\":{\"h\":\"hasOwnProperty\",\"t\":[\"hasOwnProperty(propertyName)方法 是用来检测属性是否为对象的自有属性，如果是，返回 true，否者 false; 参数 propertyName 指要检测的属性名； 用法：object.hasOwnProperty(propertyName) // true/false\",\"hasOwnProperty() 方法是 Object 的原型方法（也称实例方法），它定义在 Object.prototype 对象之上，所有 Object 的实例对象都会继承 hasOwnProperty() 方法。\",\"hasOwnProperty() 只会检查对象的自有属性，对象原形上的属性其不会检测；但是对于原型对象本身来说，这些原型上的属性又是原型对象的自有属性，所以原形对象也可以使用 hasOwnProperty()检测自己的自有属性；\"]},\"1403\":{\"h\":\"属性遍历\",\"t\":[\"它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。\",\"它不仅遍历对象自身的属性，还遍历继承的属性。\",\"如果继承的属性是可遍历的，那么就会被 for...in 循环遍历到。但是，一般情况下，都是只想遍 历对象自身的属性，所以使用 for...in 的时候，应该结合使用 hasOwnProperty 方法，在循环内部判 断一下，某个属性是否为对象自身的属性。\"]},\"1404\":{\"h\":\"属性查看\",\"t\":[\"查看一个对象本身的所有属性，可以使用 Object.keys 方法。该方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for...in 循环遍历该对象时返回的顺序一致。\"]},\"1405\":{\"h\":\"属性名获取\",\"t\":[\"返回一个数组，该数组对元素是 obj 自身拥有的枚举或不可枚举属性名称字符串。\",\"var arr = [\\\"a\\\", \\\"b\\\", \\\"c\\\"]; console.log(Object.getOwnPropertyNames(arr).sort()); // [\\\"0\\\", \\\"1\\\", \\\"2\\\", \\\"length\\\"] // 类数组对象 var obj = { 0: \\\"a\\\", 1: \\\"b\\\", 2: \\\"c\\\" }; console.log(Object.getOwnPropertyNames(obj).sort()); // [\\\"0\\\", \\\"1\\\", \\\"2\\\"] // 使用 Array.forEach 输出属性名和属性值 Object.getOwnPropertyNames(obj).forEach(function (val, idx, array) { console.log(val + \\\" -> \\\" + obj[val]); }); // 输出 // 0 -> a // 1 -> b // 2 -> c //不可枚举属性 var my_obj = Object.create( {}, { getFoo: { value: function () { return this.foo; }, enumerable: false, }, } ); my_obj.foo = 1; console.log(Object.getOwnPropertyNames(my_obj).sort()); // [\\\"foo\\\", \\\"getFoo\\\"] \"]},\"1406\":{\"h\":\"属性删除\",\"t\":[\"delete 命令删除对象 obj 的 p 属性。删除后，再读取 p 属性就会返回 undefined，而且 Object.keys 方法的返回值也不再包括该属性。\",\"注意：\",\"删除一个不存在的属性，delete 不报错，而且返回 true。\",\"delete 命令只能删除对象本身的属性，无法删除继承的属性。\"]},\"1407\":{\"h\":\"get&set\",\"t\":[\"对象中有 get 和 set 方法，在读取和设定值的时候触发。vue 中的数据绑定就是通过这个来实现的。\",\"直接在对象内使用\",\"get 用法：\",\"var user = { info: { name: \\\"张三\\\", }, get name() { return this.info.name; }, }; console.log(user.info.name); // '张三' console.log(user.name); // '张三' \",\"作用：\",\"在对象内属性嵌套层级过多时，可以直接在对象下读取到对应属性，简化调用；\",\"在 get 时可以任意设置属性名，可以不暴露组件内部属性名。\",\"set 用法：\",\"var user = { info: { name: \\\"张三\\\", }, set name(val) { console.log(\\\"我改名了\\\"); this.info.name = val; }, }; console.log(user.name); // '张三' user.name = \\\"李四\\\"; // '我改名了' console.log(user.name); // '李四' \",\"作用：\",\"在对象内属性嵌套层级过多时，可以直接在对象下设置到对应属性，简化层级；\",\"set 方法内的逻辑在赋值时会自动执行，可以监听属性值的改变\",\"使用 Object.defineProperty()\",\"方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\",\"Object.defineproperty( object，‘ propName ’ ，descriptor)；\",\"参数：\",\"object ：要定义或修改属性的对象；\",\"propName ：要定义或修改的属性的名称；\",\"descriptor：要定义或修改的属性描述符。\",\"descriptor四个属性：\",\"value：设置属性的值，默认undefined\",\"writable：值是否可重写。默认false\",\"enumerable：目标属性是否可以被枚举。默认false\",\"configurable：目标属性是否可以被删除或是否可以再次修改特性。默认false\",\"var user = { user_name: \\\"张三\\\", }; Object.defineProperty(user, \\\"name\\\", { get() { return user.user_name; }, set(val) { console.log(\\\"我改名了\\\"); user.user_name = val; }, }); console.log(user.name); // '张三' user.name = \\\"王二\\\"; // '我改名了' console.log(user.name); // '王二' console.log(user.user_name); // '王二' \",\"作用： set 方法可以监听对应属性值的改变，vue 的数据动态绑定就是通过这个方法实现的，监听到 vue 实例中的 data 属性发生改变时，在 set 方法中触发模版重新渲染逻辑。\",\"使用 Object.defineProperties()\",\"var user = { name: \\\"张三\\\", }; Object.defineProperties(user, { nameGet: { value: function () { console.log(\\\"读取\\\"); return this.name; }, }, nameSet: { value: function (name) { console.log(\\\"设置\\\"); this.name = name; }, }, }); console.log(user.nameGet); // '读取' '张三' user.nameSet = \\\"王二\\\"; // '设置' console.log(user.nameSet); // '王二' \",\"作用： 和方法 1 直接在对象中设置效果和原理相似\"]},\"1408\":{\"h\":\"其他静态方法\",\"t\":[\"（1）对象属性模型的相关方法\",\"Object.getOwnPropertyDescriptor()：获取某个属性的描述对象。\",\"Object.defineProperty()：通过描述对象，定义某个属性。\",\"Object.defineProperties()：通过描述对象，定义多个属性。\",\"（2）控制对象状态的方法\",\"Object.preventExtensions()：防止对象扩展。\",\"Object.isExtensible()：判断对象是否可扩展。\",\"Object.seal()：禁止对象配置。\",\"Object.isSealed()：判断一个对象是否可配置。\",\"Object.freeze()：冻结一个对象。\",\"Object.isFrozen()：判断一个对象是否被冻结。\",\"（3）原型链相关方法\",\"Object.create()：该方法可以指定原型对象和属性，返回一个新的对象。\",\"Object.getPrototypeOf()：获取对象的 Prototype 对象。\"]},\"1409\":{\"h\":\"实例方法\"},\"1410\":{\"h\":\"toString & valueOf\",\"t\":[\"js 中一切皆对象，Number、string、boolean 都有 tostring 和 valueof，但是 null 和 undefined 没有。\",\"toString()\",\"返回一个表示该对象的字符串。\",\"每个对象都有一个 toString() 方法，当对象被表示为文本值时或者当以期望字符串的方式引用 对象时，该方法被自动调用。\",\"valueOf()\",\"返回指定对象的原始值\",\"调用 valueOf() 方法用来把对象转换成原始类型的值（数值、字符串和布尔值） 默认情况下, valueOf() 会被每个实例对象（Object）继承。\",\"toString()和 valueOf()同时存在\",\"函数\",\"当函数 fn 用+连接一个字符串或者是数字的时候，如果我们没有重新定义 valueOf 和 toString， 其隐式转换会调用默认的 toString()方法，将函数本身内容作为字符串返回； 如果我们自己重新定义 toString/valueOf 方法，那么其转换会按照我们的定义来，其中 valueOf 比 toString 优先级更高。\",\"对象/数组\",\"和函数结果一样。\",\"Date\",\"默认调用 toString()。字符串拼接调用 toString\",\"涉及数值类型类型转换调用 valueOf()。\"]},\"1411\":{\"h\":\"总结\",\"t\":[\"toString：所有方法均可调用，自动调用。可覆盖。\",\"valueOf：如果对象没有原始值，返回对象本身。\",\"同时存在：默认 toString，覆盖时 valueOf 优先级更高。\",\"特殊情况：alert() []调用 toString date()\"]},\"1412\":{\"h\":\"数据类型转换\"},\"1413\":{\"h\":\"强制转换\",\"t\":[\"Number\",\"Number：原值\",\"String：\",\"1.可以被解析为数值，则转为数值；否则 NaN\",\"2.空字符串转为 0\",\"Boolean：true 为 1，false 为 0\",\"undefined：NaN\",\"null：0\",\"Object：Number 方法的参数是对象时，返回 NaN，除非对象为单元素数值数组 [10]。\",\"转换规则：\",\"1）调用对象自身的 valueOf 方法。如果返回原始类型的值，则直接对该值使用 Number 函数， 不再进行后续步骤。\",\"2）如果 valueOf 方法返回的还是对象，则改为调用对象自身的 toString 方法。如果 toString 方法返回原始类型的值，则对该值使用 Number 函数，不再进行后续步骤。\",\"3）如果 toString 方法返回的是对象，就报错。\",\"特有 toString 方法\",\"1）toString 方法可以接受一个参数，表示输出的进制。\",\"2）数字调用 tostring 要加括号（这样表明后面的点表示调用对象属性）, 不加括号，这个点 会被 JavaScript 引擎解释成小数点，从而报错。\",\"3）只要能让 JavaScript 引擎 不混淆小数点和对象的点运算符，各种写法都能用。\",\"String\",\"1.原始类型\",\"不解释\",\"2.对象\",\"对象，返回一个类型字符串；数组，返回该数组的字符串形式。\",\"转换规则：\",\"1）先调用对象自身的 toString 方法。如果返回原始类型的值，则对该值使用 String 函数，不 再进行以下步骤。\",\"2）如果 toString 方法返回的是对象，再调用原对象的 valueOf 方法。如果 valueOf 方法返回原 始类型的值，则对该值使用 String 函数，不再进行以下步骤。\",\"3）如果 valueOf 方法返回的是对象，就报错。\",\"Boolean\",\"undefined null -0 +0 NaN \\\"\\\"（空串） 全为 false\",\"其他全为 true\",\"所有对象（包括空对象）转换结果都是 true\"]},\"1414\":{\"h\":\"自动转换\",\"t\":[\"不同类型数据互相运算。\",\"非布尔值类型数据求布尔值。\",\"非数值类型的值使用一元运算符（+ - ）。\",\"自动转换规则：\",\"预期什么类型的值，就调用该类型的转换函数。\",\"自动转换为布尔值\",\"JavaScript 遇到预期为布尔值的地方（比如 if 语句的条件部分），就会将非布尔值的参数自动 转换为布尔值。系统内部会自动调用 Boolean 函数。\",\"自动转换为字符串\",\"遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。\",\"先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串。\",\"自动转换为数值\",\"遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用 Number 函数。 除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。\",\"null 转数值为 0，undefined 转数值为 0\"]},\"1415\":{\"h\":\"基本包装类型\",\"t\":[\"对象是 JavaScript 语言最主要的数据类型，在 js 中三种原始类型的值——数值、字符串、布 尔值——在一定条件下，也会转为对象，也就是原始类型的“包装对象”（wrapper）。\",\"所谓“包装对象”，指的是与数值、字符串、布尔值分别相对应的 Number、String、Boolean 三 个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。\",\"在读取字符串、数字和布尔值的属性值或方法（实际上是 它们对应包装对象的属性值或方法）表现的像对象一样。但是如果你试图给属性赋值，则会忽略这 个操作：修改只是发生在临时对象身上，而这个临时对象并不会继续保留下来，意思是不允许对包 装对象 设置属性，他的属性是只读的比如 length。\"]},\"1416\":{\"h\":\"设计目的\",\"t\":[\"首先是使得“对象”这种类型可以覆盖 JavaScript 所有的值，整门语言有一个通用的数据模型， 其次是使得原始类型的值也有办法调用自己的方法。\"]},\"1417\":{\"h\":\"实例方法\",\"t\":[\"数值的自定义方法，只能定义在它的原型对象 Number.prototype 上面，数值本身是无法自定义属性的。\",\"valueOf() toString()\"]},\"1418\":{\"h\":\"原始类型与实例对象自动转换\",\"t\":[\"某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法。这时， JavaScript 引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。\"]},\"1419\":{\"h\":\"执行机制分析\",\"t\":[\"JS 引擎的执行过程，分为三个阶段：\",\"语法分析 → 预编译阶段 → 执行阶段\",\"说明：浏览器先按照 js 的顺序加载< script >标签分隔的代码块，js 代码块加载完毕之后，立刻进入 到上面的三个阶段，然后再按照顺序找下一个代码块，再继续执行三个阶段，无论是外部脚本文件 （不异步加载）还是内部脚本代码块，都是一样的，并且都在同一个全局作用域中。\"]},\"1420\":{\"h\":\"语法分析\",\"t\":[\"js 的代码块加载完毕之后，会首先进入到语法分析阶段，该阶段的主要作用： 分析该 js 脚本代码块的语法是否正确，如果出现不正确会向外抛出一个语法错误 （syntaxError），停止该 js 代码的执行，然后继续查找并加载下一个代码块；如果语法正确，则 进入到预编译阶段。\"]},\"1421\":{\"h\":\"预编译阶段\",\"t\":[\"js 代码块通过语法分析阶段之后，语法都正确的下回将进入预编译阶段。\"]},\"1422\":{\"h\":\"1.运行环境\",\"t\":[\"运行环境分类：1.全局环境；2、函数环境；3、eval 环境（不建议使用）。\",\"每进入到一个不同的运行环境都会创建 一个相应的执行上下文（execution context），那么 在一段 js 程序中一般都会创建多个执行上下文，js 引擎会以栈的数据结构对这些执行进行处理，形 成函数调用栈（call stack），栈底永远是全局执行上下文（global execution context），栈顶则 永远是当前的执行上下文。\"]},\"1423\":{\"h\":\"2.执行环境\",\"t\":[\"栈数据结构\",\"先进后出、后进先出。\",\"EC 执行环境（执行上下文）Execution Context\",\"创建变量对象 → 创建作用域链 → 确定 this 指向。\",\"变量对象 VO（Variable Object）\",\"过程：\",\"创建 arguments 对象 → 检查 function 函数声明创建属性 → 检查 var 变量声明创建属性\",\"1、 创建 arguments 对象，检查当前上下文的参数，建立该对象的属性与属性值，仅在函数环境 （非箭头函数）中进行的，全局环境没有此过程。\",\"2、 检查当前上下文的函数声明，按照代码顺序查找，将找到的函数提前声明，如果当前上下文的 变量对象没有该函数名属性，则在该变量对象以函数名建立一个属性，属性值则指向该函数所在堆 内存地址引用，如果存在，则会被新的引用覆盖掉。\",\"3、 检查当前上下文的变量声明，按照代码顺序查找，将找到的变量提前声明，如果当前上下文的 变量对象没有变量名属性，则在该变量对象以变量名建立一个属性，属性值为 undefined；如果存 在，则忽略该变量声明。\",\"说明：在全局环境中，window 对象就是全局执行上下文的变量对象，所有的变量和函数都是 window 对象的属性方法。\",\"函数声明提前和变量声明提升是在创建变量对象中进行的，且函数声明优先级高于变量声明\",\"scope 属性 指向作用域\",\"作用域链由当前执行环境的变量对象（未进入到执行阶段前）与上层环境的一系列活动对象组成， 保证了当前执行环境对符合访问权限的变量和函数有序访问。\",\"1、 作用域链的第一项永远是当前作用域（当前上下文的变量对象或者活动对象）；\",\"2、 最后一项永远是全局作用域（全局上下文的活动对象）；\",\"3、 作用域链保证了变量和函数的有序访问，查找方式是沿着作用域链从左至右查找变量或者函 数，找到则会停止找，找不到则一直查找全局作用域，再找不到就会排除错误。\",\"this 指针\",\"1、 在全局环境下，全局执行的上下文中变量对象的 this 属性指向为 window；\",\"2、 在函数环境下的 this 指向比较灵活，需要根据执行环境和执行方法确定，列举典型例子来分析\",\"执行环境栈（Execution Context Stack）\",\"当一个脚本第一次执行的时候，js 引擎会解析这段代码，并将其中的同步代码按照执行顺序加 入执行栈中，然后从头开始执行。如果当前执行的是一个方法，那么 js 会向执行栈中添加这个方法 的执行环境，然后进入这个执行环境继续执行其中的代码。当这个执行环境中的代码 执行完毕并返 回结果后，js 会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境。。这个过程 反复进行，直到执行栈中的代码全部执行完毕。\",\"AO 激活对象（Active Object）\",\"有了变量对象存每个上下文中的东西，但是它什么时候能被访问到呢？就是每进入一个执行上 下文时，这个执行上下文儿中的变量对象就被激活，也就是该上下文中的 函数标示符、形参 arguments、变量声明等就可以被访问到了。\",\"其实变量对象和激活对象都是一个东西，只是变量对象是全局，激活对象是函数内部。\"]},\"1424\":{\"h\":\"执行环境的作用\",\"t\":[\"除此之外，在 js 代码的任何位置打印 this，它总是有值的，尽管大多数情况下 this 都指向 window 对象(this 的具体指向以后会提到)，这说明 this 也是在执行环境中就准备好的。\",\"现在能清楚执行环境中准备了哪些东西了。\",\"变量声明、函数声明、arguments（函数体）、this，以上内容都会被保存在变量对象中。由此可见，执行环境的作用就是生成一个变量对象，将代码执行过程中可能用到的所有变量都提前准备好。\"]},\"1425\":{\"h\":\"执行流和执行环境\",\"t\":[\"JS 执行流其实是一个压栈出栈的过程——执行上下文栈\",\"执行环境\",\"1．JavaScript 执行在单线程上，所有的代码都是排队执行。\",\"2．一开始浏览器执行全局的代码时，首先创建全局的执行上下文，压入执行栈的顶部。\",\"3．每当进入一个函数的执行就会创建函数的执行上下文，并且把它压入执行栈的顶部。当前函数执行完成后，当前函数的执行上下文出栈，并等待垃圾回收。\",\"4．浏览器的 JS 执行引擎总是访问栈顶的执行上下文。\",\"5．全局上下文只有唯一的一个，它在浏览器关闭时出栈。\"]},\"1426\":{\"h\":\"执行环境的生命周期\",\"t\":[\"总生命周期：创建 → 执行 → 出栈等待销毁\",\"创建阶段：\",\"创建作用域链\",\"创建变量对象 AO：初始化函数参数 arguments→ 初始化函数声明 → 初始化变量。\",\"执行阶段：执行变量赋值、代码执行。\",\"回收阶段：执行上下文出栈等待，回收执行。\",\"执行环境生命周期\"]},\"1427\":{\"h\":\"执行阶段\"},\"1428\":{\"h\":\"解释阶段\",\"t\":[\"词法分析：JavaScript 中在调用函数的那一瞬间之前，会先进行词法分析（当函数调用的前一瞬间， 会先形成一个激活对象：Avtive Object（AO），并进行分析）。\",\"JS 词法分析分为 3 个步骤：\",\"1.分析形参 →2.分析变量声明 →3.分析函数声明\",\"作用域规则确定：判断一个变量是什么时，根据它定义时的作用域，代码在解释阶段就要确定好。\"]},\"1429\":{\"h\":\"执行阶段\",\"t\":[\"创建执行上下文 → 执行函数代码 → 垃圾回收\",\"JS 代码整体运行分为两个阶段：词法分析期和运行期。在 JS 代码自上而下执行前，会有一个“词法分析过程”。\",\"词法分析主要有 3 个步骤：分析函数参数、分析变量声明、分析函数声明。\",\"具体步骤：\",\"1.分析函数参数\",\"将函数的参数添加为 AO 属性，属性默认值为 undefined。\",\"接收函数的实参，覆盖原属性值。\",\"2.分析变量声明/分析局部变量\",\"若 AO 中不存在与声明的变量所对应的属性，则添加 AO 属性为 undefined。\",\"若 AO 中已存在与声明的变量所对应的属性，则不做任何修改。\",\"3.若 AO 中存在与函数名所对应的属性，则覆盖原属性为一个函数表达式。\"]},\"1430\":{\"h\":\"Class 类\"},\"1431\":{\"h\":\"继承\",\"t\":[\"（1）class 关键字创建，首字母大写\",\"（2）构造函数（有参）：constructor()\",\"（3）constructor 不写也会自动生成。new 的时候自动调用\",\"（4）生成实例 new 不能省略。\",\"（5）注意语法规范，创建类，类名后面不要加小括号。实例后面加小括号，构造函数不需要 function。\"]},\"1432\":{\"h\":\"类的继承\",\"t\":[\"子类可继承父类构造方法之外的方法\",\"super()：访问和调用对象父类的函数，可以调用父类的构造函数也可以调用普通函数。\"]},\"1433\":{\"h\":\"方法重写\",\"t\":[\"指继承父类的子类将父类的同名方法重写为子类独有方法\",\"class Person { constructor(name, age) { this.name = name; this.age = age; } say() { return \\\"我的名字是\\\" + this.name; } set birth(value) { this._birth = `${value}-`; } get birth() { return this._birth; } } class Animal extends Person { // 继承拿到所有Person的属性 constructor(name, age) { super(name, age); // 继承name this.age1 = age; // 通过继承的属性新建一个属性 } say() { // 重写say这个函数 return \\\"My name is\\\" + this.name; } } const animal = new Animal(\\\"嘻嘻\\\", 5); // 实例化对象并赋值 const person = new Person(\\\"哈哈\\\", 11); console.log(\\\"animal\\\", animal); console.log(\\\"person\\\", person); person.birth = 123; // 相当于用set赋值 console.log(\\\"birth\\\", person.birth); // get拿到值 console.log(\\\"birth\\\", person.say); console.log(\\\"birth\\\", animal.say); \"]},\"1434\":{\"h\":\"super\",\"t\":[\"super 作为函数使用，代表父类的构造函数，只能用在子类的构造函数中；\",\"super 作为对象使用，在普通方法之中指向父类的原型对象，在静态方法之中指向父类；在普通方法中调用父类方法，super 内部的 this 指向子类的实例，在静态方法中指向子类。\"]},\"1435\":{\"h\":\"本质\",\"t\":[\"类的本质还是 function，也可以简单认为类就是构造函数另一种写法。\",\"1.类有原型对象 prototype\",\"2.类原型对象 prototype 里面有 constructor 指向类本身\",\"3.类可以通过原型对象添加方法\",\"4.类创建的实例对象有__proto__原型指向类的原型对象\",\"ES6 类其实就是语法糖（一种便捷写法，简单理解，有两种方法可以实现同样的功能，更加清晰方便的方法就是语法糖）\"]},\"1436\":{\"h\":\"构造函数\",\"t\":[\"构造函数习惯首字母大写\",\"构造函数和普通函数区别就是调用方式不同，普通函数是直接调用，而构造函数需要 new 来调用。\",\"执行流程：\",\"立刻创建一个新对象 → 新建对象设置为 this→ 逐行执行函数中的代码 → 将新建对象返回\",\"instance of 与 java 一致，所有对象都是 Object 的后代。\",\"方法理解：\",\"在 Person 构造函数中，为每一个对象都添加了一个方法，构造函数每执行一次就会创建一个新的方法，所有实例的方法都是唯一的。\",\"重点：函数体写在对象内部 or 全局作用域\",\"1.首字母大写\",\"2.和 new 一起使用\",\"function Man(name) { this.name = name; this.age = 18; } var man = new Man(\\\"张三\\\"); // 创建一个name名为张三的构造函数Man \"]},\"1437\":{\"h\":\"实例成员和静态成员\",\"t\":[\"实例成员就是构造函数内部通过 this 添加的成员。只能通过实例化的对象访问。\",\"静态成员是指在构造函数本身上添加的成员，只能通过构造函数访问。不能通过对象访问。\"]},\"1438\":{\"h\":\"构造函数原型 prototype\",\"t\":[\"我们所创建的每一个函数，解析器都会向函数中添加一个属性 prototype。这个属性对应着一个对象，这个对象就是我们所谓的原型对象。\",\"1.作为普通函数调用 prototype 没有任何作用。\",\"2.以构造函数调用，创建对象中隐含属性指向该构造函数的原型对象，通过 __proto__ 来访问该属性。\",\"3.当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果没有则在原型对象中寻找，如果找到则直接使用。如果原型中没有则去原型的原型中寻找，直到找到 Object 的原型，Object 的原型没有原型，如果在 Object 中仍然没有找到，则返回 undefined。\",\"4.创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有属性和方法。\"]},\"1439\":{\"h\":\"对象原型 __proto__\",\"t\":[\"对象有一个属性__proto__，指向 prototype 原型对象。\",\"__proto__对象原型和原型对象 prototype 等价\",\"__proto__对象原型的意义在于为对象的查找机制提供一个方向，但属于非标准属性，实际开发中不可以使用这个属性，它只是指向原型对象 prototype。\"]},\"1440\":{\"h\":\"constructor 构造函数\",\"t\":[\"在 JavaScript 中, constructor 属性返回对象的构造函数。\",\"返回值是函数的引用，不是函数名：\",\"JavaScript 数组 constructor 属性返回 function Array() { [native code] }\",\"JavaScript 数字 constructor 属性返回 function Number() { [native code] }\",\"JavaScript 字符串 constructor 属性返回 function String() { [native code] }\",\"如果一个变量是数组你可以使用 constructor 属性来定义。\"]},\"1441\":{\"h\":\"原型链（重要）\",\"t\":[\"原型对象三角关系\",\"原型链\"]},\"1442\":{\"h\":\"成员查找规则\",\"t\":[\"当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。\",\"如果没有就查找它的原型（也就是 __ proto __ 指向的 prototype 原型对象）。\",\"如果还没有就查找原型对象的原型（Object 的原型对象）。\",\"以此类推一直找到 Object 为止（null）。\",\"__ proto __ 对象原型的意义在于为对象成员查找机制提供方向。\"]},\"1443\":{\"h\":\"扩展内置对象须知\",\"t\":[\"数组和字符串内置对象不能给原型对象覆盖操作Array.prototype = {}，只能是Array.prototype.xxx = function() {}的方式。\"]},\"1444\":{\"h\":\"函数进阶\"},\"1445\":{\"h\":\"调用方式\",\"t\":[\"普通函数、对象方法、构造函数、绑定时间函数、定时器函数、立即执行函数。\"]},\"1446\":{\"h\":\"this 指向（重要）\",\"t\":[\"调用方式\",\"this 指向\",\"普通函数调用\",\"window\",\"构造函数调用\",\"实例对象，原型对象里面的方法也指向实例对象\",\"对象方法调用\",\"该方法所属对象\",\"事件绑定方法\",\"绑定事件对象\",\"定时器函数\",\"window\",\"立即执行函数\",\"window\",\"解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含参数就是 this，this 指向的是一个对象，这个对象称为函数执行的上下文对象。根据函数的调用方式不同，this 会指向不同对象。\",\"1.以函数的形式调用时，this 永远都是 window；2.以方法的形式调用时，this 就是调用方法的那个对象\",\"2.this 适用于函数作为某个对象的方法存在时使用，用于表示该对象。\",\"3.使用工厂方法批量创建对象，使用的构造函数都是 Object，导致我们无法区分多种不同类型对象。\",\"this 总结\",\"1.当以函数形式调用时，this 就是 window。\",\"2.当以方法的形式调用时，谁调用方法 this 就是谁\",\"3.当以构造函数形式调用时，this 就是新创建的那个对象。\"]},\"1447\":{\"h\":\"改变 this 指向\"},\"1448\":{\"h\":\"call\",\"t\":[\"call()方法调用一个函数，简单理解为一次函数的立即调用，但它可以改变函数的 this 指向。\",\"fun.call(thisArg, arg1, arg2, ...) // 第二个参数开始表示执行该函数传递的参数 \",\"thisArg：在 fun 函数运行时执行的 this 值\",\"arg1, arg2：传递的其他参数\",\"返回值就是函数的返回值，因为它就是一次函数调用\"]},\"1449\":{\"h\":\"apply\",\"t\":[\"apply()方法调用一个函数，简单理解为一次函数的立即调用，但它可以改变函数的 this 指向。\",\"fun.apply(thisArg, [argsArray]); \",\"thisArg：在 fun 函数运行时指定的 this 对象\",\"argsArray：传递的参数，必须以数组形式呈现\",\"返回值就是函数的返回值，因为它就是一次函数调用\"]},\"1450\":{\"h\":\"bind\",\"t\":[\"bind()方法不会调用函数，但是能改变函数内部 this 指向\",\"fun.bind(thisArg, arg1, arg2. ...) \",\"thisArg：在 fun 函数运行时执行的 this 值\",\"arg1, arg2：传递的其他参数\",\"返回由指定的 this 值和初始化参数改造的原函数拷贝\"]},\"1451\":{\"h\":\"小结\",\"t\":[\"相同点：都可以改变函数内部的 this 指向。\",\"区别：\",\"1.call 和 apply 会调用函数，并且改变函数内部 this 指向。\",\"2.call 和 apply 传递参数不一样，call 传递参数，apply 必须数组形式传参。\",\"3.bind 不会调用函数，可以改变函数内部 this 指向。\",\"主要应用场景：\",\"1.call 经常做继承。\",\"2.apply 经常跟数组有关系，比如借助于 Math 求值。\",\"3.bind 不调用函数，能改变 this 指向，比如改定时器内部的 this 指向。\"]},\"1452\":{\"h\":\"严格模式\",\"t\":[\"严格模式是采用具有限制性 JavaScript 变体的一种方式，即在严格的条件下运行 JS 代码。\",\"严格模式在 IE10 以上的版本浏览器中才会被支持，旧版本浏览器会被忽略。\",\"严格模式的更改：\",\"1.消除了 JavaScript 语法的一些不合理、不严谨之处，减少了一些怪异行为。\",\"2.消除代码运行的一些不安全之处，保证代码运行的安全。\",\"3.提高编译器效率，增加运行速度。\",\"4.禁用了 EMCAScript 的未来版本中可能定义的一些语法，为未来新版本 JS 做铺垫。一些保留字：class、enum、export 等不能做变量名。\"]},\"1453\":{\"h\":\"开启严格模式\",\"t\":[\"分为 为脚本开启严格模式、为函数开启严格模式。\",\"<script> \\\"use strict\\\"; console.log(\\\"这是严格模式\\\"); </script> \",\"将整个脚本文件放在一个立即执行函数中开启严格模式，独立创建作用域不影响其他脚本文件。\",\"(function () { \\\"use strict\\\"; var num = 10; function fn() {} })(); \",\"把\\\"use strict\\\"声明放在函数体所有语句之前，仅该函数体内执行严格模式。\"]},\"1454\":{\"h\":\"严格模式简要规则\",\"t\":[\"不能使用未定义的变量\",\"不允许删除变量或者对象或者函数\",\"不允许参数重名\",\"禁止 this 关键字指向全局对象\"]},\"1455\":{\"h\":\"闭包（重要）\"},\"1456\":{\"h\":\"定义\",\"t\":[\"闭包指有权访问另一个函数作用域中变量的函数。\",\"简单理解：一个作用域可以访问另一个函数内部的局部变量。\",\"概念：一个函数 f 内创建另一个函数 f1，f1 可以访问到 f 的局部变量，返回 f1。\",\"案例：利用闭包获得 ul>li 的索引号\",\"for (var i = 0; i < lis.length; i++) { (function (i) { lis[i].onclick = function () { console.log(i); }; })(i); } \",\"立即执行函数也称为小闭包，因为立即执行函数里任何一个函数都可以使用它的 i 变量。\",\"闭包不一定是最优选项，容易造成变量短期内无法销毁，易造成内存泄漏。\"]},\"1457\":{\"h\":\"作用\",\"t\":[\"延伸变量的作用范围。\"]},\"1458\":{\"h\":\"递归\",\"t\":[\"一个函数在内部调用其本身，函数自己调用自己本身，或者在自己函数调用的下级函数中调用自己。\",\"必须加退出条件 return，否则容易堆栈溢出。\",\"步骤\",\"假设递归函数已经写好\",\"寻找递推关系\",\"将递推关系的结构转换为递归体\",\"将临界条件加入到递归体中\",\"案例 1：求和\",\"function sum(n) { if (n == 1) return 1; return sum(n - 1) + n; } \",\"案例 2：斐波拉契数列\",\"// 递归方法 function fib(n) { if (n === 1 || n === 2) return n - 1; return fib(n - 1) + fib(n - 2); } console.log(fib(10)); // 34 //非递归方法 // function fib(n) { let a = 0; let b = 1; let c = a + b; for (let i = 3; i < n; i++) { a = b; b = c; c = a + b; } return c; } console.log(fib(10)); // 34 \",\"案例 3：爬楼梯（动态规划）\",\"假如楼梯有 n 个台阶，每次可以走 1 个或 2 个台阶，请问走完这 n 个台阶有几种走法\",\"function climbStairs(n) { if (n == 1) return 1; if (n == 2) return 2; return climbStairs(n - 1) + climbStairs(n - 2); } \"]},\"1459\":{\"h\":\"对象拷贝\"},\"1460\":{\"h\":\"浅拷贝（单层）\",\"t\":[\"仅第一层对象脱离原址，第二层对象仍为引用。\",\"let obj = { id: 1, name: \\\"ZhangSan\\\", msg: { age: 18, address: \\\"China\\\", }, }; let newObj = {}; for (const key in obj) { newObj[key] = obj[key]; } obj.msg.age = 20; console.log(newObj); \"]},\"1461\":{\"h\":\"深拷贝\",\"t\":[\"通过递归调用，实现全部对象内容拷贝，全部脱离原引用地址。\",\"function deepCopy(newObj, oldObj) { for (const key in oldObj) { if (oldObj[key] instanceof Array) { let tempObj = []; newObj[key] = deepCopy(tempObj, oldObj[key]); } else if (oldObj[key] instanceof Object) { let tempObj = {}; newObj[key] = deepCopy(tempObj, oldObj[key]); } else newObj[key] = oldObj[key]; } return newObj; } let obj = { id: 1, name: \\\"ZhangSan\\\", msg: { age: 18, address: \\\"China\\\", }, arr: [ { student: \\\"LiHua\\\", code: 0, }, { student: \\\"LiLei\\\", code: 1, }, ], }; let newObj = {}; let deepObj = deepCopy(newObj, obj); obj.msg.age = 20; console.log(newObj); \"]}},\"dirtCount\":0,\"index\":[[\"爬楼梯\",{\"1\":{\"1458\":1}}],[\"爬虫协议文件\",{\"1\":{\"138\":1}}],[\"斐波拉契数列\",{\"1\":{\"1458\":1}}],[\"求和\",{\"1\":{\"1458\":1}}],[\"求值\",{\"1\":{\"1451\":1}}],[\"闭包不一定是最优选项\",{\"1\":{\"1456\":1}}],[\"闭包指有权访问另一个函数作用域中变量的函数\",{\"1\":{\"1456\":1}}],[\"闭包\",{\"0\":{\"1455\":1}}],[\"闭合浮动\",{\"1\":{\"984\":1}}],[\"独立创建作用域不影响其他脚本文件\",{\"1\":{\"1453\":1}}],[\"独享守卫\",{\"0\":{\"437\":1},\"1\":{\"435\":1}}],[\"消除代码运行的一些不安全之处\",{\"1\":{\"1452\":1}}],[\"消除了\",{\"1\":{\"1452\":1}}],[\"消费组件必须是<mycontext\",{\"1\":{\"215\":1}}],[\"词法分析主要有\",{\"1\":{\"1429\":1}}],[\"词法分析过程\",{\"1\":{\"1429\":1}}],[\"词法分析期和运行期\",{\"1\":{\"1429\":1}}],[\"词法分析分为\",{\"1\":{\"1428\":1}}],[\"词法分析\",{\"1\":{\"1428\":1}}],[\"压入执行栈的顶部\",{\"1\":{\"1425\":1}}],[\"压缩后的图片和\",{\"1\":{\"955\":1}}],[\"激活对象是函数内部\",{\"1\":{\"1423\":1}}],[\"激活对象\",{\"1\":{\"1423\":1}}],[\"停止该\",{\"1\":{\"1420\":1}}],[\"停止事件给定时器设置关键值\",{\"1\":{\"1071\":1}}],[\"停止事件冒泡\",{\"1\":{\"471\":1}}],[\"装对象\",{\"1\":{\"1415\":1}}],[\"装饰文本\",{\"0\":{\"891\":1},\"1\":{\"888\":1}}],[\"意思是不允许对包\",{\"1\":{\"1415\":1}}],[\"意为剥离\",{\"1\":{\"274\":1}}],[\"意为向上提交子节点的副作用\",{\"1\":{\"274\":1}}],[\"意为比线程更为纤细的执行单元\",{\"1\":{\"263\":1}}],[\"尔值\",{\"1\":{\"1415\":1}}],[\"始类型的值\",{\"1\":{\"1413\":1}}],[\"始终是从\",{\"1\":{\"1376\":1}}],[\"始终指向函数声明时所在作用域下的\",{\"1\":{\"1163\":1}}],[\"始终显示滚动条\",{\"1\":{\"914\":1}}],[\"覆盖原属性值\",{\"1\":{\"1429\":1}}],[\"覆盖时\",{\"1\":{\"1411\":1}}],[\"覆写掉已有的通过使用\",{\"1\":{\"63\":1}}],[\"覆写掉现有的任意使用\",{\"1\":{\"51\":1}}],[\"冻结一个对象\",{\"1\":{\"1408\":1}}],[\"王二\",{\"1\":{\"1407\":5}}],[\"李四\",{\"1\":{\"1407\":2}}],[\"断一下\",{\"1\":{\"1403\":1}}],[\"断点到事件绑定的位置\",{\"1\":{\"1155\":1}}],[\"断点调试方法\",{\"0\":{\"1155\":1}}],[\"断点\",{\"1\":{\"662\":1}}],[\"禁止\",{\"1\":{\"1454\":1}}],[\"禁止对象配置\",{\"1\":{\"1408\":1}}],[\"禁止引用\",{\"0\":{\"1392\":1}}],[\"禁用了\",{\"1\":{\"1452\":1}}],[\"禁用\",{\"1\":{\"837\":1}}],[\"贪婪匹配体现了最大化匹配原则\",{\"1\":{\"1385\":1}}],[\"限制词\",{\"1\":{\"1385\":1}}],[\"越是排在左侧的重复类量词匹配优先级越高\",{\"1\":{\"1385\":1}}],[\"量词+表示前面字符或表达式分组至少出现\",{\"1\":{\"1384\":1}}],[\"量词\",{\"1\":{\"1384\":3,\"1386\":1}}],[\"至\",{\"1\":{\"1382\":1}}],[\"至此\",{\"1\":{\"274\":1,\"604\":1,\"610\":1}}],[\"紧接着要抽取的片段的结尾的下标\",{\"1\":{\"1376\":1}}],[\"拼接两个或多个字符串\",{\"1\":{\"1374\":1}}],[\"底为\",{\"1\":{\"1370\":1}}],[\"底层保存标识符实际采用\",{\"1\":{\"1240\":1}}],[\"底层也是响应式的\",{\"1\":{\"812\":1}}],[\"底层核心机理\",{\"0\":{\"644\":1}}],[\"底层改写了数组的\",{\"1\":{\"603\":1}}],[\"底层源码设计层面的改变决定了\",{\"1\":{\"524\":1}}],[\"底层借助了\",{\"1\":{\"450\":1}}],[\"弧度之间\",{\"1\":{\"1370\":1}}],[\"弧度之间的数值来返回\",{\"1\":{\"1370\":1}}],[\"介于\",{\"1\":{\"1370\":1}}],[\"介绍\",{\"0\":{\"792\":1,\"819\":1}}],[\"介绍与作者\",{\"0\":{\"401\":1}}],[\"介绍描述\",{\"0\":{\"80\":1}}],[\"约等于\",{\"1\":{\"1369\":8}}],[\"约定的语法规范\",{\"1\":{\"872\":1}}],[\"截取结束的位置索引\",{\"1\":{\"1359\":1}}],[\"截取开始的位置索引\",{\"1\":{\"1359\":1}}],[\"截取标签与出栈标签不同\",{\"1\":{\"661\":1}}],[\"截取标签与出栈标签相同\",{\"1\":{\"661\":1}}],[\"宿主对象\",{\"0\":{\"1340\":1}}],[\"冲突属性会覆盖掉\",{\"1\":{\"1332\":1}}],[\"淡入淡出效果\",{\"0\":{\"1307\":1}}],[\"滑动效果\",{\"0\":{\"1304\":1}}],[\"排他思想\",{\"0\":{\"1291\":1}}],[\"排序时\",{\"1\":{\"1364\":1}}],[\"排序的依据是过期时间\",{\"1\":{\"395\":1}}],[\"排序依据\",{\"1\":{\"395\":1}}],[\"儿子\",{\"1\":{\"1290\":1}}],[\"筛选方法\",{\"0\":{\"1290\":1}}],[\"筛选选择器\",{\"0\":{\"1289\":1}}],[\"别称\",{\"1\":{\"1283\":1}}],[\"别人切勿使用\",{\"1\":{\"863\":1}}],[\"顶级对象\",{\"0\":{\"1283\":1}}],[\"帮我们完成封装\",{\"1\":{\"1282\":1}}],[\"免费\",{\"1\":{\"1279\":1}}],[\"轮播图等\",{\"1\":{\"1279\":1}}],[\"轮替节点\",{\"1\":{\"270\":1,\"272\":1}}],[\"某些场合\",{\"1\":{\"1418\":1}}],[\"某些类似数组的对象\",{\"1\":{\"1275\":1}}],[\"某个属性是否为对象自身的属性\",{\"1\":{\"1403\":1}}],[\"某个鼠标按钮是否被按下\",{\"1\":{\"1152\":1}}],[\"某个元素可以自由地在一个盒子内移动位置\",{\"1\":{\"987\":1}}],[\"某个值\",{\"1\":{\"213\":1}}],[\"张三\",{\"1\":{\"1274\":1,\"1407\":9,\"1436\":1}}],[\"期待周末\",{\"1\":{\"1269\":1}}],[\"今天是星期日\",{\"1\":{\"1269\":1}}],[\"今天是星期六\",{\"1\":{\"1269\":1}}],[\"隐式迭代默认对同一类元素做了同样操作\",{\"1\":{\"1319\":1}}],[\"隐式迭代\",{\"0\":{\"1288\":1},\"1\":{\"1279\":1,\"1291\":1}}],[\"隐式类型转换\",{\"0\":{\"1266\":1}}],[\"隐藏溢出范围的文本\",{\"1\":{\"927\":1}}],[\"隐藏元素后\",{\"1\":{\"914\":2}}],[\"隐藏边框\",{\"1\":{\"909\":1}}],[\"隐藏属性\",{\"0\":{\"600\":1}}],[\"隐藏\",{\"1\":{\"474\":1}}],[\"隐藏了的路由组件\",{\"1\":{\"425\":1}}],[\"故得名\",{\"1\":{\"1240\":1}}],[\"故$listeners\",{\"1\":{\"515\":1}}],[\"惯例\",{\"1\":{\"1240\":1}}],[\"骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起\",{\"1\":{\"1240\":1}}],[\"骆驼式命名法\",{\"1\":{\"1240\":1}}],[\"驼峰命名法\",{\"1\":{\"1240\":1}}],[\"严格模式简要规则\",{\"0\":{\"1454\":1}}],[\"严格模式的更改\",{\"1\":{\"1452\":1}}],[\"严格模式在\",{\"1\":{\"1452\":1}}],[\"严格模式是采用具有限制性\",{\"1\":{\"1452\":1}}],[\"严格模式\",{\"0\":{\"1452\":1}}],[\"严格区分大小写\",{\"1\":{\"1238\":1}}],[\"严重注意\",{\"1\":{\"474\":1}}],[\"制定了共同的标准名为\",{\"1\":{\"1233\":1}}],[\"制作\",{\"1\":{\"1001\":1}}],[\"制作麻烦\",{\"1\":{\"958\":1}}],[\"市面上存在两个版本的\",{\"1\":{\"1233\":1}}],[\"诞生于\",{\"1\":{\"1233\":1}}],[\"诞生更早\",{\"1\":{\"639\":1}}],[\"粘性\",{\"1\":{\"1225\":1}}],[\"粘性定位占有原先的位置\",{\"1\":{\"995\":1}}],[\"粘性定位\",{\"0\":{\"995\":1},\"1\":{\"989\":1,\"999\":1}}],[\"尖括号内为分组名字\",{\"1\":{\"1215\":1}}],[\"谁调用方法\",{\"1\":{\"1446\":1}}],[\"谁来返回\",{\"1\":{\"1205\":1}}],[\"谁能调用\",{\"1\":{\"411\":1}}],[\"迭代方法\",{\"1\":{\"1196\":1}}],[\"迭代器\",{\"0\":{\"1172\":1}}],[\"统一添加到构造函数的原型对象中\",{\"1\":{\"1438\":1}}],[\"统一暴露\",{\"1\":{\"1190\":1}}],[\"统一转为\",{\"1\":{\"323\":1}}],[\"抹掉小数部分\",{\"1\":{\"1181\":1}}],[\"八进制\",{\"1\":{\"1181\":1,\"1252\":1}}],[\"差集\",{\"1\":{\"1178\":1}}],[\"差异化不同标签\",{\"1\":{\"862\":1}}],[\"交集元素\",{\"1\":{\"1286\":1}}],[\"交集选择器\",{\"1\":{\"1286\":1}}],[\"交集\",{\"1\":{\"1178\":1}}],[\"交互\",{\"1\":{\"132\":1,\"1279\":1}}],[\"捕捉\",{\"1\":{\"1177\":1}}],[\"捕获结束开始在目标元素上触发事件\",{\"1\":{\"1134\":1}}],[\"捕获阶段触发\",{\"0\":{\"1136\":1}}],[\"捕获阶段时从最外层祖先元素开始\",{\"1\":{\"1133\":1}}],[\"捕获阶段\",{\"0\":{\"1133\":1}}],[\"捕获\",{\"1\":{\"472\":1}}],[\"括号内参数仅为\",{\"1\":{\"1367\":1}}],[\"括号内传递一个\",{\"1\":{\"1225\":1,\"1226\":1}}],[\"括号内可传数字\",{\"1\":{\"1221\":1}}],[\"括号中的实参\",{\"1\":{\"1174\":1}}],[\"括起来\",{\"1\":{\"123\":1}}],[\"省略中间字符\",{\"1\":{\"1382\":1}}],[\"省略花括号\",{\"1\":{\"1163\":1}}],[\"省略小括号\",{\"1\":{\"1163\":1}}],[\"省略掉\",{\"1\":{\"908\":1}}],[\"列举典型例子来分析\",{\"1\":{\"1423\":1}}],[\"列出了所有页面及脚本事件\",{\"1\":{\"1155\":1}}],[\"列表中的某个具体页面\",{\"1\":{\"1067\":1}}],[\"列表中的下一个\",{\"1\":{\"1067\":1}}],[\"列表中的前一个\",{\"1\":{\"1067\":1}}],[\"列表排序以数字显示\",{\"1\":{\"1053\":1}}],[\"列表项使用<li>标签定义\",{\"1\":{\"1052\":1}}],[\"列表分类\",{\"1\":{\"1051\":1}}],[\"列表最大的特点就是整齐\",{\"1\":{\"1051\":1}}],[\"列表标签\",{\"0\":{\"1051\":1}}],[\"列表的行为类似于逻辑或\",{\"1\":{\"964\":1}}],[\"列表的数据就会变更\",{\"1\":{\"747\":1}}],[\"列表显示指令\",{\"0\":{\"460\":1}}],[\"列表渲染\",{\"0\":{\"459\":1}}],[\"届时可通过\",{\"1\":{\"1154\":1}}],[\"↓\",{\"1\":{\"1154\":1}}],[\"↑\",{\"1\":{\"1154\":1}}],[\"←\",{\"1\":{\"1154\":1}}],[\"火狐旧版本不支持\",{\"1\":{\"1146\":1}}],[\"火狐调用不会报错\",{\"1\":{\"1141\":1}}],[\"滚轮滚动时\",{\"1\":{\"1147\":1}}],[\"滚轮向上滚动\",{\"1\":{\"1144\":1}}],[\"滚轮向下滚动\",{\"1\":{\"1144\":1}}],[\"滚轮流程\",{\"0\":{\"1144\":1}}],[\"滚轮事件\",{\"0\":{\"1143\":1}}],[\"滚动条在滚动时会触发\",{\"1\":{\"1124\":1}}],[\"滚动条事件\",{\"0\":{\"1121\":1}}],[\"滚动条下滑变成固定定位\",{\"1\":{\"995\":1}}],[\"滚动到底\",{\"0\":{\"1115\":1}}],[\"滚动窗口的时候\",{\"1\":{\"987\":1}}],[\"滚动\",{\"1\":{\"906\":1}}],[\"滚动也分横向和纵向滚动\",{\"1\":{\"96\":1}}],[\"滚动容器元素的视觉可见区域\",{\"1\":{\"96\":1}}],[\"滚动容器元素的内部内容区域\",{\"1\":{\"96\":1}}],[\"滚动容器元素在滚动时每个列表项只是渲染一些纯文本\",{\"1\":{\"96\":1}}],[\"滚动容器元素是\",{\"1\":{\"96\":1}}],[\"滚动容器元素\",{\"1\":{\"96\":1}}],[\"释放鼠标键时触发此事件\",{\"1\":{\"1142\":1}}],[\"释放目标时触发的事件\",{\"1\":{\"1142\":1}}],[\"释放事件捕获\",{\"1\":{\"1141\":1}}],[\"偏移量\",{\"1\":{\"1139\":1}}],[\"拖拽网页内容时\",{\"1\":{\"1140\":1}}],[\"拖拽异常\",{\"0\":{\"1140\":1}}],[\"拖拽流程\",{\"0\":{\"1138\":1}}],[\"拖拽事件\",{\"0\":{\"1137\":1}}],[\"微软公司\",{\"1\":{\"1132\":1}}],[\"度不足以显示整个页面时\",{\"1\":{\"1124\":1}}],[\"耦合不方便维护\",{\"1\":{\"1118\":1}}],[\"耦合度低\",{\"1\":{\"490\":1}}],[\"认为浏览器的滚动条是\",{\"1\":{\"1115\":1}}],[\"想要更改的样式属性\",{\"1\":{\"1308\":1}}],[\"想要给元素更改值\",{\"1\":{\"1108\":1}}],[\"想要获取元素大小位置\",{\"1\":{\"1108\":1}}],[\"获得鼠标焦点触发\",{\"1\":{\"1117\":1}}],[\"获得不包含\",{\"1\":{\"1108\":1}}],[\"获得的是带有单位的字符串\",{\"1\":{\"1108\":1}}],[\"获得元素自身的大小\",{\"1\":{\"1108\":1}}],[\"获得元素距离带有定位父元素的位置\",{\"1\":{\"1108\":1}}],[\"获取对象的\",{\"1\":{\"1408\":1}}],[\"获取对象属性的描述对象\",{\"1\":{\"1211\":1}}],[\"获取某个属性的描述对象\",{\"1\":{\"1408\":1}}],[\"获取某个元素的位置信息\",{\"1\":{\"202\":1}}],[\"获取数组最大索引+1\",{\"1\":{\"1352\":1}}],[\"获取数据\",{\"1\":{\"756\":1,\"829\":1}}],[\"获取距离带有定位父级位置的偏移\",{\"1\":{\"1325\":1}}],[\"获取表单值\",{\"1\":{\"1317\":1}}],[\"获取文本内容\",{\"1\":{\"1316\":1}}],[\"获取文本节点时\",{\"1\":{\"1084\":1}}],[\"获取最后一个\",{\"1\":{\"1289\":1}}],[\"获取最近的真实dom节点\",{\"1\":{\"274\":4,\"326\":4,\"349\":4,\"375\":4,\"385\":4}}],[\"获取最近的真实\",{\"1\":{\"274\":1}}],[\"获取第一个\",{\"1\":{\"1289\":1}}],[\"获取第一个子组件中的属性\",{\"1\":{\"516\":1}}],[\"获取亲儿子层级元素\",{\"1\":{\"1287\":1}}],[\"获取同一类标签的所有元素\",{\"1\":{\"1286\":1}}],[\"获取同一类\",{\"1\":{\"1286\":1}}],[\"获取指定位置字符的字符编码\",{\"1\":{\"1373\":1}}],[\"获取指定\",{\"1\":{\"1286\":1}}],[\"获取来的对象就是\",{\"1\":{\"1284\":1}}],[\"获取按键编码\",{\"1\":{\"1153\":1}}],[\"获取滚轮长度\",{\"0\":{\"1146\":1}}],[\"获取鼠标相对于当前页面坐标\",{\"1\":{\"1123\":1}}],[\"获取鼠标指针的水平\",{\"1\":{\"1122\":1}}],[\"获取样式的元素\",{\"1\":{\"1106\":1}}],[\"获取元素内容\",{\"1\":{\"1315\":1}}],[\"获取元素的整个宽度和高度\",{\"1\":{\"1108\":1}}],[\"获取元素样式\",{\"0\":{\"1106\":1}}],[\"获取元素后\",{\"1\":{\"1085\":1}}],[\"获取属性节点的值\",{\"1\":{\"1096\":1}}],[\"获取属性节点的集合\",{\"1\":{\"1096\":1}}],[\"获取属性节点对象\",{\"1\":{\"1096\":1}}],[\"获取页面中所有元素\",{\"1\":{\"1093\":1}}],[\"获取节点方法\",{\"0\":{\"1092\":1}}],[\"获取节点属性\",{\"0\":{\"1086\":1}}],[\"获取后一个兄弟元素\",{\"1\":{\"1088\":1}}],[\"获取前一个兄弟元素\",{\"1\":{\"1088\":1}}],[\"获取子节点\",{\"0\":{\"1087\":1}}],[\"获取子组件的方法\",{\"1\":{\"513\":1}}],[\"获取一组对象时\",{\"1\":{\"1085\":1}}],[\"获取全局\",{\"1\":{\"827\":1}}],[\"获取model中的状态\",{\"1\":{\"823\":1}}],[\"获取参数名2\",{\"1\":{\"823\":1}}],[\"获取参数名1\",{\"1\":{\"823\":1}}],[\"获取失败\",{\"1\":{\"786\":1}}],[\"获取成功\",{\"1\":{\"786\":1}}],[\"获取状态\",{\"1\":{\"749\":1}}],[\"获取导航菜单列表\",{\"1\":{\"731\":1}}],[\"获取菜单列表\",{\"1\":{\"731\":1}}],[\"获取用户导航菜单列表\",{\"1\":{\"729\":1}}],[\"获取用户权限列表\",{\"1\":{\"729\":1}}],[\"获取查询字符串的值\",{\"1\":{\"721\":1}}],[\"获取动态路由的值\",{\"1\":{\"721\":1}}],[\"获取dom\",{\"1\":{\"695\":1}}],[\"获取\",{\"1\":{\"695\":1,\"701\":2,\"786\":1,\"1093\":2,\"1222\":1,\"1287\":1,\"1310\":1,\"1311\":1,\"1312\":1}}],[\"获取正确数据\",{\"1\":{\"650\":1}}],[\"获取依赖值\",{\"1\":{\"636\":1}}],[\"获取哪个数据\",{\"1\":{\"608\":1}}],[\"获取可视化界面的宽度和高度值\",{\"1\":{\"543\":1}}],[\"获取根组件的数据\",{\"1\":{\"521\":1}}],[\"获取父节点和兄弟节点\",{\"0\":{\"1088\":1}}],[\"获取父组件中的属性\",{\"1\":{\"516\":1}}],[\"获取父作用域中所有符合条件的属性集合\",{\"1\":{\"515\":1}}],[\"获取到的\",{\"1\":{\"1289\":3}}],[\"获取到地址栏信息\",{\"1\":{\"1065\":1}}],[\"获取到错误\",{\"1\":{\"829\":1}}],[\"获取到一个父节点的\",{\"1\":{\"516\":1}}],[\"获取到一个包含所有子组件\",{\"1\":{\"516\":1}}],[\"获取到真正的原生节点或文本节点\",{\"1\":{\"274\":1}}],[\"获取当前元素的最后一个子元素\",{\"1\":{\"1087\":1}}],[\"获取当前元素的第一个子元素\",{\"1\":{\"1087\":1}}],[\"获取当前元素的所有子元素\",{\"1\":{\"1087\":1}}],[\"获取当前屏幕的宽度\",{\"1\":{\"1062\":1}}],[\"获取当前\",{\"1\":{\"722\":1}}],[\"获取当前时间\",{\"1\":{\"395\":1}}],[\"获取当前的根fiber\",{\"1\":{\"271\":1,\"272\":1}}],[\"获取此useeffect这个hook上老的effect对象\",{\"1\":{\"373\":1}}],[\"获取此fiber上对应的回调函数\",{\"1\":{\"291\":1}}],[\"获取老\",{\"1\":{\"323\":1}}],[\"获取老状态\",{\"1\":{\"272\":1}}],[\"获取事件源\",{\"1\":{\"288\":1,\"297\":1}}],[\"获取事件对象中全部symbol值\",{\"1\":{\"116\":1}}],[\"获取它的child\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"获取新fiber对应的老fiber\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"获取真实dom\",{\"1\":{\"252\":1}}],[\"获取适配器对象\",{\"1\":{\"68\":1}}],[\"系列获得的数值是没有单位的\",{\"1\":{\"1108\":1}}],[\"系列\",{\"0\":{\"1108\":1}}],[\"系统内部会自动调用\",{\"1\":{\"1414\":2}}],[\"系统就会按次序读取任务队列中的异步任务\",{\"1\":{\"1076\":1}}],[\"系统由虚拟节点对象创建函数\",{\"1\":{\"692\":1}}],[\"系统修饰键\",{\"1\":{\"472\":1}}],[\"采取数组形式拼接\",{\"1\":{\"1095\":1}}],[\"采用了一种经典的\",{\"1\":{\"676\":1}}],[\"采用diff算法\",{\"1\":{\"82\":1}}],[\"★\",{\"1\":{\"1078\":1}}],[\"报文\",{\"1\":{\"1066\":1}}],[\"报错提示\",{\"1\":{\"1155\":1}}],[\"报错\",{\"0\":{\"591\":1}}],[\"报错为控制台\",{\"1\":{\"587\":1}}],[\"锚\",{\"1\":{\"1065\":1}}],[\"锚点\",{\"1\":{\"1043\":1}}],[\"锚点链接\",{\"1\":{\"1043\":1}}],[\"延伸变量的作用范围\",{\"1\":{\"1457\":1}}],[\"延时打印案例\",{\"1\":{\"1174\":1}}],[\"延时调用只执行一次\",{\"1\":{\"1063\":1}}],[\"延时调用一个函数\",{\"1\":{\"1063\":1}}],[\"延迟加载等性能优化\",{\"1\":{\"825\":1}}],[\"延迟1s\",{\"1\":{\"762\":1}}],[\"部加载完毕\",{\"1\":{\"1062\":1}}],[\"部分结构和样式相分离\",{\"1\":{\"868\":1}}],[\"性别表单控件\",{\"1\":{\"1057\":1}}],[\"性能的提升\",{\"1\":{\"524\":1}}],[\"性能瓶颈\",{\"0\":{\"259\":1}}],[\"性能优化\",{\"0\":{\"93\":1},\"1\":{\"246\":1}}],[\"浏览\",{\"1\":{\"1057\":1}}],[\"浏览器的\",{\"1\":{\"1425\":1}}],[\"浏览器的历史记录\",{\"1\":{\"1067\":1}}],[\"浏览器的历史记录有两种写入方式\",{\"1\":{\"432\":1}}],[\"浏览器先按照\",{\"1\":{\"1419\":1}}],[\"浏览器临时使用包装类将其转换为对象\",{\"1\":{\"1371\":1}}],[\"浏览器将会分别使用数组中的元素作为实参自动调用回调函数\",{\"1\":{\"1364\":1}}],[\"浏览器\",{\"1\":{\"1155\":1}}],[\"浏览器滚动条会随之滚动\",{\"1\":{\"1147\":1}}],[\"浏览器滚动条滚动\",{\"0\":{\"1147\":1}}],[\"浏览器默认搜索引擎中搜索内容\",{\"1\":{\"1140\":1}}],[\"浏览器默认使用\",{\"1\":{\"973\":1}}],[\"浏览器在加载一个页面时\",{\"1\":{\"1119\":1}}],[\"浏览器每次会将一个事件对象作为实参传递进响应函数\",{\"1\":{\"1117\":1}}],[\"浏览器支持\",{\"1\":{\"1106\":1,\"1141\":1}}],[\"浏览器已经提供文档节点对象\",{\"1\":{\"1084\":1}}],[\"浏览器解析\",{\"1\":{\"1066\":1}}],[\"浏览器对象模型\",{\"1\":{\"1059\":1,\"1233\":1}}],[\"浏览器就会自动将焦点\",{\"1\":{\"1057\":1}}],[\"浏览器内核\",{\"1\":{\"1027\":1}}],[\"浏览器是网页显示\",{\"1\":{\"1027\":1}}],[\"浏览器显示代码\",{\"1\":{\"1025\":1}}],[\"浏览器显示标准样式\",{\"1\":{\"885\":1}}],[\"浏览器可视区\",{\"1\":{\"999\":2}}],[\"浏览器现状\",{\"0\":{\"943\":1}}],[\"浏览器提供了非常好用的调试工具\",{\"1\":{\"940\":1}}],[\"浏览器私有前缀是为了兼容老版本的写法\",{\"1\":{\"935\":1}}],[\"浏览器私有前缀\",{\"0\":{\"935\":1}}],[\"浏览器与编译器\",{\"0\":{\"934\":1},\"1\":{\"933\":1}}],[\"浏览器或移动端\",{\"1\":{\"927\":1}}],[\"浏览器渲染页面\",{\"1\":{\"1066\":1}}],[\"浏览器渲染\",{\"1\":{\"920\":1}}],[\"浏览器渲染动画或页面的每一帧的速率也需要跟设备屏幕的刷新率保持一致\",{\"1\":{\"260\":1}}],[\"浏览器完全不显示\",{\"1\":{\"900\":1}}],[\"浏览器保持默认处理\",{\"1\":{\"899\":1}}],[\"浏览器会根据回调函数的返回值来决定元素的顺序\",{\"1\":{\"1364\":1}}],[\"浏览器会在回调函数中传递三个参数\",{\"1\":{\"1276\":1}}],[\"浏览器会将遍历元素以实参形式传递进来\",{\"1\":{\"1276\":1}}],[\"浏览器会自动使用相应的部分来替换边框的默认样式\",{\"1\":{\"909\":1}}],[\"浏览器会显示小型大写字母的字体\",{\"1\":{\"886\":1}}],[\"浏览器会显示斜体的字体样式\",{\"1\":{\"885\":1}}],[\"浏览器会推迟渲染\",{\"1\":{\"261\":1}}],[\"浏览器无法退回到当前url\",{\"1\":{\"432\":1}}],[\"浏览器后退可退回当前url\",{\"1\":{\"432\":1}}],[\"浏览器绘制之前执行\",{\"1\":{\"376\":1}}],[\"浏览器绘制之前执行的effect\",{\"1\":{\"371\":1,\"381\":1}}],[\"浏览器绘制之后执行的effect\",{\"1\":{\"371\":1,\"381\":1}}],[\"浏览器刷新频率为\",{\"1\":{\"259\":1}}],[\"浏览器不能直接解析\",{\"1\":{\"125\":1}}],[\"浏览器专属\",{\"1\":{\"47\":1}}],[\"浏览器收到该响应后对响应放行\",{\"1\":{\"27\":1}}],[\"明文提交\",{\"1\":{\"1056\":1}}],[\"罗马数字\",{\"1\":{\"1053\":1}}],[\"阿拉伯数字\",{\"1\":{\"1053\":1}}],[\"缩写\",{\"1\":{\"1048\":1}}],[\"展示数据\",{\"1\":{\"1047\":1}}],[\"展示的是图标\",{\"1\":{\"917\":1}}],[\"鼠标\",{\"1\":{\"1155\":1}}],[\"鼠标指针距离屏幕的垂直坐标\",{\"1\":{\"1152\":1}}],[\"鼠标指针距离屏幕的水平坐标\",{\"1\":{\"1152\":1}}],[\"鼠标指针的垂直坐标是否被按下\",{\"1\":{\"1152\":1}}],[\"鼠标指针的水平是否被按下\",{\"1\":{\"1152\":1}}],[\"鼠标松开时\",{\"1\":{\"1141\":1}}],[\"鼠标与元素的相对位移量\",{\"0\":{\"1139\":1}}],[\"鼠标移到元素上要触发的函数\",{\"1\":{\"1305\":1}}],[\"鼠标移动时减去上述偏移量\",{\"1\":{\"1139\":1}}],[\"鼠标移动触发\",{\"1\":{\"1117\":1}}],[\"鼠标移出元素要出发的函数\",{\"1\":{\"1305\":1}}],[\"鼠标移出\",{\"1\":{\"1126\":1}}],[\"鼠标经过自身盒子会触发\",{\"1\":{\"1126\":1}}],[\"鼠标经过触发\",{\"1\":{\"1117\":1}}],[\"鼠标按下时\",{\"1\":{\"1139\":1}}],[\"鼠标按下触发\",{\"1\":{\"1117\":1}}],[\"鼠标按下未弹起的链接\",{\"1\":{\"873\":1}}],[\"鼠标弹起触发\",{\"1\":{\"1117\":1}}],[\"鼠标离开触发\",{\"1\":{\"1117\":1}}],[\"鼠标点击左键触发\",{\"1\":{\"1117\":1}}],[\"鼠标事件\",{\"1\":{\"1117\":1}}],[\"鼠标滚轮滚动方向\",{\"1\":{\"1117\":1}}],[\"鼠标坐标\",{\"1\":{\"1117\":1}}],[\"鼠标放到图像上的提示文字\",{\"1\":{\"1044\":1}}],[\"音频\",{\"1\":{\"1043\":1}}],[\"音频标签\",{\"0\":{\"1022\":1}}],[\"快捷方法\",{\"1\":{\"1256\":1}}],[\"快捷键\",{\"1\":{\"1040\":1}}],[\"快速格式化代码\",{\"0\":{\"939\":1}}],[\"快速生成\",{\"0\":{\"937\":1,\"938\":1}}],[\"快速导入工具函数\",{\"1\":{\"730\":1}}],[\"倾斜\",{\"1\":{\"1037\":1}}],[\"突出重要性\",{\"1\":{\"1037\":1}}],[\"段落和段落之间保有空隙\",{\"1\":{\"1036\":1}}],[\"段落和换行标签\",{\"0\":{\"1036\":1}}],[\"掌握文件新建\",{\"1\":{\"1031\":1}}],[\"掌握网页基本组成\",{\"0\":{\"1025\":1}}],[\"骨架标签\",{\"0\":{\"1031\":1},\"1\":{\"1031\":1}}],[\"万维网联盟\",{\"1\":{\"1028\":1}}],[\"临时文件夹作用\",{\"1\":{\"1027\":1}}],[\"国内一般浏览器都会采用\",{\"1\":{\"1027\":1}}],[\"俗称为\",{\"1\":{\"1025\":1}}],[\"格式的文件\",{\"1\":{\"1025\":1}}],[\"格式化文档\",{\"1\":{\"939\":1}}],[\"格式化转换\",{\"1\":{\"731\":1}}],[\"格式化代码\",{\"1\":{\"578\":1}}],[\"页\",{\"1\":{\"1025\":1}}],[\"页面滚动条滚动长度\",{\"1\":{\"1325\":1}}],[\"页面滚回去又会变成相对定位\",{\"1\":{\"995\":1}}],[\"页面上面被隐藏掉的高度\",{\"1\":{\"1124\":1}}],[\"页面被卷去的头部\",{\"0\":{\"1124\":1}}],[\"页面还没有加载\",{\"1\":{\"1119\":1}}],[\"页面打开默认选中按这个按钮\",{\"1\":{\"1057\":1}}],[\"页面也被称为\",{\"1\":{\"1031\":2}}],[\"页面也会跟随重置\",{\"1\":{\"964\":1}}],[\"页面内容基本都放到\",{\"1\":{\"1031\":1}}],[\"页面内容也是在这些基本标签上书写\",{\"1\":{\"1031\":1}}],[\"页面内部\",{\"1\":{\"866\":1}}],[\"页面\",{\"1\":{\"1025\":1,\"1062\":1}}],[\"页面实际元素值\",{\"1\":{\"966\":2}}],[\"页面元素的\",{\"1\":{\"966\":2}}],[\"页面元素盒子等比例缩放的效果\",{\"1\":{\"966\":1}}],[\"页面最大可见区域宽度\",{\"1\":{\"964\":1}}],[\"页面最小可见区域宽度\",{\"1\":{\"964\":1}}],[\"页面可见区域宽度\",{\"1\":{\"964\":1}}],[\"页面布局第二准则\",{\"1\":{\"1001\":1}}],[\"页面布局第一准则\",{\"1\":{\"1001\":1}}],[\"页面布局整体思路\",{\"0\":{\"1001\":1}}],[\"页面布局文字能否随着屏幕大小变化而变化\",{\"1\":{\"962\":1}}],[\"页面布局\",{\"0\":{\"967\":1},\"1\":{\"933\":1}}],[\"页面中项目的无序列表\",{\"1\":{\"1052\":1}}],[\"页面中最大的标签\",{\"1\":{\"1031\":1}}],[\"页面中的图像\",{\"1\":{\"1044\":1}}],[\"页面中的布局元素看作是一个矩形盒子\",{\"1\":{\"968\":1}}],[\"页面中的文本内容\",{\"1\":{\"854\":1}}],[\"页面中\",{\"1\":{\"868\":1}}],[\"页面中使用\",{\"1\":{\"868\":1}}],[\"页面中呈现的是经过\",{\"1\":{\"479\":1}}],[\"页面正在渲染中\",{\"1\":{\"632\":1,\"635\":1}}],[\"页面的\",{\"1\":{\"505\":1}}],[\"页面引用\",{\"1\":{\"505\":1}}],[\"页面只会更新一次\",{\"1\":{\"505\":1}}],[\"页面和数据同步\",{\"1\":{\"480\":1}}],[\"页面呈现的是未经\",{\"1\":{\"479\":1}}],[\"页面显示区域为current映射\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"页面是流畅的\",{\"1\":{\"260\":1}}],[\"页面是一帧一帧绘制出来的\",{\"1\":{\"260\":1}}],[\"页面性能分析文件\",{\"1\":{\"138\":1}}],[\"章节栏\",{\"1\":{\"1020\":2}}],[\"侧边栏\",{\"1\":{\"1020\":1}}],[\"搜索引擎优化\",{\"1\":{\"1020\":1}}],[\"搜狗手机\",{\"1\":{\"943\":1}}],[\"日的毫秒数时间戳\",{\"1\":{\"1367\":1}}],[\"日至今的毫秒数\",{\"1\":{\"1367\":1}}],[\"日期格式\",{\"1\":{\"1367\":1}}],[\"日期控件\",{\"1\":{\"1279\":1}}],[\"日期时间\",{\"1\":{\"1019\":1}}],[\"日期\",{\"0\":{\"1367\":1},\"1\":{\"1019\":1}}],[\"日本和韩国\",{\"1\":{\"900\":1}}],[\"周\",{\"1\":{\"1019\":1}}],[\"周边生态\",{\"0\":{\"404\":1}}],[\"月\",{\"1\":{\"1019\":1,\"1367\":2}}],[\"范围内的字符\",{\"1\":{\"1382\":3}}],[\"范围内的数字\",{\"1\":{\"1382\":1}}],[\"范围\",{\"1\":{\"1019\":1}}],[\"范式化修改\",{\"1\":{\"817\":1}}],[\"范式化\",{\"1\":{\"816\":1}}],[\"范式化state\",{\"0\":{\"816\":1}}],[\"乘\",{\"1\":{\"1014\":1}}],[\"他的属性是只读的比如\",{\"1\":{\"1415\":1}}],[\"他们之间相互独立\",{\"1\":{\"1350\":1}}],[\"他们的值也是相同的\",{\"1\":{\"1169\":1}}],[\"他可以不使用任何符号\",{\"1\":{\"1013\":1}}],[\"他不需要导入且会随着\",{\"1\":{\"587\":1}}],[\"黑色\",{\"1\":{\"1012\":1}}],[\"白色\",{\"1\":{\"1012\":2}}],[\"十分的相似\",{\"1\":{\"1011\":1,\"1012\":1}}],[\"十六进制\",{\"1\":{\"889\":1,\"908\":1,\"1181\":1,\"1252\":1}}],[\"硬编码\",{\"1\":{\"1011\":1}}],[\"硬加载\",{\"1\":{\"829\":1}}],[\"富有表现力的\",{\"1\":{\"1007\":1}}],[\"演变到了\",{\"1\":{\"1006\":1}}],[\"演化而成的固定写法模式\",{\"1\":{\"84\":1}}],[\"社区\",{\"1\":{\"1007\":1}}],[\"社区之外支持者远超过\",{\"1\":{\"1006\":1}}],[\"社区的支持和\",{\"1\":{\"1005\":1}}],[\"年\",{\"1\":{\"1233\":1,\"1367\":2}}],[\"年更新\",{\"1\":{\"1115\":1}}],[\"年产生\",{\"1\":{\"1007\":1}}],[\"年出现\",{\"1\":{\"1006\":1}}],[\"年诞生\",{\"1\":{\"1005\":1}}],[\"拥有\",{\"1\":{\"1005\":1}}],[\"拥抱\",{\"1\":{\"524\":1}}],[\"尤其对于非前端开发工程师来讲\",{\"1\":{\"1003\":1}}],[\"尤雨溪\",{\"1\":{\"401\":1}}],[\"叠放次序\",{\"0\":{\"996\":1}}],[\"版心宽度一半距离\",{\"1\":{\"994\":1}}],[\"版本\",{\"0\":{\"1281\":1}}],[\"版本来显示网页\",{\"1\":{\"1032\":2}}],[\"版本需要我们自己用\",{\"1\":{\"728\":1}}],[\"版本需要在函数名前面添加\",{\"1\":{\"169\":1}}],[\"版本直接给我们提供了\",{\"1\":{\"728\":1}}],[\"版本移除了先前的<switch>\",{\"1\":{\"712\":1}}],[\"版本的区别\",{\"0\":{\"708\":1}}],[\"版本的\",{\"1\":{\"705\":1}}],[\"版本及以后\",{\"1\":{\"263\":1}}],[\"版本之前\",{\"1\":{\"257\":1}}],[\"走到浏览器可视区一半位置\",{\"1\":{\"994\":1}}],[\"位十六进制值\",{\"1\":{\"1381\":1}}],[\"位置操作\",{\"0\":{\"1325\":1}}],[\"位置属性\",{\"0\":{\"990\":1}}],[\"位\",{\"1\":{\"1262\":1}}],[\"位于栈顶的数组永远是循环过程中正处于\",{\"1\":{\"648\":1}}],[\"静态方法\",{\"0\":{\"1399\":1}}],[\"静态\",{\"1\":{\"1225\":1}}],[\"静态成员是指在构造函数本身上添加的成员\",{\"1\":{\"1437\":1}}],[\"静态成员\",{\"1\":{\"1180\":1}}],[\"静态定位按照标准流特性摆放位置\",{\"1\":{\"991\":1}}],[\"静态定位\",{\"0\":{\"991\":1},\"1\":{\"989\":1,\"999\":1}}],[\"静态资源文件夹\",{\"1\":{\"138\":1}}],[\"淘宝\",{\"1\":{\"985\":1}}],[\"照顾低版本浏览器\",{\"1\":{\"985\":1}}],[\"伪数组形式存储\",{\"1\":{\"1284\":1,\"1288\":1}}],[\"伪数组转为真正数组\",{\"1\":{\"1166\":1}}],[\"伪元素\",{\"1\":{\"985\":1}}],[\"伪类选择器用于选取获得焦点\",{\"1\":{\"873\":1}}],[\"伪类选择器\",{\"0\":{\"873\":1},\"1\":{\"932\":1}}],[\"伪类选择器等\",{\"1\":{\"869\":1}}],[\"符合网页布局第一准则\",{\"1\":{\"979\":1}}],[\"符号开头声明变量\",{\"1\":{\"1011\":1}}],[\"符号\",{\"1\":{\"964\":1,\"1045\":1}}],[\"符号是逗号\",{\"1\":{\"873\":1}}],[\"符号是大于\",{\"1\":{\"873\":1}}],[\"符号是空格\",{\"1\":{\"873\":1}}],[\"脱标的盒子不会触发外边距塌陷\",{\"1\":{\"998\":1}}],[\"脱标\",{\"1\":{\"978\":1,\"993\":1,\"999\":1}}],[\"浮点\",{\"1\":{\"1243\":1}}],[\"浮\",{\"1\":{\"978\":1}}],[\"浮动可以让多个块级盒子一行没有缝隙排列显示\",{\"1\":{\"987\":1}}],[\"浮动可以改变元素标签默认的排列方式\",{\"1\":{\"976\":1}}],[\"浮动和标准流的父盒子搭配\",{\"1\":{\"980\":1}}],[\"浮动布局注意点\",{\"0\":{\"980\":1}}],[\"浮动元素不同\",{\"1\":{\"998\":1}}],[\"浮动元素\",{\"1\":{\"998\":1}}],[\"浮动元素应用场景\",{\"0\":{\"979\":1}}],[\"浮动元素会具有行内块元素特性\",{\"1\":{\"978\":1}}],[\"浮动元素脱离标准普通流的控制\",{\"1\":{\"978\":1}}],[\"浮动的盒子只会影响浮动盒子后面的标准流\",{\"1\":{\"980\":1}}],[\"浮动的盒子不再保留原先的位置\",{\"1\":{\"978\":1}}],[\"浮动的元素是互相贴靠在一起的\",{\"1\":{\"978\":1}}],[\"浮动特性\",{\"0\":{\"978\":1}}],[\"浮动最典型的应用\",{\"1\":{\"976\":1}}],[\"浮动\",{\"0\":{\"974\":1,\"976\":1},\"1\":{\"974\":1,\"1002\":1}}],[\"碰到父元素边缘自动换行\",{\"1\":{\"975\":1}}],[\"盒模型\",{\"1\":{\"973\":2}}],[\"盒子越靠上\",{\"1\":{\"996\":1}}],[\"盒子移动到的最终位置\",{\"1\":{\"990\":1}}],[\"盒子是固定在屏幕某个位置的\",{\"1\":{\"987\":1}}],[\"盒子大小为\",{\"1\":{\"973\":2}}],[\"盒子左右的外边距都设置为\",{\"1\":{\"970\":1}}],[\"盒子必须指定了\",{\"1\":{\"970\":1}}],[\"盒子若已有宽高\",{\"1\":{\"969\":1}}],[\"盒子模型本质上是一个盒子\",{\"1\":{\"968\":1}}],[\"盒子模型\",{\"0\":{\"968\":1},\"1\":{\"968\":1}}],[\"盒子阴影\",{\"0\":{\"912\":1}}],[\"盒子高度\",{\"1\":{\"880\":1}}],[\"怪异盒模型\",{\"0\":{\"973\":1}}],[\"红色\",{\"1\":{\"971\":2}}],[\"封装了数学运算相关属性和方法\",{\"1\":{\"1368\":1}}],[\"封装完成后\",{\"1\":{\"1335\":1,\"1336\":1}}],[\"封装\",{\"1\":{\"1279\":1}}],[\"封装周围的\",{\"1\":{\"968\":1}}],[\"封装工具函数\",{\"0\":{\"737\":1}}],[\"盛装内容的容器\",{\"1\":{\"968\":1}}],[\"摆盒子\",{\"1\":{\"967\":1}}],[\"往后截取\",{\"1\":{\"1376\":1}}],[\"往往只会执行一次\",{\"1\":{\"1346\":1}}],[\"往往会因为缺少\",{\"1\":{\"1003\":1}}],[\"往盒子里面装内容\",{\"1\":{\"967\":1}}],[\"往上一项栈顶对象的\",{\"1\":{\"663\":1}}],[\"划分的份数\",{\"1\":{\"966\":2}}],[\"划分标准不一\",{\"1\":{\"966\":1}}],[\"⑨\",{\"1\":{\"966\":1}}],[\"⑧\",{\"1\":{\"966\":1}}],[\"⑦\",{\"1\":{\"966\":1}}],[\"⑥\",{\"1\":{\"966\":1}}],[\"⑤\",{\"1\":{\"966\":1,\"1271\":1}}],[\"份也可以是\",{\"1\":{\"966\":1}}],[\"牺牲一些效果\",{\"1\":{\"966\":1}}],[\"忽略多个空格和换行\",{\"1\":{\"1238\":1}}],[\"忽略查询的其余部分\",{\"1\":{\"964\":1}}],[\"忽悠阶段\",{\"1\":{\"593\":1}}],[\"运算结果可以是各种类型\",{\"1\":{\"1271\":1}}],[\"运算符用于检查对象是否包含某个属性\",{\"1\":{\"1401\":1}}],[\"运算符用于否定媒体查询\",{\"1\":{\"964\":1}}],[\"运算符也叫操作符\",{\"1\":{\"1253\":1}}],[\"运算符的误判\",{\"1\":{\"1014\":1}}],[\"运算符仅在整个查询匹配时才用于应用样式\",{\"1\":{\"964\":1}}],[\"运算符\",{\"0\":{\"1253\":1,\"1401\":1},\"1\":{\"964\":3,\"1171\":1}}],[\"运行环境分类\",{\"1\":{\"1422\":1}}],[\"运行环境\",{\"0\":{\"1422\":1}}],[\"运行环境提供的对象\",{\"1\":{\"1340\":1}}],[\"运行的平台\",{\"1\":{\"1027\":1}}],[\"运行成功后\",{\"1\":{\"760\":1}}],[\"运行流程图\",{\"0\":{\"759\":1}}],[\"运行时声明\",{\"1\":{\"587\":1}}],[\"运行\",{\"1\":{\"529\":1,\"1269\":1}}],[\"运行阶段\",{\"1\":{\"165\":1}}],[\"运行效率高\",{\"1\":{\"402\":1}}],[\"运行效率\",{\"1\":{\"128\":1,\"485\":1}}],[\"电脑屏幕\",{\"1\":{\"964\":1}}],[\"媒体特性必须加小括号包含\",{\"1\":{\"964\":1}}],[\"媒体特性必须有小括号包含\",{\"1\":{\"964\":1}}],[\"媒体特性\",{\"1\":{\"964\":1}}],[\"媒体类型\",{\"1\":{\"964\":2}}],[\"媒体查询提供不同设备\",{\"1\":{\"966\":1}}],[\"媒体查询要按照从小到大或者从大到小的顺序来写\",{\"1\":{\"964\":1}}],[\"媒体查询是\",{\"1\":{\"964\":1}}],[\"媒体查询\",{\"0\":{\"964\":1},\"1\":{\"959\":1,\"962\":1,\"966\":1}}],[\"平时使用的强制类型转换实际上调用的就是\",{\"1\":{\"1339\":1}}],[\"平时很少给文字加斜体\",{\"1\":{\"885\":1}}],[\"平板电脑\",{\"1\":{\"964\":1}}],[\"平板等设备都用得到多媒体查询\",{\"1\":{\"964\":1}}],[\"怎么样让屏幕发生变化的时候元素高度和宽度等比例缩放\",{\"1\":{\"962\":1}}],[\"弹性布局\",{\"1\":{\"959\":1}}],[\"弹出自己的\",{\"1\":{\"635\":1}}],[\"弹出target防止data上每个属性都产生依赖\",{\"1\":{\"626\":1}}],[\"弹出堆的顶点后需要调用\",{\"1\":{\"392\":1}}],[\"百分比布局\",{\"1\":{\"959\":1}}],[\"百度新闻首页的导航栏\",{\"1\":{\"995\":1}}],[\"百度手机\",{\"1\":{\"943\":1}}],[\"百度\",{\"1\":{\"667\":2,\"668\":1,\"669\":1,\"985\":1}}],[\"京东自主研发的图片压缩技术\",{\"1\":{\"955\":1}}],[\"倍图的情况\",{\"1\":{\"953\":1}}],[\"倍图\",{\"1\":{\"953\":1}}],[\"英文字母大小写\",{\"1\":{\"1053\":1}}],[\"英文官网\",{\"1\":{\"79\":1,\"400\":1}}],[\"英语\",{\"1\":{\"1033\":1}}],[\"英寸\",{\"1\":{\"952\":1}}],[\"尺寸操作\",{\"0\":{\"1324\":1}}],[\"尺寸位置操作\",{\"0\":{\"1323\":1}}],[\"尺寸比例即可\",{\"1\":{\"966\":1}}],[\"尺寸\",{\"1\":{\"952\":1}}],[\"称为回调函数\",{\"1\":{\"1276\":1}}],[\"称为物理像素比或者屏幕像素比\",{\"1\":{\"952\":1}}],[\"称为标签的属性\",{\"1\":{\"867\":1}}],[\"物理像素点指的是屏幕显示的最小颗粒\",{\"1\":{\"952\":1}}],[\"物理像素比\",{\"0\":{\"952\":1},\"1\":{\"952\":1}}],[\"物理像素\",{\"0\":{\"952\":1}}],[\"理想中的状态\",{\"1\":{\"980\":1}}],[\"理想视口\",{\"0\":{\"949\":1},\"1\":{\"949\":1}}],[\"理论上其余的兄弟元素也要浮动\",{\"1\":{\"980\":1}}],[\"理解\",{\"0\":{\"406\":1,\"420\":1,\"1053\":1},\"1\":{\"485\":1,\"486\":1,\"504\":1}}],[\"视频等都可以添加超链接\",{\"1\":{\"1043\":1}}],[\"视频标签\",{\"0\":{\"1021\":1}}],[\"视觉视口\",{\"0\":{\"948\":1}}],[\"视觉视口和理想视口\",{\"1\":{\"946\":1}}],[\"视口默认缩放比例\",{\"1\":{\"950\":1}}],[\"视口宽度和设备保持一致\",{\"1\":{\"950\":1}}],[\"视口标签与样式初始化示例\",{\"1\":{\"960\":1}}],[\"视口标签\",{\"0\":{\"950\":1}}],[\"视口标签的主要目的\",{\"1\":{\"949\":1}}],[\"视口标签通知浏览器操作\",{\"1\":{\"949\":1}}],[\"视口可以分为布局视口\",{\"1\":{\"946\":1}}],[\"视口就是浏览器显示页面内容的屏幕区域\",{\"1\":{\"946\":1}}],[\"视口\",{\"0\":{\"946\":1}}],[\"视图组件中使用\",{\"1\":{\"827\":1}}],[\"视图组件调用\",{\"0\":{\"813\":1}}],[\"视图组件\",{\"0\":{\"789\":1,\"804\":1,\"827\":1},\"1\":{\"753\":1,\"823\":1}}],[\"视图模型\",{\"1\":{\"467\":1}}],[\"视图\",{\"1\":{\"467\":1,\"749\":1}}],[\"近年来\",{\"1\":{\"944\":1}}],[\"近期已经没有维护了\",{\"1\":{\"818\":1}}],[\"屏幕适配\",{\"1\":{\"1016\":1}}],[\"屏幕宽度\",{\"1\":{\"966\":2}}],[\"屏幕下\",{\"1\":{\"966\":2}}],[\"屏幕刷新率\",{\"0\":{\"260\":1}}],[\"屏等\",{\"1\":{\"944\":1}}],[\"甚至连引用父级选择器的标记\",{\"1\":{\"1010\":1}}],[\"甚至\",{\"1\":{\"944\":1}}],[\"甚至可以添加到<body><\",{\"1\":{\"221\":1}}],[\"兼容\",{\"1\":{\"1281\":1}}],[\"兼容移动端主流浏览器\",{\"1\":{\"943\":1}}],[\"兼容性较差\",{\"1\":{\"920\":1,\"995\":1}}],[\"兼容性较好\",{\"1\":{\"439\":1}}],[\"兼容性良好\",{\"1\":{\"919\":1}}],[\"兼容性最好\",{\"1\":{\"918\":1}}],[\"兼容性\",{\"1\":{\"917\":1}}],[\"兼容性和\",{\"1\":{\"439\":1}}],[\"猎豹\",{\"1\":{\"943\":1}}],[\"谷歌开发的一种旨在加快图片加载速度的图片格式\",{\"1\":{\"955\":1}}],[\"谷歌浏览器\",{\"1\":{\"945\":1}}],[\"谷歌浏览器默认\",{\"1\":{\"883\":1}}],[\"谷歌\",{\"1\":{\"943\":1}}],[\"安全\",{\"1\":{\"943\":1}}],[\"安装工具\",{\"1\":{\"1192\":1}}],[\"安装开发依赖\",{\"1\":{\"578\":1}}],[\"安装\",{\"1\":{\"573\":1,\"821\":1,\"822\":1}}],[\"安装依赖\",{\"0\":{\"784\":1},\"1\":{\"529\":1}}],[\"安装或者升级你的\",{\"1\":{\"527\":1}}],[\"安装配置\",{\"1\":{\"519\":1}}],[\"欧朋\",{\"1\":{\"943\":1}}],[\"→3\",{\"1\":{\"1428\":1}}],[\"→2\",{\"1\":{\"1428\":1}}],[\"→\",{\"1\":{\"940\":1,\"1025\":2,\"1154\":1,\"1251\":2,\"1419\":2,\"1423\":4,\"1426\":3,\"1429\":2,\"1436\":2}}],[\"私有属性\",{\"0\":{\"1224\":1},\"1\":{\"935\":4}}],[\"∞\",{\"1\":{\"932\":1}}],[\"降低网站流量费用\",{\"1\":{\"1028\":1}}],[\"降低样式复杂性\",{\"1\":{\"931\":1}}],[\"降低代码耦合度\",{\"1\":{\"790\":1}}],[\"恰当使用继承可以简化代码\",{\"1\":{\"931\":1}}],[\"垂直坐标\",{\"1\":{\"1122\":1}}],[\"垂直的块级盒子显示用标准流布局\",{\"1\":{\"1002\":1}}],[\"垂直间距取两个值中的较大者\",{\"1\":{\"971\":1}}],[\"垂直对齐文本的上标\",{\"1\":{\"924\":1}}],[\"垂直对齐文本的下标\",{\"1\":{\"924\":1}}],[\"垂直属性\",{\"0\":{\"924\":1}}],[\"垂直阴影的位置\",{\"1\":{\"912\":1,\"913\":1}}],[\"挑选相应图标并获取类名\",{\"1\":{\"919\":1,\"920\":1}}],[\"挑选相应图标并获取字体编码\",{\"1\":{\"918\":1}}],[\"拷贝对象而不是地址\",{\"1\":{\"1332\":1}}],[\"拷贝项目下面生成的\",{\"1\":{\"918\":1,\"919\":1,\"920\":1}}],[\"拷贝一个新\",{\"1\":{\"323\":1}}],[\"及以下不支持\",{\"1\":{\"1142\":1}}],[\"及以下的浏览器中不会将空白文本当成子节点\",{\"1\":{\"1087\":1}}],[\"及现代浏览器\",{\"1\":{\"920\":1}}],[\"及所有现代浏览器\",{\"1\":{\"918\":1,\"919\":1}}],[\"及其更早版本不支持第二个参数\",{\"1\":{\"1102\":1}}],[\"及其简写\",{\"1\":{\"473\":2}}],[\"及其后面的内容就是\",{\"1\":{\"439\":1}}],[\"及其子组件\",{\"1\":{\"97\":1}}],[\"灵活性\",{\"1\":{\"917\":1}}],[\"轻\",{\"1\":{\"917\":1}}],[\"轻量级\",{\"1\":{\"917\":1,\"1279\":1}}],[\"轴到点\",{\"1\":{\"1370\":1}}],[\"轴\",{\"1\":{\"996\":1}}],[\"轴同理\",{\"1\":{\"916\":1}}],[\"轴右边走是正值\",{\"1\":{\"916\":1}}],[\"溢出显示隐藏\",{\"1\":{\"914\":1}}],[\"溢出文字省略号显示\",{\"0\":{\"925\":1},\"1\":{\"900\":1}}],[\"逗号分隔\",{\"0\":{\"1295\":1}}],[\"逗号分隔列表中的每个查询都与其他查询分开处理\",{\"1\":{\"964\":1}}],[\"逗号操作符\",{\"0\":{\"1265\":1}}],[\"逗号用于将多个媒体查询合并为一个规则\",{\"1\":{\"964\":1}}],[\"逗号\",{\"1\":{\"913\":1,\"964\":1}}],[\"逗号可以理解为\",{\"1\":{\"872\":1}}],[\"阴影属性之间用\",{\"1\":{\"913\":1}}],[\"阴影的颜色\",{\"1\":{\"912\":1,\"913\":1}}],[\"阴影的尺寸\",{\"1\":{\"912\":1}}],[\"水平阴影的位置\",{\"1\":{\"912\":1,\"913\":1}}],[\"矩形设置高度的一半就可以\",{\"1\":{\"911\":1}}],[\"圆角边框\",{\"0\":{\"911\":1}}],[\"测量盒子大小的时候\",{\"1\":{\"909\":1}}],[\"测试友好\",{\"1\":{\"782\":1}}],[\"测试对象\",{\"1\":{\"674\":1}}],[\"凸边\",{\"1\":{\"909\":1}}],[\"凹边\",{\"1\":{\"909\":1}}],[\"凹槽\",{\"1\":{\"909\":1}}],[\"频度高\",{\"1\":{\"909\":1}}],[\"虚线边框\",{\"1\":{\"909\":2}}],[\"虚拟节点创建函数\",{\"1\":{\"692\":1}}],[\"虚拟节点上树\",{\"0\":{\"669\":1},\"1\":{\"669\":1}}],[\"虚拟元素中\",{\"1\":{\"566\":1}}],[\"虚拟dom和diff算法\",{\"0\":{\"664\":1}}],[\"虚拟dom或者react元素\",{\"1\":{\"306\":1,\"315\":1,\"338\":1,\"373\":1}}],[\"虚拟dom初次挂载\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"虚拟dom首次创建时走这里\",{\"1\":{\"272\":1,\"318\":1}}],[\"虚拟dom\",{\"1\":{\"271\":1,\"272\":1}}],[\"虚拟dom提供pendingprops用于创建fiber节点的属性\",{\"1\":{\"270\":1,\"272\":1}}],[\"虚拟\",{\"0\":{\"120\":1},\"1\":{\"120\":1,\"133\":2,\"266\":1,\"272\":2,\"664\":1,\"666\":1,\"670\":1,\"696\":1,\"704\":1}}],[\"虚拟列表指的是\",{\"1\":{\"96\":1}}],[\"虚拟滚动实现步骤\",{\"1\":{\"96\":1}}],[\"虚拟滚动的实现是在处理用户滚动时\",{\"1\":{\"96\":1}}],[\"虚拟滚动参考react\",{\"1\":{\"95\":1}}],[\"虚拟滚动\",{\"0\":{\"94\":1}}],[\"固定在版心右侧位置\",{\"1\":{\"994\":1}}],[\"固定定位特点\",{\"1\":{\"995\":1}}],[\"固定定位也是脱标的\",{\"1\":{\"994\":1}}],[\"固定定位不再占有原先的位置\",{\"1\":{\"994\":1}}],[\"固定定位是元素固定于浏览器可视区的位置\",{\"1\":{\"994\":1}}],[\"固定定位\",{\"0\":{\"994\":1},\"1\":{\"989\":1,\"993\":1,\"998\":2,\"999\":2}}],[\"固定\",{\"1\":{\"906\":1,\"1225\":1}}],[\"另一些时候自动变成\",{\"1\":{\"995\":1}}],[\"另一个等比例缩放\",{\"1\":{\"1044\":1}}],[\"另一个冲突的样式\",{\"1\":{\"930\":1}}],[\"另一个值省略\",{\"1\":{\"905\":1}}],[\"另一种情况是数组多重嵌套\",{\"1\":{\"651\":1}}],[\"透明度必须写\",{\"1\":{\"1307\":1}}],[\"透明度\",{\"1\":{\"908\":1}}],[\"透明\",{\"1\":{\"902\":1}}],[\"背景缩放\",{\"0\":{\"954\":1}}],[\"背景简写\",{\"1\":{\"908\":1}}],[\"背景固定\",{\"1\":{\"908\":1}}],[\"背景滚动\",{\"1\":{\"908\":2}}],[\"背景附着\",{\"1\":{\"908\":1}}],[\"背景位置\",{\"1\":{\"908\":2}}],[\"背景总结\",{\"1\":{\"908\":1}}],[\"背景色半透明\",{\"0\":{\"908\":1},\"1\":{\"908\":1}}],[\"背景复合写法\",{\"0\":{\"907\":1}}],[\"背景颜色半透明\",{\"1\":{\"908\":1}}],[\"背景颜色为红色\",{\"1\":{\"902\":1}}],[\"背景颜色\",{\"0\":{\"902\":1},\"1\":{\"907\":1,\"908\":2}}],[\"背景图像滚动\",{\"1\":{\"907\":1}}],[\"背景图像固定\",{\"0\":{\"906\":1}}],[\"背景图像固定等\",{\"1\":{\"901\":1}}],[\"背景图片高度\",{\"1\":{\"954\":1}}],[\"背景图片宽度\",{\"1\":{\"954\":1}}],[\"背景图片地址\",{\"1\":{\"908\":1}}],[\"背景图片位置\",{\"0\":{\"905\":1},\"1\":{\"901\":1,\"907\":1}}],[\"背景图片\",{\"0\":{\"903\":1},\"1\":{\"901\":1,\"908\":1}}],[\"背景平铺\",{\"0\":{\"904\":1},\"1\":{\"901\":1,\"907\":1,\"908\":1}}],[\"背景属性可以设置背景颜色\",{\"1\":{\"901\":1}}],[\"背景属性\",{\"0\":{\"901\":1}}],[\"敲了\",{\"1\":{\"900\":2}}],[\"希望折成多行显示\",{\"1\":{\"900\":1}}],[\"希望你会举一反三\",{\"1\":{\"519\":1}}],[\"区别就是该方法支持负数\",{\"1\":{\"1376\":1}}],[\"区别只是\",{\"1\":{\"1010\":1}}],[\"区别\",{\"0\":{\"1301\":1},\"1\":{\"900\":1,\"1091\":1,\"1451\":1}}],[\"区分动静态\",{\"1\":{\"524\":1}}],[\"区分父节点下不同子节点\",{\"1\":{\"252\":1}}],[\"区分代码与表达式\",{\"0\":{\"124\":1}}],[\"脚本代码块的语法是否正确\",{\"1\":{\"1420\":1}}],[\"脚本\",{\"1\":{\"900\":1,\"1062\":1}}],[\"脚本是中国\",{\"1\":{\"900\":1}}],[\"脚本的断行规则\",{\"1\":{\"900\":1}}],[\"脚手架模板项目结构\",{\"1\":{\"494\":1}}],[\"脚手架隐藏了所有\",{\"1\":{\"493\":1}}],[\"脚手架是\",{\"1\":{\"492\":1}}],[\"脚手架以vue\",{\"1\":{\"491\":1}}],[\"脚手架项目结构\",{\"0\":{\"138\":1}}],[\"脚手架\",{\"0\":{\"135\":1,\"136\":1,\"491\":1},\"1\":{\"246\":1,\"522\":1}}],[\"剪切文本\",{\"1\":{\"897\":1}}],[\"剪开更新链表\",{\"1\":{\"272\":1}}],[\"居中对齐\",{\"1\":{\"890\":1}}],[\"颜色等等\",{\"1\":{\"918\":1}}],[\"颜色值\",{\"1\":{\"912\":1,\"913\":1}}],[\"颜色\",{\"1\":{\"888\":1,\"933\":1,\"1014\":1,\"1019\":1,\"1028\":1}}],[\"颜色的\",{\"1\":{\"192\":1}}],[\"记住倾斜是\",{\"1\":{\"887\":1}}],[\"记住数字不要跟单位\",{\"1\":{\"887\":1}}],[\"记住加粗是\",{\"1\":{\"887\":1}}],[\"记录key\",{\"1\":{\"692\":1}}],[\"记录执行本方法开始时的pos值\",{\"1\":{\"646\":1,\"655\":1}}],[\"记录为依赖\",{\"1\":{\"593\":1}}],[\"记录日志以及执行其他包含副作用的操作都是不被允许的\",{\"1\":{\"365\":1}}],[\"记录\",{\"1\":{\"140\":1}}],[\"记录的更新内容来重设子属性数据\",{\"1\":{\"103\":1}}],[\"记录修改的类型\",{\"1\":{\"103\":1}}],[\"粗细\",{\"1\":{\"887\":1,\"909\":1}}],[\"粗细和文字样式\",{\"1\":{\"881\":1}}],[\"风格\",{\"1\":{\"887\":1}}],[\"细体\",{\"1\":{\"884\":1}}],[\"细节\",{\"1\":{\"360\":1}}],[\"像索\",{\"1\":{\"969\":1}}],[\"像素值或百分比\",{\"1\":{\"1048\":1}}],[\"像素值\",{\"1\":{\"1048\":2}}],[\"像素顺时针\",{\"1\":{\"969\":1}}],[\"像素左是\",{\"1\":{\"969\":1}}],[\"像素下\",{\"1\":{\"969\":1}}],[\"像素的页面元素在\",{\"1\":{\"966\":1}}],[\"像素单位\",{\"1\":{\"892\":1}}],[\"像素\",{\"1\":{\"883\":1,\"887\":1,\"1044\":3}}],[\"像服务端框架处理崩溃一样\",{\"1\":{\"243\":1}}],[\"块级作用域\",{\"1\":{\"1158\":1,\"1159\":1}}],[\"块级盒子如果没有设置宽度\",{\"1\":{\"978\":1}}],[\"块级元素添加绝对或者固定定位\",{\"1\":{\"998\":1}}],[\"块级元素独占一行\",{\"1\":{\"975\":1}}],[\"块级元素\",{\"1\":{\"878\":1}}],[\"块级元素特点\",{\"1\":{\"878\":1}}],[\"块\",{\"0\":{\"924\":1}}],[\"块元素转换\",{\"1\":{\"879\":1}}],[\"块元素\",{\"0\":{\"876\":1}}],[\"宽和高的比例还是\",{\"1\":{\"966\":1}}],[\"宽度高度\",{\"1\":{\"1108\":1}}],[\"宽度高度可重新设置\",{\"1\":{\"1020\":1}}],[\"宽度设置的是\",{\"1\":{\"950\":1}}],[\"宽度直接设置无效\",{\"1\":{\"877\":1}}],[\"宽度默认是容器\",{\"1\":{\"876\":1}}],[\"宽度\",{\"1\":{\"876\":1,\"909\":1,\"950\":1}}],[\"宽高\",{\"1\":{\"854\":1}}],[\"隔墙法\",{\"1\":{\"985\":1}}],[\"隔开\",{\"1\":{\"913\":1,\"1341\":1}}],[\"隔开符号及用法\",{\"1\":{\"873\":1}}],[\"隔离\",{\"1\":{\"139\":1}}],[\"光标焦点闪烁事件\",{\"1\":{\"1330\":1}}],[\"光标\",{\"1\":{\"873\":1,\"1057\":1}}],[\"循顺序声明\",{\"1\":{\"873\":1}}],[\"循环控制语句\",{\"0\":{\"1277\":1}}],[\"循环可以使用的范围包括数组\",{\"1\":{\"1275\":1}}],[\"循环内部调用的是数据结构的\",{\"1\":{\"1275\":1}}],[\"循环内部逻辑分析\",{\"1\":{\"676\":1}}],[\"循环主要用于遍历对象\",{\"1\":{\"1274\":1}}],[\"循环三个表达式都可以有多部分组成\",{\"1\":{\"1273\":1}}],[\"循环三个表达式都可以省略\",{\"1\":{\"1273\":1}}],[\"循环的执行特点\",{\"1\":{\"1273\":1}}],[\"循环的持续条件是\",{\"1\":{\"676\":1}}],[\"循环至少执行一次\",{\"1\":{\"1272\":1}}],[\"循环特点\",{\"1\":{\"1272\":2}}],[\"循环语句\",{\"0\":{\"1270\":1}}],[\"循环时\",{\"1\":{\"1171\":1}}],[\"循环时需要使用高阶函数\",{\"1\":{\"159\":1}}],[\"循环早已执行完毕\",{\"1\":{\"1120\":1}}],[\"循环会在页面加载完成之后立即执行\",{\"1\":{\"1120\":1}}],[\"循环和\",{\"1\":{\"1016\":1}}],[\"循环进行条件\",{\"1\":{\"683\":1,\"691\":1}}],[\"循环结构的执行步骤\",{\"1\":{\"1270\":1}}],[\"循环结构分析\",{\"1\":{\"676\":1}}],[\"循环结束后\",{\"1\":{\"683\":2,\"691\":2}}],[\"循环结束之后\",{\"0\":{\"682\":1},\"1\":{\"662\":1}}],[\"循环结束\",{\"1\":{\"647\":1}}],[\"循环完之后还要判断并过滤掉已经被删除的旧节点\",{\"1\":{\"676\":1}}],[\"循环遍历该对象时返回的顺序一致\",{\"1\":{\"1404\":1}}],[\"循环遍历到\",{\"1\":{\"1403\":1}}],[\"循环遍历它的成员\",{\"1\":{\"1275\":1}}],[\"循环遍历\",{\"1\":{\"663\":1,\"1168\":1}}],[\"循环遍历调用createwatcher函数\",{\"1\":{\"628\":1}}],[\"循环过程中\",{\"1\":{\"661\":1}}],[\"循环开始\",{\"1\":{\"647\":1}}],[\"循环tokens\",{\"1\":{\"644\":1}}],[\"循环模式\",{\"0\":{\"640\":1}}],[\"循环变量改成\",{\"1\":{\"524\":1}}],[\"循环查找\",{\"1\":{\"298\":1}}],[\"循环派发队列\",{\"1\":{\"295\":1}}],[\"循环退出后\",{\"1\":{\"676\":1}}],[\"循环退出\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"循环\",{\"0\":{\"160\":1,\"1016\":1,\"1271\":1,\"1272\":1,\"1273\":1,\"1274\":1,\"1275\":1,\"1276\":1},\"1\":{\"287\":1,\"296\":1,\"676\":1,\"1016\":1,\"1271\":1,\"1274\":1,\"1275\":1,\"1277\":2}}],[\"循环执行callback回调\",{\"1\":{\"116\":1}}],[\"各种写法都能用\",{\"1\":{\"1413\":1}}],[\"各种标签都是元素节点\",{\"1\":{\"1082\":1}}],[\"各参数用逗号分隔\",{\"1\":{\"1063\":1}}],[\"各字体之间必须使用英文逗号隔开\",{\"1\":{\"882\":1}}],[\"各选择器通过\",{\"1\":{\"872\":1}}],[\"各项配置和\",{\"1\":{\"694\":1}}],[\"各项参数做配置\",{\"1\":{\"66\":1}}],[\"吐血推荐\",{\"1\":{\"868\":1}}],[\"权重虽然会叠加\",{\"1\":{\"932\":1}}],[\"权重叠加\",{\"1\":{\"932\":1}}],[\"权重由\",{\"1\":{\"932\":1}}],[\"权重高\",{\"1\":{\"868\":1}}],[\"权限列表\",{\"1\":{\"731\":1}}],[\"权限控制的具体规则\",{\"1\":{\"436\":1}}],[\"规定的\",{\"1\":{\"1381\":1}}],[\"规定的字符\",{\"1\":{\"1381\":2}}],[\"规定要提取的子串的第一个字符在\",{\"1\":{\"1376\":1}}],[\"规定此input元素首次加载时应当被选中\",{\"1\":{\"1057\":1}}],[\"规定input元素的值\",{\"1\":{\"1057\":1}}],[\"规定单元格之间的空白\",{\"1\":{\"1048\":1}}],[\"规定单元边沿与其内容之间的空白\",{\"1\":{\"1048\":1}}],[\"规定表格的宽度\",{\"1\":{\"1048\":1}}],[\"规定表格单元是否拥有边框\",{\"1\":{\"1048\":1}}],[\"规定表格相对周围元素的对齐方式\",{\"1\":{\"1048\":1}}],[\"规定视频下载时显示的图像\",{\"1\":{\"1021\":1}}],[\"规定视频的音频输出应该被静音\",{\"1\":{\"1021\":1}}],[\"规定输入字的合法数字间隔\",{\"1\":{\"1019\":1}}],[\"规定输入字段中的字符的最大长度\",{\"1\":{\"1057\":1}}],[\"规定输入字段的值的正则表达式\",{\"1\":{\"1019\":1}}],[\"规定输入字段在页面加载时是否获得焦点\",{\"1\":{\"1019\":1}}],[\"规定帮助用户填写输入字段的提示\",{\"1\":{\"1019\":1}}],[\"规定是否使用输入字段的自动完成功能\",{\"1\":{\"1019\":1}}],[\"规定当文本溢出时\",{\"1\":{\"926\":1}}],[\"规定字符间没有额外的空间\",{\"1\":{\"896\":1}}],[\"规定添加到文本的修饰\",{\"1\":{\"891\":1}}],[\"规定应该从父元素继承\",{\"1\":{\"886\":1,\"894\":1,\"895\":1,\"896\":1,\"898\":1,\"924\":1}}],[\"规范\",{\"1\":{\"867\":1,\"1159\":1,\"1164\":1}}],[\"规则组成\",{\"1\":{\"855\":1}}],[\"规则\",{\"1\":{\"358\":1,\"854\":1}}],[\"规则有三\",{\"1\":{\"354\":1}}],[\"嵌入式\",{\"1\":{\"865\":1}}],[\"嵌套块元素垂直外边距塌陷\",{\"1\":{\"971\":1}}],[\"嵌套最里面的\",{\"1\":{\"656\":1}}],[\"嵌套功能\",{\"1\":{\"648\":1}}],[\"嵌套数组表示\",{\"1\":{\"644\":1}}],[\"嵌套\",{\"0\":{\"635\":1,\"648\":1,\"1010\":1}}],[\"嵌套路由\",{\"0\":{\"426\":1}}],[\"嵌套地狱\",{\"1\":{\"89\":1}}],[\"较少\",{\"1\":{\"868\":1,\"873\":2}}],[\"较多\",{\"1\":{\"864\":1,\"868\":1,\"873\":3}}],[\"较好\",{\"1\":{\"458\":1}}],[\"口诀\",{\"1\":{\"863\":1}}],[\"面向对象思维\",{\"1\":{\"862\":1}}],[\"面向函数式组件提供的浅比较\",{\"1\":{\"100\":1}}],[\"见附件\",{\"1\":{\"862\":1}}],[\"长名称或词组可以使用中横线来为选择器命名\",{\"1\":{\"862\":1}}],[\"长度\",{\"1\":{\"1352\":1,\"1376\":1}}],[\"长度为0\",{\"1\":{\"661\":1}}],[\"长度不为0\",{\"1\":{\"661\":1}}],[\"冒号后面\",{\"1\":{\"859\":1}}],[\"冒泡阶段\",{\"0\":{\"1135\":1}}],[\"冒泡\",{\"1\":{\"286\":1}}],[\"强烈推荐\",{\"1\":{\"959\":1}}],[\"强烈推荐样式选择器\",{\"1\":{\"858\":1}}],[\"强\",{\"1\":{\"917\":1}}],[\"强制转换\",{\"0\":{\"1413\":1}}],[\"强制类型转换\",{\"0\":{\"1248\":1}}],[\"强制清空缓存刷新页面\",{\"1\":{\"1065\":1}}],[\"强制字符串过长在一行显示\",{\"1\":{\"900\":1}}],[\"强制更新\",{\"1\":{\"849\":1}}],[\"强制更新render\",{\"1\":{\"749\":1}}],[\"强制\",{\"1\":{\"700\":1}}],[\"强制绑定\",{\"1\":{\"143\":1}}],[\"书写规范\",{\"0\":{\"1238\":1}}],[\"书写更直观\",{\"1\":{\"919\":1}}],[\"书写更简单\",{\"1\":{\"908\":1}}],[\"书写不直观\",{\"1\":{\"919\":1}}],[\"书写特点冒号显示\",{\"1\":{\"873\":1}}],[\"书写方便\",{\"1\":{\"868\":1,\"985\":1}}],[\"书写繁琐\",{\"1\":{\"867\":1}}],[\"书写位置\",{\"1\":{\"865\":1}}],[\"书写样式\",{\"0\":{\"856\":1}}],[\"书写的内容都视作\",{\"1\":{\"230\":1}}],[\"花括号内是对该对象设置的具体样式\",{\"1\":{\"855\":1}}],[\"边界就是确定匹配模式的位置\",{\"1\":{\"1386\":1}}],[\"边界量词\",{\"0\":{\"1386\":1}}],[\"边偏移则决定了该元素的最终位置\",{\"1\":{\"989\":1}}],[\"边框\",{\"1\":{\"968\":1,\"1116\":1}}],[\"边框扩展与阴影属性\",{\"0\":{\"910\":1}}],[\"边框图像区域超出边框的量\",{\"1\":{\"909\":1}}],[\"边框图像\",{\"1\":{\"909\":1}}],[\"边框是由点组成的\",{\"1\":{\"909\":1}}],[\"边框颜色\",{\"1\":{\"909\":1}}],[\"边框宽度\",{\"1\":{\"909\":1}}],[\"边框组成\",{\"1\":{\"909\":1}}],[\"边框属性\",{\"0\":{\"909\":1}}],[\"边框样式\",{\"1\":{\"854\":1,\"909\":1}}],[\"边距\",{\"1\":{\"854\":1}}],[\"美化\",{\"1\":{\"854\":1}}],[\"美化网页\",{\"1\":{\"852\":1}}],[\"美观\",{\"1\":{\"439\":1}}],[\"于是被\",{\"1\":{\"1076\":1}}],[\"于是\",{\"1\":{\"847\":1}}],[\"探讨本质\",{\"0\":{\"846\":1}}],[\"试想这样一个场景\",{\"1\":{\"845\":1}}],[\"试图更新或者试图复用老的fiber\",{\"1\":{\"357\":1,\"361\":1}}],[\"场景假设\",{\"0\":{\"845\":1}}],[\"易造成内存泄漏\",{\"1\":{\"1456\":1}}],[\"易造成\",{\"1\":{\"843\":1}}],[\"易于测试\",{\"1\":{\"779\":1}}],[\"垃圾回收\",{\"0\":{\"843\":1},\"1\":{\"1429\":1}}],[\"占位\",{\"1\":{\"1225\":1}}],[\"占位符\",{\"1\":{\"430\":1}}],[\"占有位置\",{\"1\":{\"999\":2}}],[\"占用的内存\",{\"1\":{\"842\":1}}],[\"窗口聚焦自动查询\",{\"0\":{\"837\":1}}],[\"窗口重新聚焦\",{\"1\":{\"836\":1}}],[\"活动查询会在后台重新获取\",{\"1\":{\"836\":1}}],[\"串行\",{\"1\":{\"832\":1}}],[\"串联其他源码内容\",{\"1\":{\"693\":1}}],[\"态更好\",{\"1\":{\"829\":1}}],[\"共产生了\",{\"1\":{\"1391\":1}}],[\"共同组成\",{\"1\":{\"966\":1}}],[\"共同的部分\",{\"1\":{\"862\":1}}],[\"共同使用\",{\"1\":{\"210\":1}}],[\"共享查询等\",{\"1\":{\"828\":1}}],[\"知道数据何时\",{\"1\":{\"825\":1}}],[\"知道它儿子的虚拟dom信息\",{\"1\":{\"272\":1,\"318\":1}}],[\"删\",{\"1\":{\"816\":1}}],[\"删除一个不存在的属性\",{\"1\":{\"1406\":1}}],[\"删除后\",{\"1\":{\"1406\":1}}],[\"删除匹配元素集合中的所有子节点\",{\"1\":{\"1322\":1}}],[\"删除匹配元素自身\",{\"1\":{\"1322\":1}}],[\"删除元素\",{\"0\":{\"1322\":1}}],[\"删除类\",{\"0\":{\"1299\":1}}],[\"删除子节点\",{\"1\":{\"1094\":1}}],[\"删除多余的单元格\",{\"1\":{\"1050\":1}}],[\"删除线\",{\"1\":{\"891\":2,\"1037\":1}}],[\"删除旧节点\",{\"1\":{\"692\":1}}],[\"删除属性\",{\"1\":{\"548\":1}}],[\"删除\",{\"1\":{\"472\":2,\"578\":1}}],[\"删除map中所有剩下的老fiber\",{\"1\":{\"361\":1}}],[\"删除等操作\",{\"1\":{\"358\":1}}],[\"删除等操作暂不实现\",{\"1\":{\"273\":1}}],[\"删除剩下的老fiber\",{\"1\":{\"357\":1,\"361\":1}}],[\"删除剩下的全部fiber\",{\"1\":{\"352\":1,\"357\":1,\"361\":1}}],[\"删除从currentfirstchild之后的所有fiber节点\",{\"1\":{\"352\":1,\"357\":1,\"361\":1}}],[\"删除的fiber\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"删除老fiber\",{\"1\":{\"348\":1,\"352\":1,\"357\":2,\"361\":2}}],[\"删除老节点添加新节点\",{\"1\":{\"350\":1}}],[\"删除老节点\",{\"1\":{\"343\":1}}],[\"删除侦听器\",{\"1\":{\"234\":1}}],[\"缓存管理\",{\"0\":{\"848\":1}}],[\"缓存\",{\"0\":{\"815\":1,\"836\":1},\"1\":{\"825\":1,\"828\":1}}],[\"缓存路由组件\",{\"0\":{\"433\":1}}],[\"集成了\",{\"1\":{\"811\":1}}],[\"样板代码过多\",{\"1\":{\"809\":1}}],[\"样式操作\",{\"0\":{\"1292\":1}}],[\"样式拥有最高优先级\",{\"1\":{\"1105\":1}}],[\"样式值\",{\"1\":{\"1105\":1}}],[\"样式追踪\",{\"1\":{\"1031\":1}}],[\"样式表中所有涉及\",{\"1\":{\"966\":1}}],[\"样式表\",{\"1\":{\"964\":1}}],[\"样式表可以分为三大类\",{\"1\":{\"865\":1}}],[\"样式可以改动数值\",{\"1\":{\"940\":1}}],[\"样式语法\",{\"0\":{\"938\":1}}],[\"样式不冲突\",{\"1\":{\"930\":1}}],[\"样式冲突\",{\"1\":{\"930\":1}}],[\"样式单独写到\",{\"1\":{\"868\":1}}],[\"样式\",{\"1\":{\"861\":1,\"863\":1,\"867\":1,\"887\":1,\"940\":2,\"1279\":1}}],[\"样式大小写\",{\"0\":{\"858\":1}}],[\"样式的\",{\"1\":{\"855\":1}}],[\"样式的类名不确定\",{\"1\":{\"454\":1}}],[\"样式的类名指定不要用\",{\"1\":{\"123\":1}}],[\"样式交给\",{\"1\":{\"854\":1}}],[\"样式来控制显示\",{\"1\":{\"474\":1}}],[\"样式绑定\",{\"0\":{\"453\":1}}],[\"样式名中含有\",{\"1\":{\"1105\":1}}],[\"样式名驼峰命名法\",{\"1\":{\"455\":1}}],[\"样式名\",{\"1\":{\"139\":1,\"1105\":1,\"1106\":1}}],[\"繁琐\",{\"1\":{\"809\":1}}],[\"字面值\",{\"1\":{\"1239\":1}}],[\"字面量\",{\"0\":{\"1353\":1},\"1\":{\"1239\":1}}],[\"字面量与变量\",{\"0\":{\"1239\":1}}],[\"字母\",{\"1\":{\"1048\":1}}],[\"字母或中文在间距\",{\"1\":{\"896\":1}}],[\"字符范围可以组合使用\",{\"1\":{\"1382\":1}}],[\"字符范围遵循字符编码的顺序进行匹配\",{\"1\":{\"1382\":1}}],[\"字符a\",{\"1\":{\"1382\":1}}],[\"字符\",{\"1\":{\"1381\":2,\"1382\":1}}],[\"字符模式是一组特殊格式的字符串\",{\"1\":{\"1380\":1}}],[\"字符集\",{\"0\":{\"1034\":1}}],[\"字符间距\",{\"0\":{\"896\":1}}],[\"字符串和布尔值\",{\"1\":{\"1410\":1}}],[\"字符串直接量\",{\"1\":{\"1382\":2}}],[\"字符串来说\",{\"1\":{\"1381\":1}}],[\"字符串拆分\",{\"0\":{\"1377\":1}}],[\"字符串截取\",{\"0\":{\"1376\":1}}],[\"字符串拼接调用\",{\"1\":{\"1410\":1}}],[\"字符串拼接\",{\"0\":{\"1374\":1}}],[\"字符串获取\",{\"0\":{\"1373\":1}}],[\"字符串很多方法与数组方法有异曲同工之处\",{\"1\":{\"1372\":1}}],[\"字符串两两相加\",{\"1\":{\"1255\":1}}],[\"字符串有非数字内容\",{\"1\":{\"1250\":1}}],[\"字符串内部的引号注意加转移字符\",{\"1\":{\"1241\":1}}],[\"字符串方法\",{\"0\":{\"1202\":1}}],[\"字符串转为浮点数\",{\"1\":{\"1250\":1}}],[\"字符串转为整数\",{\"1\":{\"1250\":1}}],[\"字符串转浮点型\",{\"1\":{\"1181\":1}}],[\"字符串转整型\",{\"1\":{\"1181\":1}}],[\"字符串用以渲染页面\",{\"1\":{\"658\":1}}],[\"字符串\",{\"0\":{\"649\":1,\"1372\":1},\"1\":{\"460\":1,\"645\":1,\"649\":2,\"658\":1,\"663\":1,\"1064\":1,\"1241\":1,\"1246\":1,\"1251\":1,\"1415\":2,\"1440\":1}}],[\"字符串写法\",{\"1\":{\"454\":1}}],[\"字符串形式的\",{\"1\":{\"154\":1}}],[\"字号变大\",{\"1\":{\"1035\":1}}],[\"字号\",{\"1\":{\"887\":1}}],[\"字体图标\",{\"0\":{\"917\":1}}],[\"字体连写是有顺序的\",{\"1\":{\"887\":1}}],[\"字体连写\",{\"1\":{\"887\":1}}],[\"字体样式\",{\"1\":{\"887\":1}}],[\"字体\",{\"1\":{\"887\":1}}],[\"字体粗细\",{\"0\":{\"884\":1},\"1\":{\"887\":1}}],[\"字体大小基准值\",{\"1\":{\"966\":2}}],[\"字体大小会发现它们比例还是相同的\",{\"1\":{\"966\":1}}],[\"字体大小为\",{\"1\":{\"966\":2}}],[\"字体大小\",{\"0\":{\"883\":1},\"1\":{\"966\":2}}],[\"字体大小对齐方式\",{\"1\":{\"854\":1}}],[\"字体系列\",{\"0\":{\"882\":1},\"1\":{\"881\":1}}],[\"字体属性总结\",{\"1\":{\"887\":1}}],[\"字体属性定义\",{\"1\":{\"881\":1}}],[\"字体属性\",{\"0\":{\"881\":1}}],[\"字段\",{\"1\":{\"800\":1}}],[\"洗漱\",{\"1\":{\"795\":1}}],[\"穿⾐\",{\"1\":{\"795\":1}}],[\"穿插在其中的可调用函数方法\",{\"1\":{\"703\":1}}],[\"异常捕获数据创建新的\",{\"1\":{\"788\":1}}],[\"异步编程\",{\"1\":{\"1174\":1}}],[\"异步执行\",{\"0\":{\"1120\":1}}],[\"异步任务必须指定回调函数\",{\"1\":{\"1076\":1}}],[\"异步任务有以下三种类型\",{\"1\":{\"1076\":1}}],[\"异步任务相关回调函数添加到任务队列中\",{\"1\":{\"1076\":1}}],[\"异步任务\",{\"1\":{\"1076\":2}}],[\"异步中间件\",{\"1\":{\"850\":1}}],[\"异步请求数据后\",{\"1\":{\"823\":1}}],[\"异步方法\",{\"1\":{\"823\":2}}],[\"异步方法最直接的写法就是采用redux\",{\"1\":{\"812\":1}}],[\"异步\",{\"0\":{\"799\":1},\"1\":{\"820\":1}}],[\"异步增加\",{\"1\":{\"775\":1}}],[\"异步非阻塞调用\",{\"1\":{\"765\":1}}],[\"异步阻塞调用\",{\"1\":{\"764\":1}}],[\"异步代码\",{\"1\":{\"242\":1}}],[\"异步的问题已经由redux\",{\"1\":{\"825\":1}}],[\"异步的\",{\"1\":{\"1\":1}}],[\"竞态处理\",{\"1\":{\"782\":1}}],[\"携带着它的负载\",{\"1\":{\"781\":1}}],[\"携带内容包括\",{\"1\":{\"249\":1}}],[\"历对象自身的属性\",{\"1\":{\"1403\":1}}],[\"历史时间表\",{\"1\":{\"1233\":1}}],[\"历史介绍\",{\"0\":{\"1233\":1}}],[\"历史上曾经出现的数据转视图的方法\",{\"1\":{\"638\":1}}],[\"历经某个同步或者异步任务\",{\"1\":{\"781\":1}}],[\"驱动\",{\"1\":{\"780\":1}}],[\"受\",{\"1\":{\"1006\":1}}],[\"受益于generator\",{\"1\":{\"779\":1}}],[\"受父组件影响\",{\"1\":{\"156\":1}}],[\"詹姆斯\",{\"1\":{\"776\":1}}],[\"针对默认暴露\",{\"1\":{\"1191\":1}}],[\"针对\",{\"1\":{\"769\":1,\"809\":1,\"1385\":1}}],[\"针对简单数组的情况\",{\"1\":{\"651\":1,\"657\":1}}],[\"恢复执行\",{\"1\":{\"768\":1}}],[\"阻止冒泡\",{\"1\":{\"1331\":1}}],[\"阻止默认行为\",{\"1\":{\"1331\":1}}],[\"阻止事件的默认行为\",{\"1\":{\"471\":1}}],[\"阻塞\",{\"1\":{\"764\":1}}],[\"唯一的区别是它只关注最后\",{\"1\":{\"763\":1}}],[\"唯一标识\",{\"0\":{\"847\":1},\"1\":{\"252\":1,\"270\":1,\"272\":1}}],[\"机制支持外部事件\",{\"1\":{\"758\":1}}],[\"暴露模块数据语法\",{\"0\":{\"1190\":1}}],[\"暴露出去\",{\"1\":{\"749\":1}}],[\"暴力替换\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"思想\",{\"0\":{\"1071\":1}}],[\"思想在内的多数常用状态管理库\",{\"1\":{\"741\":1}}],[\"思路就是先获取\",{\"1\":{\"650\":1}}],[\"思路与响应式原理中\",{\"1\":{\"635\":1}}],[\"思路转变\",{\"1\":{\"634\":1}}],[\"处的字符开始\",{\"1\":{\"1376\":1}}],[\"处的字符\",{\"1\":{\"1376\":4}}],[\"处的路由守卫函数\",{\"1\":{\"740\":1}}],[\"处或字符串的结尾\",{\"1\":{\"1366\":1}}],[\"处于<\",{\"1\":{\"1032\":1}}],[\"处于不活跃状态\",{\"1\":{\"843\":1}}],[\"处于无用状态\",{\"1\":{\"843\":1}}],[\"处理请求并返回\",{\"1\":{\"1066\":1}}],[\"处理\",{\"1\":{\"943\":1,\"1206\":1,\"1376\":1}}],[\"处理状态的变化\",{\"1\":{\"840\":1}}],[\"处理复杂的异步问题时更方便\",{\"1\":{\"779\":1}}],[\"处理完之后当前项设为undefined\",{\"1\":{\"683\":1,\"691\":1}}],[\"处理成包含嵌套的\",{\"1\":{\"648\":1}}],[\"处理之后的\",{\"1\":{\"647\":1}}],[\"处理过程一同被编译掉\",{\"1\":{\"587\":1}}],[\"处理节点移动的情况\",{\"1\":{\"354\":1}}],[\"处理派发事件\",{\"1\":{\"295\":1}}],[\"处理子节点上的副作用\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"处理器的变量\",{\"1\":{\"139\":1}}],[\"处理拦截器\",{\"1\":{\"70\":1}}],[\"处理错误\",{\"1\":{\"67\":1}}],[\"处理前拦截它们\",{\"1\":{\"66\":1}}],[\"处理结果\",{\"1\":{\"9\":1}}],[\"处理服务端返回的结果\",{\"1\":{\"9\":1}}],[\"元字符就是拥有特动功能的特殊字符\",{\"1\":{\"1381\":1}}],[\"元字符修正为可匹配换行符的单个字符\",{\"1\":{\"1217\":1}}],[\"元字符\",{\"1\":{\"1217\":1,\"1381\":1}}],[\"元信息\",{\"1\":{\"737\":1}}],[\"元素操作\",{\"0\":{\"1318\":1}}],[\"元素改变\",{\"1\":{\"1291\":1}}],[\"元素中\",{\"1\":{\"1289\":3}}],[\"元素中的文本通常会保留空格和换行符\",{\"1\":{\"1020\":1}}],[\"元素变短\",{\"1\":{\"1144\":1}}],[\"元素变长\",{\"1\":{\"1144\":1}}],[\"元素正在拖动时触发\",{\"1\":{\"1142\":1}}],[\"元素滚动系列\",{\"0\":{\"1112\":1}}],[\"元素偏移量\",{\"0\":{\"1108\":1}}],[\"元素宽高移动属性\",{\"0\":{\"1107\":1}}],[\"元素不存在该类名\",{\"1\":{\"1099\":1}}],[\"元素不浮动\",{\"1\":{\"977\":1}}],[\"元素已包含了该类名\",{\"1\":{\"1099\":1}}],[\"元素自删\",{\"1\":{\"1094\":1}}],[\"元素拷贝\",{\"0\":{\"1089\":1}}],[\"元素节点\",{\"0\":{\"1082\":1,\"1085\":1},\"1\":{\"1078\":1}}],[\"元素定义标注\",{\"1\":{\"1057\":1}}],[\"元素包含文档的所有内容\",{\"1\":{\"1031\":1}}],[\"元素提供各种附加信息\",{\"1\":{\"1029\":1}}],[\"元素就是构成\",{\"1\":{\"1029\":1}}],[\"元素都不会触发外边距合并问题\",{\"1\":{\"998\":1}}],[\"元素都重新解析更新\",{\"1\":{\"475\":1}}],[\"元素在移动位置的时候\",{\"1\":{\"992\":1}}],[\"元素的子元素选择器\",{\"1\":{\"1328\":1}}],[\"元素的开始标签中进行定义\",{\"1\":{\"1029\":1}}],[\"元素的默认定位方式\",{\"1\":{\"991\":1}}],[\"元素的字体大小\",{\"1\":{\"963\":1}}],[\"元素的真实\",{\"1\":{\"126\":1}}],[\"元素结构\",{\"1\":{\"940\":1,\"1312\":1}}],[\"元素选择器\",{\"1\":{\"932\":1}}],[\"元素绝对居中方式\",{\"0\":{\"928\":1}}],[\"元素放置在父元素的基线上\",{\"1\":{\"924\":1}}],[\"元素隐藏\",{\"1\":{\"914\":1}}],[\"元素可视区系列\",{\"0\":{\"1109\":1}}],[\"元素可视\",{\"1\":{\"914\":1}}],[\"元素可能无法获取到\",{\"1\":{\"457\":1}}],[\"元素显示与隐藏\",{\"0\":{\"914\":1}}],[\"元素显示模式转换\",{\"0\":{\"879\":1}}],[\"元素显示模式总结\",{\"1\":{\"878\":1}}],[\"元素显示模式就是元素\",{\"1\":{\"875\":1}}],[\"元素间距\",{\"0\":{\"898\":1}}],[\"元素排列\",{\"1\":{\"878\":1}}],[\"元素模式\",{\"1\":{\"878\":1}}],[\"元素一般分为块元素和行内元素两种类型\",{\"1\":{\"875\":1}}],[\"元素标签内部的\",{\"1\":{\"867\":1}}],[\"元素以\",{\"1\":{\"863\":1}}],[\"元素指定特定的样式\",{\"1\":{\"863\":1}}],[\"元素长度\",{\"1\":{\"842\":1}}],[\"元素获取到\",{\"1\":{\"701\":1}}],[\"元素上\",{\"1\":{\"513\":1}}],[\"元素离开样式\",{\"1\":{\"507\":1}}],[\"元素进入样式\",{\"1\":{\"507\":1}}],[\"元素成功渲染挂载后\",{\"1\":{\"497\":1}}],[\"元素未被移除\",{\"1\":{\"457\":1}}],[\"元素直接被移除\",{\"1\":{\"457\":1}}],[\"元素代表属性值\",{\"1\":{\"323\":1}}],[\"元素代表属性名\",{\"1\":{\"323\":1}}],[\"元素绑定预存\",{\"1\":{\"296\":1}}],[\"元素挂载\",{\"1\":{\"273\":1}}],[\"元素嵌套编译\",{\"1\":{\"250\":1}}],[\"元素被组件隐藏细节\",{\"1\":{\"236\":1}}],[\"元素并调用它\",{\"1\":{\"224\":1}}],[\"元素\",{\"1\":{\"156\":1,\"191\":1,\"207\":1,\"222\":1,\"296\":1,\"323\":1,\"497\":1,\"513\":1,\"648\":1,\"870\":2,\"871\":4,\"872\":3,\"966\":1,\"968\":1,\"1029\":3,\"1085\":1,\"1105\":1,\"1106\":1,\"1287\":1,\"1288\":1,\"1289\":2}}],[\"元素必须有结束标签\",{\"1\":{\"133\":1}}],[\"元素只能有一个根元素\",{\"1\":{\"133\":1}}],[\"元素对象\",{\"1\":{\"126\":1,\"158\":1,\"1319\":1}}],[\"元素渲染到页面中的真实容器\",{\"1\":{\"126\":1}}],[\"元素或者\",{\"1\":{\"87\":1}}],[\"几乎只用\",{\"1\":{\"984\":1}}],[\"几乎不用\",{\"1\":{\"891\":1}}],[\"几乎一行\",{\"1\":{\"339\":1}}],[\"几个工具函数的作用\",{\"1\":{\"737\":1}}],[\"登录\",{\"1\":{\"731\":2,\"733\":1,\"739\":1}}],[\"登录回调\",{\"1\":{\"452\":1}}],[\"鉴权组件\",{\"1\":{\"730\":1}}],[\"呈现\",{\"1\":{\"752\":1}}],[\"呈现当前组件中渲染的嵌套路由\",{\"1\":{\"726\":1}}],[\"呈递值改变\",{\"1\":{\"451\":1}}],[\"否者\",{\"1\":{\"1402\":1}}],[\"否\",{\"1\":{\"999\":3}}],[\"否为\",{\"1\":{\"724\":1}}],[\"否则容易堆栈溢出\",{\"1\":{\"1458\":1}}],[\"否则必须满足它\",{\"1\":{\"1385\":1}}],[\"否则会误解为还要匹配空格\",{\"1\":{\"1382\":1}}],[\"否则会打包报错\",{\"1\":{\"583\":1}}],[\"否则打九折\",{\"1\":{\"1268\":1}}],[\"否则打包会报错\",{\"1\":{\"583\":1}}],[\"否则可能得到不可预期结果\",{\"1\":{\"1261\":1}}],[\"否则返回左侧值\",{\"1\":{\"1264\":1}}],[\"否则返回\",{\"1\":{\"964\":1,\"1401\":1}}],[\"否则dispatch会未定义\",{\"1\":{\"822\":1}}],[\"否则执行next\",{\"1\":{\"756\":1}}],[\"否则就是暴力删除旧节点再插入新节点\",{\"1\":{\"672\":1}}],[\"否则就用state\",{\"1\":{\"103\":1}}],[\"否则为\",{\"1\":{\"647\":1,\"654\":1}}],[\"否则直接返回\",{\"1\":{\"632\":1}}],[\"否则参数是事件对象\",{\"1\":{\"417\":1}}],[\"否则说明不是大儿子\",{\"1\":{\"361\":1}}],[\"否则找儿子\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"否则\",{\"1\":{\"59\":1,\"215\":1,\"470\":1,\"578\":1,\"1277\":1,\"1413\":1}}],[\"信息\",{\"1\":{\"722\":1}}],[\"概述\",{\"0\":{\"706\":1,\"1279\":1}}],[\"概念\",{\"1\":{\"406\":1,\"1456\":1}}],[\"略过\",{\"1\":{\"705\":1}}],[\"精灵技术主要针对于背景图片使用\",{\"1\":{\"916\":1}}],[\"精灵图主要针对于小的背景图片使用\",{\"1\":{\"916\":1}}],[\"精灵图或者雪碧图\",{\"1\":{\"916\":1}}],[\"精灵图\",{\"0\":{\"916\":1}}],[\"精灵图也是一种运用场景\",{\"1\":{\"903\":1}}],[\"精简版\",{\"1\":{\"722\":1,\"723\":1}}],[\"精确地绑定\",{\"1\":{\"702\":1}}],[\"精细化比较时待处理的\",{\"1\":{\"683\":1}}],[\"精细化比较与最小量更新的情况非常复杂\",{\"1\":{\"676\":1}}],[\"精细化比较\",{\"1\":{\"671\":1}}],[\"碎片化严重\",{\"1\":{\"944\":1}}],[\"碎片化地执行\",{\"1\":{\"272\":1}}],[\"碎片上树\",{\"1\":{\"701\":1}}],[\"碎片中\",{\"1\":{\"701\":1}}],[\"侦听器\",{\"1\":{\"700\":1}}],[\"匹配条件\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"匹配模式\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"匹配每一个单词\",{\"1\":{\"1386\":1}}],[\"匹配第一个单词\",{\"1\":{\"1386\":1}}],[\"匹配最后一个单词\",{\"1\":{\"1386\":1}}],[\"匹配结尾\",{\"1\":{\"1386\":1}}],[\"匹配开头\",{\"1\":{\"1386\":1}}],[\"匹配包含至少\",{\"1\":{\"1384\":1}}],[\"匹配包含最少\",{\"1\":{\"1384\":1}}],[\"匹配包含\",{\"1\":{\"1384\":1}}],[\"匹配任何包含零个或一个\",{\"1\":{\"1384\":1}}],[\"匹配任何包含零个或多个\",{\"1\":{\"1384\":1}}],[\"匹配任何包含至少一个\",{\"1\":{\"1384\":1}}],[\"匹配任意数字或字母\",{\"1\":{\"1383\":1}}],[\"匹配任意大小写字母和数字\",{\"1\":{\"1382\":1}}],[\"匹配任意双字节的汉字\",{\"1\":{\"1382\":1}}],[\"匹配任意\",{\"1\":{\"1382\":1}}],[\"匹配数字\",{\"1\":{\"1382\":1}}],[\"匹配非单词边界\",{\"1\":{\"1381\":1}}],[\"匹配单词边界\",{\"1\":{\"1381\":1}}],[\"匹配所有元素\",{\"1\":{\"1286\":1}}],[\"匹配的\",{\"1\":{\"768\":1}}],[\"匹配成功不会有高亮效果\",{\"1\":{\"714\":1}}],[\"匹配时是否区分大小写\",{\"1\":{\"712\":1}}],[\"匹配\",{\"1\":{\"698\":1,\"712\":1,\"1388\":1,\"1389\":1}}],[\"极\",{\"1\":{\"1155\":1}}],[\"极少情况\",{\"1\":{\"1030\":1}}],[\"极少有这种情况\",{\"1\":{\"672\":1}}],[\"极有可能是类名或者样式引入错误\",{\"1\":{\"940\":1}}],[\"极大优化了dom更新速度\",{\"1\":{\"692\":1}}],[\"亦存在两种经典情况\",{\"1\":{\"692\":1}}],[\"亦或是\",{\"1\":{\"636\":1}}],[\"难点在于函数重载\",{\"1\":{\"692\":1}}],[\"难免会做很多冗余比较\",{\"1\":{\"162\":1}}],[\"寻找递推关系\",{\"1\":{\"1458\":1}}],[\"寻找新前指针节点的key在keymap中映射的位置序号\",{\"1\":{\"683\":1,\"691\":1}}],[\"寻找非空原生或文本节点\",{\"1\":{\"274\":1}}],[\"没找到的就是新节点\",{\"1\":{\"681\":1}}],[\"没有任何作用\",{\"1\":{\"1438\":1}}],[\"没有任何的中间代理\",{\"1\":{\"584\":1}}],[\"没有指定\",{\"1\":{\"1366\":1}}],[\"没有使用\",{\"1\":{\"1350\":1}}],[\"没有使用插值语法的节点\",{\"1\":{\"474\":1}}],[\"没有则向上一级作用域寻找直到向全局作用域寻找\",{\"1\":{\"1350\":1}}],[\"没有则初始化一个对象\",{\"1\":{\"116\":1}}],[\"没有办法绑定事件\",{\"1\":{\"1328\":1}}],[\"没有可比性\",{\"1\":{\"1261\":1}}],[\"没有捕获阶段\",{\"1\":{\"1136\":1}}],[\"没有我们平常使用的\",{\"1\":{\"1015\":1}}],[\"没有增加标签\",{\"1\":{\"985\":1}}],[\"没有提供文字垂直居中代码\",{\"1\":{\"880\":1}}],[\"没有彻底分离\",{\"1\":{\"868\":1}}],[\"没有体现结构与样式分离思想\",{\"1\":{\"867\":1}}],[\"没有实现结构与样式完全分离\",{\"1\":{\"866\":1}}],[\"没有实战价值\",{\"1\":{\"638\":1}}],[\"没有缓存数据\",{\"1\":{\"840\":1}}],[\"没有变化\",{\"1\":{\"810\":1}}],[\"没有异常捕获时\",{\"1\":{\"779\":1}}],[\"没有状态\",{\"1\":{\"752\":1}}],[\"没有children\",{\"1\":{\"683\":1,\"690\":1}}],[\"没有点符号\",{\"1\":{\"650\":1,\"657\":1}}],[\"没有返回值\",{\"1\":{\"646\":1,\"655\":1}}],[\"没有正确响应\",{\"1\":{\"634\":1}}],[\"没有被收集\",{\"1\":{\"627\":1}}],[\"没有构建过程\",{\"1\":{\"487\":1}}],[\"没有配置\",{\"1\":{\"465\":1}}],[\"没有老\",{\"1\":{\"272\":1}}],[\"没有子节点\",{\"1\":{\"272\":2,\"273\":2,\"317\":2,\"360\":2,\"374\":2,\"396\":2}}],[\"没有更新的dom上的fiber树\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"没有剩余的工作单元\",{\"1\":{\"272\":1}}],[\"没有父节点则遍历结束\",{\"1\":{\"265\":1}}],[\"没有响应式更新\",{\"1\":{\"257\":1}}],[\"没有副作用\",{\"1\":{\"233\":1}}],[\"没有`key`\",{\"1\":{\"220\":1}}],[\"没有\",{\"1\":{\"75\":1,\"222\":1,\"1249\":1,\"1410\":1}}],[\"没有浏览历史\",{\"1\":{\"5\":1}}],[\"④\",{\"1\":{\"680\":1,\"966\":1,\"1030\":1,\"1271\":1}}],[\"倒序\",{\"1\":{\"679\":1}}],[\"③\",{\"1\":{\"679\":1,\"966\":2,\"1030\":1,\"1271\":1,\"1273\":1}}],[\"命令只能删除对象本身的属性\",{\"1\":{\"1406\":1}}],[\"命令删除对象\",{\"1\":{\"1406\":1}}],[\"命令用于输入其他模块提供的功能\",{\"1\":{\"1189\":1}}],[\"命令用于规定模块的对外接口\",{\"1\":{\"1189\":1}}],[\"命中3倒序\",{\"1\":{\"679\":1}}],[\"命中\",{\"1\":{\"679\":1}}],[\"命名规范\",{\"1\":{\"862\":1}}],[\"命名方式\",{\"1\":{\"475\":1}}],[\"命名\",{\"1\":{\"427\":1,\"430\":1,\"475\":1}}],[\"命名空间\",{\"0\":{\"418\":1,\"750\":1}}],[\"命名时\",{\"1\":{\"139\":1}}],[\"命名冲突\",{\"1\":{\"85\":1,\"89\":1}}],[\"②html\",{\"1\":{\"1030\":1}}],[\"②\",{\"1\":{\"678\":1,\"966\":3,\"1271\":1,\"1273\":1,\"1277\":1}}],[\"①html\",{\"1\":{\"1030\":1}}],[\"①\",{\"1\":{\"677\":1,\"966\":3,\"1271\":1,\"1273\":1,\"1277\":1}}],[\"四个属性\",{\"1\":{\"990\":1}}],[\"四个参数分别是组件实例\",{\"1\":{\"626\":1}}],[\"四种都没命中\",{\"0\":{\"681\":1},\"1\":{\"681\":1}}],[\"四指针命中查找法\",{\"1\":{\"683\":1,\"691\":1}}],[\"四指针命中查找\",{\"1\":{\"676\":2}}],[\"逻辑运算符\",{\"0\":{\"1259\":1}}],[\"逻辑的方法\",{\"1\":{\"809\":1}}],[\"逻辑\",{\"0\":{\"676\":1}}],[\"逻辑复用\",{\"0\":{\"83\":1,\"84\":1},\"1\":{\"246\":1}}],[\"哈\",{\"1\":{\"675\":1}}],[\"哈哈\",{\"1\":{\"674\":1,\"1433\":1}}],[\"哼\",{\"1\":{\"675\":1}}],[\"经常跟数组有关系\",{\"1\":{\"1451\":1}}],[\"经常做继承\",{\"1\":{\"1451\":1}}],[\"经常利用这个事件完成响应式布局\",{\"1\":{\"1062\":1}}],[\"经常是一个\",{\"1\":{\"1054\":1}}],[\"经常用于横向排列盒子\",{\"1\":{\"987\":1}}],[\"经常用于设置图片或者表单\",{\"1\":{\"924\":1}}],[\"经常和\",{\"1\":{\"863\":1}}],[\"经常要手动\",{\"1\":{\"779\":1}}],[\"经历四种命中比较方法\",{\"1\":{\"692\":1}}],[\"经历\",{\"1\":{\"675\":1}}],[\"经过子盒子还会触发\",{\"1\":{\"1126\":1}}],[\"经过计算\",{\"1\":{\"748\":1}}],[\"经过\",{\"1\":{\"647\":1,\"840\":1}}],[\"经过上面的initcomputed\",{\"1\":{\"634\":1}}],[\"嘎嘎\",{\"1\":{\"674\":1}}],[\"呵呵\",{\"1\":{\"674\":1}}],[\"嘻嘻\",{\"1\":{\"674\":1,\"1433\":1}}],[\"弱化了重载功能\",{\"1\":{\"674\":1,\"686\":1}}],[\"缺一不可\",{\"1\":{\"674\":1,\"686\":1,\"1273\":1}}],[\"缺点\",{\"0\":{\"5\":1},\"1\":{\"117\":1,\"779\":1,\"861\":1,\"866\":1,\"916\":1,\"958\":1,\"985\":3}}],[\"算数运算符\",{\"0\":{\"1254\":1}}],[\"算是一个轻量级的应用框架\",{\"1\":{\"819\":1}}],[\"算出应该如何最小量更新\",{\"1\":{\"671\":1}}],[\"算法更新\",{\"1\":{\"702\":1}}],[\"算法代码\",{\"1\":{\"683\":1}}],[\"算法优化策略\",{\"1\":{\"676\":1}}],[\"算法精细化比较并最小量更新\",{\"1\":{\"676\":1}}],[\"算法库\",{\"1\":{\"673\":1}}],[\"算法同层比较的特性\",{\"1\":{\"672\":1}}],[\"算法的核心是最小量更新\",{\"1\":{\"672\":1}}],[\"算法的核心逻辑\",{\"1\":{\"664\":1}}],[\"算法的鼻祖\",{\"1\":{\"665\":1}}],[\"算法最小量更新生成真实\",{\"1\":{\"663\":1}}],[\"算法主要分为两类\",{\"1\":{\"341\":1}}],[\"算法\",{\"1\":{\"341\":1,\"664\":2,\"672\":1,\"704\":1}}],[\"算法首先搜索距离为\",{\"1\":{\"266\":1}}],[\"算法进行循环递归式节点判断\",{\"1\":{\"257\":1}}],[\"算法比较得出存在\",{\"1\":{\"257\":1}}],[\"咖啡\",{\"1\":{\"666\":1,\"670\":2}}],[\"外联\",{\"1\":{\"1235\":1}}],[\"外边距合并\",{\"1\":{\"998\":1}}],[\"外边距合并与塌陷\",{\"0\":{\"971\":1}}],[\"外边距可以让块级盒子水平居中\",{\"1\":{\"970\":1}}],[\"外边距\",{\"0\":{\"970\":1},\"1\":{\"968\":1,\"970\":1}}],[\"外边距以及内边距都可以控制\",{\"1\":{\"876\":1,\"878\":1}}],[\"外链\",{\"1\":{\"665\":1}}],[\"外部添加元素\",{\"1\":{\"1321\":1}}],[\"外部添加\",{\"1\":{\"1321\":1}}],[\"外部\",{\"1\":{\"1282\":1}}],[\"外部链接\",{\"1\":{\"1043\":1}}],[\"外部样式表\",{\"0\":{\"868\":1},\"1\":{\"865\":1,\"868\":1}}],[\"外部循环新节点\",{\"1\":{\"676\":1}}],[\"外部的newvnode对象的elm就是完整的dom对象\",{\"1\":{\"675\":1,\"689\":1}}],[\"外部判断dirty为true会调用evaluate执行一次get\",{\"1\":{\"632\":1,\"635\":1}}],[\"外部父路由卸载前触发beforedestroy钩子\",{\"1\":{\"434\":1}}],[\"源元素\",{\"1\":{\"1142\":1}}],[\"源头\",{\"0\":{\"665\":1}}],[\"源码分析\",{\"1\":{\"704\":2}}],[\"源码分析里说\",{\"1\":{\"618\":1}}],[\"源码用\",{\"1\":{\"665\":1}}],[\"源码借鉴了\",{\"1\":{\"665\":1}}],[\"源码解析之虚拟\",{\"1\":{\"664\":1}}],[\"源码对插值语法解析和\",{\"1\":{\"663\":1}}],[\"源码的方式直接在浏览器控制台打印输出\",{\"1\":{\"644\":1}}],[\"源码的解读\",{\"1\":{\"637\":1}}],[\"源码的升级\",{\"1\":{\"524\":1}}],[\"源码上还判断了vnode对象\",{\"1\":{\"627\":1}}],[\"源码中对于\",{\"1\":{\"658\":1}}],[\"源码中是\",{\"1\":{\"621\":1}}],[\"源码中此处有一个调度任务的功能\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"源码完善代码\",{\"1\":{\"609\":1}}],[\"源码小结\",{\"0\":{\"339\":1}}],[\"源码不分不再记录\",{\"1\":{\"332\":1}}],[\"源码改动主要围绕\",{\"1\":{\"332\":1}}],[\"源码\",{\"0\":{\"250\":1,\"268\":1},\"1\":{\"664\":1,\"665\":1,\"756\":1}}],[\"源码文件夹\",{\"1\":{\"138\":1}}],[\"源码总结\",{\"0\":{\"73\":1}}],[\"补充并完善了里面的一些\",{\"1\":{\"664\":1}}],[\"尚硅谷\",{\"1\":{\"664\":1}}],[\"搭配\",{\"1\":{\"914\":1}}],[\"搭配使用\",{\"1\":{\"863\":1}}],[\"搭配模板引擎中对插值语法\",{\"1\":{\"663\":1}}],[\"搭建本地\",{\"1\":{\"945\":1}}],[\"搭建\",{\"0\":{\"407\":1}}],[\"遇见了空格并且不在引号中\",{\"1\":{\"662\":1}}],[\"遇到预期为数值的地方\",{\"1\":{\"1414\":1}}],[\"遇到预期为字符串的地方\",{\"1\":{\"1414\":1}}],[\"遇到预期为布尔值的地方\",{\"1\":{\"1414\":1}}],[\"遇到数组嵌套的情况\",{\"1\":{\"657\":1}}],[\"遇到\",{\"1\":{\"648\":1}}],[\"遇到下一个\",{\"1\":{\"648\":1}}],[\"遇到一个\",{\"1\":{\"648\":1}}],[\"遇到第一项是\",{\"1\":{\"648\":1}}],[\"遇到以\",{\"1\":{\"123\":1}}],[\"遇到<开头的代码\",{\"1\":{\"123\":1}}],[\"额外标签法在浮动元素末尾添加一个空的标签\",{\"1\":{\"985\":1}}],[\"额外标签法也称为隔墙法\",{\"1\":{\"985\":1}}],[\"额外标签法\",{\"1\":{\"985\":1}}],[\"额外内容\",{\"1\":{\"931\":1,\"932\":1,\"1031\":1}}],[\"额外内容2\",{\"1\":{\"909\":1}}],[\"额外内容1\",{\"1\":{\"909\":1}}],[\"额外+3\",{\"1\":{\"661\":1}}],[\"额外+2\",{\"1\":{\"661\":1,\"662\":1}}],[\"额外的\",{\"0\":{\"187\":1,\"191\":1}}],[\"剩余参数\",{\"0\":{\"1165\":1}}],[\"剩余部分\",{\"1\":{\"661\":1}}],[\"剩余字符串\",{\"1\":{\"661\":1}}],[\"抽象语法树\",{\"1\":{\"701\":1,\"702\":1,\"704\":1}}],[\"抽象语法树之前\",{\"1\":{\"660\":1}}],[\"抽取组件\",{\"1\":{\"132\":1}}],[\"点表示法不能\",{\"1\":{\"1400\":3}}],[\"点表示法和方括号表示法\",{\"0\":{\"1400\":1}}],[\"点\",{\"1\":{\"692\":1}}],[\"点符号作为数组元素本身\",{\"1\":{\"657\":1}}],[\"点击测试\",{\"1\":{\"1118\":1}}],[\"点击链接后\",{\"1\":{\"1043\":1}}],[\"点击页面中的导航链接不会刷新页面\",{\"1\":{\"421\":1}}],[\"点击\",{\"1\":{\"301\":1,\"313\":1,\"323\":1,\"330\":1}}],[\"点击后绑定了\",{\"1\":{\"475\":1}}],[\"点击后\",{\"1\":{\"197\":1}}],[\"点击增加时\",{\"1\":{\"197\":1}}],[\"点击都会重新触发渲染\",{\"1\":{\"91\":1}}],[\"天生指向nestedtokens结果数组\",{\"1\":{\"656\":1}}],[\"折叠tokens\",{\"1\":{\"656\":1}}],[\"啊\",{\"1\":{\"653\":1}}],[\"负号\",{\"1\":{\"1257\":1}}],[\"负数直接进行第\",{\"1\":{\"1376\":1}}],[\"负数\",{\"1\":{\"1181\":1}}],[\"负整数或\",{\"1\":{\"996\":1}}],[\"负责读取网页内容\",{\"1\":{\"1027\":1}}],[\"负责把\",{\"1\":{\"842\":1}}],[\"负责管理数据和业务逻辑\",{\"1\":{\"752\":1}}],[\"负责收集嵌套内容\",{\"1\":{\"648\":1}}],[\"负载以链表形式环链\",{\"1\":{\"323\":1}}],[\"放括号表示字符范围\",{\"1\":{\"1382\":1}}],[\"放到\",{\"1\":{\"1277\":1}}],[\"放到一个类里面\",{\"1\":{\"862\":1}}],[\"放大缩小视图\",{\"1\":{\"1031\":1}}],[\"放弃极端屏或对其优雅降级\",{\"1\":{\"966\":1}}],[\"放在\",{\"1\":{\"841\":1}}],[\"放入任务队列中\",{\"1\":{\"1076\":1}}],[\"放入栈中\",{\"1\":{\"648\":1}}],[\"放入这个栈中\",{\"1\":{\"648\":1}}],[\"放行\",{\"1\":{\"436\":2,\"733\":1}}],[\"栈数据结构\",{\"1\":{\"1423\":1}}],[\"栈数据类型\",{\"1\":{\"648\":1}}],[\"栈底永远是全局执行上下文\",{\"1\":{\"1422\":1}}],[\"栈顶则\",{\"1\":{\"1422\":1}}],[\"栈顶标签\",{\"1\":{\"661\":1}}],[\"栈顶\",{\"1\":{\"656\":2}}],[\"栈顶数组出栈\",{\"1\":{\"648\":1}}],[\"栈结构\",{\"1\":{\"656\":1}}],[\"栈内剩余的vm\",{\"1\":{\"635\":1}}],[\"栈内还剩下依赖vm\",{\"1\":{\"635\":1}}],[\"尾部\",{\"1\":{\"1020\":1}}],[\"尾部的next即指向头部\",{\"1\":{\"271\":1,\"272\":1}}],[\"尾巴的开头不是stoptag\",{\"1\":{\"646\":1,\"655\":1}}],[\"尾巴\",{\"1\":{\"646\":1,\"655\":1}}],[\"扫描器负责将字符串中的关键字符区分出来\",{\"1\":{\"658\":1}}],[\"扫描器类\",{\"1\":{\"646\":1,\"655\":1}}],[\"扫描模板字符串\",{\"1\":{\"646\":1}}],[\"华为手机\",{\"1\":{\"644\":1}}],[\"好比人的名字\",{\"1\":{\"863\":1}}],[\"好\",{\"1\":{\"644\":1,\"653\":1}}],[\"好处\",{\"0\":{\"1187\":1},\"1\":{\"566\":1}}],[\"游泳\",{\"1\":{\"641\":1,\"653\":1}}],[\"女\",{\"1\":{\"640\":1}}],[\"轰动性的\",{\"1\":{\"639\":1}}],[\"沿用\",{\"1\":{\"639\":1}}],[\"胡子\",{\"1\":{\"639\":1}}],[\"曾经非常流行\",{\"1\":{\"638\":1}}],[\"法\",{\"1\":{\"638\":2}}],[\"熟悉了模板引擎的真正运作机制之后\",{\"1\":{\"637\":1}}],[\"置为\",{\"1\":{\"636\":1}}],[\"增删改节点方法\",{\"0\":{\"1094\":1}}],[\"增删改等操作\",{\"1\":{\"274\":1}}],[\"增\",{\"1\":{\"816\":1}}],[\"增强\",{\"1\":{\"811\":1}}],[\"增加运行速度\",{\"1\":{\"1452\":1}}],[\"增加了一种有效的复用方式\",{\"1\":{\"1011\":1}}],[\"增加了诸如变量\",{\"1\":{\"1004\":1}}],[\"增加新节点\",{\"1\":{\"692\":1}}],[\"增加精细化比较时的最小量更新\",{\"1\":{\"683\":1}}],[\"增加关联的dep依赖实例到当前监听器watcher实例中\",{\"1\":{\"635\":1}}],[\"笔者在这里发现了一个坑\",{\"1\":{\"634\":1}}],[\"吧dirty的值变为true\",{\"1\":{\"633\":1,\"634\":1}}],[\"看它是否含有字符串\",{\"1\":{\"1366\":1}}],[\"看实际需求\",{\"1\":{\"953\":1}}],[\"看看是不是指令\",{\"1\":{\"695\":1}}],[\"看报纸\",{\"1\":{\"641\":1,\"653\":1}}],[\"看似无关\",{\"1\":{\"635\":1}}],[\"看是否需要重新取值\",{\"1\":{\"632\":1,\"635\":1}}],[\"看作从\",{\"1\":{\"365\":1}}],[\"脏值\",{\"1\":{\"632\":1}}],[\"普通函数调用\",{\"1\":{\"1446\":1}}],[\"普通函数\",{\"1\":{\"1445\":1}}],[\"普通函数是直接调用\",{\"1\":{\"1436\":1}}],[\"普通事件\",{\"1\":{\"1076\":1}}],[\"普通流\",{\"1\":{\"974\":1}}],[\"普通的循环\",{\"1\":{\"676\":1}}],[\"普通的组件复用\",{\"0\":{\"228\":1}}],[\"普通\",{\"1\":{\"628\":1,\"636\":1}}],[\"又是基于规则生成的一个数组\",{\"1\":{\"644\":1}}],[\"又因为\",{\"1\":{\"627\":1}}],[\"又称驼峰命名法\",{\"1\":{\"1240\":1}}],[\"又称\",{\"1\":{\"162\":1}}],[\"去掉背景颜色\",{\"1\":{\"1291\":1}}],[\"去重\",{\"1\":{\"1178\":1}}],[\"去重防止dep添加watch多次\",{\"1\":{\"626\":1}}],[\"去更改它\",{\"1\":{\"746\":1}}],[\"去\",{\"1\":{\"649\":1}}],[\"去除\",{\"0\":{\"591\":1}}],[\"留住value\",{\"1\":{\"632\":1,\"635\":1}}],[\"留住新值\",{\"1\":{\"626\":1}}],[\"留住\",{\"1\":{\"626\":1}}],[\"立刻创建一个新对象\",{\"1\":{\"1436\":1}}],[\"立刻进入\",{\"1\":{\"1419\":1}}],[\"立刻用上一次的状态和上一次的reducer计算新状态\",{\"1\":{\"338\":1,\"373\":1}}],[\"立即获取当前日期相对\",{\"1\":{\"1367\":1}}],[\"立即被调用\",{\"1\":{\"1346\":1}}],[\"立即执行函数也称为小闭包\",{\"1\":{\"1456\":1}}],[\"立即执行函数\",{\"0\":{\"1346\":1},\"1\":{\"1445\":1,\"1446\":1}}],[\"立即监听\",{\"1\":{\"625\":1}}],[\"了怎么办\",{\"1\":{\"648\":1}}],[\"了\",{\"1\":{\"632\":1,\"635\":1,\"677\":1,\"678\":1,\"680\":1,\"843\":1,\"1064\":1}}],[\"了一个\",{\"1\":{\"625\":1}}],[\"了解模板内的插值语法详见模板引擎\",{\"1\":{\"660\":1}}],[\"了解\",{\"0\":{\"995\":1},\"1\":{\"534\":1}}],[\"储存\",{\"1\":{\"621\":1}}],[\"观察\",{\"1\":{\"620\":1,\"842\":1}}],[\"观察者取消观察\",{\"1\":{\"843\":1}}],[\"观察者管理\",{\"0\":{\"842\":1}}],[\"观察者模式需要将一个正常的\",{\"1\":{\"602\":1}}],[\"观察者类\",{\"1\":{\"598\":1,\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"太长不看\",{\"0\":{\"619\":1,\"628\":1,\"636\":1,\"658\":1,\"663\":1,\"692\":1,\"696\":1}}],[\"扩充了\",{\"1\":{\"1004\":1}}],[\"扩充\",{\"1\":{\"610\":1}}],[\"扩展内置对象须知\",{\"0\":{\"1443\":1}}],[\"扩展工具\",{\"1\":{\"811\":1}}],[\"扩展运算符与\",{\"0\":{\"1214\":1}}],[\"扩展运算符能将数组转换为逗号分隔的参数序列\",{\"1\":{\"1166\":1}}],[\"扩展运算符\",{\"0\":{\"1166\":1}}],[\"扩展运算\",{\"1\":{\"149\":1}}],[\"扩展语法\",{\"1\":{\"121\":1}}],[\"扩展库\",{\"1\":{\"119\":1}}],[\"种重复类惰性匹配的简单描述如下\",{\"1\":{\"1385\":1}}],[\"种预定速度之一的字符串\",{\"1\":{\"1307\":1}}],[\"种情况的随机排列组合\",{\"1\":{\"676\":1}}],[\"种方法时\",{\"1\":{\"621\":1}}],[\"种方法\",{\"1\":{\"620\":1}}],[\"种方法和对象内部属性可以正常侦听了\",{\"1\":{\"610\":1}}],[\"种方法无法监测\",{\"1\":{\"610\":1}}],[\"种基于\",{\"1\":{\"509\":1}}],[\"复原浏览器大小\",{\"1\":{\"940\":1}}],[\"复合写法与\",{\"1\":{\"970\":1}}],[\"复合写法\",{\"1\":{\"969\":1}}],[\"复合选择器权重叠加\",{\"1\":{\"932\":1}}],[\"复合选择器总结\",{\"1\":{\"873\":1}}],[\"复合选择器是由两个或多个基础选择器\",{\"1\":{\"869\":1}}],[\"复合选择器可以更准确\",{\"1\":{\"869\":1}}],[\"复合选择器\",{\"0\":{\"869\":1}}],[\"复合内容\",{\"1\":{\"854\":1}}],[\"复杂异步\",{\"1\":{\"758\":1}}],[\"复杂情况举例\",{\"1\":{\"679\":1}}],[\"复杂类型\",{\"1\":{\"609\":1,\"616\":1}}],[\"复用代码\",{\"1\":{\"543\":1}}],[\"复用性更高的代码实现组件功能\",{\"1\":{\"174\":1}}],[\"复用判断条件是\",{\"1\":{\"162\":1}}],[\"复用编码\",{\"1\":{\"129\":1,\"486\":1}}],[\"复用\",{\"1\":{\"128\":1,\"450\":1,\"485\":1}}],[\"复用的内容\",{\"1\":{\"84\":1}}],[\"复用的目标\",{\"1\":{\"84\":1}}],[\"附上阶段源码\",{\"1\":{\"609\":1}}],[\"哪个\",{\"1\":{\"605\":1}}],[\"成员查找规则\",{\"0\":{\"1442\":1}}],[\"成员中都有一个\",{\"1\":{\"605\":1}}],[\"成函数调用栈\",{\"1\":{\"1422\":1}}],[\"成功或失败都将触发\",{\"1\":{\"835\":1}}],[\"成功的\",{\"1\":{\"505\":1}}],[\"成功的值为合并后的请求\",{\"1\":{\"68\":1}}],[\"成功的回调\",{\"1\":{\"17\":1}}],[\"成对应组件\",{\"1\":{\"731\":1}}],[\"确定\",{\"1\":{\"1423\":1}}],[\"确定页面的版心\",{\"1\":{\"1001\":1}}],[\"确定默认设计稿和默认等分数下的基准尺寸值\",{\"1\":{\"965\":1}}],[\"确定查询出错\",{\"1\":{\"830\":1}}],[\"确实可以\",{\"1\":{\"604\":1}}],[\"确保对应目标对象的\",{\"1\":{\"621\":1}}],[\"确保\",{\"1\":{\"527\":1}}],[\"确保调度执行root上的更新\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"确保头信息存在\",{\"1\":{\"68\":1}}],[\"├──\",{\"1\":{\"604\":11}}],[\"逐行执行函数中的代码\",{\"1\":{\"1436\":1}}],[\"逐层递进地绑定依赖收集器和响应式数据\",{\"1\":{\"700\":1}}],[\"逐项触发\",{\"1\":{\"628\":1}}],[\"逐项observe\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"逐步获取上级\",{\"1\":{\"296\":1}}],[\"备份原来的方法\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"备注\",{\"1\":{\"417\":1,\"450\":1,\"457\":1,\"465\":1,\"466\":1,\"475\":1,\"487\":1}}],[\"形\",{\"1\":{\"1422\":1}}],[\"形参\",{\"1\":{\"1343\":2,\"1423\":1}}],[\"形参初始值具有默认值的参数\",{\"1\":{\"1164\":1}}],[\"形参只有一个\",{\"1\":{\"1163\":1}}],[\"形态3\",{\"1\":{\"674\":1,\"686\":1}}],[\"形态2\",{\"1\":{\"674\":1,\"686\":1}}],[\"形态1\",{\"1\":{\"674\":1,\"686\":1}}],[\"形成一个执行栈\",{\"1\":{\"1076\":1}}],[\"形成\",{\"0\":{\"661\":1}}],[\"形式的属性都会有一个对应的属性\",{\"1\":{\"1103\":1}}],[\"形式的生命周期钩子\",{\"1\":{\"542\":1}}],[\"形式\",{\"1\":{\"645\":1,\"1091\":1}}],[\"形如object\",{\"1\":{\"602\":1}}],[\"警告\",{\"0\":{\"589\":1,\"590\":1},\"1\":{\"587\":1}}],[\"钩子\",{\"1\":{\"707\":1}}],[\"钩子之前调用的\",{\"1\":{\"584\":1}}],[\"钩子函数\",{\"1\":{\"169\":1,\"186\":2}}],[\"抛出异常\",{\"1\":{\"661\":1}}],[\"抛出\",{\"1\":{\"584\":1}}],[\"抛出错误\",{\"1\":{\"68\":1,\"1205\":1}}],[\"很像\",{\"1\":{\"995\":1}}],[\"很多布局效果\",{\"1\":{\"976\":1}}],[\"很多时候\",{\"1\":{\"580\":1}}],[\"很少\",{\"1\":{\"999\":1}}],[\"很少使用\",{\"1\":{\"625\":1}}],[\"很少用\",{\"1\":{\"460\":2}}],[\"换句话说\",{\"1\":{\"585\":1,\"964\":1}}],[\"换句话说接口中的所有方法都是抽象方法\",{\"1\":{\"580\":1}}],[\"换行\",{\"1\":{\"472\":1}}],[\"泛型\",{\"0\":{\"580\":1},\"1\":{\"580\":1}}],[\"识别浏览器是否为\",{\"1\":{\"1064\":1}}],[\"识别v\",{\"1\":{\"695\":1}}],[\"识别开始标签\",{\"1\":{\"661\":1,\"662\":1}}],[\"识别\",{\"0\":{\"662\":1},\"1\":{\"578\":2,\"754\":1}}],[\"识别更新副作用标识\",{\"1\":{\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"链式编程\",{\"1\":{\"1279\":1,\"1291\":1}}],[\"链式调用\",{\"1\":{\"1177\":1}}],[\"链接和图片默认是可拖动的\",{\"1\":{\"1142\":1}}],[\"链接的分类\",{\"0\":{\"1043\":1}}],[\"链接的语法格式\",{\"0\":{\"1042\":1}}],[\"链接的包不会被预构建\",{\"1\":{\"576\":1}}],[\"链接\",{\"1\":{\"891\":1}}],[\"链接里面不能再放链接\",{\"1\":{\"877\":1}}],[\"链接伪类选择器\",{\"1\":{\"873\":1}}],[\"链接伪类选择器注意事项\",{\"1\":{\"873\":1}}],[\"链接在浏览器中具有默认样式\",{\"1\":{\"873\":1}}],[\"链接式\",{\"1\":{\"865\":1}}],[\"链表和\",{\"1\":{\"366\":1}}],[\"链表\",{\"1\":{\"323\":1,\"366\":1}}],[\"预期什么类型的值\",{\"1\":{\"1414\":1}}],[\"预编译阶段\",{\"0\":{\"1421\":1},\"1\":{\"1419\":1}}],[\"预编译期允许对数字\",{\"1\":{\"1014\":1}}],[\"预编译器把变量赋予作用域\",{\"1\":{\"1012\":1}}],[\"预编译语言在前端里面有三大优秀的预编处理器\",{\"1\":{\"1004\":1}}],[\"预编译语言是\",{\"1\":{\"1004\":1}}],[\"预编译语言\",{\"0\":{\"1003\":1,\"1004\":1},\"1\":{\"933\":1,\"962\":1,\"965\":1}}],[\"预处理支持\",{\"1\":{\"1007\":1}}],[\"预处理器语言的混合略有不同\",{\"1\":{\"1013\":1}}],[\"预处理器\",{\"1\":{\"1005\":1}}],[\"预处理器便是针对上述问题的解决方案\",{\"1\":{\"1003\":1}}],[\"预定义的颜色值\",{\"1\":{\"908\":1}}],[\"预定义颜色\",{\"1\":{\"889\":1}}],[\"预定义全局变量\",{\"1\":{\"573\":1}}],[\"预请求\",{\"1\":{\"843\":1}}],[\"预构建依赖优化\",{\"0\":{\"575\":1}}],[\"预先执行一次赋值返回\",{\"1\":{\"339\":1}}],[\"预先缓存fiber节点到dom节点上\",{\"1\":{\"297\":1,\"327\":1}}],[\"绝对全局对象\",{\"0\":{\"1231\":1}}],[\"绝对\",{\"1\":{\"993\":1,\"1225\":1}}],[\"绝对定位两大特点\",{\"1\":{\"999\":1}}],[\"绝对定位不再占有原先的位置\",{\"1\":{\"993\":1}}],[\"绝对定位是元素在移动位置的时候\",{\"1\":{\"993\":1}}],[\"绝对定位\",{\"0\":{\"993\":1},\"1\":{\"989\":1,\"998\":2,\"999\":1}}],[\"绝对路径\",{\"1\":{\"572\":1,\"1045\":1}}],[\"绝大部分源码和流程都与\",{\"1\":{\"332\":1}}],[\"减乘除模\",{\"0\":{\"1256\":1}}],[\"减\",{\"1\":{\"1014\":1,\"1268\":2}}],[\"减少了一些怪异行为\",{\"1\":{\"1452\":1}}],[\"减少了原来在\",{\"1\":{\"1011\":1}}],[\"减少事件绑定次数\",{\"1\":{\"1127\":1}}],[\"减少语言服务器从代码中抽离类型的工作\",{\"1\":{\"584\":1}}],[\"减少标签层级\",{\"1\":{\"566\":1}}],[\"减小内存占用\",{\"1\":{\"566\":1}}],[\"间通信\",{\"1\":{\"560\":1}}],[\"间接更新\",{\"1\":{\"410\":1}}],[\"追踪\",{\"1\":{\"557\":1}}],[\"告诉\",{\"1\":{\"672\":1,\"747\":1}}],[\"告诉vue去更新界面\",{\"1\":{\"557\":1}}],[\"告诉vue这个value值是需要被\",{\"1\":{\"557\":1}}],[\"告诉浏览器这个页面采取某种语言来显示\",{\"1\":{\"1033\":1}}],[\"告诉浏览器要执行performconcurrentworkonroot\",{\"1\":{\"395\":1}}],[\"告诉浏览器要执行performconcurrentworkonroot函数\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"告诉浏览器在空余时间调用回调\",{\"1\":{\"272\":1,\"395\":1}}],[\"深拷贝\",{\"0\":{\"1461\":1},\"1\":{\"1089\":1,\"1332\":2}}],[\"深拷贝方法\",{\"1\":{\"823\":1}}],[\"深拷贝state数据\",{\"1\":{\"732\":1}}],[\"深层的嵌套结构拉平为栈结构\",{\"1\":{\"648\":1}}],[\"深入响应式原理\",{\"0\":{\"593\":1},\"1\":{\"704\":1}}],[\"深只读\",{\"1\":{\"555\":1}}],[\"深度监听\",{\"1\":{\"626\":1,\"627\":1}}],[\"深度监听暂时还未实现\",{\"1\":{\"618\":1}}],[\"深度监视\",{\"1\":{\"451\":1}}],[\"深度遍历的子节点情况\",{\"1\":{\"272\":1}}],[\"深度优先搜索\",{\"1\":{\"266\":1}}],[\"深度优先\",{\"1\":{\"266\":1,\"272\":1}}],[\"浅拷贝概念\",{\"1\":{\"1396\":1}}],[\"浅拷贝\",{\"0\":{\"1460\":1},\"1\":{\"609\":1,\"615\":1,\"635\":1,\"1089\":1,\"1332\":2}}],[\"浅只读\",{\"1\":{\"555\":1}}],[\"浅响应式\",{\"1\":{\"554\":1}}],[\"浅比较\",{\"1\":{\"91\":1}}],[\"反复进行\",{\"1\":{\"1423\":1}}],[\"反向引用会降低匹配速度\",{\"1\":{\"1392\":1}}],[\"反向引用会占用一定的系统资源\",{\"1\":{\"1392\":1}}],[\"反向引用的值可以从\",{\"1\":{\"1391\":1}}],[\"反向引用在开发中主要有以下几种常规用法\",{\"1\":{\"1391\":1}}],[\"反向引用\",{\"0\":{\"1391\":1}}],[\"反向声明\",{\"0\":{\"1389\":1}}],[\"反向代理\",{\"0\":{\"28\":1}}],[\"反义字符类比简单字符类的功能更强大和实用\",{\"1\":{\"1382\":1}}],[\"反过来也影响了\",{\"1\":{\"1006\":1}}],[\"反过来调用dep\",{\"1\":{\"635\":1}}],[\"反而要给斜体标签改不倾斜字体\",{\"1\":{\"885\":1}}],[\"反射\",{\"1\":{\"549\":1}}],[\"导致我们无法区分多种不同类型对象\",{\"1\":{\"1446\":1}}],[\"导致页面渲染加载阻塞\",{\"1\":{\"1075\":1}}],[\"导致整个\",{\"1\":{\"971\":1}}],[\"导航栏\",{\"1\":{\"1020\":1}}],[\"导航菜单\",{\"1\":{\"731\":1}}],[\"导出一个默认方法\",{\"1\":{\"543\":1}}],[\"导入\",{\"1\":{\"249\":1}}],[\"既不是\",{\"1\":{\"1228\":1}}],[\"既可以订阅上游数据\",{\"1\":{\"790\":1}}],[\"既可以将其包装在最顶层的路由组件并为用户展示一个错误信息\",{\"1\":{\"243\":1}}],[\"既是\",{\"1\":{\"790\":1}}],[\"既是响应式数据的订阅者也是数据更新的发布者\",{\"1\":{\"621\":1}}],[\"既能统一处理也能控制拦截跳转\",{\"1\":{\"738\":1}}],[\"既要指明监视的属性\",{\"1\":{\"541\":1}}],[\"情况五\",{\"1\":{\"540\":1}}],[\"情况四\",{\"1\":{\"540\":1}}],[\"情况三\",{\"1\":{\"540\":1}}],[\"情况二\",{\"1\":{\"540\":1}}],[\"情况一\",{\"1\":{\"540\":1}}],[\"收到\",{\"1\":{\"742\":2}}],[\"收到的插槽内容\",{\"1\":{\"535\":1}}],[\"收集资料\",{\"1\":{\"1055\":1}}],[\"收集用户信息\",{\"1\":{\"1055\":1}}],[\"收集组件的数据依赖关系\",{\"1\":{\"792\":1}}],[\"收集依赖\",{\"1\":{\"700\":1}}],[\"收集虚拟\",{\"1\":{\"698\":1}}],[\"收集器负责\",{\"1\":{\"700\":2}}],[\"收集器切换\",{\"1\":{\"656\":1}}],[\"收集器放入token\",{\"1\":{\"656\":1}}],[\"收集器指向token下标为2的新数组\",{\"1\":{\"656\":1}}],[\"收集器指向当前栈顶数组的内部子项\",{\"1\":{\"648\":1}}],[\"收集器的指向会变化\",{\"1\":{\"656\":1}}],[\"收集器\",{\"1\":{\"656\":1}}],[\"收集器永远都指向栈顶数组的内部子项\",{\"1\":{\"648\":1}}],[\"收集开始标记出现之前的文字\",{\"1\":{\"647\":1,\"654\":1}}],[\"收集和更新依赖\",{\"1\":{\"636\":1}}],[\"收集\",{\"1\":{\"635\":2}}],[\"收集到\",{\"1\":{\"605\":2}}],[\"收集的是\",{\"1\":{\"463\":1,\"464\":1}}],[\"收集表单数据\",{\"0\":{\"462\":1}}],[\"收集子节点的副作用\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"移出元素时\",{\"1\":{\"1138\":1}}],[\"移出栈\",{\"1\":{\"648\":1}}],[\"移除不存在的类名\",{\"1\":{\"1101\":1}}],[\"移除元素中一个或多个类名\",{\"1\":{\"1101\":1}}],[\"移除及切换\",{\"1\":{\"1097\":1}}],[\"移除<switch\",{\"1\":{\"708\":1}}],[\"移除的方法\",{\"1\":{\"635\":2}}],[\"移除过滤器\",{\"0\":{\"564\":1}}],[\"移除\",{\"1\":{\"525\":1,\"561\":1,\"563\":2}}],[\"移动速度\",{\"1\":{\"1072\":1}}],[\"移动端适配方案\",{\"1\":{\"1016\":1}}],[\"移动端会学习新的布局方式\",{\"1\":{\"975\":1}}],[\"移动端常见布局\",{\"0\":{\"959\":1}}],[\"移动端开发选择\",{\"0\":{\"956\":1}}],[\"移动端调试方法\",{\"0\":{\"945\":1}}],[\"移动端设备屏幕尺寸非常多\",{\"1\":{\"944\":1}}],[\"移动端布局和\",{\"1\":{\"959\":1}}],[\"移动端布局\",{\"0\":{\"941\":1},\"1\":{\"933\":1}}],[\"移动端大部分是\",{\"1\":{\"927\":1}}],[\"移动的距离就是这个目标图片的\",{\"1\":{\"916\":1}}],[\"移动的情况\",{\"1\":{\"676\":1}}],[\"移动背景图片位置\",{\"1\":{\"916\":1}}],[\"移动key值相同的节点\",{\"1\":{\"692\":1}}],[\"移动旧后节点到旧前节点前面\",{\"1\":{\"683\":1,\"691\":1}}],[\"移动旧前节点到旧后节点后面\",{\"1\":{\"683\":1,\"691\":1}}],[\"移动到指定位置\",{\"1\":{\"978\":1}}],[\"移动到\",{\"1\":{\"680\":1}}],[\"移动位置的时候参照点是自己原来的位置\",{\"1\":{\"992\":1}}],[\"移动位置\",{\"1\":{\"567\":1,\"999\":1}}],[\"移动\",{\"1\":{\"273\":1}}],[\"选取多个元素\",{\"1\":{\"1286\":1}}],[\"选项的\",{\"1\":{\"618\":1}}],[\"选项\",{\"1\":{\"593\":1,\"840\":1}}],[\"选项式\",{\"1\":{\"585\":1}}],[\"选项应始终被声明为一个函数\",{\"1\":{\"525\":1}}],[\"选其一即可\",{\"1\":{\"578\":1}}],[\"选择匹配类似于\",{\"1\":{\"1383\":1}}],[\"选择匹配\",{\"0\":{\"1383\":1}}],[\"选择索引号为偶数的元素\",{\"1\":{\"1289\":1}}],[\"选择索引号为奇数的元素\",{\"1\":{\"1289\":1}}],[\"选择索引号为\",{\"1\":{\"1289\":1}}],[\"选择获得光标的表单\",{\"1\":{\"873\":1}}],[\"选择不同状态的链接\",{\"1\":{\"873\":1}}],[\"选择某些相同样式的元素\",{\"1\":{\"873\":1}}],[\"选择最近一级元素\",{\"1\":{\"873\":1}}],[\"选择光标焦点位于其上的链接\",{\"1\":{\"873\":1}}],[\"选择活动链接\",{\"1\":{\"873\":1}}],[\"选择鼠标指针位于其上的链接\",{\"1\":{\"873\":1}}],[\"选择所有已被访问的链接\",{\"1\":{\"873\":1}}],[\"选择所有未被访问的链接\",{\"1\":{\"873\":1}}],[\"选择所有的标签\",{\"1\":{\"864\":1}}],[\"选择元素\",{\"1\":{\"870\":1}}],[\"选择的太多\",{\"1\":{\"864\":1}}],[\"选择任务类型\",{\"1\":{\"505\":1}}],[\"选择器来查询一个元素节点对象\",{\"1\":{\"1092\":1}}],[\"选择器永远大于类选择器\",{\"1\":{\"932\":1}}],[\"选择器权重\",{\"1\":{\"932\":1}}],[\"选择器不同\",{\"1\":{\"932\":1}}],[\"选择器相同\",{\"1\":{\"932\":1}}],[\"选择器相同且\",{\"1\":{\"672\":1}}],[\"选择器一般用于页面唯一性的元素上\",{\"1\":{\"863\":1}}],[\"选择器好比人的身份证号码\",{\"1\":{\"863\":1}}],[\"选择器和类选择器最大的不同在于使用次数上\",{\"1\":{\"863\":1}}],[\"选择器和类选择器区别\",{\"1\":{\"863\":1}}],[\"选择器和通配符选择器\",{\"1\":{\"860\":1}}],[\"选择器以\",{\"1\":{\"863\":1}}],[\"选择器以及一条或多条声明\",{\"1\":{\"855\":1}}],[\"选择器\",{\"0\":{\"863\":1,\"1313\":1},\"1\":{\"859\":1,\"863\":1,\"864\":1,\"873\":2,\"932\":2,\"977\":1,\"984\":1,\"995\":1,\"1286\":2}}],[\"选择器是用于指定\",{\"1\":{\"855\":1}}],[\"选择器字符串\",{\"1\":{\"443\":1}}],[\"选择器包裹\",{\"1\":{\"139\":1}}],[\"选择在\",{\"1\":{\"376\":1}}],[\"选择语言等\",{\"1\":{\"111\":1}}],[\"层级选择器\",{\"0\":{\"1287\":1}}],[\"层叠\",{\"1\":{\"930\":1}}],[\"层叠性主要解决样式冲突问题\",{\"1\":{\"930\":1}}],[\"层叠性\",{\"0\":{\"930\":1}}],[\"层\",{\"1\":{\"524\":1}}],[\"辅助函数\",{\"1\":{\"519\":1}}],[\"公共的$bus\",{\"1\":{\"518\":1}}],[\"公司提出\",{\"1\":{\"24\":1}}],[\"兄弟组件\",{\"1\":{\"518\":1}}],[\"兄弟组件之间\",{\"1\":{\"105\":1}}],[\"说白了就是模板字符串的\",{\"1\":{\"644\":1}}],[\"说是不推荐直接用于应用程序代码中\",{\"1\":{\"517\":1}}],[\"说明水平滚动条到底\",{\"1\":{\"1115\":1}}],[\"说明垂直滚动条到底\",{\"1\":{\"1115\":1}}],[\"说明开始与闭合标签对不上\",{\"1\":{\"661\":1}}],[\"说明开始与闭合标签对得上\",{\"1\":{\"661\":1}}],[\"说明最后的弹出项就是最终完整的内容结构\",{\"1\":{\"661\":1}}],[\"说明没有扫描到stoptag\",{\"1\":{\"646\":1,\"655\":1}}],[\"说明value已被修改\",{\"1\":{\"632\":1,\"635\":1}}],[\"说明value已经初始化创建过observer实例了\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"说明是watch的函数简写\",{\"1\":{\"626\":1}}],[\"说明是原生组件\",{\"1\":{\"272\":1}}],[\"说明它可能是一个函数组件节点\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"说明这当前完成的就是父fiber的最后一个节点\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"说明此节点需要创建真实dom\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"说明要添加副作用\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"说明为首次创建挂载\",{\"1\":{\"272\":1,\"318\":1}}],[\"说明时间有富余\",{\"1\":{\"262\":1}}],[\"说明\",{\"0\":{\"181\":1,\"186\":1,\"195\":1},\"1\":{\"811\":1,\"1031\":1,\"1037\":1,\"1044\":1,\"1045\":1,\"1386\":1,\"1419\":1,\"1423\":1}}],[\"说明多次更新都没有触发父组件和子组件的重新渲染\",{\"1\":{\"91\":1}}],[\"孙组件sunchild\",{\"1\":{\"517\":1}}],[\"孙组件\",{\"1\":{\"515\":2}}],[\"我的名字是\",{\"1\":{\"1433\":1}}],[\"我改名了\",{\"1\":{\"1407\":4}}],[\"我买了一个\",{\"1\":{\"653\":1}}],[\"我中有你的关系\",{\"1\":{\"635\":1}}],[\"我是一个标题\",{\"1\":{\"666\":1}}],[\"我是子里的数据\",{\"1\":{\"516\":1}}],[\"我是子组件数据\",{\"1\":{\"520\":1}}],[\"我是子组件方法\",{\"1\":{\"516\":1}}],[\"我是子组件\",{\"1\":{\"514\":1}}],[\"我是数据\",{\"1\":{\"513\":1}}],[\"我是home里的数据\",{\"1\":{\"511\":2,\"512\":1}}],[\"我们所创建的每一个函数\",{\"1\":{\"1438\":1}}],[\"我们称为\",{\"1\":{\"1031\":1}}],[\"我们称为单标签\",{\"1\":{\"1030\":1}}],[\"我们称为双标签\",{\"1\":{\"1030\":1}}],[\"我们网页布局一般采取的策略是\",{\"1\":{\"979\":1}}],[\"我们前面学习的就是标准流\",{\"1\":{\"975\":1}}],[\"我们布局的视口就多宽\",{\"1\":{\"949\":1}}],[\"我们通常用的单位是\",{\"1\":{\"887\":1}}],[\"我们都定义了同一个值为\",{\"1\":{\"845\":1}}],[\"我们就称为页面被卷去的头部\",{\"1\":{\"1124\":1}}],[\"我们就要去请求列表\",{\"1\":{\"747\":1}}],[\"我们就可以很方便的在父组件的元素上接收到来自子组件元素的点击事件\",{\"1\":{\"109\":1}}],[\"我们不能直接去改变\",{\"1\":{\"746\":1}}],[\"我们重点关注依赖收集系统\",{\"1\":{\"700\":1}}],[\"我们遍历传入的\",{\"1\":{\"648\":1}}],[\"我们以上面的\",{\"1\":{\"635\":1}}],[\"我们先构建一个配置项\",{\"1\":{\"630\":1}}],[\"我们先分析\",{\"1\":{\"89\":1}}],[\"我们已经了解了\",{\"1\":{\"623\":1}}],[\"我们最后要实现的功能是派发更新\",{\"1\":{\"608\":1}}],[\"我们还需要一个类来实现发布系统\",{\"1\":{\"608\":1}}],[\"我们想做的效果是\",{\"1\":{\"604\":1}}],[\"我们使用\",{\"1\":{\"388\":1}}],[\"我们从\",{\"1\":{\"296\":1}}],[\"我们对当前\",{\"1\":{\"296\":1}}],[\"我们在\",{\"1\":{\"272\":1}}],[\"我们在定义组件时\",{\"1\":{\"163\":1}}],[\"我们需要改变\",{\"1\":{\"747\":1}}],[\"我们需要对\",{\"1\":{\"296\":1}}],[\"我们需要补充更新队列\",{\"1\":{\"272\":1}}],[\"我们需要明确一点\",{\"1\":{\"257\":1}}],[\"我们只需要写<school><\",{\"1\":{\"489\":1}}],[\"我们只需要操作\",{\"1\":{\"120\":1}}],[\"我们只判断\",{\"1\":{\"272\":1}}],[\"我们可以针对不同的媒体使用不同\",{\"1\":{\"964\":1}}],[\"我们可以通过缩放去操作视觉视口\",{\"1\":{\"948\":1}}],[\"我们可以通过修改\",{\"1\":{\"644\":1}}],[\"我们可以通过某些调度策略合理分配\",{\"1\":{\"263\":1}}],[\"我们可以理解为\",{\"1\":{\"608\":1}}],[\"我们可以在\",{\"1\":{\"608\":1,\"1364\":1}}],[\"我们可以在子组件内部优化处理\",{\"1\":{\"172\":1}}],[\"我们可以更加优雅的组织我们的代码\",{\"1\":{\"546\":1}}],[\"我们可以迅速地找到首尾更新节点\",{\"1\":{\"272\":1}}],[\"我们希望快速响应用户\",{\"1\":{\"262\":1}}],[\"我们导出\",{\"1\":{\"239\":1}}],[\"我们向下转发该\",{\"1\":{\"237\":1}}],[\"我们统一把这些操作称为\",{\"1\":{\"184\":1}}],[\"我们稍后会学习到\",{\"1\":{\"178\":1}}],[\"我们利用它来实现观察者模式\",{\"1\":{\"114\":1}}],[\"我们选择其他的办法\",{\"1\":{\"91\":1}}],[\"我们的第一反应可能是给子组件增加react\",{\"1\":{\"91\":1}}],[\"验证正则表达式是否匹配该字符串\",{\"1\":{\"1391\":1}}],[\"验证等\",{\"1\":{\"510\":1}}],[\"验证传递的属性值有没有变化\",{\"1\":{\"172\":1}}],[\"终点\",{\"1\":{\"507\":2}}],[\"起始点从第1\",{\"1\":{\"1376\":1}}],[\"起始的数字项\",{\"1\":{\"1053\":1}}],[\"起床\",{\"1\":{\"795\":1}}],[\"起点\",{\"1\":{\"507\":2}}],[\"起着极其重要的作用\",{\"1\":{\"161\":1,\"461\":1}}],[\"混合的用法是指将定义好的\",{\"1\":{\"1013\":1}}],[\"混合布局\",{\"1\":{\"959\":1}}],[\"混合\",{\"1\":{\"499\":1,\"1004\":1}}],[\"混入\",{\"0\":{\"499\":1,\"1013\":1},\"1\":{\"1013\":1}}],[\"必需\",{\"1\":{\"912\":2,\"913\":2,\"1376\":2}}],[\"必传的第一个参数\",{\"1\":{\"847\":1}}],[\"必定是前一项栈顶对象的\",{\"1\":{\"661\":1}}],[\"必定调用dep\",{\"1\":{\"635\":1}}],[\"必要性\",{\"1\":{\"498\":1}}],[\"必须加退出条件\",{\"1\":{\"1458\":1}}],[\"必须数组形式传参\",{\"1\":{\"1451\":1}}],[\"必须以数组形式呈现\",{\"1\":{\"1449\":1}}],[\"必须\",{\"1\":{\"1376\":1}}],[\"必须将\",{\"1\":{\"1277\":1}}],[\"必须使用\",{\"1\":{\"1231\":1}}],[\"必须省略\",{\"1\":{\"1163\":1}}],[\"必须有相同的名字\",{\"1\":{\"1057\":1}}],[\"必须有一个\",{\"1\":{\"747\":1}}],[\"必须嵌套在<tr><tr>标签中\",{\"1\":{\"1048\":1}}],[\"必须嵌套在<table><table>标签中\",{\"1\":{\"1048\":1}}],[\"必须写\",{\"1\":{\"1307\":1,\"1308\":1}}],[\"必须写在\",{\"1\":{\"1206\":1}}],[\"必须写在标签名的后面\",{\"1\":{\"1044\":1}}],[\"必须写成函数\",{\"1\":{\"487\":1}}],[\"必须属性\",{\"1\":{\"1042\":1,\"1044\":1}}],[\"必须添加\",{\"1\":{\"995\":1}}],[\"必须至少保留\",{\"1\":{\"887\":1}}],[\"必须调用\",{\"1\":{\"842\":1}}],[\"必须在被<browserrouter>包裹的组件中使用\",{\"1\":{\"713\":1}}],[\"必须用圆括号括起来\",{\"1\":{\"1014\":1}}],[\"必须用\",{\"1\":{\"430\":1}}],[\"必须是数值\",{\"1\":{\"1376\":2}}],[\"必须是亲儿子\",{\"1\":{\"871\":1}}],[\"必须是一个对象\",{\"1\":{\"674\":1,\"686\":1}}],[\"必须是一个无格式对象\",{\"1\":{\"45\":1}}],[\"必须是以下类型之一\",{\"1\":{\"47\":1}}],[\"必须完全相同\",{\"1\":{\"24\":1}}],[\"官方解释\",{\"1\":{\"924\":1}}],[\"官方推荐的编写\",{\"1\":{\"809\":1}}],[\"官方明确推荐使用函数式组件\",{\"1\":{\"708\":1}}],[\"官方文档详见\",{\"1\":{\"790\":1}}],[\"官方文档\",{\"1\":{\"527\":1,\"528\":1}}],[\"官方提供的标准化开发工具\",{\"1\":{\"492\":1}}],[\"官网\",{\"0\":{\"79\":1,\"400\":1},\"1\":{\"528\":1}}],[\"×\",{\"1\":{\"488\":1}}],[\"√\",{\"1\":{\"488\":2}}],[\"问题\",{\"1\":{\"487\":1}}],[\"马上要执行销毁过程\",{\"1\":{\"481\":1}}],[\"销毁后自定义事件会失效\",{\"1\":{\"482\":1}}],[\"销毁后期借助\",{\"1\":{\"482\":1}}],[\"销毁\",{\"1\":{\"482\":1}}],[\"销毁实例\",{\"0\":{\"481\":1}}],[\"销毁方法\",{\"1\":{\"373\":1}}],[\"尽管大多数情况下\",{\"1\":{\"1424\":1}}],[\"尽可能少的匹配字符\",{\"1\":{\"1385\":1}}],[\"尽可能回避html已有元素名称\",{\"1\":{\"488\":1}}],[\"尽可能避免\",{\"1\":{\"479\":1}}],[\"尽量不匹配\",{\"1\":{\"1385\":1}}],[\"尽量不要创建非连续数组\",{\"1\":{\"1352\":1}}],[\"尽量不要与\",{\"1\":{\"534\":1}}],[\"尽量匹配\",{\"1\":{\"1385\":5}}],[\"尽量只设置左右内外边距\",{\"1\":{\"972\":1}}],[\"尽量只给一个盒子添加\",{\"1\":{\"971\":1}}],[\"尽量给一个明确值大小\",{\"1\":{\"883\":1}}],[\"尽量借助\",{\"1\":{\"139\":1}}],[\"尽量选择\",{\"1\":{\"139\":1}}],[\"尽量避免折中或\",{\"1\":{\"139\":1}}],[\"尽量避免组合选择器的运用\",{\"1\":{\"139\":1}}],[\"尽量使用系统默认自带字体\",{\"1\":{\"882\":1}}],[\"尽量使用英文字母来表示\",{\"1\":{\"862\":1}}],[\"尽量使用\",{\"1\":{\"139\":1}}],[\"访问和调用对象父类的函数\",{\"1\":{\"1432\":1}}],[\"访问app\",{\"1\":{\"827\":1}}],[\"访问次数\",{\"1\":{\"634\":1,\"635\":1}}],[\"访问res申请通过\",{\"1\":{\"634\":1,\"635\":1}}],[\"访问监听的属性\",{\"1\":{\"626\":1}}],[\"访问监听的变量\",{\"1\":{\"626\":1}}],[\"访问到\",{\"1\":{\"479\":1}}],[\"访问\",{\"1\":{\"479\":1,\"750\":1}}],[\"局部封装\",{\"0\":{\"1335\":1}}],[\"局部混入\",{\"1\":{\"499\":1}}],[\"局部注册\",{\"1\":{\"487\":1}}],[\"局部指令\",{\"1\":{\"475\":1}}],[\"局部刷新技术\",{\"1\":{\"2\":1}}],[\"绑入多个元素\",{\"1\":{\"475\":1}}],[\"绑定时间函数\",{\"1\":{\"1445\":1}}],[\"绑定滚动\",{\"1\":{\"1145\":1}}],[\"绑定实例\",{\"1\":{\"695\":1}}],[\"绑定对应节点\",{\"1\":{\"695\":1}}],[\"绑定dep实例\",{\"1\":{\"610\":1,\"617\":1}}],[\"绑定自定义事件\",{\"1\":{\"482\":1}}],[\"绑定自定义事件等初始化操作\",{\"1\":{\"479\":1}}],[\"绑定解析表达式\",{\"1\":{\"474\":1}}],[\"绑定\",{\"0\":{\"454\":1,\"455\":1},\"1\":{\"1145\":1}}],[\"绑定的依赖项\",{\"1\":{\"365\":1}}],[\"绑定事件对象\",{\"1\":{\"1446\":1}}],[\"绑定事件监听\",{\"1\":{\"474\":1}}],[\"绑定事件监听开始\",{\"1\":{\"132\":1}}],[\"绑定事件的时候引号内可以写一些简单的语句\",{\"1\":{\"470\":1}}],[\"绑定事件\",{\"1\":{\"69\":1,\"72\":1,\"444\":1,\"470\":1}}],[\"例\",{\"1\":{\"475\":1,\"867\":1}}],[\"例如不会触发\",{\"1\":{\"1330\":1}}],[\"例如<a\",{\"1\":{\"1043\":1}}],[\"例如<br\",{\"1\":{\"1030\":1}}],[\"例如<html>和<\",{\"1\":{\"1030\":1}}],[\"例如<html\",{\"1\":{\"1030\":1}}],[\"例如字体大小\",{\"1\":{\"855\":1}}],[\"例如有这样一个模板字符串\",{\"1\":{\"644\":1}}],[\"例如复杂的第三方类库等\",{\"1\":{\"556\":1}}],[\"例如\",{\"1\":{\"240\":2,\"452\":1,\"505\":1,\"561\":1,\"720\":1,\"1240\":1,\"1333\":1,\"1382\":1,\"1383\":1,\"1391\":2}}],[\"例如登录认证用户信息\",{\"1\":{\"210\":1}}],[\"例如清除定时器\",{\"1\":{\"185\":1}}],[\"防止对象扩展\",{\"1\":{\"1408\":1}}],[\"防止命名冲突\",{\"1\":{\"1187\":1}}],[\"防止引入重复dep\",{\"1\":{\"635\":1}}],[\"防止\",{\"1\":{\"628\":1}}],[\"防止闪现\",{\"1\":{\"474\":1}}],[\"防抖\",{\"1\":{\"67\":1}}],[\"短路或\",{\"1\":{\"1259\":2}}],[\"短路与\",{\"1\":{\"1259\":2}}],[\"短横线命名\",{\"1\":{\"472\":1}}],[\"短语法\",{\"0\":{\"219\":1}}],[\"未进入到执行阶段前\",{\"1\":{\"1423\":1}}],[\"未定义类型\",{\"1\":{\"1241\":1}}],[\"未声明\",{\"1\":{\"1124\":1}}],[\"未来主流\",{\"1\":{\"917\":1}}],[\"未能做到的事\",{\"0\":{\"825\":1}}],[\"未改变原对象\",{\"1\":{\"524\":1}}],[\"未提供别名的按键\",{\"1\":{\"472\":1}}],[\"未勾选\",{\"1\":{\"465\":1}}],[\"左侧表达式匹配\",{\"1\":{\"1385\":1}}],[\"左外边距\",{\"1\":{\"970\":1}}],[\"左右两侧的值\",{\"1\":{\"1264\":1}}],[\"左右居中\",{\"1\":{\"970\":1,\"971\":1}}],[\"左右内边距\",{\"1\":{\"969\":2}}],[\"左右箭头或者直接输入\",{\"1\":{\"940\":1}}],[\"左内边距\",{\"1\":{\"969\":1}}],[\"左边框的大小\",{\"1\":{\"1110\":1}}],[\"左边是\",{\"1\":{\"940\":1}}],[\"左边走是负值\",{\"1\":{\"916\":1}}],[\"左下角\",{\"1\":{\"911\":1}}],[\"左对齐\",{\"1\":{\"890\":1}}],[\"左移一位\",{\"1\":{\"676\":1}}],[\"左\",{\"1\":{\"472\":1}}],[\"左子节点索引\",{\"1\":{\"391\":2}}],[\"左子节点编号\",{\"1\":{\"391\":2}}],[\"键值之间使用\",{\"1\":{\"1341\":1}}],[\"键值对结合\",{\"1\":{\"1179\":1}}],[\"键值对\",{\"1\":{\"855\":1}}],[\"键值对的方式保存在\",{\"1\":{\"848\":1}}],[\"键是否被按下\",{\"1\":{\"1152\":3}}],[\"键盘\",{\"1\":{\"1155\":1}}],[\"键盘移动元素\",{\"0\":{\"1154\":1}}],[\"键盘属性\",{\"0\":{\"1152\":1}}],[\"键盘事件一般都会绑定给一些可以获取到焦点的对象\",{\"1\":{\"1150\":1}}],[\"键盘事件\",{\"0\":{\"1149\":1}}],[\"键盘按键\",{\"1\":{\"1117\":1}}],[\"键码\",{\"1\":{\"472\":1}}],[\"键\",{\"1\":{\"472\":1,\"937\":2}}],[\"退出登录\",{\"1\":{\"731\":1}}],[\"退出\",{\"1\":{\"472\":1}}],[\"退出循环时将最新的状态值\",{\"1\":{\"323\":1}}],[\"退格\",{\"1\":{\"472\":1}}],[\"少部分\",{\"1\":{\"472\":1}}],[\"修饰符加了\",{\"1\":{\"1227\":1}}],[\"修饰符\",{\"1\":{\"563\":1,\"1217\":1}}],[\"修饰符可连续写如\",{\"1\":{\"471\":1}}],[\"修改只是发生在临时对象身上\",{\"1\":{\"1415\":1}}],[\"修改的\",{\"1\":{\"1352\":1}}],[\"修改目标不会影响被拷贝对象\",{\"1\":{\"1332\":1}}],[\"修改目标对象会影响被拷贝对象\",{\"1\":{\"1332\":1}}],[\"修改多个样式\",{\"1\":{\"1293\":1}}],[\"修改失败\",{\"1\":{\"1105\":1}}],[\"修改样式基本会立即显示\",{\"1\":{\"1105\":1}}],[\"修改其中一个像素值\",{\"1\":{\"1044\":1}}],[\"修改方便\",{\"1\":{\"862\":1}}],[\"修改app\",{\"1\":{\"823\":1}}],[\"修改开始标签正则\",{\"1\":{\"662\":1}}],[\"修改了计算属性里面脏值\",{\"1\":{\"632\":1,\"635\":1}}],[\"修改属性计算属性依赖的变量重置\",{\"1\":{\"632\":1,\"635\":1}}],[\"修改进行拦截\",{\"1\":{\"548\":1}}],[\"修改父组件的数据\",{\"1\":{\"511\":1}}],[\"修改obj中的name或age值\",{\"1\":{\"451\":1}}],[\"修改前后的值\",{\"1\":{\"451\":1}}],[\"修改网页的title\",{\"1\":{\"436\":1}}],[\"修改\",{\"1\":{\"418\":1,\"713\":1,\"721\":1,\"800\":1,\"1065\":1}}],[\"修改真实dom\",{\"1\":{\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"修改完成后\",{\"1\":{\"103\":1}}],[\"修改请求数据\",{\"1\":{\"42\":1}}],[\"效果相同\",{\"1\":{\"1322\":1}}],[\"效果为字符串拼接\",{\"1\":{\"1255\":1}}],[\"效果与\",{\"1\":{\"1218\":1}}],[\"效果演示\",{\"1\":{\"998\":1}}],[\"效果\",{\"1\":{\"714\":1,\"1019\":1,\"1020\":1}}],[\"效果一致\",{\"1\":{\"470\":1,\"905\":1}}],[\"效率更高\",{\"1\":{\"450\":1}}],[\"z0\",{\"1\":{\"1382\":1}}],[\"za\",{\"1\":{\"1382\":1}}],[\"zoom\",{\"1\":{\"985\":2}}],[\"zen\",{\"1\":{\"936\":1}}],[\"z\",{\"0\":{\"996\":1},\"1\":{\"515\":2,\"516\":1,\"518\":1,\"520\":1,\"661\":3,\"662\":1,\"676\":2,\"952\":1,\"996\":4,\"1382\":8}}],[\"zh\",{\"1\":{\"492\":1,\"527\":1,\"549\":2,\"1033\":1,\"1057\":1}}],[\"zhangsan\",{\"1\":{\"468\":1,\"1160\":1,\"1162\":1,\"1217\":1,\"1274\":4,\"1460\":1,\"1461\":1}}],[\"zzz\",{\"1\":{\"410\":1}}],[\"身上所有的属性及\",{\"1\":{\"467\":1}}],[\"身上\",{\"1\":{\"467\":1}}],[\"身份证号\",{\"1\":{\"161\":1,\"461\":1}}],[\"过时\",{\"1\":{\"825\":2}}],[\"过滤之后推入到异步任务队列中顺序执行\",{\"1\":{\"700\":1}}],[\"过滤器虽然这看起来很方便\",{\"1\":{\"564\":1}}],[\"过滤器也可以接收额外参数\",{\"1\":{\"466\":1}}],[\"过滤器名\",{\"1\":{\"466\":1}}],[\"过滤器\",{\"0\":{\"466\":1}}],[\"过的数据\",{\"1\":{\"593\":1}}],[\"过程\",{\"1\":{\"507\":2,\"1423\":1}}],[\"过渡类名更改\",{\"0\":{\"562\":1}}],[\"过渡\",{\"0\":{\"507\":1}}],[\"过渡与动画\",{\"0\":{\"506\":1}}],[\"过渡效果\",{\"0\":{\"208\":1}}],[\"失去鼠标焦点触发\",{\"1\":{\"1117\":1}}],[\"失去焦点发送\",{\"1\":{\"514\":1}}],[\"失去焦点再收集数据\",{\"1\":{\"465\":1}}],[\"失败了\",{\"1\":{\"1206\":1}}],[\"失败的查询将以静默方式默认重试\",{\"1\":{\"836\":1}}],[\"失败后触发\",{\"1\":{\"835\":1}}],[\"失败状态码为\",{\"1\":{\"69\":1,\"72\":1}}],[\"三\",{\"1\":{\"1415\":1}}],[\"三元运算符\",{\"0\":{\"1263\":1}}],[\"三者中结构最重要\",{\"1\":{\"1028\":1}}],[\"三者的使用方法都如下所示\",{\"1\":{\"1017\":1}}],[\"三者的嵌套语法都是一致的\",{\"1\":{\"1010\":1}}],[\"三角\",{\"0\":{\"921\":1}}],[\"三种预定速度之一的字符串\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":1,\"1308\":1}}],[\"三种引用方式\",{\"1\":{\"917\":1}}],[\"三种\",{\"1\":{\"786\":1}}],[\"三大获取方案\",{\"1\":{\"1124\":1}}],[\"三大系列大小对比\",{\"1\":{\"1116\":1}}],[\"三大系列对比\",{\"0\":{\"1116\":1}}],[\"三大部分组成包括结构\",{\"1\":{\"1028\":1}}],[\"三大收集器的顺序分别为\",{\"1\":{\"698\":1}}],[\"三大依赖收集器\",{\"1\":{\"694\":1}}],[\"三大属性执行次数\",{\"0\":{\"156\":1}}],[\"三个数组\",{\"1\":{\"1390\":1}}],[\"三个表达式之间\",{\"1\":{\"1273\":1}}],[\"三个方面\",{\"1\":{\"1028\":1}}],[\"三个基本同时发出的请求也都收敛到了\",{\"1\":{\"847\":1}}],[\"三个组件\",{\"1\":{\"733\":1}}],[\"三个不同类型的\",{\"0\":{\"707\":1}}],[\"三个函数相互调用从而形成了递归\",{\"1\":{\"604\":1}}],[\"三个\",{\"1\":{\"505\":1}}],[\"三个修饰符\",{\"1\":{\"465\":1}}],[\"勾选\",{\"1\":{\"465\":1}}],[\"名\",{\"1\":{\"1013\":1}}],[\"名字\",{\"1\":{\"1054\":2,\"1239\":1}}],[\"名字的\",{\"1\":{\"937\":1}}],[\"名字也确定\",{\"1\":{\"454\":1}}],[\"名字也不确定\",{\"1\":{\"454\":1}}],[\"名称\",{\"1\":{\"1013\":1,\"1286\":1,\"1287\":1}}],[\"名称调用\",{\"1\":{\"823\":1}}],[\"名称设置\",{\"1\":{\"54\":1}}],[\"监测对象属性变化\",{\"1\":{\"597\":1}}],[\"监视的回调中用到哪个属性\",{\"1\":{\"541\":1}}],[\"监视reactive定义的响应式数据中的某些属性\",{\"1\":{\"540\":1}}],[\"监视reactive定义的响应式数据中的某个属性\",{\"1\":{\"540\":1}}],[\"监视reactive定义的响应式数据\",{\"1\":{\"540\":1}}],[\"监视ref定义的响应式数据\",{\"1\":{\"540\":1}}],[\"监视多个ref定义的响应式数据\",{\"1\":{\"540\":1}}],[\"监视简写\",{\"1\":{\"451\":1}}],[\"监听到\",{\"1\":{\"1407\":1}}],[\"监听到action为incrementasync就会出发incrementasync函数\",{\"1\":{\"762\":1}}],[\"监听窗口变化\",{\"1\":{\"823\":1}}],[\"监听路由\",{\"1\":{\"823\":1}}],[\"监听路由表改变重新渲染\",{\"1\":{\"732\":1}}],[\"监听通过\",{\"1\":{\"788\":1}}],[\"监听进入\",{\"1\":{\"788\":1}}],[\"监听发出action为fetch\",{\"1\":{\"777\":1}}],[\"监听user的actions的saga文件\",{\"1\":{\"777\":1}}],[\"监听counter的actions的saga文件\",{\"1\":{\"777\":1}}],[\"监听用户发出的\",{\"1\":{\"759\":1}}],[\"监听拷贝路由表中的数据\",{\"1\":{\"732\":1}}],[\"监听\",{\"1\":{\"634\":1,\"695\":1,\"732\":1,\"768\":2,\"823\":1}}],[\"监听的属性\",{\"1\":{\"626\":1}}],[\"监听的是数组\",{\"1\":{\"624\":1}}],[\"监听a\",{\"1\":{\"625\":1}}],[\"监听函数数组\",{\"1\":{\"292\":1}}],[\"监听根容器div\",{\"1\":{\"286\":1}}],[\"监听80端口\",{\"1\":{\"28\":1}}],[\"监听端口启动服务\",{\"1\":{\"19\":1}}],[\"皆可\",{\"1\":{\"451\":1}}],[\"切\",{\"1\":{\"450\":1}}],[\"切换效果参数\",{\"1\":{\"1304\":1}}],[\"切换类\",{\"0\":{\"1300\":1}}],[\"切换视图\",{\"1\":{\"715\":1}}],[\"切换到你要创建项目的目录\",{\"1\":{\"493\":1}}],[\"切换到创建项目的目录\",{\"1\":{\"137\":1}}],[\"切换频率较高的场景\",{\"1\":{\"457\":1}}],[\"切换频率较低的场景\",{\"1\":{\"457\":1}}],[\"切换时\",{\"1\":{\"208\":1}}],[\"输入表单元素\",{\"1\":{\"1057\":1}}],[\"输入\",{\"1\":{\"721\":1}}],[\"输入首尾空格过滤\",{\"1\":{\"465\":1}}],[\"输入字符串转为有效的数字\",{\"1\":{\"465\":1}}],[\"输入类元素\",{\"1\":{\"447\":1}}],[\"输出\",{\"1\":{\"1405\":1}}],[\"输出属性名和属性值\",{\"1\":{\"1405\":1}}],[\"输出新的action\",{\"1\":{\"781\":1}}],[\"输出结果\",{\"0\":{\"254\":1},\"1\":{\"269\":1,\"270\":1,\"272\":1,\"273\":1,\"661\":1}}],[\"输出虚拟dom\",{\"1\":{\"252\":1}}],[\"输出一个字符串\",{\"1\":{\"249\":1}}],[\"流式布局和\",{\"1\":{\"962\":2}}],[\"流式布局方式是移动\",{\"1\":{\"960\":1}}],[\"流式布局\",{\"0\":{\"960\":1},\"1\":{\"959\":1,\"960\":1}}],[\"流手动调用失败的\",{\"1\":{\"788\":1}}],[\"流向页面\",{\"1\":{\"446\":1,\"447\":1}}],[\"流程控制语句\",{\"0\":{\"1267\":1}}],[\"流程\",{\"0\":{\"753\":1}}],[\"流程详解\",{\"0\":{\"699\":1}}],[\"流程图\",{\"0\":{\"300\":1,\"477\":1,\"698\":1}}],[\"流程分析\",{\"0\":{\"167\":1,\"171\":1},\"1\":{\"823\":1}}],[\"举例\",{\"1\":{\"444\":1}}],[\"举个例子\",{\"1\":{\"220\":1}}],[\"待拷贝的第\",{\"1\":{\"1332\":1}}],[\"待拷贝到第一个对象的对象\",{\"1\":{\"1332\":1}}],[\"待定\",{\"1\":{\"440\":1}}],[\"待insertbefore的dom节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"地址\",{\"1\":{\"1042\":1}}],[\"地址内部进行换行\",{\"1\":{\"899\":1}}],[\"地址换行到下一行\",{\"1\":{\"899\":1}}],[\"地址切换为\",{\"1\":{\"711\":1}}],[\"地址干净\",{\"1\":{\"439\":1}}],[\"地址中永远带着\",{\"1\":{\"439\":1}}],[\"校验严格\",{\"1\":{\"439\":1}}],[\"号\",{\"1\":{\"439\":1}}],[\"什么是\",{\"1\":{\"439\":1,\"543\":1}}],[\"什么时候使用\",{\"1\":{\"406\":1,\"554\":1}}],[\"离开该组件时调用\",{\"1\":{\"438\":1}}],[\"离开守卫\",{\"1\":{\"438\":1}}],[\"配合\",{\"1\":{\"474\":2,\"583\":1,\"609\":1}}],[\"配合keydown使用\",{\"1\":{\"472\":1}}],[\"配合keyup使用\",{\"1\":{\"472\":1}}],[\"配合keep\",{\"1\":{\"434\":1}}],[\"配置动态路由权限\",{\"1\":{\"739\":1}}],[\"配置文件\",{\"0\":{\"739\":1}}],[\"配置文件中增加规则\",{\"1\":{\"591\":1}}],[\"配置大同小异\",{\"1\":{\"571\":1}}],[\"配置功能一致\",{\"1\":{\"539\":1,\"540\":1}}],[\"配置混用\",{\"1\":{\"534\":1}}],[\"配置见\",{\"1\":{\"519\":1}}],[\"配置略微繁琐\",{\"1\":{\"495\":1}}],[\"配置中声明的属性\",{\"1\":{\"535\":1}}],[\"配置中\",{\"1\":{\"489\":1}}],[\"配置来监视指定的属性\",{\"1\":{\"451\":1}}],[\"配置\",{\"0\":{\"571\":1,\"573\":1,\"578\":1,\"821\":1},\"1\":{\"430\":1,\"451\":1,\"465\":1,\"493\":1,\"525\":1,\"534\":1,\"578\":1}}],[\"配置路由表\",{\"1\":{\"712\":1}}],[\"配置路由\",{\"1\":{\"430\":1}}],[\"配置路由规则\",{\"1\":{\"426\":1}}],[\"配置项中存在\",{\"1\":{\"627\":1}}],[\"配置项中的\",{\"1\":{\"607\":1}}],[\"配置项信息\",{\"1\":{\"626\":1}}],[\"配置项形式\",{\"1\":{\"625\":1}}],[\"配置项\",{\"1\":{\"426\":1,\"430\":1,\"626\":1,\"631\":2}}],[\"配置项并注入到\",{\"1\":{\"424\":1}}],[\"配置项很类似\",{\"1\":{\"85\":1}}],[\"配置对象\",{\"0\":{\"38\":1},\"1\":{\"475\":2}}],[\"配置baseurl\",{\"1\":{\"20\":1}}],[\"布\",{\"1\":{\"1415\":1}}],[\"布尔\",{\"1\":{\"1251\":2}}],[\"布尔型\",{\"1\":{\"1241\":1}}],[\"布尔值分别相对应的\",{\"1\":{\"1415\":1}}],[\"布尔值转换为\",{\"1\":{\"1250\":1}}],[\"布尔值\",{\"0\":{\"643\":1},\"1\":{\"465\":1}}],[\"布尔值为true\",{\"1\":{\"431\":1}}],[\"布局更加自由和方便\",{\"1\":{\"1051\":1}}],[\"布局定位属性\",{\"1\":{\"1000\":1}}],[\"布局时很少使用\",{\"1\":{\"991\":1}}],[\"布局主要针对于宽度布局\",{\"1\":{\"962\":1}}],[\"布局带来的问题\",{\"1\":{\"962\":1}}],[\"布局\",{\"0\":{\"961\":1},\"1\":{\"961\":1}}],[\"布局视口的宽度应该与理想视口的宽度一致\",{\"1\":{\"949\":1}}],[\"布局视口仍保持原来宽度\",{\"1\":{\"948\":1}}],[\"布局视口\",{\"0\":{\"947\":1}}],[\"布局网页\",{\"1\":{\"854\":1}}],[\"布局页面\",{\"1\":{\"852\":1}}],[\"布局和绘制\",{\"1\":{\"261\":1}}],[\"均转换为字符串再拼接\",{\"1\":{\"1255\":1}}],[\"均返回成功\",{\"1\":{\"1225\":1}}],[\"均要配置在\",{\"1\":{\"534\":1}}],[\"均可解决\",{\"1\":{\"430\":1}}],[\"均已完成\",{\"1\":{\"273\":1}}],[\"步骤\",{\"1\":{\"418\":1,\"868\":1,\"1458\":1}}],[\"借此完善订阅者定向清除方法\",{\"1\":{\"635\":1}}],[\"借由\",{\"1\":{\"621\":1}}],[\"借助数据劫持的响应式处理来实现目标变量的依赖收集与依赖更新\",{\"1\":{\"621\":1}}],[\"借助\",{\"1\":{\"418\":4,\"695\":1}}],[\"借助mapmutations生成\",{\"1\":{\"417\":2}}],[\"借助mapactions生成\",{\"1\":{\"416\":2}}],[\"借助mapgetters生成计算属性\",{\"1\":{\"415\":2}}],[\"借助mapstate生成计算属性\",{\"1\":{\"414\":2}}],[\"借鉴于\",{\"1\":{\"658\":1}}],[\"借鉴\",{\"1\":{\"403\":2,\"1275\":1}}],[\"映射组件props的函数部分\",{\"1\":{\"774\":1}}],[\"映射组件props的数据部分\",{\"1\":{\"774\":1}}],[\"映射对应组件\",{\"1\":{\"732\":1}}],[\"映射element\",{\"1\":{\"731\":1}}],[\"映射成标签\",{\"1\":{\"490\":1}}],[\"映射\",{\"1\":{\"414\":1,\"415\":1}}],[\"映射表建立\",{\"1\":{\"358\":1}}],[\"准备数据状态state\",{\"1\":{\"407\":1}}],[\"准备变化mutations\",{\"1\":{\"407\":1}}],[\"准备动作actions\",{\"1\":{\"407\":1}}],[\"环境中获取全局对象需要不同的语句\",{\"1\":{\"1231\":1}}],[\"环境排除\",{\"1\":{\"1171\":1}}],[\"环境\",{\"0\":{\"407\":1},\"1\":{\"1422\":1}}],[\"环境下的\",{\"1\":{\"249\":1}}],[\"写入方式\",{\"0\":{\"1235\":1}}],[\"写入根组件的数据\",{\"1\":{\"521\":1}}],[\"写上\",{\"1\":{\"1056\":1}}],[\"写上合并方式=合并的单元格数量\",{\"1\":{\"1050\":1}}],[\"写合并代码\",{\"1\":{\"1050\":2}}],[\"写到动画或者效果前面\",{\"1\":{\"1306\":1}}],[\"写到外部文件中可以在不同的页面中同时使用\",{\"1\":{\"1235\":1}}],[\"写到\",{\"1\":{\"866\":1}}],[\"写作文\",{\"1\":{\"641\":1,\"653\":1}}],[\"写在最后\",{\"1\":{\"1057\":1}}],[\"写在\",{\"1\":{\"437\":1}}],[\"写\",{\"1\":{\"406\":1,\"468\":1}}],[\"写法优势为子元素可根据自己文字大小自动调整行高\",{\"1\":{\"931\":1}}],[\"写法要符合\",{\"1\":{\"867\":1}}],[\"写法更偏向\",{\"1\":{\"793\":1}}],[\"写法和\",{\"1\":{\"696\":1}}],[\"写法二\",{\"1\":{\"510\":1,\"518\":1}}],[\"写法一\",{\"1\":{\"510\":1,\"518\":1}}],[\"写法示例\",{\"0\":{\"448\":1}}],[\"写法详见usecontext\",{\"1\":{\"209\":1}}],[\"写法\",{\"0\":{\"122\":1,\"182\":1,\"217\":1},\"1\":{\"26\":1,\"457\":1,\"562\":2,\"756\":1,\"1016\":1,\"1341\":1}}],[\"读取所有的值\",{\"1\":{\"1209\":1}}],[\"读取所有的键\",{\"1\":{\"1209\":1}}],[\"读取到一行就运行一行\",{\"1\":{\"1119\":1}}],[\"读取设置内联样式\",{\"0\":{\"1105\":1}}],[\"读取的异步任务结束等待状态\",{\"1\":{\"1076\":1}}],[\"读取和修改当前位置的\",{\"1\":{\"721\":1}}],[\"读取时机\",{\"1\":{\"497\":1}}],[\"读取方式三\",{\"1\":{\"498\":1}}],[\"读取方式二\",{\"1\":{\"498\":1}}],[\"读取方式一\",{\"1\":{\"498\":1}}],[\"读取方式\",{\"1\":{\"497\":1}}],[\"读取\",{\"1\":{\"418\":2,\"1085\":1,\"1407\":2}}],[\"读\",{\"1\":{\"406\":1,\"468\":1}}],[\"管理起来\",{\"1\":{\"848\":1}}],[\"管理所有的\",{\"1\":{\"843\":1}}],[\"管理\",{\"1\":{\"732\":1,\"827\":1}}],[\"管理的函数\",{\"1\":{\"452\":2}}],[\"管理的状态对象\",{\"1\":{\"409\":1}}],[\"管理的一个\",{\"1\":{\"406\":1}}],[\"管理队列任务\",{\"1\":{\"393\":1}}],[\"路由导航\",{\"1\":{\"822\":1}}],[\"路由注册在内的最简\",{\"1\":{\"820\":1}}],[\"路由容器组件对路由做了一个包裹\",{\"1\":{\"738\":1}}],[\"路由容器组件\",{\"0\":{\"738\":1}}],[\"路由懒加载\",{\"1\":{\"737\":1}}],[\"路由配置列表数据转换\",{\"1\":{\"737\":1}}],[\"路由配置转化函数\",{\"1\":{\"737\":1}}],[\"路由配置\",{\"0\":{\"734\":1}}],[\"路由拦截又称路由守卫\",{\"1\":{\"733\":1}}],[\"路由拦截\",{\"0\":{\"733\":1}}],[\"路由表配置入口\",{\"1\":{\"733\":1}}],[\"路由表\",{\"1\":{\"732\":1}}],[\"路由表等\",{\"1\":{\"730\":1}}],[\"路由菜单转换函数\",{\"1\":{\"731\":1}}],[\"路由更新\",{\"1\":{\"731\":1}}],[\"路由鉴权组件\",{\"1\":{\"730\":1}}],[\"路由核心库\",{\"1\":{\"707\":1}}],[\"路由器两种工作模式\",{\"0\":{\"439\":1}}],[\"路由守卫函数封装进<guard>组件\",{\"1\":{\"737\":1}}],[\"路由守卫\",{\"0\":{\"435\":1}}],[\"路由跳转默认\",{\"1\":{\"432\":1}}],[\"路由组件失活\",{\"1\":{\"434\":1}}],[\"路由组件失活时触发\",{\"1\":{\"434\":1}}],[\"路由组件激活\",{\"1\":{\"434\":1}}],[\"路由组件被激活时触发\",{\"1\":{\"434\":1}}],[\"路由组件所独有的两个钩子\",{\"1\":{\"434\":1}}],[\"路由组件\",{\"1\":{\"430\":1}}],[\"路由组件通常放在\",{\"1\":{\"425\":1}}],[\"路由携带\",{\"1\":{\"430\":1}}],[\"路由的组件\",{\"1\":{\"429\":1,\"430\":1}}],[\"路由传参\",{\"0\":{\"428\":1}}],[\"路由命名\",{\"0\":{\"427\":1}}],[\"路由\",{\"0\":{\"422\":1},\"1\":{\"404\":1}}],[\"路径为\",{\"1\":{\"720\":1}}],[\"路径\",{\"1\":{\"7\":1,\"713\":1,\"739\":1}}],[\"技术\",{\"1\":{\"403\":1}}],[\"端有所区别\",{\"1\":{\"959\":1}}],[\"端页面在手机上显示的问题\",{\"1\":{\"947\":1}}],[\"端开发\",{\"1\":{\"402\":1}}],[\"端口号\",{\"1\":{\"24\":1}}],[\"遵循现有结构\",{\"1\":{\"1001\":1}}],[\"遵循\",{\"1\":{\"402\":1,\"1028\":1}}],[\"遵守组件状态不可变的理念\",{\"1\":{\"103\":1}}],[\"框架对路由的操作全流程\",{\"1\":{\"822\":1}}],[\"框架层面分析通讯方案\",{\"1\":{\"509\":1}}],[\"框架\",{\"1\":{\"401\":1,\"1005\":1}}],[\"芝士react源码分析\",{\"1\":{\"398\":1}}],[\"替换子节点\",{\"1\":{\"1094\":1}}],[\"替换文本\",{\"1\":{\"1044\":2}}],[\"替换为<routes>\",{\"1\":{\"712\":1}}],[\"替换曾经的\",{\"1\":{\"709\":1}}],[\"替换当前url并跳转到目标路由\",{\"1\":{\"432\":1}}],[\"替换了原来的老\",{\"1\":{\"396\":1}}],[\"替代fiber\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"跳出本层循环\",{\"1\":{\"1277\":1}}],[\"跳出循环\",{\"1\":{\"1270\":1,\"1276\":1}}],[\"跳出工作循环\",{\"1\":{\"395\":1}}],[\"跳过本次循环剩余的代码\",{\"1\":{\"1277\":1}}],[\"跳过\",{\"1\":{\"632\":1}}],[\"跳过响应式转换可以提高性能\",{\"1\":{\"556\":1}}],[\"跳过其所在节点的编译过程\",{\"1\":{\"474\":1}}],[\"跳过对比直接复用\",{\"1\":{\"92\":1}}],[\"跳转目标\",{\"1\":{\"1042\":1}}],[\"跳转到指定页面\",{\"1\":{\"1067\":1}}],[\"跳转到其他页面\",{\"1\":{\"1065\":1}}],[\"跳转到该路由组件时\",{\"1\":{\"720\":1}}],[\"跳转到目标路由\",{\"1\":{\"432\":1}}],[\"跳转需要对参数保密的情景\",{\"1\":{\"430\":1}}],[\"跳转并携带params参数\",{\"1\":{\"430\":2}}],[\"跳转并携带query参数\",{\"1\":{\"429\":2}}],[\"跳转\",{\"1\":{\"426\":1}}],[\"刷新工作\",{\"1\":{\"395\":1}}],[\"查询部分\",{\"1\":{\"1065\":1}}],[\"查询\",{\"1\":{\"964\":1}}],[\"查询装载的新实例\",{\"1\":{\"836\":1}}],[\"查询依赖于前面的查询才能执行\",{\"1\":{\"832\":1}}],[\"查询函数必须抛出异常\",{\"1\":{\"830\":1}}],[\"查询处于禁用状态\",{\"1\":{\"829\":1}}],[\"查询成功\",{\"1\":{\"829\":1}}],[\"查询遇到一个错误\",{\"1\":{\"829\":1}}],[\"查询没有数据\",{\"1\":{\"829\":1}}],[\"查询字符串\",{\"1\":{\"721\":1}}],[\"查\",{\"1\":{\"816\":1}}],[\"查看一个对象本身的所有属性\",{\"1\":{\"1404\":1}}],[\"查看\",{\"1\":{\"527\":1}}],[\"查看堆的顶点\",{\"1\":{\"392\":1}}],[\"查找方式是沿着作用域链从左至右查找变量或者函\",{\"1\":{\"1423\":1}}],[\"查找方括号内任意一个字符\",{\"1\":{\"1382\":1}}],[\"查找从大写\",{\"1\":{\"1382\":2}}],[\"查找从小写\",{\"1\":{\"1382\":1}}],[\"查找从\",{\"1\":{\"1382\":1}}],[\"查找不在方括号内的字符\",{\"1\":{\"1382\":1}}],[\"查找以十六进制\",{\"1\":{\"1381\":1}}],[\"查找以十六进制数\",{\"1\":{\"1381\":1}}],[\"查找以八进制数\",{\"1\":{\"1381\":1}}],[\"查找垂直制表符\",{\"1\":{\"1381\":1}}],[\"查找制表符\",{\"1\":{\"1381\":1}}],[\"查找回车符\",{\"1\":{\"1381\":1}}],[\"查找换页符\",{\"1\":{\"1381\":1}}],[\"查找换行符\",{\"1\":{\"1381\":1}}],[\"查找空白字符\",{\"1\":{\"1381\":1}}],[\"查找非空白字符\",{\"1\":{\"1381\":1}}],[\"查找非数字字符\",{\"1\":{\"1381\":1}}],[\"查找非单词字符\",{\"1\":{\"1381\":1}}],[\"查找数字\",{\"1\":{\"1381\":1}}],[\"查找单词字符\",{\"1\":{\"1381\":1}}],[\"查找单个字符\",{\"1\":{\"1381\":1}}],[\"查找被选中的表单元素\",{\"1\":{\"1313\":1}}],[\"查找当前元素之前所有的同辈元素\",{\"1\":{\"1290\":1}}],[\"查找当前元素之后所有的同辈元素\",{\"1\":{\"1290\":1}}],[\"查找兄弟节点\",{\"1\":{\"1290\":1}}],[\"查找父级\",{\"1\":{\"1290\":1}}],[\"查找成功后\",{\"1\":{\"676\":1}}],[\"查找\",{\"1\":{\"274\":1,\"1381\":1}}],[\"查找策略\",{\"1\":{\"273\":1}}],[\"查找组件内的标签或任意其他数据\",{\"1\":{\"188\":1}}],[\"索引可以传递一个负值\",{\"1\":{\"1359\":1}}],[\"索引\",{\"1\":{\"1289\":1}}],[\"索引值从\",{\"1\":{\"1100\":1}}],[\"索引关系\",{\"1\":{\"391\":1}}],[\"索引初始为0\",{\"1\":{\"272\":1}}],[\"右侧表达式匹配\",{\"1\":{\"1385\":1}}],[\"右侧的空白\",{\"1\":{\"1220\":1}}],[\"右侧的表达式一般为\",{\"1\":{\"1206\":1}}],[\"右侧有纵向滚动条\",{\"1\":{\"96\":1}}],[\"右击选择浏览器打开\",{\"1\":{\"1031\":1}}],[\"右击页面空白\",{\"1\":{\"940\":1}}],[\"右外边距\",{\"1\":{\"970\":1}}],[\"右内边距\",{\"1\":{\"969\":1}}],[\"右边\",{\"1\":{\"940\":1}}],[\"右边是一个对象\",{\"1\":{\"1401\":1}}],[\"右边是\",{\"1\":{\"940\":1}}],[\"右下角\",{\"1\":{\"911\":1}}],[\"右上角\",{\"1\":{\"911\":1}}],[\"右对齐\",{\"1\":{\"890\":1}}],[\"右移一位\",{\"1\":{\"661\":1,\"676\":1}}],[\"右\",{\"1\":{\"472\":1,\"969\":1}}],[\"右子节点索引\",{\"1\":{\"391\":1}}],[\"右子节点编号\",{\"1\":{\"391\":1}}],[\"编码设计\",{\"1\":{\"1382\":1}}],[\"编码方式\",{\"1\":{\"1381\":1}}],[\"编码可以表示双字节字符\",{\"1\":{\"1381\":1}}],[\"编码只能够匹配有限的单字节字符\",{\"1\":{\"1381\":1}}],[\"编码为\",{\"1\":{\"1381\":1}}],[\"编码定义正则表达式直接量\",{\"1\":{\"1381\":1}}],[\"编码来表示\",{\"1\":{\"1381\":1}}],[\"编码来排序\",{\"1\":{\"1364\":1}}],[\"编码或者\",{\"1\":{\"1381\":1}}],[\"编码进行排序\",{\"1\":{\"1364\":1}}],[\"编码使用\",{\"1\":{\"1262\":1}}],[\"编码\",{\"0\":{\"1262\":1},\"1\":{\"1240\":1,\"1262\":2,\"1373\":1,\"1381\":1}}],[\"编码简洁\",{\"1\":{\"402\":1}}],[\"编程式导航\",{\"1\":{\"822\":1}}],[\"编程式路由导航\",{\"0\":{\"432\":1}}],[\"编程\",{\"1\":{\"641\":1,\"653\":1}}],[\"编辑器语法提示\",{\"1\":{\"587\":1}}],[\"编辑器报错\",{\"1\":{\"587\":1}}],[\"编写经验而很难写出组织良好且易于维护的\",{\"1\":{\"1003\":1}}],[\"编写速度\",{\"1\":{\"936\":1}}],[\"编写一个低配版h函数\",{\"1\":{\"674\":1,\"686\":1}}],[\"编写的\",{\"1\":{\"524\":1}}],[\"编写组件标签\",{\"1\":{\"487\":1}}],[\"编写\",{\"1\":{\"424\":1,\"665\":1}}],[\"编号值越小\",{\"1\":{\"391\":1}}],[\"编号关系\",{\"1\":{\"391\":1}}],[\"编译后\",{\"1\":{\"1012\":2,\"1013\":1}}],[\"编译后会将类型信息移除\",{\"1\":{\"581\":1}}],[\"编译前\",{\"1\":{\"1012\":2,\"1013\":1}}],[\"编译生成对应的\",{\"1\":{\"1004\":1}}],[\"编译转化\",{\"1\":{\"701\":2}}],[\"编译转化时的逻辑侧重于插值语法的内容替换以及自定义指令的绑定\",{\"1\":{\"696\":1}}],[\"编译转化与重新回填\",{\"1\":{\"696\":1}}],[\"编译时需要对插值语法增加监听\",{\"1\":{\"695\":1}}],[\"编译dom\",{\"1\":{\"695\":1}}],[\"编译三部曲\",{\"1\":{\"695\":1}}],[\"编译类的创建\",{\"0\":{\"695\":1}}],[\"编译为\",{\"1\":{\"660\":1}}],[\"编译器宏解决\",{\"1\":{\"587\":1}}],[\"编译优化\",{\"1\":{\"524\":1}}],[\"编译的时候\",{\"1\":{\"590\":1}}],[\"编译的\",{\"1\":{\"479\":2}}],[\"编译\",{\"1\":{\"136\":1,\"695\":1}}],[\"叶子节点只能出现在最下层和次下层\",{\"1\":{\"390\":1}}],[\"除非对象为单元素数值数组\",{\"1\":{\"1413\":1}}],[\"除非没有找到符合条件的字符串\",{\"1\":{\"1385\":1}}],[\"除非传入的就是一个可监听的对象\",{\"1\":{\"517\":1}}],[\"除换行符以外的任意单个字符\",{\"1\":{\"1217\":1}}],[\"除外\",{\"1\":{\"1209\":1}}],[\"除外的监听事件集合\",{\"1\":{\"515\":1}}],[\"除外的非\",{\"1\":{\"515\":1}}],[\"除或更复杂的综合运算\",{\"1\":{\"1014\":1}}],[\"除以不同的\",{\"1\":{\"966\":1}}],[\"除此之外\",{\"1\":{\"842\":1,\"1424\":1}}],[\"除最后一层无任何子节点外\",{\"1\":{\"390\":1}}],[\"除了加法运算符\",{\"1\":{\"1414\":1}}],[\"除了十六进制外\",{\"1\":{\"1381\":1}}],[\"除了可以直接使用字符本身外\",{\"1\":{\"1381\":1}}],[\"除了换行和行结束符\",{\"1\":{\"1381\":1}}],[\"除了空串\",{\"1\":{\"1251\":1}}],[\"除了\",{\"1\":{\"843\":1,\"1241\":1,\"1251\":1}}],[\"除了routerredux和引入方式\",{\"1\":{\"822\":1}}],[\"除了单个的原生节点\",{\"1\":{\"342\":1}}],[\"除了完整的\",{\"1\":{\"273\":1}}],[\"除了转发\",{\"1\":{\"238\":1}}],[\"除了注释之外的位置\",{\"1\":{\"228\":1}}],[\"满\",{\"1\":{\"1268\":2}}],[\"满足条件的指针\",{\"1\":{\"676\":1}}],[\"满足前\",{\"1\":{\"92\":1,\"162\":1}}],[\"满二叉树\",{\"1\":{\"390\":2}}],[\"二进制\",{\"1\":{\"1181\":1,\"1252\":1}}],[\"二倍图\",{\"0\":{\"951\":1}}],[\"二叉树\",{\"1\":{\"390\":1}}],[\"二叉树简介\",{\"0\":{\"390\":1}}],[\"二次触发时更新\",{\"1\":{\"366\":1}}],[\"具名插槽是在父组件中通过\",{\"1\":{\"520\":1}}],[\"具名插槽+作用域插槽\",{\"0\":{\"520\":1}}],[\"具名插槽\",{\"1\":{\"503\":1,\"504\":1,\"520\":1}}],[\"具备缓存功能\",{\"1\":{\"450\":1}}],[\"具有如下特点\",{\"1\":{\"919\":1}}],[\"具有useeffect副作用的根节点\",{\"1\":{\"374\":1,\"396\":1}}],[\"具有相同的用途\",{\"1\":{\"365\":1}}],[\"具体步骤\",{\"1\":{\"1429\":1}}],[\"具体说明如表所示\",{\"1\":{\"1386\":1}}],[\"具体类型不同\",{\"1\":{\"1078\":1}}],[\"具体效果刷新见\",{\"1\":{\"1035\":1}}],[\"具体流程是\",{\"1\":{\"742\":1}}],[\"具体名字\",{\"1\":{\"434\":1}}],[\"具体编码\",{\"1\":{\"433\":1}}],[\"具体来说\",{\"1\":{\"229\":1}}],[\"具体渲染交给外层组件控制\",{\"1\":{\"229\":1}}],[\"~childdeletion\",{\"1\":{\"360\":1,\"374\":1,\"396\":1}}],[\"~~~~~~~~~~~~~~~~~~~\",{\"1\":{\"360\":1,\"374\":1,\"384\":1,\"396\":1}}],[\"~placement\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"暂停\",{\"1\":{\"768\":1}}],[\"暂不写\",{\"1\":{\"628\":1}}],[\"暂无权限查看\",{\"1\":{\"436\":1,\"437\":1}}],[\"暂存下一个老fiber\",{\"1\":{\"357\":1,\"361\":1}}],[\"暂时不用表单域提交数据\",{\"1\":{\"1056\":1}}],[\"暂时还是以单元素节点协调\",{\"1\":{\"323\":1}}],[\"暂时只处理初次创建或挂载的新节点逻辑\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"多了没用\",{\"1\":{\"1376\":1}}],[\"多余部分会空出来\",{\"1\":{\"1352\":1}}],[\"多余的实参不会被赋值\",{\"1\":{\"1344\":1}}],[\"多余的dep实例\",{\"1\":{\"635\":1}}],[\"多库共存\",{\"0\":{\"1333\":1}}],[\"多数情况下\",{\"1\":{\"1057\":1}}],[\"多出的盒子会另起一行对齐\",{\"1\":{\"978\":1}}],[\"多倍图\",{\"0\":{\"953\":1}}],[\"多行文本的情况下\",{\"1\":{\"927\":1}}],[\"多行文本溢出显示省略号\",{\"0\":{\"927\":1},\"1\":{\"927\":1}}],[\"多重阴影\",{\"1\":{\"913\":1}}],[\"多重嵌套\",{\"0\":{\"634\":1}}],[\"多类名使用场景\",{\"1\":{\"862\":1}}],[\"多类名\",{\"1\":{\"862\":1}}],[\"多层嵌套组件传递数据时\",{\"1\":{\"515\":1}}],[\"多层\",{\"1\":{\"451\":1}}],[\"多个键值对之间使用\",{\"1\":{\"1341\":1}}],[\"多个处理程序\",{\"1\":{\"1328\":1}}],[\"多个块级盒子水平显示就用浮动布局\",{\"1\":{\"1002\":1}}],[\"多个块级元素横向排列找浮动\",{\"1\":{\"976\":1}}],[\"多个块元素纵向排列找标准流\",{\"1\":{\"976\":1}}],[\"多个类名中间必须用空格分开\",{\"1\":{\"862\":1}}],[\"多个单词组成\",{\"1\":{\"488\":1}}],[\"多个过滤器也可以串联\",{\"1\":{\"466\":1}}],[\"多个组件依赖于同一状态\",{\"1\":{\"406\":1}}],[\"多个拦截器设置\",{\"1\":{\"66\":1}}],[\"多任务队列\",{\"1\":{\"393\":1}}],[\"多节点diff复杂遍历打印结果\",{\"1\":{\"362\":1}}],[\"多节点diff第三轮循环\",{\"1\":{\"358\":1}}],[\"多节点diff第一轮循环\",{\"1\":{\"355\":1}}],[\"多节点\",{\"0\":{\"354\":1}}],[\"多节点下的单节点可复用时\",{\"1\":{\"353\":1}}],[\"多节点剩一个节点\",{\"0\":{\"353\":1}}],[\"策略\",{\"1\":{\"342\":1}}],[\"单层\",{\"0\":{\"1460\":1}}],[\"单个事件注册\",{\"1\":{\"1327\":1}}],[\"单\",{\"1\":{\"1268\":1}}],[\"单线程就意味着\",{\"1\":{\"1075\":1}}],[\"单线程的特性\",{\"1\":{\"621\":1}}],[\"单位毫秒\",{\"1\":{\"1063\":1}}],[\"单位的书写均可表示为\",{\"1\":{\"966\":1}}],[\"单标签\",{\"1\":{\"1036\":1,\"1057\":1}}],[\"单独制作移动端页面\",{\"0\":{\"957\":1},\"1\":{\"959\":1}}],[\"单独一个或几个标签设置\",{\"1\":{\"862\":1}}],[\"单行文本溢出显示省略号\",{\"0\":{\"926\":1}}],[\"单行文本超出显示省略号方法详见\",{\"1\":{\"900\":1}}],[\"单行文字垂直居中代码\",{\"0\":{\"880\":1}}],[\"单词太长\",{\"1\":{\"900\":1}}],[\"单词断行\",{\"0\":{\"900\":1}}],[\"单词换行\",{\"0\":{\"899\":1}}],[\"单词间距\",{\"0\":{\"895\":1}}],[\"单词拼写\",{\"1\":{\"488\":1}}],[\"单文件组件的书写格式详见脚手架章节\",{\"1\":{\"490\":1}}],[\"单文件组件的使用简单\",{\"1\":{\"490\":1}}],[\"单文件组件\",{\"0\":{\"490\":1}}],[\"单向\",{\"0\":{\"510\":1}}],[\"单向绑定\",{\"0\":{\"446\":1}}],[\"单向环形链表\",{\"1\":{\"313\":1}}],[\"单页\",{\"1\":{\"421\":1}}],[\"单节点diff流程图\",{\"1\":{\"342\":1}}],[\"单节点\",{\"0\":{\"342\":1},\"1\":{\"341\":1,\"343\":1}}],[\"急切的更新状态\",{\"1\":{\"338\":1,\"373\":1}}],[\"奇数索引\",{\"1\":{\"323\":1}}],[\"偶数索引\",{\"1\":{\"323\":1}}],[\"无动画则直接显示\",{\"1\":{\"1303\":1}}],[\"无设置\",{\"1\":{\"1225\":1}}],[\"无序列表会带有自己的样式属性\",{\"1\":{\"1052\":1}}],[\"无序列表的各个列表项之间没有顺序级别之分\",{\"1\":{\"1052\":1}}],[\"无序列表\",{\"0\":{\"1052\":1},\"1\":{\"1051\":1}}],[\"无全局变量概念\",{\"1\":{\"1012\":1}}],[\"无定位的意思\",{\"1\":{\"991\":1}}],[\"无穷大\",{\"1\":{\"932\":1}}],[\"无边框\",{\"1\":{\"909\":1}}],[\"无阻塞的执行\",{\"1\":{\"765\":1}}],[\"无刷新路由链接\",{\"1\":{\"713\":1}}],[\"无法删除继承的属性\",{\"1\":{\"1406\":1}}],[\"无法调用同一个timer变量\",{\"1\":{\"1073\":1}}],[\"无法显示溢出的部分\",{\"1\":{\"985\":1}}],[\"无法识别异步方法并有效执行\",{\"1\":{\"754\":1}}],[\"无法识别项目中的\",{\"1\":{\"578\":1}}],[\"无法被枚举的属性\",{\"1\":{\"600\":1}}],[\"无法将\",{\"1\":{\"487\":1}}],[\"无法通过\",{\"1\":{\"479\":1}}],[\"无需更新\",{\"1\":{\"636\":1}}],[\"无需\",{\"1\":{\"584\":1}}],[\"无需等待事件回调执行完毕\",{\"1\":{\"471\":1}}],[\"无需再次初始化\",{\"1\":{\"323\":1}}],[\"无key用index\",{\"1\":{\"361\":1}}],[\"无论是外部脚本文件\",{\"1\":{\"1419\":1}}],[\"无论组件嵌套结构有多么复杂\",{\"1\":{\"213\":1}}],[\"无论点击多少次\",{\"1\":{\"91\":1}}],[\"克隆\",{\"1\":{\"323\":1}}],[\"赋给\",{\"1\":{\"323\":1}}],[\"赋值运算符\",{\"0\":{\"1260\":1}}],[\"赋值给\",{\"1\":{\"365\":1}}],[\"赋值\",{\"1\":{\"313\":1,\"339\":1}}],[\"赋值mouse给cat作为props\",{\"1\":{\"229\":1}}],[\"赋值为\",{\"1\":{\"71\":1}}],[\"赋值为成功的\",{\"1\":{\"71\":1}}],[\"顺序依次为\",{\"1\":{\"887\":1}}],[\"顺序执行调用\",{\"1\":{\"323\":1}}],[\"顺序取出当前需要执行的\",{\"1\":{\"323\":1}}],[\"永远都是\",{\"1\":{\"1446\":1}}],[\"永远是当前的执行上下文\",{\"1\":{\"1422\":1}}],[\"永远取出优先级最高的任务\",{\"1\":{\"391\":1}}],[\"永远指向最后一个更新\",{\"1\":{\"323\":1}}],[\"永远不变\",{\"1\":{\"295\":1}}],[\"围绕存储于\",{\"1\":{\"313\":1}}],[\"小括号后的量词将会作用于整个表达式分组\",{\"1\":{\"1390\":1}}],[\"小区别\",{\"1\":{\"1353\":1}}],[\"小于\",{\"1\":{\"1261\":1}}],[\"小于这个值时\",{\"1\":{\"260\":1}}],[\"小驼峰命名法\",{\"1\":{\"1240\":1}}],[\"小总结\",{\"1\":{\"1047\":1}}],[\"小盒子\",{\"1\":{\"1038\":1}}],[\"小技巧\",{\"0\":{\"880\":1},\"1\":{\"994\":1}}],[\"小强\",{\"1\":{\"640\":1,\"641\":1,\"653\":1}}],[\"小红\",{\"1\":{\"640\":1,\"641\":1,\"653\":1,\"1224\":1}}],[\"小明\",{\"1\":{\"640\":1,\"641\":1,\"653\":1}}],[\"小程序同样也是\",{\"1\":{\"596\":1}}],[\"小结\",{\"0\":{\"313\":1,\"323\":1,\"330\":1,\"1451\":1},\"1\":{\"788\":1}}],[\"便会执行了更新\",{\"1\":{\"505\":1}}],[\"便往数组里面\",{\"1\":{\"505\":1}}],[\"便于盒子模型的理解\",{\"1\":{\"1020\":1}}],[\"便于捕获异常\",{\"1\":{\"779\":1}}],[\"便于实现事件监测与节流\",{\"1\":{\"758\":1}}],[\"便于测试\",{\"1\":{\"758\":1}}],[\"便于dom操作\",{\"1\":{\"683\":1,\"690\":1}}],[\"便于diff优化\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"便于查看\",{\"1\":{\"360\":1}}],[\"便可以在\",{\"1\":{\"297\":1}}],[\"加号\",{\"0\":{\"1255\":1}}],[\"加载\",{\"1\":{\"1067\":3}}],[\"加载事件\",{\"1\":{\"1062\":1}}],[\"加载中\",{\"1\":{\"206\":1}}],[\"加密提交\",{\"1\":{\"1056\":1}}],[\"加粗\",{\"1\":{\"1037\":1}}],[\"加了标题标签的文字加粗\",{\"1\":{\"1035\":1}}],[\"加了call和不加效果是一样的\",{\"1\":{\"764\":1}}],[\"加引号\",{\"1\":{\"882\":1}}],[\"加法\",{\"1\":{\"749\":1}}],[\"加一个\",{\"1\":{\"590\":1}}],[\"加上\",{\"1\":{\"583\":1,\"937\":1}}],[\"加快编译\",{\"1\":{\"474\":1}}],[\"加入通用\",{\"1\":{\"920\":1}}],[\"加入装饰器\",{\"0\":{\"800\":1}}],[\"加入路由守卫函数\",{\"1\":{\"739\":1}}],[\"加入到最终输出的\",{\"1\":{\"649\":1}}],[\"加入一下代码\",{\"1\":{\"518\":1}}],[\"加入\",{\"1\":{\"396\":1}}],[\"加入回调数组\",{\"1\":{\"296\":1}}],[\"累加回调也能通过上面透传的\",{\"1\":{\"298\":1}}],[\"累加回调函数阶段\",{\"1\":{\"296\":1}}],[\"累加单个阶段的监听\",{\"1\":{\"292\":1}}],[\"容纳文本或其他行内元素\",{\"1\":{\"878\":1}}],[\"容易造成变量短期内无法销毁\",{\"1\":{\"1456\":1}}],[\"容易导致\",{\"1\":{\"474\":1}}],[\"容易忽略的点\",{\"0\":{\"296\":1}}],[\"容器级可以包含任何标签\",{\"1\":{\"878\":1}}],[\"容器的\",{\"1\":{\"878\":1}}],[\"容器组件\",{\"1\":{\"752\":1}}],[\"容器组件与\",{\"0\":{\"752\":1}}],[\"容器与\",{\"1\":{\"443\":1}}],[\"容器里的代码被称为\",{\"1\":{\"443\":1}}],[\"容器div\",{\"1\":{\"288\":1}}],[\"容器节点\",{\"1\":{\"286\":1}}],[\"容器\",{\"1\":{\"154\":1}}],[\"检索一个字符串是否含有指定内容\",{\"1\":{\"1375\":1}}],[\"检索一个数组是否含有指定元素\",{\"1\":{\"1365\":1}}],[\"检测自己的自有属性\",{\"1\":{\"1402\":1}}],[\"检测数组中是否有满足条件的元素\",{\"1\":{\"1199\":1}}],[\"检测截取片段内容不为空\",{\"1\":{\"661\":1}}],[\"检测到文字\",{\"1\":{\"661\":1}}],[\"检测到结束标记\",{\"1\":{\"661\":1}}],[\"检测到开始标记\",{\"1\":{\"661\":1,\"662\":1}}],[\"检测工具中可以以此更名\",{\"1\":{\"216\":1}}],[\"检查当前上下文的变量声明\",{\"1\":{\"1423\":1}}],[\"检查当前上下文的函数声明\",{\"1\":{\"1423\":1}}],[\"检查当前上下文的参数\",{\"1\":{\"1423\":1}}],[\"检查当前的元素是否含有某个特定类\",{\"1\":{\"1290\":1}}],[\"检查的是键名\",{\"1\":{\"1401\":1}}],[\"检查返回\",{\"1\":{\"1244\":1}}],[\"检查用户输入内容是否符合一定规则\",{\"1\":{\"1233\":1}}],[\"检查\",{\"1\":{\"940\":1,\"1243\":1,\"1423\":2}}],[\"检查c\",{\"1\":{\"674\":1,\"686\":1}}],[\"检查参数c的类型\",{\"1\":{\"674\":1,\"686\":1}}],[\"检查参数个数\",{\"1\":{\"674\":1,\"686\":1}}],[\"检查一个对象是否是由\",{\"1\":{\"558\":3}}],[\"检查一个值是否为一个\",{\"1\":{\"558\":1}}],[\"检查是否捕获阶段\",{\"1\":{\"292\":1}}],[\"合理地使用递归方法\",{\"1\":{\"658\":1}}],[\"合成事件名的回调函数\",{\"1\":{\"296\":1}}],[\"合成事件的实例currenttarget是在不断变化的\",{\"1\":{\"295\":1}}],[\"合成事件的基类\",{\"1\":{\"293\":1}}],[\"合成事件的构造函数\",{\"1\":{\"292\":1}}],[\"合成事件实例\",{\"1\":{\"292\":1}}],[\"合并单元格的步骤\",{\"1\":{\"1050\":1}}],[\"合并单元格的个数\",{\"1\":{\"1050\":2}}],[\"合并单元格方式\",{\"1\":{\"1050\":1}}],[\"合并单元格\",{\"0\":{\"1050\":1}}],[\"合并空白符序列\",{\"1\":{\"898\":1}}],[\"合并多个model\",{\"1\":{\"823\":1}}],[\"合并所有需要监听的saga\",{\"1\":{\"777\":1}}],[\"合并所有的reduces\",{\"1\":{\"776\":1}}],[\"合并\",{\"1\":{\"750\":1,\"753\":1,\"1332\":1}}],[\"合并一切其他头信息的配置项\",{\"1\":{\"68\":1}}],[\"合并默认配置与\",{\"1\":{\"68\":1}}],[\"派发新任务\",{\"1\":{\"759\":1}}],[\"派发动作后\",{\"1\":{\"338\":1,\"373\":1}}],[\"派发函数组成的数组\",{\"1\":{\"323\":1}}],[\"派发函数的\",{\"1\":{\"313\":1}}],[\"派发函数\",{\"1\":{\"306\":1}}],[\"派发队列\",{\"1\":{\"292\":1}}],[\"派发事件函数中获取到\",{\"1\":{\"297\":1}}],[\"派发事件函数还是在这里进行声明\",{\"1\":{\"290\":1}}],[\"派发事件的数组\",{\"1\":{\"290\":1,\"295\":1}}],[\"派发离散事件的监听函数\",{\"1\":{\"288\":1}}],[\"派发更新计划\",{\"1\":{\"272\":1}}],[\"存放内部tokens\",{\"1\":{\"656\":1}}],[\"存放将要删除的子fiber\",{\"1\":{\"346\":1}}],[\"存储机制\",{\"0\":{\"1396\":1}}],[\"存储\",{\"1\":{\"635\":1}}],[\"存储订阅者数组\",{\"1\":{\"609\":1,\"615\":1,\"635\":1}}],[\"存储原生事件名和react事件名的映射关系\",{\"1\":{\"281\":1}}],[\"存在对响应式数据的监听需求时\",{\"1\":{\"621\":1}}],[\"存在问题\",{\"1\":{\"548\":1}}],[\"存在\",{\"1\":{\"505\":2}}],[\"存在的三种情况来分别讲解单节点\",{\"1\":{\"342\":1}}],[\"存在的问题\",{\"0\":{\"545\":1},\"1\":{\"89\":1}}],[\"存在单节点的情况\",{\"1\":{\"342\":1}}],[\"存在老\",{\"1\":{\"272\":1}}],[\"存在两种情况\",{\"1\":{\"272\":1}}],[\"存在版本兼容性和一些稳定性问题\",{\"1\":{\"262\":1}}],[\"存在一个很大差别的地方\",{\"1\":{\"257\":1}}],[\"存在更新\",{\"1\":{\"92\":1}}],[\"存在跨域问题\",{\"1\":{\"5\":1}}],[\"到上面的三个阶段\",{\"1\":{\"1419\":1}}],[\"到大写\",{\"1\":{\"1382\":1}}],[\"到小写\",{\"1\":{\"1382\":2}}],[\"到原字符串结尾的字符串\",{\"1\":{\"1376\":1}}],[\"到页面加载的全过程\",{\"0\":{\"1066\":1}}],[\"到最底层的\",{\"1\":{\"684\":1}}],[\"到最后的全部字符\",{\"1\":{\"646\":1,\"655\":1}}],[\"到旧节点的子节点末尾\",{\"1\":{\"676\":1}}],[\"到真正需要用到watcher方法的时候调用watcher实例自身的方法\",{\"1\":{\"635\":1}}],[\"到真正需要用到dep方法的时候调用dep实例自身的方法\",{\"1\":{\"635\":1}}],[\"到真实\",{\"1\":{\"274\":1}}],[\"到\",{\"1\":{\"274\":1,\"781\":1,\"1376\":1}}],[\"到此为止\",{\"1\":{\"270\":1}}],[\"旨在向上收集子孙节点的更新副作用\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"旨在将子节点的更新副作用不断向上传递汇聚\",{\"1\":{\"273\":1}}],[\"回到上一个方法的执行环境\",{\"1\":{\"1423\":1}}],[\"回到父节点\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"回结果后\",{\"1\":{\"1423\":1}}],[\"回收执行\",{\"1\":{\"1426\":1}}],[\"回收阶段\",{\"1\":{\"1426\":1}}],[\"回收\",{\"1\":{\"842\":1}}],[\"回来后才能继续执行\",{\"1\":{\"765\":1}}],[\"回填dom\",{\"1\":{\"695\":1}}],[\"回填\",{\"1\":{\"695\":1,\"701\":2}}],[\"回推\",{\"1\":{\"663\":1}}],[\"回车\",{\"1\":{\"472\":1}}],[\"回调如果是对象\",{\"1\":{\"625\":1}}],[\"回调名\",{\"1\":{\"410\":1}}],[\"回调任务函数\",{\"1\":{\"395\":1}}],[\"回调方法\",{\"1\":{\"388\":1}}],[\"回调函数中需要定义两个形参\",{\"1\":{\"1364\":1}}],[\"回调函数返回结果是\",{\"1\":{\"1177\":1}}],[\"回调函数返回结果是非\",{\"1\":{\"1177\":1}}],[\"回调函数的函数体\",{\"1\":{\"541\":1}}],[\"回调函数的返回值\",{\"1\":{\"541\":1}}],[\"回调函数的时候\",{\"1\":{\"299\":1}}],[\"回调函数\",{\"1\":{\"475\":1,\"625\":1,\"626\":2,\"1063\":1,\"1072\":1,\"1076\":1,\"1130\":2,\"1131\":2,\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1,\"1328\":1}}],[\"回调函数自动调用\",{\"1\":{\"451\":1}}],[\"回调函数仅在第一次render执行\",{\"1\":{\"185\":1}}],[\"回调数组中\",{\"1\":{\"505\":1}}],[\"回调数组\",{\"1\":{\"287\":1,\"505\":4}}],[\"回调只依赖于\",{\"1\":{\"197\":1}}],[\"回调形式的\",{\"1\":{\"154\":1}}],[\"回调\",{\"1\":{\"68\":1,\"156\":1,\"242\":1,\"475\":1,\"626\":1,\"628\":1}}],[\"归阶段\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"|1\",{\"1\":{\"1391\":1}}],[\"|\",{\"1\":{\"323\":1,\"345\":1,\"373\":2,\"375\":2,\"382\":1,\"385\":4,\"466\":1,\"586\":2,\"625\":2,\"633\":1,\"811\":18,\"840\":3,\"903\":1,\"904\":3,\"906\":1,\"909\":10,\"924\":5,\"1116\":12,\"1383\":3,\"1392\":1}}],[\"|=\",{\"1\":{\"272\":2,\"273\":2,\"286\":1,\"319\":3,\"320\":3,\"325\":3,\"348\":3,\"352\":3,\"357\":3,\"361\":4,\"373\":2}}],[\"||连接\",{\"1\":{\"1273\":1}}],[\"||\",{\"1\":{\"240\":1,\"272\":2,\"273\":3,\"274\":5,\"288\":2,\"289\":1,\"317\":1,\"319\":1,\"320\":2,\"322\":10,\"325\":2,\"326\":4,\"327\":1,\"328\":10,\"348\":1,\"349\":4,\"352\":1,\"357\":1,\"360\":1,\"361\":5,\"374\":2,\"375\":4,\"384\":2,\"385\":4,\"396\":2,\"602\":2,\"604\":1,\"608\":1,\"609\":2,\"610\":1,\"613\":1,\"616\":1,\"625\":1,\"627\":1,\"631\":1,\"633\":1,\"662\":1,\"674\":1,\"675\":1,\"683\":4,\"686\":1,\"689\":1,\"691\":4,\"694\":2,\"737\":1,\"738\":1,\"829\":5,\"909\":2,\"1124\":6,\"1228\":1,\"1259\":1,\"1458\":1}}],[\"正向声明\",{\"0\":{\"1388\":1}}],[\"正在遍历的数组\",{\"1\":{\"1276\":1}}],[\"正在获取结果中\",{\"1\":{\"829\":1}}],[\"正号\",{\"1\":{\"1257\":1}}],[\"正如它的名称\",{\"1\":{\"1240\":1}}],[\"正则表达式包括两个分组\",{\"1\":{\"1391\":1}}],[\"正则表达式执行匹配检测后\",{\"1\":{\"1391\":1}}],[\"正则表达式支持的元字符如表所示\",{\"1\":{\"1381\":1}}],[\"正则表达式的语法体现在字符模式上\",{\"1\":{\"1380\":1}}],[\"正则表达式是一种通用的工具\",{\"1\":{\"1380\":1}}],[\"正则表达式\",{\"0\":{\"1380\":1},\"1\":{\"1379\":1}}],[\"正则表达式就行不通了\",{\"1\":{\"644\":1}}],[\"正则反向断言\",{\"0\":{\"1216\":1}}],[\"正则分组\",{\"1\":{\"1215\":1}}],[\"正则未分组\",{\"1\":{\"1215\":1}}],[\"正则命名分组捕获\",{\"0\":{\"1215\":1}}],[\"正是由于它不与任何其它值相等\",{\"1\":{\"1170\":1}}],[\"正整数\",{\"1\":{\"1057\":1}}],[\"正文文本\",{\"1\":{\"1020\":1}}],[\"正文内容推入栈顶对象\",{\"1\":{\"663\":1}}],[\"正文内容\",{\"1\":{\"663\":1}}],[\"正方形设置为一个圆\",{\"1\":{\"911\":1}}],[\"正确写法\",{\"1\":{\"771\":1}}],[\"正数为前进负数为后退\",{\"1\":{\"432\":1}}],[\"正式进入提交阶段\",{\"1\":{\"274\":1}}],[\"正式结束\",{\"1\":{\"272\":1}}],[\"正常触发事件\",{\"1\":{\"472\":1}}],[\"正常来说\",{\"1\":{\"270\":1}}],[\"正常帧任务完成后没超过\",{\"1\":{\"262\":1}}],[\"结尾\",{\"1\":{\"1238\":1}}],[\"结尾的分号\",{\"1\":{\"1011\":1}}],[\"结果数组\",{\"1\":{\"662\":1}}],[\"结合使用\",{\"1\":{\"927\":2}}],[\"结合上面的路由配置\",{\"1\":{\"739\":1}}],[\"结合栈结构的原理\",{\"1\":{\"663\":1}}],[\"结合进来\",{\"1\":{\"649\":1}}],[\"结合数据解析成\",{\"1\":{\"649\":1}}],[\"结合数据\",{\"1\":{\"645\":1}}],[\"结合\",{\"1\":{\"628\":1,\"636\":1,\"698\":1}}],[\"结束点为从右往左数第1个\",{\"1\":{\"1376\":1}}],[\"结束后\",{\"1\":{\"682\":1}}],[\"结束标签等正则判断\",{\"1\":{\"663\":1}}],[\"结束标记前的文字\",{\"1\":{\"661\":1}}],[\"结束标记\",{\"1\":{\"661\":1}}],[\"结束符之前\",{\"1\":{\"648\":1}}],[\"结束本轮循环\",{\"1\":{\"354\":1}}],[\"结束\",{\"1\":{\"323\":1,\"354\":3,\"1040\":1}}],[\"结束返回\",{\"1\":{\"273\":1}}],[\"结束工作单元调用\",{\"1\":{\"272\":1}}],[\"结构渲染完毕即可执行内部代码\",{\"1\":{\"1282\":1}}],[\"结构稍微复杂\",{\"1\":{\"1095\":1}}],[\"结构相关\",{\"0\":{\"1080\":1}}],[\"结构=身体\",{\"1\":{\"1028\":1}}],[\"结构写到\",{\"1\":{\"1028\":1}}],[\"结构永远最重要\",{\"1\":{\"1001\":1}}],[\"结构更简单\",{\"1\":{\"985\":1}}],[\"结构化较差\",{\"1\":{\"985\":1}}],[\"结构化共享并存储查询结果\",{\"1\":{\"825\":1}}],[\"结构和\",{\"1\":{\"940\":1}}],[\"结构语法\",{\"0\":{\"937\":1}}],[\"结构伪类\",{\"1\":{\"873\":1}}],[\"结构样式混写\",{\"1\":{\"868\":1}}],[\"结构需要用\",{\"1\":{\"862\":1}}],[\"结构处理后\",{\"1\":{\"840\":1}}],[\"结构为原型开发的状态管理库\",{\"1\":{\"817\":1}}],[\"结构移动到指定位置的技术\",{\"1\":{\"567\":1}}],[\"结构比较深\",{\"1\":{\"554\":1}}],[\"结构逻辑的关键点在于虚拟\",{\"1\":{\"268\":1}}],[\"结构\",{\"1\":{\"7\":1,\"8\":1,\"457\":1,\"474\":1,\"479\":1,\"502\":1,\"604\":1,\"666\":1,\"820\":1,\"843\":1,\"863\":1,\"1001\":1,\"1028\":2,\"1275\":1}}],[\"直角三角\",{\"0\":{\"923\":1}}],[\"直到找到\",{\"1\":{\"1438\":1}}],[\"直到执行栈中的代码全部执行完毕\",{\"1\":{\"1423\":1}}],[\"直到条件不成立\",{\"1\":{\"1270\":1}}],[\"直到填充长度为\",{\"1\":{\"1202\":1}}],[\"直到指向最后一个成员\",{\"1\":{\"1173\":1}}],[\"直到根为止\",{\"1\":{\"1012\":1}}],[\"直到根fiber时退出循环\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"直到左边缘或右边缘触及包含块或另一个浮动框的边缘\",{\"1\":{\"977\":1}}],[\"直到遇到<br>标签为止\",{\"1\":{\"898\":1}}],[\"直到遇见指定内容结束\",{\"1\":{\"646\":1,\"655\":1}}],[\"直到下次value改变之前\",{\"1\":{\"632\":1,\"635\":1}}],[\"直到key的value值为基本类型为止\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"直到不存在更深层次的\",{\"1\":{\"272\":1}}],[\"直接在对象中设置效果和原理相似\",{\"1\":{\"1407\":1}}],[\"直接在对象内使用\",{\"1\":{\"1407\":1}}],[\"直接在<ol><\",{\"1\":{\"1053\":1}}],[\"直接在<ul><\",{\"1\":{\"1052\":1}}],[\"直接将内容写入页面的内容流\",{\"1\":{\"1095\":1}}],[\"直接将函数绑定给getters\",{\"1\":{\"626\":1}}],[\"直接使用\",{\"1\":{\"1085\":1}}],[\"直接使用之前的真实\",{\"1\":{\"161\":1,\"461\":1}}],[\"直接打印\",{\"1\":{\"1065\":1}}],[\"直接到达目标位置\",{\"1\":{\"1045\":1}}],[\"直接链接内部页面名称\",{\"1\":{\"1043\":1}}],[\"直接写入变量和函数\",{\"1\":{\"1162\":1}}],[\"直接写入插值语句<div>\",{\"1\":{\"536\":1}}],[\"直接写\",{\"1\":{\"937\":1}}],[\"直接输入标签名\",{\"1\":{\"937\":1}}],[\"直接与服务端交互\",{\"1\":{\"847\":1}}],[\"直接可以打印出saga\",{\"1\":{\"765\":1}}],[\"直接让新text替换dom中的内容\",{\"1\":{\"683\":1,\"690\":1}}],[\"直接给出结论\",{\"1\":{\"676\":1}}],[\"直接调用dom方法替换\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"直接调用子组件实例的方法\",{\"1\":{\"107\":1}}],[\"直接返回\",{\"1\":{\"604\":2,\"650\":1,\"657\":1}}],[\"直接通过下标修改数组\",{\"1\":{\"548\":1}}],[\"直接\",{\"1\":{\"418\":2,\"945\":1}}],[\"直接读取使用即可\",{\"1\":{\"450\":1}}],[\"直接读取\",{\"1\":{\"418\":2}}],[\"直接对\",{\"1\":{\"411\":1}}],[\"直接创建真实的文本节点\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"直接获取头部节点和尾部节点\",{\"1\":{\"271\":1}}],[\"直接指定新的状态值\",{\"1\":{\"182\":1}}],[\"接受当前状态对象和\",{\"1\":{\"840\":1}}],[\"接受一个内部值并返回一个响应式且可变的\",{\"1\":{\"586\":1}}],[\"接触\",{\"1\":{\"593\":1}}],[\"接口的数据\",{\"1\":{\"1172\":1}}],[\"接口的作用类似于抽象类\",{\"1\":{\"580\":1}}],[\"接口泛型等\",{\"1\":{\"580\":1}}],[\"接口可以去限制一个对象的接口\",{\"1\":{\"580\":1}}],[\"接口主要负责定义一个类的结构\",{\"1\":{\"580\":1}}],[\"接口\",{\"0\":{\"580\":1},\"1\":{\"580\":2,\"1172\":1,\"1275\":1}}],[\"接下来不断调用\",{\"1\":{\"1173\":1}}],[\"接下来我们需要将\",{\"1\":{\"649\":1}}],[\"接下来监听器创建函数\",{\"1\":{\"625\":1}}],[\"接下来\",{\"1\":{\"608\":1,\"631\":1,\"647\":1}}],[\"接下来讨论情况最复杂的第三轮遍历\",{\"1\":{\"358\":1}}],[\"接下来需要根据捕获顺序和冒泡顺序处理派发事件\",{\"1\":{\"294\":1}}],[\"接下来是执行更新时调用\",{\"1\":{\"272\":1}}],[\"接收函数的实参\",{\"1\":{\"1429\":1}}],[\"接收我们缓存的数据\",{\"1\":{\"1027\":1}}],[\"接收字符串\",{\"1\":{\"847\":1}}],[\"接收两个参数\",{\"1\":{\"748\":1,\"749\":1}}],[\"接收它\",{\"1\":{\"661\":1}}],[\"接收到\",{\"1\":{\"847\":1}}],[\"接收到新的任务\",{\"1\":{\"759\":1}}],[\"接收到数据发生变化的消息时\",{\"1\":{\"607\":1}}],[\"接收到的\",{\"1\":{\"498\":1}}],[\"接收的方法是\",{\"1\":{\"588\":1}}],[\"接收的数据可以是基本类型\",{\"1\":{\"536\":1}}],[\"接收的参数是一个函数\",{\"1\":{\"159\":1}}],[\"接收来数据后\",{\"1\":{\"517\":1}}],[\"接收\",{\"1\":{\"510\":1,\"720\":1,\"1218\":1}}],[\"接收方式也可以是数组\",{\"1\":{\"510\":1}}],[\"接收一个唯一键和一个返回\",{\"1\":{\"828\":1}}],[\"接收一个对象\",{\"1\":{\"537\":1}}],[\"接收一个包含命令式\",{\"1\":{\"365\":1}}],[\"接收一个\",{\"1\":{\"192\":1,\"213\":1}}],[\"接收原本的状态值\",{\"1\":{\"182\":1}}],[\"接收事件\",{\"1\":{\"114\":1}}],[\"接收要包装的组件\",{\"1\":{\"86\":1}}],[\"含多种类型\",{\"1\":{\"272\":1}}],[\"拿到最后一个等待生效的更新\",{\"1\":{\"272\":1}}],[\"拿老的子fiber链表和新的子虚拟dom进行最小量更新\",{\"1\":{\"272\":1,\"318\":1}}],[\"清空匹配的元素内容\",{\"1\":{\"1322\":1}}],[\"清除右侧浮动\",{\"1\":{\"984\":1}}],[\"清除左侧浮动\",{\"1\":{\"984\":1}}],[\"清除浮动四方法\",{\"0\":{\"985\":1}}],[\"清除浮动的策略是\",{\"1\":{\"984\":1}}],[\"清除浮动的本质是清除浮动元素造成的影响\",{\"1\":{\"983\":1}}],[\"清除浮动之后\",{\"1\":{\"983\":1}}],[\"清除浮动\",{\"0\":{\"981\":1}}],[\"清除内外边距\",{\"0\":{\"972\":1}}],[\"清除缓存信息\",{\"1\":{\"827\":1}}],[\"清除定时器\",{\"1\":{\"482\":1}}],[\"清除等待生效的更新\",{\"1\":{\"272\":1}}],[\"清理定时器\",{\"1\":{\"173\":1}}],[\"遍历内容\",{\"1\":{\"1319\":1}}],[\"遍历内部\",{\"1\":{\"1288\":1}}],[\"遍历元素\",{\"0\":{\"1319\":1}}],[\"遍历无法通过\",{\"1\":{\"1276\":1}}],[\"遍历时不仅能读取对象自身上面的成员属性\",{\"1\":{\"1274\":1}}],[\"遍历流中每个项目执行函数\",{\"1\":{\"788\":1}}],[\"遍历其内部的侦听器\",{\"1\":{\"700\":1}}],[\"遍历上述配置项内部属性值\",{\"1\":{\"700\":1}}],[\"遍历编译子节点\",{\"1\":{\"695\":1}}],[\"遍历新vnode的子节点\",{\"1\":{\"683\":1,\"690\":1}}],[\"遍历新虚拟dom的索引\",{\"1\":{\"357\":1,\"361\":1}}],[\"遍历旧节点中的\",{\"1\":{\"681\":1}}],[\"遍历旧节点\",{\"0\":{\"681\":1}}],[\"遍历生成\",{\"0\":{\"675\":1}}],[\"遍历attrsstring\",{\"1\":{\"662\":1}}],[\"遍历allnativeevents\",{\"1\":{\"283\":1}}],[\"遍历的数组\",{\"1\":{\"657\":1}}],[\"遍历的最后\",{\"1\":{\"636\":1}}],[\"遍历到的每一个\",{\"1\":{\"648\":1}}],[\"遍历寻找开始标记\",{\"1\":{\"647\":1,\"654\":1}}],[\"遍历过程中会执行以下步骤\",{\"1\":{\"628\":1,\"636\":1}}],[\"遍历过程中对\",{\"1\":{\"358\":1}}],[\"遍历当前\",{\"1\":{\"621\":1}}],[\"遍历当前fiber的所有子节点\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"遍历执行watcher实例的update方法更新value\",{\"1\":{\"609\":1,\"615\":1,\"635\":1}}],[\"遍历obj\",{\"1\":{\"604\":1}}],[\"遍历obj的属性\",{\"1\":{\"604\":1}}],[\"遍历\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1,\"628\":1,\"631\":1,\"636\":1,\"1179\":1}}],[\"遍历value的key\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"遍历实例的全部key值并开启响应式数据劫持\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"遍历回调数组\",{\"1\":{\"505\":1}}],[\"遍历对象\",{\"1\":{\"460\":1}}],[\"遍历数组\",{\"1\":{\"460\":1,\"474\":1}}],[\"遍历剩下所有的\",{\"1\":{\"354\":1}}],[\"遍历完了\",{\"1\":{\"354\":1}}],[\"遍历完而\",{\"1\":{\"354\":1}}],[\"遍历完\",{\"1\":{\"354\":1}}],[\"遍历顺序有三\",{\"1\":{\"354\":1}}],[\"遍历子节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"遍历fiber树\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"遍历虚拟dom根节点内的首层newchildren类型并生成不同fiber\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1}}],[\"遍历老的单向链表更新拼接到新更新队列中\",{\"1\":{\"272\":1}}],[\"遍历请求拦截器与响应拦截器\",{\"1\":{\"68\":1}}],[\"考虑到下一次更新时原来的更新队列中任务可能还没执行完\",{\"1\":{\"272\":1}}],[\"考虑下用一个组件把它们包裹起来从而变成兄弟组件是否合适\",{\"1\":{\"110\":1}}],[\"目的是在页面加载完毕之后再执行\",{\"1\":{\"1119\":1}}],[\"目的是确保父对象内部的子对象可以正确执行依赖收集\",{\"1\":{\"610\":1,\"613\":1}}],[\"目录查找\",{\"0\":{\"1375\":1}}],[\"目录下的绝对位置\",{\"1\":{\"1045\":1}}],[\"目录文件夹第一层\",{\"1\":{\"1045\":1}}],[\"目录文件夹和根目录\",{\"1\":{\"1045\":1}}],[\"目录中新建\",{\"1\":{\"581\":1}}],[\"目标属性是否可以被删除或是否可以再次修改特性\",{\"1\":{\"1407\":1}}],[\"目标属性是否可以被枚举\",{\"1\":{\"1407\":1}}],[\"目标阶段\",{\"0\":{\"1134\":1}}],[\"目标单元格\",{\"1\":{\"1050\":1}}],[\"目标窗口的弹出方式\",{\"1\":{\"1042\":1}}],[\"目标\",{\"1\":{\"297\":1,\"1043\":1}}],[\"目标fiber\",{\"1\":{\"292\":1}}],[\"目标容器\",{\"1\":{\"288\":1,\"292\":1,\"297\":1}}],[\"目标dom节点\",{\"1\":{\"286\":1}}],[\"目标是根据虚拟dom构建新的fiber子链表\",{\"1\":{\"272\":1,\"318\":1}}],[\"目前受\",{\"1\":{\"1005\":1}}],[\"目前针对很多手机\",{\"1\":{\"964\":1}}],[\"目前最推荐使用的库\",{\"1\":{\"817\":1}}],[\"目前暂时只判断虚拟\",{\"1\":{\"272\":1}}],[\"目前的做法是使用链表\",{\"1\":{\"265\":1}}],[\"目前大多数设备的屏幕刷新率为\",{\"1\":{\"260\":1}}],[\"目前学习路线推荐b站大厂程序猿up\",{\"1\":{\"0\":1}}],[\"协调\",{\"1\":{\"323\":1}}],[\"协调子节点的函数\",{\"1\":{\"272\":1}}],[\"协调子节点\",{\"1\":{\"272\":1,\"318\":1}}],[\"协议版本\",{\"1\":{\"7\":1}}],[\"协议详细规定了浏览器和万维网服务器之间互相通信的规则\",{\"1\":{\"6\":1}}],[\"协议\",{\"0\":{\"6\":1},\"1\":{\"6\":1,\"24\":1}}],[\"闲时加载\",{\"1\":{\"272\":1}}],[\"双标签关系可以分为两类\",{\"1\":{\"1030\":1}}],[\"双线边框\",{\"1\":{\"909\":1}}],[\"双引号中间\",{\"1\":{\"867\":1}}],[\"双端比较\",{\"1\":{\"676\":1,\"702\":1}}],[\"双重tokens\",{\"1\":{\"644\":1}}],[\"双向\",{\"0\":{\"511\":1}}],[\"双向数据绑定从\",{\"1\":{\"524\":1}}],[\"双向数据绑定\",{\"1\":{\"474\":1}}],[\"双向绑定\",{\"0\":{\"447\":1,\"588\":1}}],[\"双向指针\",{\"1\":{\"272\":1}}],[\"双大括号表达式\",{\"1\":{\"442\":1}}],[\"双缓冲技术\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"老版本浏览器\",{\"1\":{\"1153\":1}}],[\"老版本浏览器名称\",{\"1\":{\"1145\":1}}],[\"老版本火狐使用\",{\"1\":{\"1145\":1}}],[\"老的根fiber\",{\"1\":{\"385\":1}}],[\"老的父fiber\",{\"1\":{\"272\":1,\"318\":1}}],[\"老\",{\"1\":{\"323\":1}}],[\"老fiber已经没有了\",{\"1\":{\"357\":1,\"361\":1}}],[\"老fiber更新\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"老fiber\",{\"1\":{\"272\":3,\"273\":1,\"306\":1,\"315\":1,\"318\":3,\"320\":1,\"325\":1,\"338\":1,\"373\":1}}],[\"老pending链表尾部next指向新链表update的头部\",{\"1\":{\"271\":1,\"272\":1}}],[\"阶段性源码参考如下\",{\"1\":{\"604\":1}}],[\"阶段执行完毕后才执行的副作用\",{\"1\":{\"376\":1}}],[\"阶段的最终产物了\",{\"1\":{\"323\":1}}],[\"阶段\",{\"1\":{\"283\":1,\"288\":1,\"323\":2}}],[\"阶段已结束\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"阶段会根据组件树的结构来构建\",{\"1\":{\"270\":1}}],[\"递\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"递归方法\",{\"1\":{\"1458\":1}}],[\"递归方法非常复杂\",{\"1\":{\"676\":1}}],[\"递归创建dom对象\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"递归创建节点\",{\"1\":{\"675\":1,\"689\":1}}],[\"递归\",{\"0\":{\"675\":1,\"1458\":1},\"1\":{\"695\":1}}],[\"递归时需要将\",{\"1\":{\"657\":1}}],[\"递归触发子属性的get进行依赖收集\",{\"1\":{\"627\":1}}],[\"递归触发每一项的get进行依赖收集\",{\"1\":{\"627\":1}}],[\"递归并且对对象和数组都生效的完整数据劫持原理已经实现\",{\"1\":{\"604\":1}}],[\"递归侦测对象属性\",{\"0\":{\"602\":1}}],[\"递归遍历处理变更的副作用\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"递归处理子节点\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"递归的方法\",{\"1\":{\"676\":1}}],[\"递归的跳出条件\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"递归的归阶段\",{\"1\":{\"273\":1}}],[\"递归的递阶段\",{\"1\":{\"272\":1}}],[\"递归构建fiber树\",{\"1\":{\"267\":1}}],[\"递归构建\",{\"0\":{\"267\":1}}],[\"初步实现如下\",{\"1\":{\"607\":1}}],[\"初次渲染快\",{\"1\":{\"524\":1}}],[\"初次渲染的时候\",{\"1\":{\"272\":1,\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"初次动态渲染后视为静态内容\",{\"1\":{\"474\":1}}],[\"初次读取时会执行一次\",{\"1\":{\"450\":1}}],[\"初次挂载\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"初始加载时在自己的默认位置\",{\"1\":{\"995\":1}}],[\"初始缩放比\",{\"1\":{\"950\":1}}],[\"初始\",{\"1\":{\"811\":1,\"1225\":1}}],[\"初始值\",{\"1\":{\"156\":1}}],[\"初始化变量\",{\"1\":{\"1426\":1}}],[\"初始化函数声明\",{\"1\":{\"1426\":1}}],[\"初始化函数参数\",{\"1\":{\"1426\":1}}],[\"初始化依赖收集系统\",{\"1\":{\"698\":1}}],[\"初始化三大收集器挂载实例对象\",{\"1\":{\"694\":1}}],[\"初始化并首次调用\",{\"1\":{\"635\":1}}],[\"初始化并为当前的\",{\"1\":{\"313\":1}}],[\"初始化一个\",{\"1\":{\"631\":1}}],[\"初始化computed\",{\"1\":{\"631\":1}}],[\"初始化实例并传入目标数据的值\",{\"1\":{\"621\":1}}],[\"初始化watcher实例时订阅数据\",{\"1\":{\"607\":1,\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"初始化订阅\",{\"0\":{\"606\":1}}],[\"初始化步骤\",{\"0\":{\"493\":1,\"529\":1}}],[\"初始化脚手架\",{\"0\":{\"492\":1}}],[\"初始化数据监测\",{\"1\":{\"479\":1}}],[\"初始化生命周期\",{\"1\":{\"479\":1}}],[\"初始化显示\",{\"0\":{\"479\":1}}],[\"初始化完成\",{\"1\":{\"277\":1}}],[\"初始化时就是模板字符串原文\",{\"1\":{\"646\":1,\"655\":1}}],[\"初始化时能让\",{\"1\":{\"451\":1}}],[\"初始化时执行\",{\"1\":{\"436\":2}}],[\"初始化时不触发\",{\"1\":{\"167\":1}}],[\"初始化时赋值\",{\"1\":{\"156\":1}}],[\"初始化阶段\",{\"1\":{\"167\":1,\"171\":1}}],[\"初始化渲染或更新渲染调用\",{\"1\":{\"173\":1}}],[\"初始化渲染\",{\"1\":{\"165\":1}}],[\"初始化\",{\"0\":{\"700\":1},\"1\":{\"9\":1,\"69\":1,\"72\":1,\"628\":1,\"631\":1,\"636\":1,\"694\":2,\"700\":1,\"703\":1}}],[\"计划更新root\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"计算一个或多个值\",{\"1\":{\"1253\":1}}],[\"计算网页的显示方式并显示页面\",{\"1\":{\"1027\":1}}],[\"计算盒子大小的方式因此改变\",{\"1\":{\"973\":1}}],[\"计算好的参数返回给用户\",{\"1\":{\"633\":1,\"634\":1}}],[\"计算属性\",{\"1\":{\"539\":2}}],[\"计算属性最终会出现在\",{\"1\":{\"450\":1}}],[\"计算与监视对比\",{\"0\":{\"452\":1}}],[\"计算与监视属性\",{\"0\":{\"449\":1,\"538\":1}}],[\"计算此任务的过期时间\",{\"1\":{\"395\":1}}],[\"计算新状态\",{\"1\":{\"272\":1}}],[\"计算\",{\"0\":{\"1014\":1},\"1\":{\"96\":2}}],[\"计算当前可见区域的数据\",{\"1\":{\"96\":1}}],[\"计算当前可见区域结束数据的\",{\"1\":{\"96\":1}}],[\"计算当前可见区域起始数据的\",{\"1\":{\"96\":1}}],[\"涉及数值类型类型转换调用\",{\"1\":{\"1410\":1}}],[\"涉及到优先级队列\",{\"1\":{\"271\":1,\"272\":1}}],[\"涉及修改的话\",{\"1\":{\"156\":2}}],[\"构不成整体\",{\"1\":{\"1338\":1}}],[\"构造\",{\"1\":{\"841\":1}}],[\"构造函数调用\",{\"1\":{\"1446\":1}}],[\"构造函数原型\",{\"0\":{\"1438\":1}}],[\"构造函数每执行一次就会创建一个新的方法\",{\"1\":{\"1436\":1}}],[\"构造函数和普通函数区别就是调用方式不同\",{\"1\":{\"1436\":1}}],[\"构造函数习惯首字母大写\",{\"1\":{\"1436\":1}}],[\"构造函数不需要\",{\"1\":{\"1431\":1}}],[\"构造函数的属性内\",{\"1\":{\"1391\":1}}],[\"构造函数的参数只接受字符串\",{\"1\":{\"1381\":1}}],[\"构造函数中\",{\"1\":{\"1436\":1}}],[\"构造函数中获得\",{\"1\":{\"1391\":1}}],[\"构造函数中使用元字符时\",{\"1\":{\"1381\":1}}],[\"构造函数\",{\"0\":{\"1436\":1,\"1440\":1},\"1\":{\"70\":1,\"1176\":1,\"1431\":1,\"1445\":1}}],[\"构成理解\",{\"1\":{\"1028\":1}}],[\"构成的一套订阅\",{\"1\":{\"700\":1}}],[\"构成\",{\"1\":{\"692\":1}}],[\"构成单向循环链表\",{\"1\":{\"271\":1,\"272\":1}}],[\"构建虚拟\",{\"1\":{\"702\":1}}],[\"构建后的\",{\"1\":{\"665\":1}}],[\"构建弟弟对应的fiber子链表\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"构建原生组件的子fiber链表\",{\"1\":{\"272\":1,\"318\":1}}],[\"取余法\",{\"1\":{\"1370\":1}}],[\"取得匹配元素宽度和高度值\",{\"1\":{\"1324\":4}}],[\"取到全局对象\",{\"1\":{\"1231\":1}}],[\"取决于\",{\"1\":{\"1205\":1}}],[\"取值\",{\"1\":{\"1307\":1}}],[\"取值方法\",{\"1\":{\"966\":1}}],[\"取值范围\",{\"1\":{\"908\":1}}],[\"取\",{\"1\":{\"657\":1}}],[\"取出创建的\",{\"1\":{\"633\":1,\"634\":1}}],[\"取出旧值\",{\"1\":{\"626\":1}}],[\"取出下一个任务执行\",{\"1\":{\"395\":1}}],[\"取出优先级最高的task\",{\"1\":{\"395\":1}}],[\"取出fiber上已有的老的更新链表pending\",{\"1\":{\"271\":1,\"272\":1}}],[\"取消了默认行为\",{\"1\":{\"1151\":1}}],[\"取消默认行为\",{\"1\":{\"1148\":1}}],[\"取消默认行为时不能使用\",{\"1\":{\"1148\":1}}],[\"取消\",{\"1\":{\"1141\":1}}],[\"取消这个行为\",{\"1\":{\"1140\":1}}],[\"取消之前的结果\",{\"1\":{\"788\":1}}],[\"取消订阅等\",{\"1\":{\"185\":1}}],[\"取消订阅消息\",{\"1\":{\"167\":1,\"481\":1,\"482\":1}}],[\"取消请求的变量cancel\",{\"1\":{\"72\":1}}],[\"取消请求的处理\",{\"1\":{\"72\":1}}],[\"取消请求模拟实现\",{\"0\":{\"72\":1}}],[\"取消请求工作原理\",{\"0\":{\"71\":1}}],[\"取消请求\",{\"0\":{\"16\":1,\"67\":1},\"1\":{\"29\":1,\"67\":1}}],[\"要加括号\",{\"1\":{\"1413\":1}}],[\"要定义或修改的属性描述符\",{\"1\":{\"1407\":1}}],[\"要定义或修改的属性的名称\",{\"1\":{\"1407\":1}}],[\"要定义或修改属性的对象\",{\"1\":{\"1407\":1}}],[\"要抽取的子串的起始下标\",{\"1\":{\"1376\":1}}],[\"要抽取的片断的起始下标\",{\"1\":{\"1376\":1}}],[\"要拷贝的目标对象\",{\"1\":{\"1332\":1}}],[\"要想使用\",{\"1\":{\"1319\":1}}],[\"要绑定事件的对象\",{\"1\":{\"1131\":1}}],[\"要绑定的样式个数确定\",{\"1\":{\"454\":1}}],[\"要绑定的样式个数不确定\",{\"1\":{\"454\":1}}],[\"要\",{\"1\":{\"1130\":1}}],[\"要执行动画的样式\",{\"1\":{\"1072\":1}}],[\"要通过浏览器来阅读\",{\"1\":{\"1025\":1}}],[\"要通过计算的来\",{\"1\":{\"450\":1}}],[\"要播放的视频的\",{\"1\":{\"1021\":1}}],[\"要让\",{\"1\":{\"830\":1}}],[\"要求这个新的空标签必须是块级元素\",{\"1\":{\"985\":1}}],[\"要求\",{\"1\":{\"742\":1}}],[\"要点\",{\"1\":{\"694\":1,\"695\":1}}],[\"要增加标签长度+3\",{\"1\":{\"661\":1}}],[\"要增加标签长度+2\",{\"1\":{\"661\":1}}],[\"要再次递归调用\",{\"1\":{\"651\":1}}],[\"要将响应式对象中的某个属性单独提供给外部使用时\",{\"1\":{\"553\":1}}],[\"要注意的是\",{\"1\":{\"517\":1}}],[\"要使用\",{\"1\":{\"475\":1}}],[\"要显示的数据不存在\",{\"1\":{\"450\":1}}],[\"要写完整路径\",{\"1\":{\"426\":1}}],[\"要避免在\",{\"1\":{\"365\":1}}],[\"要先删除它的子节点\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"要计算的fiber\",{\"1\":{\"272\":1}}],[\"要创建真实的dom节点\",{\"1\":{\"272\":1,\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"要更新的虚拟dom\",{\"1\":{\"271\":1,\"272\":1}}],[\"要用style=\",{\"1\":{\"123\":1}}],[\"要用\",{\"1\":{\"123\":1}}],[\"把数四舍五入为最接近的整数\",{\"1\":{\"1370\":1}}],[\"把里面的$符号统一改为\",{\"1\":{\"1333\":1}}],[\"把被拷贝对象复杂数据类型的地址拷给目标对象\",{\"1\":{\"1332\":1}}],[\"把原来加给子元素身上的事件绑定在父元素身上\",{\"1\":{\"1328\":1}}],[\"把原生事件名和处理函数的名字进行映射或绑定\",{\"1\":{\"281\":1}}],[\"把内容放入目标元素前面\",{\"1\":{\"1321\":1}}],[\"把内容放入目标元素后面\",{\"1\":{\"1321\":1}}],[\"把元素包装成\",{\"1\":{\"1283\":1}}],[\"把元素的底端与父元素字体的底端对齐\",{\"1\":{\"924\":1}}],[\"把元素的顶端与父元素字体的顶端对齐\",{\"1\":{\"924\":1}}],[\"把元素的顶端与行中最高元素的顶端对齐\",{\"1\":{\"924\":1}}],[\"把指定属性设置或修改为指定的值\",{\"1\":{\"1094\":1}}],[\"把新的子节点添加到指定节点\",{\"1\":{\"1094\":1}}],[\"把新fiber放到索引位置\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"把图像扩展至最大尺寸\",{\"1\":{\"954\":1}}],[\"把图片转换为块级元素\",{\"1\":{\"924\":1}}],[\"把背景图像扩展至足够大\",{\"1\":{\"954\":1}}],[\"把标签元素相同的样式\",{\"1\":{\"862\":1}}],[\"把拉取数据等业务逻辑代码分离到\",{\"1\":{\"790\":1}}],[\"把懒加载组件\",{\"1\":{\"737\":1}}],[\"把参数options对象存为$options\",{\"1\":{\"694\":1}}],[\"把需要渲染的文本\",{\"1\":{\"674\":1}}],[\"把attrsstring转换为数组返回\",{\"1\":{\"662\":1}}],[\"把自己设置到全局的一个指定位置\",{\"1\":{\"605\":1}}],[\"把自己所有的儿子都添加到自己身上\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"把所有\",{\"1\":{\"868\":1}}],[\"把所有的\",{\"1\":{\"605\":1}}],[\"把所有子节点的副作用及子节点的子节点副作用合并收集起来\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"把依赖收集的代码封装成一个\",{\"1\":{\"605\":1}}],[\"把这个容器放入当前\",{\"1\":{\"648\":1}}],[\"把这个newfiber添加上一个子节点后面\",{\"1\":{\"361\":1}}],[\"把这些\",{\"1\":{\"593\":1}}],[\"把大量计算放在\",{\"1\":{\"524\":1}}],[\"把\",{\"1\":{\"505\":1,\"543\":1,\"590\":1,\"841\":1,\"842\":1,\"843\":1,\"868\":1,\"1453\":1}}],[\"把控制权交给浏览器\",{\"1\":{\"395\":1}}],[\"把此元素放置在父元素的中部\",{\"1\":{\"924\":1}}],[\"把此接口上对应的属性从原生事件上拷贝到合成事件实例上\",{\"1\":{\"293\":1}}],[\"把此fiber的真实dom插入到父dom里\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"把要执行的回调函数添加到派发队列中\",{\"1\":{\"292\":1}}],[\"把子节点对应的真实dom插入到父节点dom中\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"把flags里的placement删除\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"把当前完成的fiber所有子节点对应真实dom都挂在到父parent真实dom节点上\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"把最终计算到的状态赋值给memoizedstate\",{\"1\":{\"272\":1}}],[\"把element虚拟dom挂载到容器中\",{\"1\":{\"271\":1,\"272\":1,\"301\":1,\"305\":1,\"329\":1,\"333\":1,\"359\":1,\"367\":1,\"377\":1}}],[\"把虚拟dom\",{\"1\":{\"271\":1,\"272\":1}}],[\"把一个耗时任务切分成一个个小任务\",{\"1\":{\"259\":1}}],[\"先进后出\",{\"1\":{\"1423\":1}}],[\"先将复合类型的值转为原始类型的值\",{\"1\":{\"1414\":1}}],[\"先调用对象自身的\",{\"1\":{\"1413\":1}}],[\"先定义字符串\",{\"1\":{\"1386\":1}}],[\"先设计一个字符串\",{\"1\":{\"1384\":1}}],[\"先设计一个关键词列表\",{\"1\":{\"1383\":1}}],[\"先设置盒子大小\",{\"1\":{\"980\":1}}],[\"先判断再执行\",{\"1\":{\"1273\":1}}],[\"先判断后执行\",{\"1\":{\"1272\":1}}],[\"先判断是不是标准\",{\"1\":{\"756\":1}}],[\"先自增\",{\"1\":{\"1258\":1}}],[\"先隐式地检查并确定\",{\"1\":{\"1228\":1}}],[\"先执行再判断\",{\"1\":{\"1272\":1}}],[\"先执行执行栈中的同步任务\",{\"1\":{\"1076\":1}}],[\"先执行一次值类型判断\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"先确定是跨行还是跨列合并\",{\"1\":{\"1050\":1}}],[\"先确定每个列的大小之后确定列的位置\",{\"1\":{\"1001\":1}}],[\"先理清楚布局结构\",{\"1\":{\"1001\":1}}],[\"先用标准流的父元素排列上下位置\",{\"1\":{\"980\":1}}],[\"先用表主流的父元素排列上下位置\",{\"1\":{\"979\":1}}],[\"先准备好相关的网页元素\",{\"1\":{\"967\":1}}],[\"先写\",{\"1\":{\"873\":1}}],[\"先了解常用的链接伪类选择器\",{\"1\":{\"873\":1}}],[\"先使用\",{\"1\":{\"750\":1}}],[\"先使用transformroutes格式化路由表\",{\"1\":{\"740\":1}}],[\"先声明一个简单的\",{\"1\":{\"649\":1}}],[\"先入栈\",{\"1\":{\"635\":1}}],[\"先暂时不考虑\",{\"1\":{\"635\":1}}],[\"先\",{\"1\":{\"620\":1}}],[\"先在项目\",{\"1\":{\"581\":1}}],[\"先动作\",{\"1\":{\"471\":1}}],[\"先缓存回调函数\",{\"1\":{\"395\":1}}],[\"先把父fiber上该删除的节点都删除\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"先获取开始执行任务的时间\",{\"1\":{\"395\":1}}],[\"先获取\",{\"1\":{\"339\":1}}],[\"先有虚拟\",{\"1\":{\"270\":1}}],[\"先遍历第一个儿子\",{\"1\":{\"265\":1}}],[\"已去除微软和\",{\"1\":{\"1064\":1}}],[\"已范式化的数据保存在表中\",{\"1\":{\"816\":1}}],[\"已删除\",{\"0\":{\"466\":1}}],[\"已经进化到了全面兼容\",{\"1\":{\"1005\":1}}],[\"已经能实现不同屏幕下\",{\"1\":{\"966\":1}}],[\"已经具备被垃圾回收的之一条件\",{\"1\":{\"842\":1}}],[\"已经有一个渲染\",{\"1\":{\"632\":1,\"635\":1}}],[\"已经有收集过\",{\"1\":{\"627\":1}}],[\"已经完成了实例初始化\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"已经补全了这部分逻辑\",{\"1\":{\"357\":1}}],[\"已经生效的属性\",{\"1\":{\"270\":1,\"272\":1}}],[\"已废弃的\",{\"0\":{\"85\":1},\"1\":{\"89\":1}}],[\"真奇怪\",{\"1\":{\"1174\":1}}],[\"真正的\",{\"1\":{\"781\":1}}],[\"真正的关键\",{\"1\":{\"634\":1}}],[\"真正的源码早已给出了答案\",{\"1\":{\"634\":1}}],[\"真正\",{\"1\":{\"504\":1}}],[\"真正开发中几乎不用\",{\"1\":{\"487\":1}}],[\"真正定义\",{\"1\":{\"468\":1}}],[\"真正干活的服务器\",{\"1\":{\"28\":1}}],[\"真实虚拟dom比较\",{\"1\":{\"671\":1}}],[\"真实开发中只有一个\",{\"1\":{\"443\":1}}],[\"真实dom\",{\"1\":{\"289\":1,\"293\":1}}],[\"真实dom节点指向fiberrootnode\",{\"1\":{\"270\":1,\"271\":1}}],[\"真实\",{\"0\":{\"666\":1},\"1\":{\"270\":1,\"666\":1}}],[\"根标签\",{\"1\":{\"1031\":2,\"1093\":2}}],[\"根元素的\",{\"1\":{\"966\":1}}],[\"根元素\",{\"1\":{\"963\":1}}],[\"根元素3\",{\"1\":{\"270\":1,\"272\":1}}],[\"根fiber\",{\"1\":{\"374\":1,\"396\":1}}],[\"根fiber的statenode\",{\"1\":{\"270\":1,\"271\":1}}],[\"根组件\",{\"1\":{\"272\":1,\"789\":1}}],[\"根节点值是所有堆节点值中的最小值\",{\"1\":{\"391\":1}}],[\"根节点开启调度计划更新\",{\"1\":{\"323\":1}}],[\"根节点\",{\"1\":{\"274\":1,\"277\":1,\"326\":1,\"349\":3,\"375\":3,\"385\":3}}],[\"根节点fiber\",{\"1\":{\"271\":1,\"316\":1}}],[\"根节点在一开始就已经存在了\",{\"1\":{\"270\":1}}],[\"根节点的\",{\"1\":{\"270\":1}}],[\"根容器的current指向当前的根fiber\",{\"1\":{\"270\":1,\"271\":1}}],[\"根据函数的调用方式不同\",{\"1\":{\"1446\":1}}],[\"根据它定义时的作用域\",{\"1\":{\"1428\":1}}],[\"根据正则表达式语法规则\",{\"1\":{\"1381\":1}}],[\"根据字符编码去获取字符\",{\"1\":{\"1373\":1}}],[\"根据索引获取指定字符\",{\"1\":{\"1373\":1}}],[\"根据事件对象中的\",{\"1\":{\"1119\":1}}],[\"根据一个\",{\"1\":{\"1092\":1}}],[\"根据标签名或\",{\"1\":{\"1085\":1}}],[\"根据标签的语义\",{\"1\":{\"1034\":1}}],[\"根据这些语法定义自己的样式规则\",{\"1\":{\"1004\":1}}],[\"根据媒体查询动态调整\",{\"1\":{\"966\":1}}],[\"根据选择器权重执行\",{\"1\":{\"932\":1}}],[\"根据传进来的type判断要进行的操作\",{\"1\":{\"749\":1}}],[\"根据权限和导航生成路由表\",{\"1\":{\"729\":1}}],[\"根据路由表\",{\"1\":{\"718\":1}}],[\"根据不同的数据类型\",{\"1\":{\"700\":1}}],[\"根据上面的四指针命中查找法\",{\"1\":{\"683\":1}}],[\"根据等号拆分\",{\"1\":{\"662\":2}}],[\"根据引号判断拆分出的字符串存入result中\",{\"1\":{\"662\":1}}],[\"根据每条\",{\"1\":{\"649\":1}}],[\"根据computed\",{\"1\":{\"630\":1}}],[\"根据data和expression就可以获取watcher依赖的数据\",{\"1\":{\"607\":1,\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"根据情景动态导入代码\",{\"1\":{\"530\":1}}],[\"根据定义好的名字填充到对应的位置\",{\"1\":{\"520\":1}}],[\"根据新数据\",{\"1\":{\"480\":1}}],[\"根据新的虚拟dom生成子fiber链表\",{\"1\":{\"272\":1,\"318\":1}}],[\"根据新的虚拟dom生成新的fiber链表\",{\"1\":{\"272\":1,\"318\":1}}],[\"根据请求路径找到匹配的函数来处理请求\",{\"1\":{\"423\":1}}],[\"根据当前\",{\"1\":{\"323\":1}}],[\"根据\",{\"1\":{\"274\":1,\"909\":4,\"1085\":1,\"1087\":1,\"1131\":1}}],[\"根据虚拟dom\",{\"1\":{\"272\":1}}],[\"根据老状态和更新计算新状态\",{\"1\":{\"272\":1}}],[\"根据老状态和更新\",{\"1\":{\"272\":1}}],[\"根据老状态和更新队列中的更新计算最新状态\",{\"1\":{\"272\":1}}],[\"根据屏幕刷新率和\",{\"1\":{\"263\":1}}],[\"根据props筛选data\",{\"1\":{\"234\":1}}],[\"广度优先搜索\",{\"1\":{\"266\":1}}],[\"广度优先\",{\"1\":{\"266\":1}}],[\"标题一共六级选\",{\"1\":{\"1035\":1}}],[\"标题标签\",{\"0\":{\"1035\":1},\"1\":{\"1031\":1}}],[\"标准中定义的对象\",{\"1\":{\"1339\":1}}],[\"标准除了可以让不同的开发人员写出的页面更标准\",{\"1\":{\"1028\":1}}],[\"标准的三大组成部分\",{\"0\":{\"1028\":1}}],[\"标准流或浮动都无法快速实现\",{\"1\":{\"987\":1}}],[\"标准流没办法完成\",{\"1\":{\"976\":1}}],[\"标准流是最基本的布局方式\",{\"1\":{\"975\":1}}],[\"标准流\",{\"0\":{\"975\":1},\"1\":{\"974\":1,\"1002\":1}}],[\"标准\",{\"1\":{\"950\":1,\"1028\":1,\"1233\":2}}],[\"标识这个是用户\",{\"1\":{\"625\":1}}],[\"标识符的位置\",{\"1\":{\"1391\":1}}],[\"标识符指向第\",{\"1\":{\"1391\":2}}],[\"标识符表示该\",{\"1\":{\"628\":1}}],[\"标识符\",{\"0\":{\"1240\":1},\"1\":{\"625\":1}}],[\"标记\",{\"1\":{\"1029\":1}}],[\"标记出需要精细更新的节点进行替换\",{\"1\":{\"702\":1}}],[\"标记target\",{\"1\":{\"626\":1}}],[\"标记一个对象\",{\"1\":{\"556\":1}}],[\"标记动态标签内部的静态标签\",{\"1\":{\"524\":1}}],[\"标记为插入\",{\"1\":{\"354\":1}}],[\"标记为删除\",{\"1\":{\"354\":1}}],[\"标志着此节点遍历完成\",{\"1\":{\"265\":1}}],[\"标签一旦用于引入外部文件\",{\"1\":{\"1235\":1}}],[\"标签引入\",{\"1\":{\"1235\":1}}],[\"标签写到页面上边\",{\"1\":{\"1119\":1}}],[\"标签标签间空白也会当成空白节点\",{\"1\":{\"1087\":1}}],[\"标签以外的文本内容\",{\"1\":{\"1084\":1}}],[\"标签即可\",{\"1\":{\"1056\":1}}],[\"标签语义\",{\"1\":{\"1037\":1}}],[\"标签通常是成对出现的\",{\"1\":{\"1030\":1}}],[\"标签是由尖括号包围的关键词\",{\"1\":{\"1030\":1}}],[\"标签书写注意规范\",{\"0\":{\"1030\":1}}],[\"标签与属性\",{\"1\":{\"1029\":1}}],[\"标签对网页或区段\",{\"1\":{\"1020\":1}}],[\"标签配合使用组成下拉框\",{\"1\":{\"1019\":1}}],[\"标签按照规定好默认方式排列\",{\"1\":{\"975\":1}}],[\"标签名不会被解析\",{\"1\":{\"1090\":1}}],[\"标签名与属性\",{\"1\":{\"1044\":1}}],[\"标签名\",{\"1\":{\"1031\":1,\"1078\":1}}],[\"标签名称作为选择器\",{\"1\":{\"861\":1}}],[\"标签名任意\",{\"1\":{\"122\":1}}],[\"标签选择器\",{\"0\":{\"861\":1},\"1\":{\"860\":1,\"864\":1,\"1286\":1}}],[\"标签选择器不能被\",{\"1\":{\"139\":1}}],[\"标签部分自动地转换为模板字符串\",{\"1\":{\"702\":1}}],[\"标签没有封闭\",{\"1\":{\"661\":1}}],[\"标签必定是封闭闭合的\",{\"1\":{\"661\":1}}],[\"标签必须闭合\",{\"1\":{\"123\":1}}],[\"标签堆栈\",{\"1\":{\"661\":1}}],[\"标签内容通过\",{\"1\":{\"660\":1}}],[\"标签上获取的是真实\",{\"1\":{\"497\":1}}],[\"标签切换为\",{\"1\":{\"208\":1}}],[\"标签首字母\",{\"1\":{\"123\":1}}],[\"标签中我们必须要设置的标签是\",{\"1\":{\"1031\":1}}],[\"标签中混入\",{\"1\":{\"123\":1}}],[\"标签中的一个一个的属性\",{\"1\":{\"1083\":1}}],[\"标签中的第一个标签是开始标签\",{\"1\":{\"1030\":1}}],[\"标签中的\",{\"1\":{\"123\":1,\"1349\":1}}],[\"标签属性或其它\",{\"1\":{\"122\":1}}],[\"标签属性任意\",{\"1\":{\"122\":1}}],[\"标签或其它标签\",{\"1\":{\"122\":1}}],[\"标签\",{\"0\":{\"1029\":1,\"1038\":1,\"1039\":1,\"1056\":1},\"1\":{\"26\":1,\"91\":1,\"122\":1,\"520\":1,\"854\":1,\"855\":1,\"859\":1,\"864\":1,\"869\":1,\"875\":1,\"1029\":1,\"1031\":2,\"1032\":1,\"1037\":1,\"1057\":1,\"1078\":1,\"1093\":1}}],[\"标签的跨域能力来发送请求的\",{\"1\":{\"26\":1}}],[\"资源加载\",{\"1\":{\"1076\":1}}],[\"资源\",{\"1\":{\"263\":1}}],[\"纤程\",{\"1\":{\"263\":1}}],[\"架构是同一类东西\",{\"1\":{\"742\":1}}],[\"架构\",{\"0\":{\"263\":1,\"742\":1},\"1\":{\"263\":2}}],[\"团队为我们带来了全新的\",{\"1\":{\"263\":1}}],[\"团队自行实现了\",{\"1\":{\"262\":1}}],[\"团队针对这个问题给出的解决方案就是\",{\"1\":{\"259\":1}}],[\"里传递的对象作为函数中\",{\"1\":{\"1131\":1}}],[\"里有点符号而且不是仅仅只是点符号\",{\"1\":{\"650\":1,\"657\":1}}],[\"里存在多重对象嵌套时\",{\"1\":{\"650\":1}}],[\"里获取数据\",{\"1\":{\"649\":1}}],[\"里作为第\",{\"1\":{\"648\":1}}],[\"里的每一条\",{\"1\":{\"647\":1}}],[\"里的数据和方法\",{\"1\":{\"521\":1}}],[\"里的数据改变了\",{\"1\":{\"517\":1}}],[\"里那样写表达式\",{\"1\":{\"639\":1}}],[\"里修改\",{\"1\":{\"545\":1}}],[\"里定义共享的数据\",{\"1\":{\"519\":1}}],[\"里\",{\"1\":{\"505\":1}}],[\"里面有\",{\"1\":{\"1435\":1}}],[\"里面基本都是函数\",{\"1\":{\"1279\":1}}],[\"里面可以传递第二个参数\",{\"1\":{\"1252\":1}}],[\"里面可以放行内或者块级元素\",{\"1\":{\"876\":1}}],[\"里面地址是一个文件或者压缩包\",{\"1\":{\"1043\":1}}],[\"里面的函数有\",{\"1\":{\"1319\":1}}],[\"里面的文字大小来改变页面中元素的大小\",{\"1\":{\"963\":1}}],[\"里面的单位可以跟\",{\"1\":{\"954\":1}}],[\"里面的\",{\"1\":{\"919\":1}}],[\"里面的所有元素\",{\"1\":{\"870\":1}}],[\"里面的代码会被编译成组件\",{\"1\":{\"584\":1}}],[\"里面包含了很多个\",{\"1\":{\"644\":1}}],[\"里面\",{\"1\":{\"590\":1,\"746\":1,\"1031\":1}}],[\"里面存储着自己的路由信息\",{\"1\":{\"425\":1}}],[\"里面放置监听函数\",{\"1\":{\"292\":1}}],[\"里注册的任务\",{\"1\":{\"262\":1}}],[\"里并不想是父子元素的关系\",{\"1\":{\"112\":1}}],[\"≈\",{\"1\":{\"260\":1}}],[\"帧间隔时间\",{\"1\":{\"395\":1}}],[\"帧执行过程\",{\"1\":{\"261\":1}}],[\"帧\",{\"0\":{\"261\":1},\"1\":{\"260\":1}}],[\"帧率与优化\",{\"0\":{\"258\":1}}],[\"毫秒会触发\",{\"1\":{\"1142\":1}}],[\"毫秒\",{\"1\":{\"260\":1}}],[\"毫秒渲染一次\",{\"1\":{\"259\":1}}],[\"达到以少应多的目的\",{\"1\":{\"1382\":1}}],[\"达到\",{\"1\":{\"260\":1}}],[\"秒\",{\"1\":{\"260\":2}}],[\"线程执行任务时间超过\",{\"1\":{\"259\":1}}],[\"线程和渲染线程是互斥的\",{\"1\":{\"259\":1}}],[\"大部分需要加反斜杠进行标识\",{\"1\":{\"1381\":1}}],[\"大部分字符仅能够描述自身\",{\"1\":{\"1381\":1}}],[\"大部分文件已经缓存在本地\",{\"1\":{\"1027\":1}}],[\"大\",{\"1\":{\"1376\":1}}],[\"大大简化了\",{\"1\":{\"1279\":1}}],[\"大括号可以省略\",{\"1\":{\"1268\":1}}],[\"大整型转换\",{\"1\":{\"1230\":1}}],[\"大的降低了事件方面业务逻辑的调试难度\",{\"1\":{\"1155\":1}}],[\"大盒子\",{\"1\":{\"1038\":1}}],[\"大于原长度\",{\"1\":{\"1352\":1}}],[\"大于\",{\"1\":{\"950\":3,\"1202\":1,\"1261\":1}}],[\"大小根据内容决定\",{\"1\":{\"978\":1}}],[\"大小等外观样式\",{\"1\":{\"933\":1,\"1028\":1}}],[\"大小写显示\",{\"0\":{\"886\":1}}],[\"大小是我们网页的最常用的单位\",{\"1\":{\"883\":1}}],[\"大小\",{\"1\":{\"881\":1,\"887\":1}}],[\"大多跟链接相关\",{\"1\":{\"873\":1}}],[\"大多数还是同一节点下的数据更换\",{\"1\":{\"672\":1}}],[\"大致思路是遍历\",{\"1\":{\"649\":1}}],[\"大致思路是当遍历到的\",{\"1\":{\"648\":1}}],[\"大概\",{\"1\":{\"259\":1}}],[\"大量\",{\"1\":{\"174\":1}}],[\"非递归方法\",{\"1\":{\"1458\":1}}],[\"非箭头函数\",{\"1\":{\"1423\":1}}],[\"非布尔值类型数据求布尔值\",{\"1\":{\"1414\":1}}],[\"非布尔值两次取反\",{\"1\":{\"1259\":1}}],[\"非引用型分组必须使用表达式分组\",{\"1\":{\"1392\":1}}],[\"非负的整数\",{\"1\":{\"1376\":2}}],[\"非数值类型的值使用一元运算符\",{\"1\":{\"1414\":1}}],[\"非数字字符结束\",{\"1\":{\"1250\":1}}],[\"非数据文本\",{\"1\":{\"647\":1}}],[\"非强制\",{\"1\":{\"1238\":1}}],[\"非编程语言\",{\"1\":{\"1026\":1}}],[\"非根元素设置\",{\"1\":{\"963\":1}}],[\"非活跃状态的查询结果默认在\",{\"1\":{\"836\":1}}],[\"非阻塞任务调用机制\",{\"1\":{\"765\":1}}],[\"非函数类型执行同步操作\",{\"1\":{\"754\":1}}],[\"非服务端环境才有缓存效果\",{\"1\":{\"633\":1}}],[\"非服务端渲染\",{\"1\":{\"631\":1}}],[\"非侵入式变化\",{\"0\":{\"596\":1}}],[\"非常多\",{\"1\":{\"864\":2}}],[\"非常像胡子\",{\"1\":{\"639\":1}}],[\"非常笨拙\",{\"1\":{\"638\":1}}],[\"非常重要\",{\"1\":{\"636\":1}}],[\"非常重要的vuecomponent关系图谱\",{\"1\":{\"489\":1}}],[\"非常影响用户体验\",{\"1\":{\"257\":1}}],[\"非单文件组件\",{\"0\":{\"487\":1}}],[\"非\",{\"1\":{\"274\":1,\"1259\":1}}],[\"非业务型\",{\"1\":{\"198\":1}}],[\"影响\",{\"1\":{\"1005\":1}}],[\"影响下面的标准流盒子\",{\"1\":{\"982\":1}}],[\"影响了盒子实际大小\",{\"1\":{\"969\":1}}],[\"影响的子组件进行定向更新\",{\"1\":{\"257\":1}}],[\"影响加载速度与性能\",{\"1\":{\"117\":1}}],[\"得出路由表\",{\"1\":{\"731\":1}}],[\"得到的是\",{\"1\":{\"1312\":1}}],[\"得到的结果重新赋值给当前变量\",{\"1\":{\"1260\":1}}],[\"得到\",{\"1\":{\"702\":1}}],[\"得到子元素\",{\"1\":{\"695\":1}}],[\"得到虚拟\",{\"1\":{\"134\":1}}],[\"得益于响应式原理\",{\"1\":{\"257\":1}}],[\"仍会报错\",{\"1\":{\"662\":1}}],[\"仍未解决的问题\",{\"0\":{\"634\":1}}],[\"仍需要使用普通的\",{\"1\":{\"245\":1}}],[\"仍是常用钩子函数\",{\"1\":{\"171\":2}}],[\"打台球\",{\"1\":{\"641\":1,\"653\":1}}],[\"打包软件会对项目全局样式进行预扫描和预处理\",{\"1\":{\"966\":1}}],[\"打包函数\",{\"1\":{\"692\":2}}],[\"打包\",{\"0\":{\"590\":1},\"1\":{\"1192\":1}}],[\"打包大小减少\",{\"1\":{\"524\":1}}],[\"打破大括号内表达式是\",{\"1\":{\"564\":1}}],[\"打断\",{\"1\":{\"457\":1}}],[\"打印结果\",{\"1\":{\"1174\":1}}],[\"打印机和打印预览\",{\"1\":{\"964\":1}}],[\"打印\",{\"1\":{\"758\":1}}],[\"打印日志方法\",{\"1\":{\"272\":1}}],[\"打印错误信息\",{\"1\":{\"242\":1}}],[\"打开新窗口\",{\"1\":{\"1063\":1}}],[\"打开\",{\"1\":{\"91\":1}}],[\"请问走完这\",{\"1\":{\"1458\":1}}],[\"请慎用\",{\"1\":{\"914\":1}}],[\"请按照\",{\"1\":{\"873\":1}}],[\"请先试想一下\",{\"1\":{\"676\":1}}],[\"请始终使用绝对路径\",{\"1\":{\"572\":1}}],[\"请执行\",{\"1\":{\"493\":1}}],[\"请使用\",{\"1\":{\"242\":1,\"1269\":1,\"1367\":1}}],[\"请求函数主体\",{\"1\":{\"839\":1}}],[\"请求场景\",{\"1\":{\"756\":1}}],[\"请求资源时必须加前缀\",{\"1\":{\"495\":1}}],[\"请求了前端不存在的资源时\",{\"1\":{\"495\":1}}],[\"请求代理\",{\"0\":{\"495\":1}}],[\"请求中\",{\"1\":{\"439\":1,\"776\":1}}],[\"请求获取\",{\"1\":{\"421\":1}}],[\"请求取消\",{\"1\":{\"72\":1}}],[\"请求失败都可以直接通过try\",{\"1\":{\"779\":1}}],[\"请求失败\",{\"1\":{\"69\":1,\"72\":1,\"776\":1}}],[\"请求拦截器2失败\",{\"1\":{\"70\":2}}],[\"请求拦截器2\",{\"1\":{\"70\":1}}],[\"请求拦截器1失败\",{\"1\":{\"70\":2}}],[\"请求拦截器1\",{\"1\":{\"70\":1}}],[\"请求拦截器函数参数\",{\"1\":{\"66\":1}}],[\"请求拦截器后进先出\",{\"1\":{\"66\":1}}],[\"请求跳转的最大次数\",{\"1\":{\"60\":1}}],[\"请求将被中断\",{\"1\":{\"48\":1}}],[\"请求地址\",{\"1\":{\"39\":1}}],[\"请求创建的原生\",{\"1\":{\"35\":1}}],[\"请求方法\",{\"1\":{\"40\":1}}],[\"请求方法和\",{\"1\":{\"22\":1}}],[\"请求方式\",{\"1\":{\"7\":1,\"12\":1}}],[\"请求头的\",{\"1\":{\"55\":1}}],[\"请求头\",{\"1\":{\"20\":2,\"22\":1}}],[\"请求类型\",{\"1\":{\"17\":1}}],[\"请求行\",{\"1\":{\"14\":1}}],[\"请求\",{\"0\":{\"14\":1,\"1207\":1},\"1\":{\"26\":1,\"71\":1,\"173\":1,\"482\":1,\"841\":1,\"1066\":1}}],[\"请求数据获取\",{\"1\":{\"184\":1}}],[\"请求数据\",{\"1\":{\"7\":1,\"788\":1}}],[\"请求报文\",{\"0\":{\"7\":1}}],[\"错误处理和刷新\",{\"1\":{\"827\":1}}],[\"错误捕获\",{\"1\":{\"788\":1}}],[\"错误\",{\"1\":{\"241\":1}}],[\"错误边界无法捕获事件处理器内部的错误\",{\"1\":{\"245\":1}}],[\"错误边界无法捕获以下错误\",{\"1\":{\"242\":1}}],[\"错误边界的粒度由实际开发情景决定\",{\"1\":{\"243\":1}}],[\"错误边界仅可以捕获其子组件的错误\",{\"1\":{\"242\":1}}],[\"错误边界在渲染期间\",{\"1\":{\"241\":1}}],[\"错误边界是一种\",{\"1\":{\"241\":1}}],[\"错误边界\",{\"0\":{\"241\":1}}],[\"能改变\",{\"1\":{\"1451\":1}}],[\"能提前声明对象\",{\"1\":{\"1349\":1}}],[\"能显示的物理像素点的个数\",{\"1\":{\"952\":1}}],[\"能快速为页面中同类型的标签统一设置样式\",{\"1\":{\"861\":1}}],[\"能快速地识别出当前更新来源于哪个组件\",{\"1\":{\"257\":1}}],[\"能更简洁地嵌入到\",{\"1\":{\"751\":1}}],[\"能更好地描述\",{\"1\":{\"248\":1}}],[\"能够熟练运用表格就显得很重要\",{\"1\":{\"1047\":1}}],[\"能够形成\",{\"1\":{\"995\":1}}],[\"能够兼容\",{\"1\":{\"955\":1}}],[\"能够正确监听到\",{\"1\":{\"636\":1}}],[\"能够正确收到更新通知也发生变化\",{\"1\":{\"636\":1}}],[\"能够插入新项\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"能够追踪依赖\",{\"1\":{\"593\":1}}],[\"能够使用纯\",{\"1\":{\"584\":1}}],[\"能够更新部分页面内容的新方法\",{\"1\":{\"2\":1}}],[\"能完成的功能\",{\"1\":{\"452\":2}}],[\"能准确绑定到高阶组件返回的组件上\",{\"1\":{\"239\":1}}],[\"且函数声明优先级高于变量声明\",{\"1\":{\"1423\":1}}],[\"且一位一位进行比较\",{\"1\":{\"1261\":1}}],[\"且剩余的元素不会再进行检测\",{\"1\":{\"1201\":1}}],[\"且大多数情况下使用查询\",{\"1\":{\"824\":1}}],[\"且返回一个对象的时候\",{\"1\":{\"815\":1}}],[\"且新节点已创建为dom对象\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"且没有初始化过observer实例对象的变量\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"且不发送网络请求\",{\"1\":{\"713\":1}}],[\"且不可被枚举\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"且不是程序员定义的\",{\"1\":{\"489\":1}}],[\"且组件内部声明接收了的属性\",{\"1\":{\"535\":1}}],[\"且每个元素都要指定key值\",{\"1\":{\"508\":1}}],[\"且可配合useroutes\",{\"1\":{\"712\":1}}],[\"且可以灵活控制请求是否走代理\",{\"1\":{\"495\":1}}],[\"且可能有副作用代码的函数\",{\"1\":{\"365\":1}}],[\"且要给标签配置\",{\"1\":{\"464\":1}}],[\"且适用于任意组件间通信\",{\"1\":{\"406\":1}}],[\"且最下层的叶子节点集中在树的左部\",{\"1\":{\"390\":1}}],[\"且只会监听一次不会重复监听\",{\"1\":{\"283\":1}}],[\"且\",{\"1\":{\"238\":1}}],[\"给数组最后一个元素后面添加元素\",{\"1\":{\"1352\":1}}],[\"给另外一个对象使用\",{\"1\":{\"1332\":1}}],[\"给匹配到的元素进行循环遍历\",{\"1\":{\"1288\":1}}],[\"给父元素添加\",{\"1\":{\"985\":1}}],[\"给图片添加\",{\"1\":{\"924\":1}}],[\"给定一个\",{\"1\":{\"727\":1}}],[\"给token添加下标为2的项并且让收集器指向它\",{\"1\":{\"656\":1}}],[\"给dep添加watch\",{\"1\":{\"626\":1}}],[\"给需要开启监听的对象声明绑定一个初始化的observer类\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"给插槽命名\",{\"1\":{\"520\":1}}],[\"给元素添加初始过渡效果\",{\"1\":{\"508\":1}}],[\"给vue原型上添加一个方法\",{\"1\":{\"500\":1}}],[\"给当前的函数组件fiber添加\",{\"1\":{\"373\":1}}],[\"给函数组件增加了操作副作用的能力\",{\"1\":{\"365\":1}}],[\"给\",{\"1\":{\"237\":1,\"839\":1}}],[\"给被包装组件\",{\"1\":{\"235\":1}}],[\"务必复制静态方法\",{\"1\":{\"235\":1}}],[\"解释阶段\",{\"0\":{\"1428\":1}}],[\"解释为对象\",{\"1\":{\"1398\":1}}],[\"解释说明\",{\"1\":{\"950\":1}}],[\"解绑事件委托\",{\"1\":{\"1329\":1}}],[\"解绑p元素上面的点击事件\",{\"1\":{\"1329\":1}}],[\"解绑p元素所有事件处理程序\",{\"1\":{\"1329\":1}}],[\"解绑自定义事件\",{\"1\":{\"482\":1}}],[\"解绑自定义事件等收尾操作\",{\"1\":{\"481\":1}}],[\"解构赋值方式\",{\"1\":{\"1191\":1}}],[\"解构赋值\",{\"0\":{\"1160\":1}}],[\"解析器在调用函数每次都会向函数内部传递进一个隐含的参数\",{\"1\":{\"1446\":1}}],[\"解析器都会向函数中添加一个属性\",{\"1\":{\"1438\":1}}],[\"解析其中的\",{\"1\":{\"727\":1}}],[\"解析完结束标签之后栈顶出栈\",{\"1\":{\"663\":1}}],[\"解析完开始标签之后\",{\"1\":{\"663\":1}}],[\"解析dom字符串\",{\"1\":{\"649\":1}}],[\"解析为\",{\"1\":{\"645\":1}}],[\"解析后返回value值获取函数\",{\"1\":{\"626\":1}}],[\"解析标签体内容\",{\"1\":{\"444\":1}}],[\"解析标签属性\",{\"1\":{\"444\":1}}],[\"解析\",{\"0\":{\"649\":1},\"1\":{\"443\":1,\"1025\":1}}],[\"解析组件标签\",{\"1\":{\"134\":1,\"165\":1}}],[\"解决回调地狱\",{\"1\":{\"1174\":1}}],[\"解决在高清设备中的模糊问题\",{\"1\":{\"953\":1}}],[\"解决方法\",{\"1\":{\"1381\":1}}],[\"解决方法有两种\",{\"1\":{\"924\":1}}],[\"解决方案\",{\"0\":{\"635\":1},\"1\":{\"909\":1,\"969\":1,\"971\":2,\"1333\":1}}],[\"解决方案就是\",{\"1\":{\"259\":1}}],[\"解决办法是使用\",{\"1\":{\"815\":1}}],[\"解决软件的结构问题\",{\"1\":{\"742\":1}}],[\"解决的思路是新建一个\",{\"1\":{\"648\":1}}],[\"解决数据变为视图的最优雅的方法\",{\"1\":{\"638\":1}}],[\"解决嵌套watcher的真正方案\",{\"1\":{\"634\":1}}],[\"解决\",{\"1\":{\"590\":1,\"591\":2}}],[\"解决刷新页面服务端\",{\"1\":{\"439\":1}}],[\"解除了功能相同细节不同的组件之间的束缚\",{\"1\":{\"234\":1}}],[\"评论组件与博客组件复用\",{\"1\":{\"234\":1}}],[\"挂载元素\",{\"1\":{\"695\":1}}],[\"挂载上树的实现方法不进行讨论\",{\"1\":{\"664\":1}}],[\"挂载需要传递的数据\",{\"1\":{\"510\":1}}],[\"挂载\",{\"1\":{\"323\":1,\"366\":1}}],[\"挂载函数组件\",{\"1\":{\"318\":1}}],[\"挂载一个包含了缓存值\",{\"1\":{\"313\":1}}],[\"挂载到当前fiber的memoizedstate上\",{\"1\":{\"306\":1}}],[\"挂载hook链表\",{\"1\":{\"306\":1}}],[\"挂载完成后\",{\"1\":{\"237\":1}}],[\"挂载时添加侦听\",{\"1\":{\"234\":1}}],[\"挂载时\",{\"1\":{\"234\":1}}],[\"挂载阶段\",{\"1\":{\"165\":1}}],[\"假如楼梯有\",{\"1\":{\"1458\":1}}],[\"假若\",{\"1\":{\"843\":1}}],[\"假定它们的数据源都出自datasource\",{\"1\":{\"234\":1}}],[\"假设递归函数已经写好\",{\"1\":{\"1458\":1}}],[\"假设我们把整个屏幕划分为\",{\"1\":{\"966\":1}}],[\"假设设计稿是\",{\"1\":{\"966\":1}}],[\"假设页面上有三个子组件\",{\"1\":{\"845\":1}}],[\"假设场景\",{\"1\":{\"98\":1}}],[\"假设有\",{\"1\":{\"96\":1}}],[\"两者的区别\",{\"1\":{\"1016\":1}}],[\"两者结构类似\",{\"1\":{\"234\":1}}],[\"两种语法结合可以让异步代码像同步代码一样\",{\"1\":{\"1204\":1}}],[\"两种通过\",{\"1\":{\"973\":1}}],[\"两种方法最终收束为同一个函数\",{\"1\":{\"272\":1}}],[\"两条单线与其间隔的和等于指定的\",{\"1\":{\"909\":1}}],[\"两次后的控制台输出结果\",{\"1\":{\"330\":1}}],[\"两两一对进行确认\",{\"1\":{\"330\":1}}],[\"两个\",{\"1\":{\"1169\":1}}],[\"两个及以上元素调用同一个定时器响应函数\",{\"0\":{\"1073\":1}}],[\"两个嵌套关系的父子块元素\",{\"1\":{\"971\":1}}],[\"两个重要原则\",{\"1\":{\"452\":1}}],[\"两个参数\",{\"1\":{\"451\":1}}],[\"两个阶段\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"两个非父子组件想要通信\",{\"1\":{\"110\":1}}],[\"现开发已经普遍大量使用\",{\"1\":{\"973\":1}}],[\"现状\",{\"0\":{\"942\":1}}],[\"现假设用户已登录成功\",{\"1\":{\"729\":1}}],[\"现假设项目中需要编写两个组件\",{\"1\":{\"234\":1}}],[\"现附上完整源码\",{\"1\":{\"684\":1}}],[\"现给出多种情况来分析这四种情况\",{\"1\":{\"676\":1}}],[\"现阶段的数据类型有六种\",{\"1\":{\"1241\":1}}],[\"现阶段主要学的是\",{\"1\":{\"1028\":2}}],[\"现阶段可实现的技术方案有限\",{\"1\":{\"966\":1}}],[\"现阶段暂时用不上\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"现阶段最后挂载的\",{\"1\":{\"323\":1}}],[\"现记录本章节\",{\"1\":{\"593\":1}}],[\"现在能清楚执行环境中准备了哪些东西了\",{\"1\":{\"1424\":1}}],[\"现在常通过一些浏览器中特有对象\",{\"1\":{\"1064\":1}}],[\"现在也不能通过\",{\"1\":{\"1064\":1}}],[\"现在基本以\",{\"1\":{\"966\":1}}],[\"现在简化一下场景\",{\"1\":{\"733\":1}}],[\"现在参考\",{\"1\":{\"673\":1}}],[\"现在以\",{\"1\":{\"638\":1}}],[\"现在以单节点\",{\"1\":{\"342\":1}}],[\"现在\",{\"1\":{\"610\":1,\"635\":1}}],[\"现在要把插入的新项也变为observe响应式数据\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"现在暂时只考虑新节点只有一个的情况\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"现在只实现找到根节点的功能\",{\"1\":{\"271\":1,\"316\":1}}],[\"现在应用\",{\"1\":{\"234\":1}}],[\"现在已废弃\",{\"1\":{\"85\":1}}],[\"总生命周期\",{\"1\":{\"1426\":1}}],[\"总是以键值对的形式出现\",{\"1\":{\"1029\":1}}],[\"总是会返回一个安全不可变的更新值\",{\"1\":{\"812\":1}}],[\"总的来说\",{\"1\":{\"753\":1}}],[\"总体的依赖收集过程就是\",{\"1\":{\"608\":1}}],[\"总会声明一个新的render\",{\"1\":{\"231\":1}}],[\"总结一下接下来需要实现的功能\",{\"1\":{\"608\":1}}],[\"总结\",{\"0\":{\"619\":1,\"628\":1,\"636\":1,\"658\":1,\"663\":1,\"692\":1,\"696\":1,\"697\":1,\"779\":1,\"790\":1,\"817\":1,\"1069\":1,\"1411\":1},\"1\":{\"28\":1,\"139\":1,\"467\":1,\"704\":1,\"854\":1,\"916\":1,\"997\":1,\"1446\":1}}],[\"避免溢出\",{\"1\":{\"900\":1}}],[\"避免重复引入\",{\"1\":{\"635\":1}}],[\"避免组件复用数据存在引用\",{\"1\":{\"487\":1}}],[\"避免了多次重复克隆<mouse>组件\",{\"1\":{\"229\":1}}],[\"避免子组件对于函数不必要的\",{\"1\":{\"197\":1}}],[\"让计算机在页面\",{\"1\":{\"1237\":1}}],[\"让页面拥有一个属于自己的网页标题\",{\"1\":{\"1031\":1}}],[\"让页面进行渲染\",{\"1\":{\"749\":1}}],[\"让大部分开发者和设计师更容易上手\",{\"1\":{\"1006\":1}}],[\"让固定定位的盒子\",{\"1\":{\"994\":2}}],[\"让子盒子撑开父盒子\",{\"1\":{\"980\":1}}],[\"让多个块级元素一行内排列显示\",{\"1\":{\"976\":1}}],[\"让宽高减去多出来的内边距大小\",{\"1\":{\"969\":1}}],[\"让一个元素在页面中隐藏或者显示出来\",{\"1\":{\"914\":1}}],[\"让一个响应式数据变为只读的\",{\"1\":{\"555\":2}}],[\"让文字的行高\",{\"1\":{\"880\":1}}],[\"让节点变为fragment\",{\"1\":{\"695\":1}}],[\"让tokens数组变为dom字符串\",{\"1\":{\"653\":1}}],[\"让模板字符串变为tokens数组\",{\"1\":{\"653\":1}}],[\"让数组实现响应式\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"让相关知识不再处于\",{\"1\":{\"593\":1}}],[\"让相关功能的代码更加有序的组织在一起\",{\"1\":{\"546\":1}}],[\"让应用有更好的用户体验\",{\"1\":{\"568\":1}}],[\"让后代组件触发祖先组件\",{\"1\":{\"515\":1}}],[\"让父组件可以向子组件指定位置插入\",{\"1\":{\"502\":1}}],[\"让不展示的路由组件保持挂载\",{\"1\":{\"433\":1}}],[\"让路由跳转更加灵活\",{\"1\":{\"432\":1}}],[\"让路由组件更方便地收到参数\",{\"1\":{\"431\":1}}],[\"让newfiber成为最后一个或上一个子fiber\",{\"1\":{\"361\":1}}],[\"让newfiber成为上一个子fiber\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"让最终的\",{\"1\":{\"323\":1}}],[\"让\",{\"1\":{\"296\":1,\"543\":1,\"648\":1,\"1004\":1,\"1028\":1,\"1333\":1}}],[\"让自己的调和过程变成可被中断\",{\"1\":{\"263\":1}}],[\"让用户觉得够快\",{\"1\":{\"262\":1}}],[\"让<mouse>动态渲染其内部组件\",{\"1\":{\"229\":1}}],[\"让函数组件也可以有\",{\"1\":{\"179\":1}}],[\"让函数式组件能以更简洁\",{\"1\":{\"174\":1}}],[\"插槽\",{\"0\":{\"501\":1}}],[\"插槽一样的\",{\"1\":{\"229\":1}}],[\"插值语法绑定的\",{\"1\":{\"702\":1}}],[\"插值语法\",{\"0\":{\"443\":1},\"1\":{\"442\":1}}],[\"插入vnode\",{\"1\":{\"675\":1,\"689\":1}}],[\"插入的新项\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"插入\",{\"1\":{\"323\":1,\"360\":1,\"374\":1,\"382\":1,\"396\":1,\"682\":1}}],[\"插入到父容器中\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"插入到指定的页面元素内部\",{\"1\":{\"134\":1}}],[\"插入dom节点\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"插件封装\",{\"0\":{\"1334\":1}}],[\"插件安装\",{\"1\":{\"1031\":2}}],[\"插件是一个包含\",{\"1\":{\"500\":1}}],[\"插件\",{\"0\":{\"500\":1},\"1\":{\"248\":1,\"406\":1,\"1031\":1}}],[\"出现主要是用于处理网页中的前端验证\",{\"1\":{\"1233\":1}}],[\"出现之前\",{\"1\":{\"89\":1}}],[\"出错之后异常难以识别\",{\"1\":{\"779\":1}}],[\"出栈等待销毁\",{\"1\":{\"1426\":1}}],[\"出栈项往上一项的children里推\",{\"1\":{\"661\":1}}],[\"出栈顶标签\",{\"1\":{\"661\":1}}],[\"出栈\",{\"1\":{\"656\":1,\"661\":1}}],[\"出栈操作\",{\"1\":{\"628\":1}}],[\"出于鼠标组件复用性考虑\",{\"1\":{\"228\":1}}],[\"坐标默认垂直居中\",{\"1\":{\"905\":1}}],[\"坐标和\",{\"1\":{\"905\":1}}],[\"坐标\",{\"1\":{\"227\":1,\"905\":6,\"908\":1,\"916\":1}}],[\"yes\",{\"1\":{\"950\":1}}],[\"yellow\",{\"1\":{\"560\":1}}],[\"yahei\",{\"1\":{\"882\":1}}],[\"yarn\",{\"1\":{\"809\":1}}],[\"yield\",{\"1\":{\"762\":3,\"763\":1,\"764\":2,\"765\":1,\"766\":1,\"767\":1,\"768\":3,\"770\":2,\"771\":1,\"777\":21,\"799\":1,\"820\":2,\"823\":4,\"1174\":9}}],[\"yyy\",{\"1\":{\"410\":1,\"411\":1,\"417\":1,\"460\":1}}],[\"you\",{\"1\":{\"307\":1,\"308\":1,\"312\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1,\"382\":1,\"1386\":3}}],[\"y\",{\"1\":{\"227\":3,\"228\":3,\"229\":5,\"230\":1,\"723\":3,\"904\":1,\"905\":5,\"908\":2,\"916\":2,\"1015\":3,\"1370\":9,\"1384\":2}}],[\"yzh\",{\"1\":{\"20\":2,\"22\":1,\"26\":1}}],[\"任意类型\",{\"1\":{\"1256\":1}}],[\"任意类型+\",{\"1\":{\"1255\":1}}],[\"任意数据类型两次取反\",{\"1\":{\"1251\":1}}],[\"任意非\",{\"1\":{\"1084\":1}}],[\"任意组件都能通过dispatch\",{\"1\":{\"813\":1}}],[\"任意组件都能从redux\",{\"1\":{\"813\":1}}],[\"任意可渲染的子元素\",{\"1\":{\"222\":1}}],[\"任务队列也称为消息队列\",{\"1\":{\"1076\":1}}],[\"任务的过期时间\",{\"1\":{\"395\":1}}],[\"任务的开始时间\",{\"1\":{\"395\":1}}],[\"任务最小堆\",{\"1\":{\"395\":1}}],[\"任务id计数器\",{\"1\":{\"395\":1}}],[\"任务优先级越高\",{\"1\":{\"391\":1}}],[\"任务更新\",{\"1\":{\"273\":1}}],[\"任务扫描虚拟\",{\"1\":{\"272\":1}}],[\"任何字符加反斜杠还表示字符本身\",{\"1\":{\"1381\":1}}],[\"任何值做减乘除模运算时都会转为\",{\"1\":{\"1256\":1}}],[\"任何值与字符串相加\",{\"1\":{\"1255\":1}}],[\"任何数据结构只要部署\",{\"1\":{\"1172\":1}}],[\"任何元素都可以浮动\",{\"1\":{\"978\":1}}],[\"任何形式的选择器都可以作为并集选择的一部分\",{\"1\":{\"872\":1}}],[\"任何一个返回\",{\"1\":{\"830\":1}}],[\"任何一个数据的变化\",{\"1\":{\"604\":1}}],[\"任何源自应用状态的东西都应该自动地获得\",{\"1\":{\"792\":1}}],[\"任何未被错误边界捕获的错误将会导致整个\",{\"1\":{\"244\":1}}],[\"任何重定向\",{\"1\":{\"60\":1}}],[\"门户\",{\"1\":{\"221\":1}}],[\"门\",{\"1\":{\"221\":1}}],[\"带标题\",{\"1\":{\"1020\":1}}],[\"带有定位的父级\",{\"1\":{\"999\":1}}],[\"带有内部状态\",{\"1\":{\"752\":1}}],[\"带\",{\"0\":{\"220\":1}}],[\"设计目的\",{\"0\":{\"1416\":1}}],[\"设计目的是为了共享自上而下的组件树中的\",{\"1\":{\"210\":1}}],[\"设计对提交的表单字符串进行关键词过滤\",{\"1\":{\"1383\":1}}],[\"设计方法\",{\"1\":{\"1383\":1}}],[\"设计是为了防止误操作\",{\"1\":{\"1151\":1}}],[\"设备的时候\",{\"1\":{\"966\":1}}],[\"设备\",{\"1\":{\"952\":1}}],[\"设备有多重分辨率\",{\"1\":{\"944\":1}}],[\"设定时间内\",{\"1\":{\"829\":1}}],[\"设定任务队列\",{\"1\":{\"391\":1}}],[\"设为\",{\"1\":{\"272\":1}}],[\"设置属性\",{\"1\":{\"1415\":1}}],[\"设置属性的值\",{\"1\":{\"1407\":1}}],[\"设置属性节点的值\",{\"1\":{\"1096\":1}}],[\"设置表单值\",{\"1\":{\"1317\":1}}],[\"设置文本内容\",{\"1\":{\"1316\":1}}],[\"设置文字在一行显示\",{\"1\":{\"926\":1}}],[\"设置元素的内容\",{\"1\":{\"1315\":1}}],[\"设置类样式方法\",{\"0\":{\"1297\":1}}],[\"设置原型对象\",{\"1\":{\"1185\":1}}],[\"设置断点\",{\"1\":{\"1155\":1}}],[\"设置鼠标偏移量\",{\"1\":{\"1139\":1}}],[\"设置包括标签在内的文本\",{\"1\":{\"1091\":1}}],[\"设置或获取被卷去头部或左侧\",{\"1\":{\"1325\":1}}],[\"设置或获取元素偏移\",{\"1\":{\"1325\":1}}],[\"设置或获取对象及其内容的\",{\"1\":{\"1091\":1}}],[\"设置或获取位于对象起始和结束标签内的文本\",{\"1\":{\"1090\":1}}],[\"设置或获取位于对象起始和结束标签内的\",{\"1\":{\"1090\":1}}],[\"设置或返回被选元素被卷去头部\",{\"1\":{\"1325\":1}}],[\"设置或返回从问号\",{\"1\":{\"1065\":1}}],[\"设置或返回从井号\",{\"1\":{\"1065\":1}}],[\"设置或返回完整的\",{\"1\":{\"1065\":1}}],[\"设置或返回当前\",{\"1\":{\"1065\":4}}],[\"设置或返回主机名和当前\",{\"1\":{\"1065\":1}}],[\"设置或检索伸缩盒对象的子元素的排列方式\",{\"1\":{\"927\":1}}],[\"设置为\",{\"1\":{\"1048\":1}}],[\"设置为属性默认值\",{\"1\":{\"897\":1}}],[\"设置图像的边框粗细\",{\"1\":{\"1044\":1}}],[\"设置图像高度\",{\"1\":{\"1044\":1}}],[\"设置图像宽度\",{\"1\":{\"1044\":1}}],[\"设置视频播放器的宽度\",{\"1\":{\"1021\":1}}],[\"设置视频播放器的高度\",{\"1\":{\"1021\":1}}],[\"设置外边距\",{\"1\":{\"970\":1}}],[\"设置内边距\",{\"1\":{\"969\":1}}],[\"设置好盒子样式\",{\"1\":{\"967\":1}}],[\"设置中\",{\"1\":{\"953\":1}}],[\"设置一组样式\",{\"1\":{\"1295\":1}}],[\"设置一次即可\",{\"1\":{\"939\":1}}],[\"设置一个定时器\",{\"1\":{\"204\":1}}],[\"设置背景图像是否固定或者随着页面的其余部分滚动\",{\"1\":{\"906\":1}}],[\"设置行间距离\",{\"1\":{\"893\":1}}],[\"设置样式\",{\"1\":{\"878\":1}}],[\"设置路由导航守卫函数\",{\"1\":{\"737\":1}}],[\"设置监听\",{\"1\":{\"698\":1}}],[\"设置惰性的布尔值为\",{\"1\":{\"630\":1}}],[\"设置默认值\",{\"1\":{\"510\":1}}],[\"设置的样式都是内联样式\",{\"1\":{\"1105\":1}}],[\"设置的回调\",{\"1\":{\"505\":1}}],[\"设置的自定义\",{\"1\":{\"51\":1,\"63\":1}}],[\"设置定时器\",{\"1\":{\"365\":1}}],[\"设置副作用\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"设置订阅\",{\"1\":{\"184\":1}}],[\"设置可以实现\",{\"1\":{\"67\":1}}],[\"设置回调函数\",{\"1\":{\"26\":1}}],[\"设置响应体\",{\"1\":{\"19\":1}}],[\"设置请求头信息\",{\"0\":{\"12\":1}}],[\"设置请求体的方式\",{\"0\":{\"11\":1}}],[\"设置请求方法和url\",{\"1\":{\"9\":1}}],[\"设置\",{\"0\":{\"10\":1,\"1072\":1},\"1\":{\"26\":1,\"86\":1,\"601\":1,\"840\":1,\"854\":1,\"950\":1,\"963\":1,\"1052\":1,\"1057\":1,\"1091\":1,\"1310\":1,\"1311\":1,\"1407\":2}}],[\"设置res的文本\",{\"1\":{\"9\":1}}],[\"显示参数\",{\"1\":{\"1303\":1}}],[\"显示的行数\",{\"1\":{\"1057\":1}}],[\"显示原生\",{\"1\":{\"1027\":1}}],[\"显示隐藏\",{\"0\":{\"1303\":1},\"1\":{\"914\":2}}],[\"显示省略符号来代表被修剪的文本\",{\"1\":{\"926\":1}}],[\"显示省略符号\",{\"1\":{\"897\":1}}],[\"显示省略号\",{\"1\":{\"897\":1}}],[\"显示属性\",{\"0\":{\"875\":1}}],[\"显示元素内容\",{\"1\":{\"854\":1}}],[\"显示样式\",{\"1\":{\"455\":1}}],[\"显示自定义名称\",{\"0\":{\"240\":1}}],[\"显示\",{\"1\":{\"206\":1}}],[\"支持插件扩展开发\",{\"1\":{\"1279\":1}}],[\"支持加\",{\"1\":{\"1014\":1}}],[\"支持像字体那样\",{\"1\":{\"920\":1}}],[\"支持多色图标了\",{\"1\":{\"920\":1}}],[\"支持多色图标\",{\"1\":{\"918\":1}}],[\"支持多种数据结构\",{\"1\":{\"580\":1}}],[\"支持按字体的方式去动态调整图标大小\",{\"1\":{\"918\":1}}],[\"支持\",{\"1\":{\"814\":1,\"918\":1,\"919\":1,\"920\":1,\"1130\":1}}],[\"支持在\",{\"1\":{\"800\":1}}],[\"支持竞态和并行\",{\"1\":{\"758\":1}}],[\"支持作为\",{\"1\":{\"525\":1}}],[\"支持组件等待加载完成前的加载过程中操作如\",{\"1\":{\"206\":1}}],[\"支持get和post请求\",{\"1\":{\"27\":1}}],[\"懒加载导入组件\",{\"1\":{\"737\":1}}],[\"懒加载\",{\"0\":{\"206\":1}}],[\"进一法\",{\"1\":{\"1370\":1}}],[\"进一步分离了\",{\"1\":{\"753\":1}}],[\"进一步加深对三大依赖收集器\",{\"1\":{\"623\":1}}],[\"进一步完善\",{\"1\":{\"609\":1}}],[\"进阶3\",{\"0\":{\"816\":1}}],[\"进阶2\",{\"0\":{\"815\":1}}],[\"进阶1\",{\"0\":{\"814\":1}}],[\"进阶技巧\",{\"0\":{\"205\":1},\"1\":{\"246\":1}}],[\"进入到预编译阶段\",{\"1\":{\"1420\":1}}],[\"进入执行栈\",{\"1\":{\"1076\":1}}],[\"进入工程目录\",{\"1\":{\"529\":1}}],[\"进入该组件本身的选项\",{\"1\":{\"499\":1}}],[\"进入该组件时调用\",{\"1\":{\"438\":1}}],[\"进入守卫\",{\"1\":{\"438\":1}}],[\"进入插入新节点的逻辑\",{\"1\":{\"357\":1,\"361\":1}}],[\"进入下一轮遍历\",{\"1\":{\"354\":1}}],[\"进入\",{\"1\":{\"323\":3}}],[\"进行引用\",{\"1\":{\"1391\":3}}],[\"进行运算\",{\"1\":{\"1230\":1}}],[\"进行判断\",{\"1\":{\"1015\":1}}],[\"进行标识\",{\"1\":{\"862\":1}}],[\"进行了修改\",{\"1\":{\"812\":1}}],[\"进行了封装\",{\"1\":{\"543\":1}}],[\"进行配置\",{\"1\":{\"800\":1}}],[\"进行相应更新\",{\"1\":{\"742\":1}}],[\"进行类型判断\",{\"1\":{\"628\":1,\"636\":1}}],[\"进行依赖收集\",{\"1\":{\"626\":1,\"627\":1}}],[\"进行更新\",{\"1\":{\"505\":1}}],[\"进行比较\",{\"1\":{\"480\":1}}],[\"进行全属性比较与遍历\",{\"1\":{\"323\":1}}],[\"进行插入操作\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"进行操作\",{\"1\":{\"236\":1}}],[\"进行\",{\"1\":{\"161\":1,\"332\":1,\"461\":1,\"671\":1}}],[\"进行任意转换处理\",{\"1\":{\"42\":1,\"43\":1}}],[\"利用闭包获得\",{\"1\":{\"1456\":1}}],[\"利用闭包变量与\",{\"1\":{\"620\":1}}],[\"利用$对\",{\"1\":{\"1284\":1}}],[\"利用空闲时间进行更新\",{\"1\":{\"259\":1}}],[\"利用\",{\"1\":{\"204\":1,\"388\":1,\"597\":1,\"792\":1,\"967\":2}}],[\"节省代码量\",{\"1\":{\"1291\":1}}],[\"节省大量服务器宽带资源和数据空间\",{\"1\":{\"955\":1}}],[\"节省\",{\"1\":{\"862\":1}}],[\"节流函数结合\",{\"1\":{\"204\":1}}],[\"节点介绍\",{\"0\":{\"1078\":1}}],[\"节点生成\",{\"1\":{\"740\":1}}],[\"节点内部递归遍历子节点\",{\"1\":{\"695\":1}}],[\"节点内部的children数组内元素可以嵌套调用\",{\"1\":{\"692\":1}}],[\"节点不存在children时进入第一个if判断而停止\",{\"1\":{\"675\":1,\"689\":1}}],[\"节点不会重新创建\",{\"1\":{\"92\":1}}],[\"节点和\",{\"1\":{\"296\":1}}],[\"节点进行\",{\"1\":{\"296\":1}}],[\"节点遍历\",{\"1\":{\"274\":1}}],[\"节点或\",{\"1\":{\"274\":1}}],[\"节点新增处理阶段\",{\"1\":{\"274\":1}}],[\"节点首次创建后协调虚拟\",{\"1\":{\"272\":1}}],[\"节点后\",{\"1\":{\"271\":1}}],[\"节点链\",{\"1\":{\"270\":1}}],[\"节点即可\",{\"1\":{\"270\":1}}],[\"节点上\",{\"1\":{\"221\":1,\"330\":1}}],[\"节点是否存在子节点更新标记\",{\"1\":{\"162\":1}}],[\"节点的类型不同\",{\"1\":{\"1078\":1}}],[\"节点的获取\",{\"1\":{\"696\":1}}],[\"节点的更新\",{\"1\":{\"274\":1}}],[\"节点的\",{\"1\":{\"162\":8}}],[\"节点连起来形成\",{\"1\":{\"162\":1}}],[\"节点\",{\"1\":{\"92\":2,\"162\":2,\"222\":1,\"269\":1,\"270\":3,\"274\":2,\"296\":1,\"297\":1,\"323\":1,\"330\":1,\"354\":1,\"667\":1,\"672\":1,\"1095\":1}}],[\"建立该对象的属性与属性值\",{\"1\":{\"1423\":1}}],[\"建立出的目录路径\",{\"1\":{\"1045\":1}}],[\"建立最小堆\",{\"1\":{\"393\":1}}],[\"建立好更新队列后\",{\"1\":{\"272\":1}}],[\"建立鼠标跟踪组件\",{\"0\":{\"227\":1}}],[\"建立\",{\"1\":{\"201\":1,\"1066\":1}}],[\"建议不加\",{\"1\":{\"1341\":1}}],[\"建议\",{\"1\":{\"1000\":1}}],[\"建议遵循顺序\",{\"1\":{\"1000\":1}}],[\"建议展开格式\",{\"0\":{\"857\":1}}],[\"建议先熟悉了解模板引擎的指针思想与栈结构遍历\",{\"1\":{\"660\":1}}],[\"建议用方法调用或计算属性去替换过滤器\",{\"1\":{\"564\":1}}],[\"建议使用vscode\",{\"1\":{\"1031\":1}}],[\"建议使用\",{\"1\":{\"154\":1,\"818\":1}}],[\"建议弃用\",{\"1\":{\"154\":1}}],[\"适配布局\",{\"0\":{\"962\":1}}],[\"适配器方法发送请求\",{\"1\":{\"68\":1}}],[\"适用于函数作为某个对象的方法存在时使用\",{\"1\":{\"1446\":1}}],[\"适用于一些简单逻辑的处理\",{\"1\":{\"466\":1}}],[\"适用于\",{\"1\":{\"454\":3,\"457\":2,\"502\":1}}],[\"适合于\",{\"1\":{\"927\":1}}],[\"适合于样式比较多的情况\",{\"1\":{\"868\":1}}],[\"适合修改简单样式\",{\"1\":{\"867\":1}}],[\"适合移动\",{\"1\":{\"402\":1}}],[\"适合使用\",{\"1\":{\"197\":1}}],[\"适时地让出\",{\"1\":{\"263\":1}}],[\"依然是通过\",{\"1\":{\"636\":1}}],[\"依次向上级作用域查找\",{\"1\":{\"1012\":1}}],[\"依次调用\",{\"1\":{\"621\":1}}],[\"依次取出\",{\"1\":{\"68\":1}}],[\"依旧可以通过\",{\"1\":{\"430\":1}}],[\"依序进行更新操作\",{\"1\":{\"323\":1}}],[\"依赖查询\",{\"0\":{\"832\":1}}],[\"依赖外部库等问题进行了优化\",{\"1\":{\"809\":1}}],[\"依赖更新后重设\",{\"1\":{\"732\":1}}],[\"依赖收集器\",{\"1\":{\"700\":1}}],[\"依赖收集系统是围绕响应式原理\",{\"1\":{\"700\":1}}],[\"依赖值\",{\"1\":{\"636\":1}}],[\"依赖于\",{\"1\":{\"635\":1,\"636\":1}}],[\"依赖哪个数据\",{\"1\":{\"608\":1}}],[\"依赖变化时触发的回调\",{\"1\":{\"607\":1,\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"依赖变化时生成新函数\",{\"1\":{\"196\":1}}],[\"依赖就是\",{\"1\":{\"605\":1}}],[\"依赖\",{\"1\":{\"604\":1,\"608\":1,\"634\":1,\"635\":1,\"832\":1}}],[\"依赖和配置\",{\"1\":{\"573\":1}}],[\"依赖改变的\",{\"1\":{\"450\":1}}],[\"依赖数组\",{\"1\":{\"373\":1}}],[\"依赖执行初始挂载时不触发\",{\"1\":{\"200\":1}}],[\"空串\",{\"1\":{\"1413\":1}}],[\"空串或者是一个全空格的字符串\",{\"1\":{\"1250\":1}}],[\"空字符串转为\",{\"1\":{\"1413\":1}}],[\"空字符串为假\",{\"1\":{\"1271\":1}}],[\"空值合并操作符\",{\"0\":{\"1264\":1}}],[\"空指针异常\",{\"1\":{\"1249\":1}}],[\"空类型\",{\"1\":{\"1241\":1}}],[\"空心圆\",{\"1\":{\"1052\":1}}],[\"空链接\",{\"1\":{\"1043\":1}}],[\"空白会被浏览器保留\",{\"1\":{\"898\":1}}],[\"空白会被浏览器忽略\",{\"1\":{\"898\":1}}],[\"空节点\",{\"1\":{\"696\":1}}],[\"空数组入栈2\",{\"1\":{\"661\":1,\"662\":1}}],[\"空数组的对象\",{\"1\":{\"661\":1}}],[\"空格规范\",{\"0\":{\"859\":1}}],[\"空格\",{\"1\":{\"472\":1}}],[\"空\",{\"1\":{\"196\":1}}],[\"空行\",{\"1\":{\"7\":1,\"8\":1,\"9\":1}}],[\"何时生成新函数\",{\"1\":{\"196\":1}}],[\"惰性匹配则体现最小化匹配原则\",{\"1\":{\"1385\":1}}],[\"惰性匹配将遵循另一种算法\",{\"1\":{\"1385\":1}}],[\"惰性匹配\",{\"0\":{\"1385\":1}}],[\"惰性函数\",{\"0\":{\"196\":1}}],[\"惰性取值不能够以违反模式限定的条件而返回\",{\"1\":{\"1385\":1}}],[\"惰性取值的原理\",{\"1\":{\"630\":1}}],[\"惰性取值\",{\"0\":{\"193\":1}}],[\"决定是否采用深度监视\",{\"1\":{\"451\":1}}],[\"决定\",{\"1\":{\"192\":1}}],[\"祖孙\",{\"1\":{\"560\":1}}],[\"祖孙通信\",{\"0\":{\"517\":1}}],[\"祖孙环境\",{\"0\":{\"192\":1}}],[\"祖先组件\",{\"1\":{\"192\":1}}],[\"应使用双斜杠\",{\"1\":{\"1381\":1}}],[\"应该结合使用\",{\"1\":{\"1403\":1}}],[\"应该为选择操作的多个表达式分组加上小括号\",{\"1\":{\"1383\":1}}],[\"应该说是预处理器最精髓的功能之一了\",{\"1\":{\"1013\":1}}],[\"应该说这才是未来的主流\",{\"1\":{\"920\":1}}],[\"应该如何显示\",{\"1\":{\"897\":1}}],[\"应该输出36\",{\"1\":{\"634\":1}}],[\"应该呈现出它应有交互的本质形式\",{\"1\":{\"248\":1}}],[\"应是样式对象\",{\"1\":{\"455\":1}}],[\"应用于页面\",{\"1\":{\"918\":1,\"919\":1,\"920\":1}}],[\"应用在组件标签上是组件实例对象\",{\"1\":{\"497\":1}}],[\"应用在\",{\"1\":{\"497\":1}}],[\"应用部署上线时需要后端人员支持\",{\"1\":{\"439\":1}}],[\"应用插件\",{\"1\":{\"424\":1}}],[\"应用中多个组件的共享状态进行集中式的管理\",{\"1\":{\"406\":1}}],[\"应用场景有\",{\"1\":{\"266\":1}}],[\"应用场景\",{\"0\":{\"234\":1,\"243\":1},\"1\":{\"555\":1,\"556\":1}}],[\"应用\",{\"0\":{\"226\":1,\"1170\":1},\"1\":{\"421\":1,\"553\":1,\"1178\":1}}],[\"应用加壳的配置文件\",{\"1\":{\"138\":1}}],[\"应当与\",{\"1\":{\"191\":1}}],[\"功能比较强大\",{\"1\":{\"1319\":1}}],[\"功能类似\",{\"1\":{\"560\":2}}],[\"功能一致的配置大多跟\",{\"1\":{\"571\":1}}],[\"功能一致\",{\"1\":{\"553\":1}}],[\"功能效果的代码集合\",{\"1\":{\"486\":1}}],[\"功能\",{\"1\":{\"443\":1,\"444\":1,\"466\":1,\"754\":1}}],[\"功能性自定义\",{\"1\":{\"198\":1}}],[\"功能与\",{\"1\":{\"190\":1,\"1194\":1}}],[\"功能界面的组件化编码流程\",{\"0\":{\"132\":1}}],[\"引发函数内重新调用\",{\"1\":{\"732\":1}}],[\"引发用时较长的更新判断\",{\"1\":{\"257\":1}}],[\"引擎会解析这段代码\",{\"1\":{\"1423\":1}}],[\"引擎会以栈的数据结构对这些执行进行处理\",{\"1\":{\"1422\":1}}],[\"引擎会自动将原始类型的值转为包装对象实例\",{\"1\":{\"1418\":1}}],[\"引擎的执行过程\",{\"1\":{\"1419\":1}}],[\"引擎\",{\"1\":{\"1413\":1}}],[\"引擎解释成小数点\",{\"1\":{\"1413\":1}}],[\"引擎赋予的功能\",{\"1\":{\"597\":1}}],[\"引擎更喜欢稳定的对象\",{\"1\":{\"524\":1}}],[\"引擎和页面渲染引擎在同一个渲染线程\",{\"1\":{\"261\":1}}],[\"引用类型存放于堆内存\",{\"1\":{\"1396\":1}}],[\"引用类型值\",{\"1\":{\"656\":1}}],[\"引用包含输入字段的预定义选项的\",{\"1\":{\"1019\":1}}],[\"引用的是第\",{\"1\":{\"1391\":2}}],[\"引用的升级\",{\"1\":{\"917\":1}}],[\"引用的指向就是子组件实例\",{\"1\":{\"513\":1}}],[\"引用\",{\"0\":{\"918\":1,\"919\":1,\"920\":1},\"1\":{\"917\":3,\"919\":1}}],[\"引用地址相同\",{\"1\":{\"683\":1,\"690\":1}}],[\"引用指向的就是该\",{\"1\":{\"513\":1}}],[\"引用容器\",{\"0\":{\"188\":1}}],[\"引入了\",{\"1\":{\"1275\":1}}],[\"引入了一个名为\",{\"1\":{\"644\":1}}],[\"引入模块数据语法\",{\"0\":{\"1191\":1}}],[\"引入的异步编程的新解决方案\",{\"1\":{\"1175\":1}}],[\"引入同样遵循从小到大的方法\",{\"1\":{\"964\":1}}],[\"引入资源\",{\"1\":{\"964\":1}}],[\"引入一次就行\",{\"1\":{\"920\":1}}],[\"引入方式总结\",{\"1\":{\"868\":1}}],[\"引入方式\",{\"1\":{\"865\":1}}],[\"引入他的主要作用是方便测试\",{\"1\":{\"764\":1}}],[\"引入状态\",{\"1\":{\"749\":1}}],[\"引入为count组件服务的reducer\",{\"1\":{\"749\":1}}],[\"引入creactestore\",{\"1\":{\"749\":1}}],[\"引入式非文件组件式项目与\",{\"1\":{\"701\":1}}],[\"引入异步组件\",{\"1\":{\"568\":1}}],[\"引入组件\",{\"1\":{\"490\":1}}],[\"引入\",{\"1\":{\"252\":1,\"822\":1,\"966\":1,\"1192\":1}}],[\"引入到\",{\"1\":{\"139\":1}}],[\"启动应用\",{\"1\":{\"820\":1}}],[\"启动一个任务时\",{\"1\":{\"765\":1}}],[\"启动\",{\"1\":{\"272\":1,\"527\":1}}],[\"启动定时器等异步任务\",{\"1\":{\"482\":1}}],[\"启动定时器\",{\"1\":{\"184\":1}}],[\"启动项目\",{\"1\":{\"137\":1,\"493\":1}}],[\"副作用处理\",{\"0\":{\"814\":1}}],[\"副作用转移到单独的saga\",{\"1\":{\"779\":1}}],[\"副作用的意义\",{\"0\":{\"365\":1}}],[\"副作用的标识\",{\"1\":{\"270\":1,\"272\":1}}],[\"副作用标识\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"副作用标识来区分\",{\"1\":{\"272\":1}}],[\"副作用清空\",{\"1\":{\"272\":1}}],[\"副作用\",{\"1\":{\"184\":2,\"780\":1}}],[\"副作用与操作\",{\"0\":{\"184\":1}}],[\"副作用监听\",{\"0\":{\"183\":1}}],[\"动画队列及停止\",{\"0\":{\"1306\":1}}],[\"动画效果\",{\"0\":{\"1302\":1}}],[\"动画支持\",{\"1\":{\"1279\":1}}],[\"动画设计和\",{\"1\":{\"1279\":1}}],[\"动画\",{\"1\":{\"1155\":1}}],[\"动\",{\"1\":{\"978\":1}}],[\"动机\",{\"0\":{\"177\":1}}],[\"动态规划\",{\"1\":{\"1458\":1}}],[\"动态的\",{\"1\":{\"1007\":1}}],[\"动态固定\",{\"1\":{\"995\":1}}],[\"动态修改页面title\",{\"1\":{\"739\":1}}],[\"动态调整\",{\"1\":{\"736\":1}}],[\"动态添加路由\",{\"0\":{\"729\":1}}],[\"动态创建的元素\",{\"1\":{\"1328\":1}}],[\"动态创建\",{\"0\":{\"1229\":1}}],[\"动态创建元素\",{\"0\":{\"1095\":1}}],[\"动态创建<routes>和<route>\",{\"1\":{\"718\":1}}],[\"动态创建一个\",{\"1\":{\"26\":1}}],[\"动态构建用户界面的渐进式\",{\"1\":{\"401\":1}}],[\"动态控制定时器\",{\"1\":{\"201\":1}}],[\"动态显示初始化数据\",{\"1\":{\"132\":1}}],[\"向前边插入元素以后\",{\"1\":{\"1357\":1}}],[\"向前跳转2个页面\",{\"1\":{\"1067\":1}}],[\"向前跳转1个页面\",{\"1\":{\"1067\":1}}],[\"向数组开头添加一个或多个元素\",{\"1\":{\"1357\":1}}],[\"向控制台输出一个内容\",{\"1\":{\"1237\":1}}],[\"向下滚\",{\"1\":{\"1146\":2}}],[\"向下调整堆结构\",{\"1\":{\"392\":1}}],[\"向目标元素进行事件捕获\",{\"1\":{\"1133\":1}}],[\"向后跳转2个页面\",{\"1\":{\"1067\":1}}],[\"向后跳转一个页面\",{\"1\":{\"1067\":1}}],[\"向后翻页\",{\"1\":{\"1067\":1}}],[\"向后兼容的\",{\"1\":{\"176\":1}}],[\"向右浮动\",{\"1\":{\"977\":1}}],[\"向左浮动\",{\"1\":{\"977\":1}}],[\"向某些选择器添加特殊的效果\",{\"1\":{\"873\":1}}],[\"向任务最小堆里面添加任务\",{\"1\":{\"395\":1}}],[\"向上滚\",{\"1\":{\"1146\":2}}],[\"向上调整堆结构\",{\"1\":{\"392\":1}}],[\"向上冒泡属性\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"向fiber上推入需要删除的子节点\",{\"1\":{\"348\":1}}],[\"向外抛出一个层次分明的完整dom\",{\"1\":{\"675\":1,\"689\":1}}],[\"向外\",{\"1\":{\"313\":1}}],[\"向外提供特定功能的\",{\"1\":{\"128\":1,\"485\":1}}],[\"向根节点\",{\"1\":{\"277\":1}}],[\"向\",{\"1\":{\"234\":1}}],[\"你只需要记住\",{\"1\":{\"1231\":1}}],[\"你试图改变obj的a属性\",{\"1\":{\"601\":3}}],[\"你试图访问obj的a属性\",{\"1\":{\"601\":3}}],[\"你好s\",{\"1\":{\"515\":1}}],[\"你好\",{\"1\":{\"427\":1,\"429\":1,\"430\":2}}],[\"你可以安心的使用\",{\"1\":{\"1231\":1}}],[\"你可以把\",{\"1\":{\"365\":1}}],[\"你可以自定义降级后的\",{\"1\":{\"242\":1}}],[\"你可以将\",{\"1\":{\"207\":1}}],[\"你同样可以将错误日志上报给服务器\",{\"1\":{\"242\":1}}],[\"你甚至可以用一个\",{\"1\":{\"207\":1}}],[\"你不必现在就去学习或使用\",{\"1\":{\"176\":1}}],[\"你无需重写任何已有代码就可以在一些组件中尝试\",{\"1\":{\"176\":1}}],[\"特有\",{\"1\":{\"1413\":1}}],[\"特殊值\",{\"1\":{\"950\":1}}],[\"特殊情况链接<a>里面可以放块级元素\",{\"1\":{\"877\":1}}],[\"特殊情况使用\",{\"1\":{\"864\":1}}],[\"特殊情况除外\",{\"1\":{\"858\":1}}],[\"特殊情况\",{\"1\":{\"172\":1,\"540\":1,\"1411\":1}}],[\"特粗体\",{\"1\":{\"884\":1}}],[\"特别是后台展示数据的时候\",{\"1\":{\"1047\":1}}],[\"特别不能放<div>\",{\"1\":{\"876\":1}}],[\"特别注意\",{\"1\":{\"430\":2,\"489\":1}}],[\"特征\",{\"1\":{\"873\":1}}],[\"特意为每个\",{\"1\":{\"621\":1}}],[\"特定\",{\"1\":{\"486\":1}}],[\"特性\",{\"0\":{\"1008\":1,\"1019\":1},\"1\":{\"176\":1}}],[\"特点是\",{\"1\":{\"918\":1}}],[\"特点\",{\"0\":{\"81\":1,\"176\":1,\"402\":1,\"758\":1,\"782\":1,\"1168\":1},\"1\":{\"29\":1,\"447\":1,\"457\":2,\"460\":1,\"854\":1,\"864\":1,\"876\":1,\"877\":1,\"878\":1,\"991\":1,\"992\":1,\"993\":1,\"994\":1,\"995\":1,\"996\":1,\"1036\":2,\"1038\":1}}],[\"才返回成功\",{\"1\":{\"1226\":1}}],[\"才可触发鼠标按下和松开事件\",{\"1\":{\"1138\":1}}],[\"才是调用\",{\"1\":{\"703\":1}}],[\"才进行精细化比较\",{\"1\":{\"672\":1}}],[\"才能够执行\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"才能多选一\",{\"1\":{\"1057\":1}}],[\"才能修改数据\",{\"1\":{\"596\":1}}],[\"才能工作\",{\"1\":{\"169\":1}}],[\"才\",{\"1\":{\"505\":1}}],[\"才会来执行它\",{\"1\":{\"1076\":1}}],[\"才会执行后一个任务\",{\"1\":{\"1075\":1}}],[\"才会执行\",{\"1\":{\"625\":1,\"628\":1}}],[\"才会执行指定回调函数中的代码\",{\"1\":{\"505\":1}}],[\"才会触发\",{\"1\":{\"607\":1}}],[\"才会触发回调函数\",{\"1\":{\"186\":1}}],[\"才会收集依赖\",{\"1\":{\"605\":1}}],[\"才会重新更新函数\",{\"1\":{\"197\":1}}],[\"才考虑使用\",{\"1\":{\"117\":1}}],[\"由此可见\",{\"1\":{\"1424\":1}}],[\"由浏览器创建\",{\"1\":{\"1349\":1}}],[\"由字母\",{\"1\":{\"1240\":1}}],[\"由用户自定义\",{\"1\":{\"1057\":2}}],[\"由大到小依次减\",{\"1\":{\"1035\":1}}],[\"由\",{\"1\":{\"796\":1,\"797\":1,\"854\":1,\"1339\":1}}],[\"由最终的\",{\"1\":{\"487\":1}}],[\"由于表达式分组可以相互嵌套\",{\"1\":{\"1391\":1}}],[\"由于字母\",{\"1\":{\"1381\":1}}],[\"由于主线程不断的重复获得任务\",{\"1\":{\"1076\":1}}],[\"由于事件不断调用导致定时器叠加\",{\"1\":{\"1071\":1}}],[\"由于隐私原因\",{\"1\":{\"1067\":1}}],[\"由于历史原因\",{\"1\":{\"1064\":1}}],[\"由于浏览器内核的差异性\",{\"1\":{\"1027\":1}}],[\"由于各语言的功能函数各不相同\",{\"1\":{\"1008\":1}}],[\"由于浮动元素不再占有原文档流的位置\",{\"1\":{\"982\":1}}],[\"由于嵌套块元素垂直外边距塌陷\",{\"1\":{\"971\":1}}],[\"由于dom对象之间浅拷贝相互引用\",{\"1\":{\"675\":1,\"689\":1}}],[\"由于mustache在模板中默认将\",{\"1\":{\"657\":1}}],[\"由于获取的时候触发了\",{\"1\":{\"621\":1}}],[\"由于继承关系\",{\"1\":{\"601\":1}}],[\"由于click被native修饰了\",{\"1\":{\"515\":1}}],[\"由于老\",{\"1\":{\"323\":1}}],[\"由于\",{\"1\":{\"323\":2,\"621\":1,\"672\":1}}],[\"由reactdom\",{\"1\":{\"167\":1,\"171\":1}}],[\"由facebook开源\",{\"1\":{\"80\":1}}],[\"订阅监听\",{\"1\":{\"823\":1}}],[\"订阅者与发布者\",{\"1\":{\"790\":1}}],[\"订阅发布系统的集成化管理应用\",{\"1\":{\"758\":1}}],[\"订阅系统完善\",{\"0\":{\"610\":1}}],[\"订阅\",{\"0\":{\"609\":1,\"621\":1},\"1\":{\"621\":2}}],[\"订阅消息\",{\"1\":{\"479\":1}}],[\"订阅消息等\",{\"1\":{\"167\":1}}],[\"订阅博客帖子与发布博客帖子的组件\",{\"1\":{\"234\":1}}],[\"订阅或者手动修改过\",{\"1\":{\"184\":1}}],[\"订阅方法\",{\"1\":{\"116\":1}}],[\"卸载阶段\",{\"1\":{\"165\":1,\"167\":1,\"171\":1}}],[\"旧版本浏览器会被忽略\",{\"1\":{\"1452\":1}}],[\"旧版本浏览器\",{\"1\":{\"1140\":1}}],[\"旧版本的浏览器会将\",{\"1\":{\"964\":1}}],[\"旧vnode只有text\",{\"1\":{\"683\":1,\"690\":1}}],[\"旧后>=旧前\",{\"1\":{\"683\":1,\"691\":1}}],[\"旧后节点\",{\"1\":{\"683\":1,\"691\":1}}],[\"旧后节点清除\",{\"1\":{\"676\":1}}],[\"旧后指针\",{\"1\":{\"683\":1,\"691\":1}}],[\"旧后\",{\"1\":{\"676\":1}}],[\"旧前<=旧后\",{\"1\":{\"683\":1,\"691\":1}}],[\"旧前节点\",{\"1\":{\"683\":1,\"691\":1}}],[\"旧前节点清除\",{\"1\":{\"676\":1}}],[\"旧前指针\",{\"1\":{\"683\":1,\"691\":1}}],[\"旧前指针<=旧后指针\",{\"1\":{\"676\":1}}],[\"旧前\",{\"1\":{\"676\":1,\"680\":1}}],[\"旧节点\",{\"1\":{\"682\":1}}],[\"旧节点存在随机删除\",{\"1\":{\"676\":1}}],[\"旧节点移位\",{\"1\":{\"676\":1}}],[\"旧节点删除\",{\"1\":{\"676\":1}}],[\"旧节点之后追加\",{\"1\":{\"676\":1}}],[\"旧节点之前追加\",{\"1\":{\"676\":1}}],[\"旧节点中间追加\",{\"1\":{\"676\":1}}],[\"旧节点的父节点真实存在\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"旧生命周期流程图\",{\"0\":{\"166\":1}}],[\"旧\",{\"0\":{\"164\":1}}],[\"旧虚拟\",{\"1\":{\"161\":2,\"461\":2}}],[\"生态\",{\"1\":{\"246\":1}}],[\"生命周期实际上就是根据组件从创建\",{\"1\":{\"703\":1}}],[\"生命周期钩子运行的\",{\"1\":{\"585\":1}}],[\"生命周期方法和整个组件树的构造函数中捕获错误\",{\"1\":{\"241\":1}}],[\"生命周期可以分成三个阶段\",{\"1\":{\"165\":1}}],[\"生命周期流程\",{\"0\":{\"164\":1,\"168\":1}}],[\"生命周期回调函数\",{\"1\":{\"163\":1}}],[\"生命周期\",{\"0\":{\"163\":1,\"476\":1,\"542\":1,\"585\":1,\"703\":1},\"1\":{\"246\":1,\"522\":1}}],[\"生成实例\",{\"1\":{\"1431\":1}}],[\"生成之后\",{\"1\":{\"1321\":2}}],[\"生成器打印结果\",{\"1\":{\"1174\":1}}],[\"生成器是一个特殊的函数\",{\"1\":{\"1174\":1}}],[\"生成器\",{\"0\":{\"1174\":1}}],[\"生成最后的\",{\"1\":{\"1025\":1}}],[\"生成最新状态\",{\"1\":{\"272\":1}}],[\"生成一个包含特殊边界的框\",{\"1\":{\"1020\":1}}],[\"生成一个长度为\",{\"1\":{\"323\":2}}],[\"生成灰色水平分割线\",{\"1\":{\"1020\":1}}],[\"生成多个标签\",{\"1\":{\"937\":1}}],[\"生成标签\",{\"1\":{\"937\":1}}],[\"生成嵌套模式的\",{\"1\":{\"692\":1}}],[\"生成函数在数组遍历时\",{\"1\":{\"658\":1}}],[\"生成函数\",{\"1\":{\"658\":1}}],[\"生成初步tokens\",{\"1\":{\"647\":1}}],[\"生成递归结构的观察者类\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"生成val闭包变量\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"生成新的路由结构嵌入\",{\"1\":{\"732\":1}}],[\"生成新的虚拟\",{\"1\":{\"480\":1}}],[\"生成新的状态\",{\"1\":{\"103\":1}}],[\"生成与\",{\"1\":{\"416\":1,\"417\":1}}],[\"生成\",{\"0\":{\"647\":1},\"1\":{\"161\":1,\"461\":1,\"662\":1,\"667\":1,\"675\":1,\"1370\":1}}],[\"条\",{\"1\":{\"1376\":1}}],[\"条件分支语句\",{\"0\":{\"1269\":1}}],[\"条件表达式\",{\"1\":{\"1263\":1}}],[\"条件语句\",{\"1\":{\"1015\":3}}],[\"条件判断语句\",{\"0\":{\"1268\":1}}],[\"条件判断\",{\"0\":{\"1015\":1},\"1\":{\"1015\":1}}],[\"条件判断或者子函数中调用\",{\"1\":{\"178\":1}}],[\"条件渲染指令\",{\"0\":{\"457\":1}}],[\"条件渲染\",{\"0\":{\"456\":1}}],[\"条件后\",{\"1\":{\"162\":1}}],[\"条数据\",{\"1\":{\"96\":1}}],[\"子类可继承父类构造方法之外的方法\",{\"1\":{\"1432\":1}}],[\"子串中的字符数\",{\"1\":{\"1376\":1}}],[\"子盒子不需要占有位置\",{\"1\":{\"997\":1}}],[\"子盒子浮动不占有位置\",{\"1\":{\"982\":1}}],[\"子级绝对定位\",{\"1\":{\"997\":1}}],[\"子级或内部的元素是绝对定位的话\",{\"1\":{\"997\":1}}],[\"子绝父相\",{\"0\":{\"997\":1},\"1\":{\"999\":1}}],[\"子元素绑定事件可委派给父元素\",{\"1\":{\"1328\":1}}],[\"子元素继承后权重仍为\",{\"1\":{\"932\":1}}],[\"子元素没有设置行高\",{\"1\":{\"931\":1}}],[\"子元素可以继承父元素的样式\",{\"1\":{\"931\":1}}],[\"子元素选择器\",{\"1\":{\"871\":1}}],[\"子标签会继承父标签的某些样式\",{\"1\":{\"931\":1}}],[\"子代选择器\",{\"1\":{\"873\":1,\"1287\":1}}],[\"子选择器\",{\"0\":{\"871\":1},\"1\":{\"869\":1,\"871\":1}}],[\"子传父\",{\"1\":{\"514\":1}}],[\"子捕获\",{\"1\":{\"301\":1}}],[\"子冒泡\",{\"1\":{\"301\":1}}],[\"子节点索引\",{\"1\":{\"391\":1}}],[\"子节点编号\",{\"1\":{\"391\":1}}],[\"子节点有删除\",{\"1\":{\"360\":1,\"374\":1,\"396\":1}}],[\"子节点\",{\"1\":{\"323\":1,\"702\":1}}],[\"子节点对应的副作用标识\",{\"1\":{\"270\":1,\"272\":1}}],[\"子节点是否存在变化\",{\"1\":{\"162\":1}}],[\"子释放\",{\"1\":{\"172\":1}}],[\"子父\",{\"1\":{\"172\":1}}],[\"子\",{\"1\":{\"172\":7,\"295\":2}}],[\"子组件中需要声明emits事件之后才能在setup中使用\",{\"1\":{\"563\":1}}],[\"子组件添加数据\",{\"1\":{\"521\":1}}],[\"子组件提供给父组件的参数\",{\"1\":{\"520\":1}}],[\"子组件通过\",{\"1\":{\"511\":1}}],[\"子组件用\",{\"1\":{\"510\":1}}],[\"子组件读取\",{\"1\":{\"149\":1}}],[\"子组件内部不要修改\",{\"1\":{\"148\":1}}],[\"子组件传给父组件信息的最常见方式\",{\"1\":{\"108\":1}}],[\"子组件接收到数据之后\",{\"1\":{\"510\":1}}],[\"子组件接收\",{\"1\":{\"106\":1}}],[\"子组件\",{\"1\":{\"105\":2,\"502\":1,\"504\":3,\"511\":1,\"512\":1,\"513\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"520\":1}}],[\"子组件的\",{\"1\":{\"92\":2}}],[\"子组件的重新渲染并不会导致其也重新渲染\",{\"1\":{\"92\":1}}],[\"项本身是值\",{\"1\":{\"816\":1}}],[\"项元素是\",{\"1\":{\"650\":1}}],[\"项\",{\"1\":{\"648\":1}}],[\"项目进行\",{\"1\":{\"1007\":1}}],[\"项目整体打包之前\",{\"1\":{\"966\":1}}],[\"项目\",{\"1\":{\"816\":1}}],[\"项目暂无作用\",{\"1\":{\"701\":1}}],[\"项目开发中不涉及模板编译步骤\",{\"1\":{\"696\":1}}],[\"项目的根目录有\",{\"1\":{\"582\":1}}],[\"项目中\",{\"1\":{\"702\":1}}],[\"项目中使用装饰器\",{\"1\":{\"800\":1}}],[\"项目中使用\",{\"1\":{\"458\":1}}],[\"项目中是父子组件的关系\",{\"1\":{\"112\":1}}],[\"项条件均无变化的情况\",{\"1\":{\"162\":1}}],[\"项条件有一项发生变化\",{\"1\":{\"162\":2}}],[\"项存在更新标记\",{\"1\":{\"162\":1}}],[\"项判断\",{\"1\":{\"162\":1}}],[\"找不到则一直查找全局作用域\",{\"1\":{\"1423\":1}}],[\"找不到为\",{\"1\":{\"1199\":1}}],[\"找它的弟弟\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"找出发生了变化的\",{\"1\":{\"162\":1}}],[\"找到则会停止找\",{\"1\":{\"1423\":1}}],[\"找到第一个满足条件的元素即终止循环\",{\"1\":{\"1199\":1}}],[\"找到为\",{\"1\":{\"1199\":1}}],[\"找到目标单元格\",{\"1\":{\"1050\":1}}],[\"找到了就将旧节点移动到旧前指针\",{\"1\":{\"681\":1}}],[\"找到所有不需要移动的元素\",{\"1\":{\"524\":1}}],[\"找到main\",{\"1\":{\"518\":1}}],[\"找到可以插在它前面的那个fiber对应的真实dom\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"找到要插入的锚点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"找到组件\",{\"1\":{\"165\":1}}],[\"找到\",{\"1\":{\"134\":1,\"800\":1}}],[\"树上\",{\"1\":{\"644\":1}}],[\"树查看\",{\"1\":{\"272\":1}}],[\"树重构\",{\"1\":{\"272\":1}}],[\"树向单向链表的转化\",{\"1\":{\"268\":1}}],[\"树构建\",{\"1\":{\"266\":1}}],[\"树中的位置无关\",{\"1\":{\"223\":1}}],[\"树中判断节点的复用条件有\",{\"1\":{\"162\":1}}],[\"树的构建\",{\"1\":{\"272\":1}}],[\"树的遍历\",{\"0\":{\"266\":1}}],[\"树的祖先\",{\"1\":{\"223\":1}}],[\"树的挂载顺序是固定的\",{\"1\":{\"223\":1}}],[\"树的任意地方\",{\"1\":{\"223\":1}}],[\"树对比\",{\"1\":{\"162\":1}}],[\"树\",{\"0\":{\"267\":1},\"1\":{\"162\":3,\"223\":1,\"257\":1,\"698\":1,\"740\":1}}],[\"学习调用这些函数\",{\"1\":{\"1279\":1}}],[\"学习\",{\"1\":{\"1279\":1}}],[\"学习记录用\",{\"1\":{\"127\":1}}],[\"学会查阅文档\",{\"1\":{\"1057\":1}}],[\"学号等唯一值\",{\"1\":{\"161\":1,\"461\":1}}],[\"手机等\",{\"1\":{\"964\":1}}],[\"手机和服务器一个局域网内\",{\"1\":{\"945\":1}}],[\"手机屏幕\",{\"0\":{\"944\":1}}],[\"手机号\",{\"1\":{\"161\":1,\"461\":1}}],[\"手写\",{\"1\":{\"674\":1}}],[\"手写一个简易的虚拟\",{\"1\":{\"673\":1}}],[\"手写源码\",{\"1\":{\"664\":1}}],[\"手写源码仓库\",{\"0\":{\"255\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":1,\"386\":1,\"397\":1}}],[\"手写实现\",{\"0\":{\"645\":1}}],[\"手写相关实现代码\",{\"1\":{\"593\":1}}],[\"手动的绑定\",{\"1\":{\"841\":1}}],[\"手动依赖收集器的id\",{\"1\":{\"627\":1}}],[\"手动更改真实\",{\"1\":{\"184\":1}}],[\"手动实现\",{\"0\":{\"116\":1},\"1\":{\"250\":1}}],[\"比要提取的子串的最后一个字符在\",{\"1\":{\"1376\":1}}],[\"比例值\",{\"1\":{\"966\":1}}],[\"比例数值动态调整尺寸\",{\"1\":{\"966\":1}}],[\"比例还是\",{\"1\":{\"966\":1}}],[\"比redux\",{\"1\":{\"780\":1}}],[\"比\",{\"1\":{\"524\":1,\"639\":1,\"966\":2,\"1376\":1,\"1410\":1}}],[\"比如改定时器内部的\",{\"1\":{\"1451\":1}}],[\"比如借助于\",{\"1\":{\"1451\":1}}],[\"比如轮播图自动播放跟点击右侧按钮一致\",{\"1\":{\"1330\":1}}],[\"比如数组\",{\"1\":{\"1319\":1}}],[\"比如播放按钮\",{\"1\":{\"1021\":1}}],[\"比如我们以\",{\"1\":{\"966\":1}}],[\"比如文本颜色和字号等\",{\"1\":{\"931\":1}}],[\"比如无需组件添加与取消订阅\",{\"1\":{\"751\":1}}],[\"比如用户点击了按钮\",{\"1\":{\"747\":1}}],[\"比如父节点由<ul>编程了<ol>\",{\"1\":{\"672\":1}}],[\"比如父组件向孙子组件传递数据时\",{\"1\":{\"515\":1}}],[\"比如data\",{\"1\":{\"657\":1}}],[\"比如说是\",{\"1\":{\"650\":1,\"657\":1}}],[\"比如可以被delete\",{\"1\":{\"601\":1,\"602\":2,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"比如设置订阅或请求数据\",{\"1\":{\"177\":1}}],[\"比如\",{\"1\":{\"161\":1,\"461\":1,\"650\":1,\"703\":1,\"839\":1,\"864\":1,\"937\":2,\"963\":1,\"995\":1,\"1064\":1,\"1072\":1,\"1117\":1,\"1275\":1,\"1376\":1,\"1414\":1}}],[\"比较像\",{\"1\":{\"1376\":1}}],[\"比较的是字符串的字符编码\",{\"1\":{\"1261\":1}}],[\"比较字符串时\",{\"1\":{\"1261\":1}}],[\"比较年轻\",{\"1\":{\"1007\":1}}],[\"比较新版本的浏览器无须添加\",{\"1\":{\"935\":1}}],[\"比较霸道\",{\"1\":{\"876\":1}}],[\"比较且都存在子节点\",{\"1\":{\"702\":1}}],[\"比较判断单节点的\",{\"1\":{\"323\":1}}],[\"比较协调子fibers\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"比较规则如下\",{\"1\":{\"161\":1,\"461\":1}}],[\"比较\",{\"0\":{\"458\":1,\"531\":1,\"676\":1,\"683\":1},\"1\":{\"161\":1,\"272\":1,\"317\":1,\"323\":1,\"355\":1,\"360\":1,\"374\":1,\"396\":1,\"461\":1,\"1261\":1,\"1264\":1}}],[\"界面不更新\",{\"1\":{\"548\":2}}],[\"界面有问题\",{\"1\":{\"161\":1,\"461\":1}}],[\"界面效果没问题\",{\"1\":{\"161\":1,\"461\":1}}],[\"逆序删除等破坏顺序操作\",{\"1\":{\"161\":1,\"461\":1}}],[\"逆序删除等破坏顺序的操作\",{\"1\":{\"161\":1,\"461\":1}}],[\"逆序添加\",{\"1\":{\"161\":1,\"461\":1}}],[\"新数组中的元素通过检查指定数组中符合条件的所有元素\",{\"1\":{\"1198\":1}}],[\"新数据\",{\"1\":{\"161\":1,\"461\":1}}],[\"新方法\",{\"1\":{\"1124\":1}}],[\"新结构标签\",{\"1\":{\"1020\":1}}],[\"新语法\",{\"1\":{\"964\":1}}],[\"新版本使用\",{\"1\":{\"1153\":1}}],[\"新版本浏览器基本取消了这个异常行为\",{\"1\":{\"1140\":1}}],[\"新版\",{\"1\":{\"918\":1}}],[\"新vnode有children\",{\"1\":{\"683\":1,\"690\":1}}],[\"新vnode有text属性\",{\"1\":{\"683\":1,\"690\":1}}],[\"新vnode没有text属性\",{\"1\":{\"683\":1,\"690\":1}}],[\"新后>=新前\",{\"1\":{\"683\":1,\"691\":1}}],[\"新后vs旧前\",{\"1\":{\"683\":1,\"691\":1,\"692\":1}}],[\"新后vs旧后\",{\"1\":{\"683\":1,\"691\":1,\"692\":1}}],[\"新后节点\",{\"1\":{\"683\":1,\"691\":1}}],[\"新后指针\",{\"1\":{\"683\":1,\"691\":1}}],[\"新后与旧后\",{\"1\":{\"678\":1}}],[\"新后与旧前\",{\"1\":{\"676\":1,\"679\":1}}],[\"新后和旧后的指针分别指向新节点和旧节点\",{\"1\":{\"676\":1}}],[\"新后\",{\"0\":{\"678\":1,\"679\":1},\"1\":{\"676\":3}}],[\"新前vs旧后\",{\"1\":{\"683\":1,\"691\":1,\"692\":1}}],[\"新前vs旧前\",{\"1\":{\"683\":1,\"691\":1,\"692\":1}}],[\"新前<=新后\",{\"1\":{\"683\":1,\"691\":1}}],[\"新前节点\",{\"1\":{\"683\":1,\"691\":1}}],[\"新前与旧前\",{\"1\":{\"677\":1}}],[\"新前与旧后\",{\"1\":{\"676\":1,\"680\":1}}],[\"新前指针\",{\"1\":{\"683\":1,\"691\":1}}],[\"新前指针右移一位\",{\"1\":{\"676\":1}}],[\"新前指针<=新后指针\",{\"1\":{\"676\":1}}],[\"新前和旧前的指针分别指向新节点和旧节点\",{\"1\":{\"676\":1}}],[\"新前\",{\"0\":{\"677\":1,\"680\":1},\"1\":{\"676\":3,\"680\":1}}],[\"新h2\",{\"1\":{\"675\":1}}],[\"新h1\",{\"1\":{\"675\":1}}],[\"新旧子节点数组会分别从两套数组的头部和尾部开始收缩比较\",{\"1\":{\"692\":1}}],[\"新旧vnode的text不同\",{\"1\":{\"683\":1,\"690\":1}}],[\"新旧\",{\"1\":{\"676\":1}}],[\"新旧值不相等才会执行更新与回调\",{\"1\":{\"609\":1,\"616\":1}}],[\"新旧节点存在差异\",{\"1\":{\"702\":1}}],[\"新旧节点key值不同或sel值不同时\",{\"1\":{\"692\":1}}],[\"新旧节点elm赋值\",{\"1\":{\"683\":1,\"690\":1}}],[\"新旧节点的key值和挂载目标元素sel值相同\",{\"1\":{\"692\":1}}],[\"新旧节点的更新是否有以下情况\",{\"1\":{\"676\":1}}],[\"新旧节点的数量相同\",{\"1\":{\"355\":1}}],[\"新旧节点依然存在数量相等或不等的乱序节点\",{\"1\":{\"358\":1}}],[\"新增数据结构\",{\"1\":{\"1178\":1}}],[\"新增结构化标签\",{\"0\":{\"1020\":1}}],[\"新增input特性\",{\"1\":{\"1019\":1}}],[\"新增\",{\"0\":{\"1019\":1,\"1126\":1}}],[\"新增多个\",{\"1\":{\"708\":1}}],[\"新增<routes\",{\"1\":{\"708\":1}}],[\"新增语法糖\",{\"1\":{\"638\":1}}],[\"新增deps实例的方法后清空用于新增的数据结构\",{\"1\":{\"635\":1}}],[\"新增的depid去重set结构\",{\"1\":{\"635\":1}}],[\"新增的dep数组\",{\"1\":{\"635\":1}}],[\"新增的功能和特性\",{\"1\":{\"523\":1}}],[\"新增两项配置\",{\"1\":{\"628\":1}}],[\"新增watcher目标target的push和pop步骤\",{\"1\":{\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"新增后会导致该文件中的其他变量\",{\"1\":{\"591\":1}}],[\"新增属性\",{\"1\":{\"548\":1}}],[\"新增或者修改一个需求\",{\"1\":{\"545\":1}}],[\"新特性\",{\"0\":{\"525\":1}}],[\"新节点中剩余的都\",{\"1\":{\"682\":1}}],[\"新节点的增加\",{\"1\":{\"676\":1}}],[\"新节点\",{\"1\":{\"357\":1,\"361\":1}}],[\"新节点创建新\",{\"1\":{\"355\":1}}],[\"新建对象设置为\",{\"1\":{\"1436\":1}}],[\"新建一个后缀名为\",{\"1\":{\"868\":1}}],[\"新建一个\",{\"1\":{\"647\":1}}],[\"新建挂载操作\",{\"1\":{\"273\":1}}],[\"新建更新队列\",{\"1\":{\"271\":1}}],[\"新fiber\",{\"1\":{\"272\":2,\"306\":1,\"315\":1,\"318\":3,\"338\":1,\"373\":1}}],[\"新fiber没有老fiber\",{\"1\":{\"272\":1,\"318\":1}}],[\"新链表update的尾部next指向老pending链表的头部\",{\"1\":{\"271\":1,\"272\":1}}],[\"新属性\",{\"1\":{\"270\":1,\"272\":2,\"961\":1,\"973\":1}}],[\"新生命周期钩子\",{\"0\":{\"434\":1}}],[\"新生命周期流程图\",{\"0\":{\"170\":1}}],[\"新生命周期增加了一些新的钩子函数\",{\"1\":{\"169\":1}}],[\"新生命周期不是对旧生命周期的颠覆\",{\"1\":{\"169\":1}}],[\"新\",{\"0\":{\"168\":1},\"1\":{\"272\":1,\"1019\":1}}],[\"新虚拟\",{\"1\":{\"161\":1,\"461\":1,\"671\":1}}],[\"新的生命周期钩子\",{\"1\":{\"525\":1}}],[\"新的生命周期没有\",{\"1\":{\"169\":1}}],[\"新的内置组件\",{\"1\":{\"525\":1}}],[\"新的构建fiber\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"新的子虚拟dom\",{\"1\":{\"272\":2,\"318\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"新的父fiber\",{\"1\":{\"272\":2,\"318\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"新的虚拟dom还在\",{\"1\":{\"357\":1,\"361\":1}}],[\"新的虚拟dom已经循环完毕\",{\"1\":{\"357\":1,\"361\":1}}],[\"新的虚拟dom也有值\",{\"1\":{\"357\":1,\"361\":1}}],[\"新的虚拟\",{\"1\":{\"161\":1,\"461\":1}}],[\"新的空对象与旧的空对象不等\",{\"1\":{\"92\":1}}],[\"详细参数\",{\"1\":{\"909\":1}}],[\"详细的\",{\"1\":{\"519\":1}}],[\"详细讨论一下\",{\"1\":{\"259\":1}}],[\"详细地说\",{\"1\":{\"161\":1,\"461\":1}}],[\"详见递归侦测对象属性\",{\"1\":{\"627\":1}}],[\"详见\",{\"1\":{\"621\":1,\"628\":1,\"636\":1,\"658\":1,\"663\":1,\"692\":1,\"961\":1,\"965\":1}}],[\"详见进阶技巧\",{\"1\":{\"192\":1}}],[\"详见惰性函数hook\",{\"1\":{\"102\":1}}],[\"详见惰性取值hook\",{\"1\":{\"101\":1}}],[\"详见hook\",{\"1\":{\"88\":1}}],[\"牛奶\",{\"1\":{\"160\":1,\"666\":1,\"670\":2}}],[\"香蕉\",{\"1\":{\"160\":1}}],[\"苹果\",{\"1\":{\"160\":1}}],[\"数\",{\"1\":{\"1423\":1}}],[\"数学\",{\"0\":{\"1368\":1}}],[\"数字和布尔值的属性值或方法\",{\"1\":{\"1415\":1}}],[\"数字调用\",{\"1\":{\"1413\":1}}],[\"数字指定了表达式分组在字符模式中的顺序\",{\"1\":{\"1391\":1}}],[\"数字等\",{\"1\":{\"1381\":1}}],[\"数字为真\",{\"1\":{\"1271\":1}}],[\"数字\",{\"1\":{\"1240\":1,\"1251\":1,\"1391\":1,\"1440\":1}}],[\"数字用来作为定时器的唯一标识\",{\"1\":{\"1063\":1}}],[\"数字后面不能加单位\",{\"1\":{\"996\":1}}],[\"数值本身是无法自定义属性的\",{\"1\":{\"1417\":1}}],[\"数值的自定义方法\",{\"1\":{\"1417\":1}}],[\"数值\",{\"1\":{\"1410\":1,\"1415\":1}}],[\"数值型\",{\"1\":{\"1241\":1}}],[\"数值扩展\",{\"0\":{\"1181\":1}}],[\"数值越大\",{\"1\":{\"996\":1}}],[\"数值可以是正整数\",{\"1\":{\"996\":1}}],[\"数值修改为高度或宽度的一半\",{\"1\":{\"911\":1}}],[\"数量降至\",{\"1\":{\"818\":1}}],[\"数量繁多的dep依赖实例与数量稀少的订阅者watcher实例\",{\"1\":{\"635\":1}}],[\"数量\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"1067\":1}}],[\"数组和字符串内置对象不能给原型对象覆盖操作array\",{\"1\":{\"1443\":1}}],[\"数组是一个对象\",{\"1\":{\"1351\":1}}],[\"数组对象\",{\"1\":{\"1197\":1}}],[\"数组当前项索引\",{\"1\":{\"1197\":1}}],[\"数组当前项的值\",{\"1\":{\"1197\":1}}],[\"数组方法\",{\"0\":{\"1196\":1}}],[\"数组克隆\",{\"1\":{\"1166\":1}}],[\"数组合并\",{\"1\":{\"1166\":1}}],[\"数组生成后\",{\"1\":{\"658\":1}}],[\"数组解析函数\",{\"1\":{\"657\":1}}],[\"数组返回\",{\"1\":{\"648\":1}}],[\"数组了\",{\"1\":{\"647\":1}}],[\"数组嵌套mustache结果\",{\"1\":{\"641\":1}}],[\"数组嵌套\",{\"0\":{\"641\":1}}],[\"数组用来存储\",{\"1\":{\"635\":1}}],[\"数组内部的数据变化无法正确生效\",{\"1\":{\"620\":1}}],[\"数组内部的变量应是const\",{\"1\":{\"186\":1}}],[\"数组7方法之一改动时\",{\"1\":{\"610\":1,\"614\":1}}],[\"数组里实际存放的是\",{\"1\":{\"609\":1,\"615\":1,\"635\":1}}],[\"数组中属性名的排列顺序和使用\",{\"1\":{\"1404\":1}}],[\"数组中的元素可以是任意数据类型\",{\"1\":{\"1353\":1}}],[\"数组中的元素为原始数组元素调用函数处理后的值\",{\"1\":{\"1200\":1}}],[\"数组中有几个元素函数执行几次\",{\"1\":{\"1276\":1}}],[\"数组中需要插值的内容插入进去\",{\"1\":{\"658\":1}}],[\"数组中\",{\"1\":{\"608\":1,\"658\":1,\"842\":2}}],[\"数组的解构\",{\"1\":{\"1160\":1}}],[\"数组的生成依赖扫描器类\",{\"1\":{\"658\":1}}],[\"数组的第一项用\",{\"1\":{\"647\":1}}],[\"数组的\",{\"1\":{\"610\":2}}],[\"数组的特殊遍历\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"数组的响应式处理\",{\"0\":{\"603\":1}}],[\"数组的虚拟\",{\"1\":{\"272\":1}}],[\"数组类型\",{\"1\":{\"548\":1}}],[\"数组写法\",{\"1\":{\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"454\":1}}],[\"数组\",{\"0\":{\"1351\":1},\"1\":{\"220\":1,\"272\":1,\"460\":1,\"638\":1,\"648\":2,\"649\":1,\"658\":1,\"661\":2,\"847\":1,\"1410\":1,\"1413\":1,\"1440\":1}}],[\"数组高阶方法\",{\"1\":{\"159\":1}}],[\"数据缓存\",{\"0\":{\"1312\":1}}],[\"数据缓存等功能\",{\"1\":{\"817\":1}}],[\"数据结构\",{\"1\":{\"1210\":1}}],[\"数据就会被标记为过时\",{\"1\":{\"837\":1}}],[\"数据未变化时不去请求\",{\"1\":{\"825\":1}}],[\"数据未发生变化时\",{\"1\":{\"634\":1}}],[\"数据初始值\",{\"1\":{\"823\":1}}],[\"数据转换与筛选\",{\"1\":{\"788\":1}}],[\"数据也会以\",{\"1\":{\"739\":1}}],[\"数据层次的深浅程度\",{\"1\":{\"700\":1}}],[\"数据修改为响应式\",{\"1\":{\"694\":1}}],[\"数据修改完成后\",{\"1\":{\"103\":1}}],[\"数据默认取缓存\",{\"1\":{\"634\":1}}],[\"数据与\",{\"1\":{\"634\":1}}],[\"数据更新与回调函数执行\",{\"1\":{\"621\":1}}],[\"数据的字符串编译\",{\"1\":{\"663\":1}}],[\"数据的变化可以引起\",{\"1\":{\"634\":1}}],[\"数据的相互依赖\",{\"1\":{\"634\":1}}],[\"数据的\",{\"1\":{\"608\":1}}],[\"数据对象\",{\"1\":{\"607\":1,\"609\":1,\"616\":1,\"632\":1,\"635\":1,\"658\":2}}],[\"数据发生变化时通过\",{\"1\":{\"605\":1}}],[\"数据变为响应式\",{\"1\":{\"694\":1}}],[\"数据变化时触发了\",{\"1\":{\"621\":1}}],[\"数据变化时\",{\"1\":{\"604\":1,\"636\":1}}],[\"数据变量的观察者类\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"数据劫持系统的具现化体现在\",{\"1\":{\"620\":1}}],[\"数据劫持系统的核心是object\",{\"1\":{\"620\":1}}],[\"数据劫持\",{\"1\":{\"548\":1,\"550\":1,\"597\":1,\"620\":1}}],[\"数据会被覆盖\",{\"1\":{\"510\":1}}],[\"数据在子组件中\",{\"1\":{\"504\":1}}],[\"数据在组件的自身\",{\"1\":{\"504\":1}}],[\"数据是新的但页面时旧的\",{\"1\":{\"480\":1}}],[\"数据代理图示\",{\"1\":{\"468\":1}}],[\"数据代理\",{\"0\":{\"468\":1},\"1\":{\"479\":1,\"550\":1,\"597\":1}}],[\"数据不仅能从\",{\"1\":{\"447\":1}}],[\"数据只能从\",{\"1\":{\"446\":1}}],[\"数据供\",{\"1\":{\"443\":1}}],[\"数据绑定\",{\"0\":{\"441\":1,\"445\":1},\"1\":{\"473\":1,\"522\":1}}],[\"数据需要通过\",{\"1\":{\"421\":1}}],[\"数据流的自顶向下的全节点判断比较式更新\",{\"1\":{\"257\":1}}],[\"数据名称\",{\"1\":{\"132\":1}}],[\"数据类型转换\",{\"0\":{\"1412\":1}}],[\"数据类型\",{\"0\":{\"1241\":1},\"1\":{\"132\":1}}],[\"数据时\",{\"1\":{\"103\":1}}],[\"数据来源不清晰\",{\"1\":{\"89\":1}}],[\"数据\",{\"0\":{\"13\":1},\"1\":{\"29\":1,\"106\":1,\"148\":1,\"210\":1,\"406\":1,\"418\":2,\"505\":1,\"534\":1,\"608\":1,\"647\":1,\"694\":1,\"823\":2,\"845\":1}}],[\"数据格式\",{\"1\":{\"3\":1}}],[\"定时调用执行多次\",{\"1\":{\"1063\":1}}],[\"定时器函数\",{\"1\":{\"1445\":1,\"1446\":1}}],[\"定时器放置于事件中的时候\",{\"1\":{\"1071\":1}}],[\"定时器设置\",{\"1\":{\"1071\":1}}],[\"定时器应用\",{\"0\":{\"1070\":1}}],[\"定时器的回调函数\",{\"1\":{\"452\":1}}],[\"定时器\",{\"1\":{\"159\":1,\"410\":1,\"1076\":1,\"1155\":1}}],[\"定位方式和substr一\",{\"1\":{\"1376\":1}}],[\"定位最大的特点是有层叠的概念\",{\"1\":{\"1002\":1}}],[\"定位终点\",{\"1\":{\"999\":1}}],[\"定位总结\",{\"0\":{\"999\":1}}],[\"定位特殊性\",{\"0\":{\"998\":1}}],[\"定位基点是视口\",{\"1\":{\"995\":1}}],[\"定位基点是自身默认位置\",{\"1\":{\"995\":1}}],[\"定位模式\",{\"0\":{\"989\":1},\"1\":{\"999\":1}}],[\"定位=定位模式+边偏移\",{\"1\":{\"988\":1}}],[\"定位组成\",{\"0\":{\"988\":1}}],[\"定位则是可以让盒子自由地在某个盒子内移动位置或者固定屏幕中某个位置\",{\"1\":{\"987\":1}}],[\"定位与浮动的区别\",{\"1\":{\"987\":1}}],[\"定位\",{\"0\":{\"986\":1},\"1\":{\"974\":1,\"995\":3,\"1002\":1}}],[\"定制按键别名\",{\"1\":{\"472\":1}}],[\"定义多个属性\",{\"1\":{\"1408\":1}}],[\"定义某个属性\",{\"1\":{\"1408\":1}}],[\"定义惰性匹配的方法\",{\"1\":{\"1385\":1}}],[\"定义了一组重复类量词\",{\"1\":{\"1384\":1}}],[\"定义选择匹配模式\",{\"1\":{\"1383\":1}}],[\"定义形参就相当于在函数作用域中声明了变量\",{\"1\":{\"1350\":1}}],[\"定义绑定函数\",{\"0\":{\"1131\":1}}],[\"定义input元素的名称\",{\"1\":{\"1057\":1}}],[\"定义提交按钮\",{\"1\":{\"1057\":1}}],[\"定义重置按钮\",{\"1\":{\"1057\":1}}],[\"定义单行的输入字段\",{\"1\":{\"1057\":1}}],[\"定义单选按钮\",{\"1\":{\"1057\":1}}],[\"定义单词间的固定空间\",{\"1\":{\"895\":1}}],[\"定义单词间的标准空间\",{\"1\":{\"895\":1}}],[\"定义密码字段\",{\"1\":{\"1057\":1}}],[\"定义图像形式的提交按钮\",{\"1\":{\"1057\":1}}],[\"定义隐藏的输入字段\",{\"1\":{\"1057\":1}}],[\"定义输入字段和\",{\"1\":{\"1057\":1}}],[\"定义复选框\",{\"1\":{\"1057\":1}}],[\"定义复杂类型数据\",{\"1\":{\"550\":1}}],[\"定义可点击按钮\",{\"1\":{\"1057\":1}}],[\"定义项目\",{\"1\":{\"1054\":1}}],[\"定义列表的列表项前没有任何项目符号\",{\"1\":{\"1054\":1}}],[\"定义块元素的垂直外边距时\",{\"1\":{\"971\":1}}],[\"定义使用\",{\"1\":{\"918\":1}}],[\"定义边框图像的平铺方式\",{\"1\":{\"909\":1}}],[\"定义边框图像的外延尺寸\",{\"1\":{\"909\":1}}],[\"定义边框图像的厚度\",{\"1\":{\"909\":1}}],[\"定义边框图像的路径\",{\"1\":{\"909\":1}}],[\"定义边框图像从什么位置开始分割\",{\"1\":{\"909\":1}}],[\"定义字符间的固定空间\",{\"1\":{\"896\":1}}],[\"定义无大写字母\",{\"1\":{\"894\":1}}],[\"定义仅有大写字母\",{\"1\":{\"894\":1}}],[\"定义带有小写字母和大写字母的标准的文本\",{\"1\":{\"894\":1}}],[\"定义所链接外部样式表文件的\",{\"1\":{\"868\":1}}],[\"定义当前文档与被链接文档之间的关系\",{\"1\":{\"868\":1}}],[\"定义嵌套路由\",{\"1\":{\"712\":1}}],[\"定义新方法\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"定义响应式数据前\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"定义全局变量\",{\"1\":{\"591\":2}}],[\"定义全局指令\",{\"1\":{\"500\":1}}],[\"定义全局指令等\",{\"1\":{\"500\":1}}],[\"定义默认值\",{\"1\":{\"587\":1}}],[\"定义的对象属性不能使用\",{\"1\":{\"1168\":1}}],[\"定义的数据\",{\"1\":{\"550\":2}}],[\"定义的响应式数据是深层次的\",{\"1\":{\"537\":1}}],[\"定义的一种类似于\",{\"1\":{\"121\":1}}],[\"定义一个函数\",{\"1\":{\"1131\":1}}],[\"定义一个变量timer\",{\"1\":{\"1072\":1}}],[\"定义一个对象类型的响应式数据\",{\"1\":{\"537\":1}}],[\"定义一个响应式数据\",{\"1\":{\"536\":1}}],[\"定义插槽\",{\"1\":{\"504\":3}}],[\"定义插件\",{\"1\":{\"500\":1}}],[\"定义混入\",{\"1\":{\"500\":1}}],[\"定义\",{\"0\":{\"650\":1,\"651\":1,\"977\":1,\"1456\":1},\"1\":{\"466\":1,\"648\":1,\"863\":1,\"864\":1,\"1031\":1}}],[\"定义为实例方法\",{\"1\":{\"231\":1}}],[\"定义虚拟\",{\"1\":{\"123\":1}}],[\"定义代理服务器的主机名称和端口\",{\"1\":{\"63\":1}}],[\"定义在\",{\"1\":{\"60\":1}}],[\"定义对于给定的\",{\"1\":{\"59\":1}}],[\"定义允许的响应内容的最大尺寸\",{\"1\":{\"58\":1}}],[\"常见特性\",{\"0\":{\"1352\":1}}],[\"常见网页布局示例\",{\"1\":{\"980\":1}}],[\"常见行内元素\",{\"1\":{\"877\":1}}],[\"常见块元素\",{\"1\":{\"876\":1}}],[\"常见高阶函数\",{\"1\":{\"159\":1}}],[\"常用数组方法\",{\"0\":{\"1354\":1}}],[\"常用于将\",{\"1\":{\"1131\":1}}],[\"常用于请求超时\",{\"1\":{\"770\":1}}],[\"常用节点分类\",{\"1\":{\"1078\":1}}],[\"常用值\",{\"1\":{\"1034\":1}}],[\"常用浏览器\",{\"0\":{\"1027\":1}}],[\"常用\",{\"0\":{\"1285\":1},\"1\":{\"909\":1,\"999\":3}}],[\"常用写法\",{\"1\":{\"873\":1}}],[\"常用有链接伪类\",{\"1\":{\"873\":1}}],[\"常用的功能代码\",{\"1\":{\"1279\":1}}],[\"常用的浏览器有\",{\"1\":{\"1027\":1}}],[\"常用的复合选择器包括\",{\"1\":{\"869\":1}}],[\"常用的按键别名\",{\"1\":{\"472\":1}}],[\"常用周期\",{\"0\":{\"482\":1}}],[\"常用内置指令\",{\"0\":{\"474\":1}}],[\"常用方法见上\",{\"1\":{\"17\":1}}],[\"常规语法\",{\"1\":{\"1341\":1}}],[\"常规函数和\",{\"1\":{\"238\":1}}],[\"常规的类式组件愈发臃肿\",{\"1\":{\"177\":1}}],[\"那些属性会被\",{\"1\":{\"1171\":1}}],[\"那该数值一定是\",{\"1\":{\"905\":1}}],[\"那该函数就是高阶函数\",{\"1\":{\"159\":1}}],[\"那项的下标为2的数组\",{\"1\":{\"656\":1}}],[\"那这个应用就是一个组件化的应用\",{\"1\":{\"486\":1}}],[\"那这个应用就是一个模块化的应用\",{\"1\":{\"486\":1}}],[\"那必须写\",{\"1\":{\"450\":1}}],[\"那就是沿用上面的代码在\",{\"1\":{\"634\":1}}],[\"那就是后台进程节点\",{\"1\":{\"272\":1}}],[\"那就涉及到下文的内容了\",{\"1\":{\"604\":1}}],[\"那就不需要放弃执行\",{\"1\":{\"395\":1}}],[\"那样的方式\",{\"1\":{\"162\":1}}],[\"那么其转换会按照我们的定义来\",{\"1\":{\"1410\":1}}],[\"那么该参数声明从字符串的尾部开始算起的位置\",{\"1\":{\"1376\":1}}],[\"那么该方法在提取子串之前会先交换这两个参数\",{\"1\":{\"1376\":1}}],[\"那么该方法返回的就是一个空串\",{\"1\":{\"1376\":1}}],[\"那么就会被\",{\"1\":{\"1403\":1}}],[\"那么就转换为\",{\"1\":{\"1376\":2}}],[\"那么就可以判断这个节点没有发生变化\",{\"1\":{\"162\":1}}],[\"那么会截取小数部分\",{\"1\":{\"1376\":1}}],[\"那么会直接当成\",{\"1\":{\"1376\":1}}],[\"那么会先进行\",{\"1\":{\"1376\":2}}],[\"那么会把该参数向下取整\",{\"1\":{\"1376\":1}}],[\"那么会把该参数自动转为\",{\"1\":{\"1376\":1}}],[\"那么返回从\",{\"1\":{\"1376\":1}}],[\"那么返回的子串会一直到字符串的结尾\",{\"1\":{\"1376\":1}}],[\"那么返回\",{\"1\":{\"1376\":2}}],[\"那么称这个函数是这个对象的方法\",{\"1\":{\"1347\":1}}],[\"那么鼠标经过和鼠标离开都会触发这个函数\",{\"1\":{\"1305\":1}}],[\"那么列表就是用来布局的\",{\"1\":{\"1051\":1}}],[\"那么三次\",{\"1\":{\"845\":1}}],[\"那么新前指向的节点\",{\"1\":{\"676\":1}}],[\"那么新后指向的节点\",{\"1\":{\"676\":1}}],[\"那么页面会更新三次\",{\"1\":{\"505\":1}}],[\"那么请求会转发给该服务器\",{\"1\":{\"495\":1}}],[\"那么收集的是\",{\"1\":{\"465\":3}}],[\"那么模板中用到该数据的地方也会自动更新\",{\"1\":{\"443\":1}}],[\"那么此函数组件对应的fiber上会有一个flags\",{\"1\":{\"372\":1,\"382\":1}}],[\"那么它规定的是从字符串的尾部开始算起的位置\",{\"1\":{\"1376\":1}}],[\"那么它就变成一个错误边界\",{\"1\":{\"242\":1}}],[\"那么它们均需要实现\",{\"1\":{\"234\":1}}],[\"那么当组件每次刷新渲染的时候\",{\"1\":{\"231\":1}}],[\"那么当前节点及其所有子节点都可以跳过对比直接复用\",{\"1\":{\"162\":1}}],[\"那么将组件移除\",{\"1\":{\"165\":1}}],[\"那么\",{\"1\":{\"159\":2,\"272\":1,\"644\":1,\"842\":1,\"973\":1,\"1422\":1,\"1423\":1}}],[\"那么视觉可见的区域就是可视区域\",{\"1\":{\"96\":1}}],[\"那么可滚动的区域高度就是\",{\"1\":{\"96\":1}}],[\"那么这个组件更新就是没有必要的\",{\"1\":{\"91\":1}}],[\"那么优先使用\",{\"1\":{\"61\":1}}],[\"个或\",{\"1\":{\"1458\":1}}],[\"个或多个标签\",{\"1\":{\"864\":1}}],[\"个台阶有几种走法\",{\"1\":{\"1458\":1}}],[\"个台阶\",{\"1\":{\"1458\":2}}],[\"个步骤\",{\"1\":{\"1428\":1,\"1429\":1}}],[\"个操作\",{\"1\":{\"1415\":1}}],[\"个原生对象\",{\"1\":{\"1415\":1}}],[\"个分组匹配任意连续的数字\",{\"1\":{\"1391\":1}}],[\"个分组匹配任意连续的字母\",{\"1\":{\"1391\":1}}],[\"个反向引用\",{\"1\":{\"1391\":4}}],[\"个表达式分组匹配文本的引用\",{\"1\":{\"1391\":2}}],[\"个表达式分组\",{\"1\":{\"1391\":2}}],[\"个字符的字符串\",{\"1\":{\"1385\":1}}],[\"个之间的单词\",{\"1\":{\"1384\":1}}],[\"个到第\",{\"1\":{\"1384\":1}}],[\"个单词\",{\"1\":{\"1384\":1}}],[\"个单独的部分\",{\"1\":{\"909\":1}}],[\"个对象的对象\",{\"1\":{\"1332\":1}}],[\"个参数中\",{\"1\":{\"1391\":1}}],[\"个参数\",{\"1\":{\"1319\":1}}],[\"个阶段\",{\"1\":{\"1132\":1}}],[\"个部分构成\",{\"1\":{\"1055\":1}}],[\"个数没有限制\",{\"1\":{\"1054\":1}}],[\"个等级的网页标题\",{\"1\":{\"1035\":1}}],[\"个物理像素的\",{\"1\":{\"952\":1}}],[\"个值引用\",{\"1\":{\"1391\":2}}],[\"个值\",{\"1\":{\"908\":1,\"969\":4}}],[\"个回车\",{\"1\":{\"900\":1}}],[\"个空格\",{\"1\":{\"900\":1}}],[\"个标签\",{\"1\":{\"864\":1}}],[\"个相同请求\",{\"1\":{\"845\":1}}],[\"个的情况\",{\"1\":{\"674\":1}}],[\"个\",{\"1\":{\"674\":1,\"818\":1,\"847\":2,\"900\":1,\"1367\":1,\"1384\":4}}],[\"个方法\",{\"1\":{\"603\":1}}],[\"个人猜测应该是为了无需遍历更新队列\",{\"1\":{\"271\":1}}],[\"个为例\",{\"1\":{\"600\":1}}],[\"个为更新状态值的函数\",{\"1\":{\"181\":1}}],[\"个为内部当前状态值\",{\"1\":{\"181\":1}}],[\"个元素的数组\",{\"1\":{\"181\":1}}],[\"个规范中的任何一个\",{\"1\":{\"159\":1}}],[\"个条件均满足\",{\"1\":{\"92\":1}}],[\"个条件\",{\"1\":{\"92\":2,\"162\":1}}],[\"委托给组件外层的元素\",{\"1\":{\"158\":1}}],[\"事件对象\",{\"0\":{\"1331\":1}}],[\"事件对应属性中设置\",{\"1\":{\"1118\":1}}],[\"事件操作\",{\"0\":{\"1326\":1}}],[\"事件切换就是鼠标经过和离开的复合写法\",{\"1\":{\"1305\":1}}],[\"事件切换\",{\"0\":{\"1305\":1}}],[\"事件会一直触发\",{\"1\":{\"1151\":1}}],[\"事件会在整个页面加载完成之后触发\",{\"1\":{\"1119\":1}}],[\"事件属性\",{\"1\":{\"1146\":1}}],[\"事件在元素或者选取的文本被拖动时触发\",{\"1\":{\"1142\":1}}],[\"事件在冒泡阶段执行\",{\"1\":{\"1132\":1}}],[\"事件从目标元素向他的祖先元素开始传递\",{\"1\":{\"1135\":1}}],[\"事件从内向外传播\",{\"1\":{\"1132\":1}}],[\"事件捕获到目标元素\",{\"1\":{\"1134\":1}}],[\"事件由外向内传播\",{\"1\":{\"1132\":1}}],[\"事件传播分为\",{\"1\":{\"1132\":1}}],[\"事件传播\",{\"0\":{\"1132\":1}}],[\"事件触发时被调用\",{\"1\":{\"1130\":1}}],[\"事件字符串\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"事件委派\",{\"0\":{\"1127\":1},\"1\":{\"1328\":1}}],[\"事件后触发\",{\"1\":{\"1119\":1}}],[\"事件后\",{\"1\":{\"742\":1}}],[\"事件实现\",{\"1\":{\"588\":1}}],[\"事件依然有效\",{\"1\":{\"482\":1}}],[\"事件才被触发\",{\"1\":{\"472\":1}}],[\"事件只触发一次\",{\"1\":{\"471\":1}}],[\"事件修饰符\",{\"0\":{\"471\":1}}],[\"事件源对应的fiber实例\",{\"1\":{\"293\":1}}],[\"事件的字符串\",{\"1\":{\"1130\":1}}],[\"事件的目标节点\",{\"1\":{\"1127\":1}}],[\"事件的向上传导\",{\"1\":{\"1125\":1}}],[\"事件的默认行为立即执行\",{\"1\":{\"471\":1}}],[\"事件的回调需要配置在\",{\"1\":{\"470\":1}}],[\"事件的\",{\"1\":{\"293\":1}}],[\"事件派发流程图\",{\"1\":{\"300\":1}}],[\"事件派发\",{\"0\":{\"287\":1}}],[\"事件监听器断点\",{\"1\":{\"1155\":2}}],[\"事件监听器\",{\"0\":{\"1130\":1}}],[\"事件监听器反向修改数据实现视图影响数据\",{\"1\":{\"695\":1}}],[\"事件监听流程图\",{\"1\":{\"300\":1}}],[\"事件监听\",{\"0\":{\"283\":1}}],[\"事件名称\",{\"0\":{\"1145\":1,\"1150\":1}}],[\"事件名称转化为合成事件名称\",{\"1\":{\"277\":1}}],[\"事件名\",{\"1\":{\"288\":1}}],[\"事件名生成映射关系\",{\"1\":{\"278\":1}}],[\"事件注册阶段\",{\"1\":{\"278\":1}}],[\"事件注册\",{\"0\":{\"278\":1,\"1327\":1}}],[\"事件系统标识\",{\"1\":{\"292\":1}}],[\"事件系统\",{\"0\":{\"276\":1},\"1\":{\"277\":1}}],[\"事件冒泡的顺序触发这一系列合成事件\",{\"1\":{\"277\":1}}],[\"事件冒泡\",{\"0\":{\"223\":1,\"1125\":1}}],[\"事件\",{\"0\":{\"1062\":1,\"1117\":1},\"1\":{\"158\":1,\"287\":1,\"479\":1,\"511\":1,\"742\":1,\"1119\":2,\"1124\":1,\"1126\":1,\"1129\":2,\"1142\":1,\"1282\":1,\"1327\":1}}],[\"事件处理流程图\",{\"1\":{\"300\":1}}],[\"事件处理函数需要找到dom元素对应要执行的react事件\",{\"1\":{\"282\":1}}],[\"事件处理器错误于\",{\"1\":{\"245\":1}}],[\"事件处理\",{\"0\":{\"158\":1,\"245\":1,\"294\":1,\"469\":1,\"563\":1,\"1328\":1,\"1329\":1},\"1\":{\"242\":1,\"473\":1,\"522\":1,\"1279\":1}}],[\"事件处理与更新\",{\"0\":{\"157\":1},\"1\":{\"246\":1}}],[\"事件绑定方法\",{\"1\":{\"1446\":1}}],[\"事件绑定\",{\"0\":{\"470\":1,\"1128\":1},\"1\":{\"9\":1}}],[\"次幂\",{\"1\":{\"1370\":1}}],[\"次则\",{\"1\":{\"156\":1}}],[\"次\",{\"1\":{\"156\":3,\"260\":1,\"634\":1,\"635\":1,\"836\":1,\"1202\":1,\"1384\":1,\"1385\":6}}],[\"男\",{\"1\":{\"149\":1,\"640\":2}}],[\"推入到当前内容堆栈的栈顶对象\",{\"1\":{\"661\":1}}],[\"推荐方式\",{\"1\":{\"1235\":1}}],[\"推荐的做法\",{\"1\":{\"985\":1}}],[\"推荐的方式\",{\"1\":{\"814\":1}}],[\"推荐做法\",{\"1\":{\"985\":1}}],[\"推荐使用\",{\"1\":{\"809\":1}}],[\"推荐\",{\"1\":{\"149\":1}}],[\"推出之前\",{\"1\":{\"84\":1}}],[\"第四个字符为1~7的任意数字\",{\"1\":{\"1382\":1}}],[\"第四个参数是关键\",{\"1\":{\"631\":1}}],[\"第八种数据类型\",{\"0\":{\"1230\":1}}],[\"第七种数据类型\",{\"0\":{\"1167\":1},\"1\":{\"1167\":1}}],[\"第三个是\",{\"1\":{\"1391\":1}}],[\"第三个字符为从c到g\",{\"1\":{\"1382\":1}}],[\"第三个及以后可以传递一些新的元素\",{\"1\":{\"1360\":1}}],[\"第三个参数设置为\",{\"1\":{\"1136\":1}}],[\"第三个参数中每个元素都是\",{\"1\":{\"674\":1}}],[\"第三种自动触发模式不会触发元素默认行为\",{\"1\":{\"1330\":1}}],[\"第三种自动触发模式\",{\"1\":{\"1330\":1}}],[\"第三种写法\",{\"1\":{\"431\":1}}],[\"第三轮循环\",{\"1\":{\"361\":1}}],[\"第三轮遍历\",{\"0\":{\"358\":1},\"1\":{\"354\":1}}],[\"第三步\",{\"1\":{\"272\":1,\"493\":1,\"918\":1,\"920\":1}}],[\"第\",{\"1\":{\"162\":1,\"181\":2,\"1391\":2}}],[\"第二层对象仍为引用\",{\"1\":{\"1460\":1}}],[\"第二行和第三行都为清空\",{\"1\":{\"1322\":1}}],[\"第二部分多个判断条件用\",{\"1\":{\"1273\":1}}],[\"第二次访问同一个网站速度会变快\",{\"1\":{\"1027\":1}}],[\"第二次再传入\",{\"1\":{\"156\":1}}],[\"第二个单词的首字母大写或每一个单词的首字母都采用大写字母\",{\"1\":{\"1240\":1}}],[\"第二个函数的第二个参数\",{\"1\":{\"1177\":1}}],[\"第二个标签是结束标签\",{\"1\":{\"1030\":1}}],[\"第二个是可选参数\",{\"1\":{\"1102\":1}}],[\"第二个是\",{\"1\":{\"905\":2,\"1391\":1}}],[\"第二个值默认居中对齐\",{\"1\":{\"905\":1}}],[\"第二个以后的参数是插件使用者传递的数据\",{\"1\":{\"500\":1}}],[\"第二个参数开始表示执行该函数传递的参数\",{\"1\":{\"1448\":1}}],[\"第二个参数可以省略不写\",{\"1\":{\"1359\":1}}],[\"第二个参数为键值对内容\",{\"1\":{\"1212\":1}}],[\"第二个参数\",{\"1\":{\"196\":1,\"222\":1,\"238\":1}}],[\"第二个参数传入数组形式的值\",{\"1\":{\"186\":1}}],[\"第二种自动触发模式\",{\"1\":{\"1330\":1}}],[\"第二种引入方法\",{\"1\":{\"1189\":1}}],[\"第二种\",{\"1\":{\"519\":1}}],[\"第二种写法\",{\"1\":{\"431\":1}}],[\"第二种方式\",{\"1\":{\"149\":1,\"495\":1,\"511\":1}}],[\"第二轮循环情况2\",{\"1\":{\"357\":1,\"361\":1}}],[\"第二轮循环情况1\",{\"1\":{\"357\":1,\"361\":1}}],[\"第二轮遍历\",{\"1\":{\"354\":1}}],[\"第二步才是真正的处理\",{\"1\":{\"274\":1}}],[\"第二步\",{\"1\":{\"272\":1,\"493\":1,\"918\":1,\"919\":1,\"920\":1}}],[\"第一三部分用逗号分割\",{\"1\":{\"1273\":1}}],[\"第一阶段\",{\"1\":{\"675\":1}}],[\"第一步\",{\"1\":{\"493\":1,\"918\":1,\"919\":1,\"920\":1}}],[\"第一步为\",{\"1\":{\"274\":1}}],[\"第一种简写\",{\"1\":{\"1330\":1}}],[\"第一种引入方法\",{\"1\":{\"1189\":1}}],[\"第一种写法\",{\"1\":{\"431\":1}}],[\"第一种方式\",{\"1\":{\"149\":1,\"495\":1}}],[\"第一轮遍历会在\",{\"1\":{\"355\":1}}],[\"第一轮遍历\",{\"1\":{\"354\":1}}],[\"第一个值为\",{\"1\":{\"1259\":4}}],[\"第一个单词以小写字母开始\",{\"1\":{\"1240\":1}}],[\"第一个函数的第一个参数\",{\"1\":{\"1177\":1}}],[\"第一个写\",{\"1\":{\"1000\":1}}],[\"第一个是\",{\"1\":{\"905\":2,\"1391\":1}}],[\"第一个是事件名第二个是参数\",{\"1\":{\"514\":1}}],[\"第一个demo图例\",{\"1\":{\"676\":1}}],[\"第一个老fiber\",{\"1\":{\"357\":1,\"361\":1}}],[\"第一个参数为原型对象\",{\"1\":{\"1212\":1}}],[\"第一个参数为要在元素中移除的类名\",{\"1\":{\"1102\":1}}],[\"第一个参数\",{\"1\":{\"222\":1}}],[\"第一个传入参数为\",{\"1\":{\"156\":1}}],[\"第一次调用对象\",{\"1\":{\"1173\":1}}],[\"第一次和第二次会间隔略长\",{\"1\":{\"1151\":1}}],[\"第一次渲染以同步的方式渲染根节点\",{\"1\":{\"272\":1,\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"第一次初始化指定的值创建闭包变量缓存\",{\"1\":{\"181\":1}}],[\"第一次为初始化\",{\"1\":{\"156\":1}}],[\"类其实就是语法糖\",{\"1\":{\"1435\":1}}],[\"类创建的实例对象有\",{\"1\":{\"1435\":1}}],[\"类创建一个\",{\"1\":{\"621\":1}}],[\"类可以通过原型对象添加方法\",{\"1\":{\"1435\":1}}],[\"类原型对象\",{\"1\":{\"1435\":1}}],[\"类有原型对象\",{\"1\":{\"1435\":1}}],[\"类有一处特别需要注意的地方\",{\"1\":{\"626\":1}}],[\"类数组对象\",{\"1\":{\"1405\":1}}],[\"类数组对象变为数组\",{\"1\":{\"695\":1}}],[\"类操作与\",{\"0\":{\"1301\":1}}],[\"类里面\",{\"1\":{\"1180\":1}}],[\"类选择器在修改样式中用的最多\",{\"1\":{\"863\":1}}],[\"类选择器使用\",{\"1\":{\"862\":1}}],[\"类选择器\",{\"0\":{\"862\":1},\"1\":{\"860\":1,\"863\":1,\"864\":1,\"932\":1,\"1286\":1}}],[\"类实现\",{\"1\":{\"839\":1}}],[\"类实现订阅系统后\",{\"1\":{\"608\":1}}],[\"类后\",{\"1\":{\"647\":1}}],[\"类需要实现的功能是\",{\"1\":{\"646\":1}}],[\"类中对\",{\"1\":{\"632\":1}}],[\"类中\",{\"1\":{\"628\":1}}],[\"类中在\",{\"1\":{\"627\":1}}],[\"类中不难看出\",{\"1\":{\"608\":1}}],[\"类储存在\",{\"1\":{\"621\":1}}],[\"类的本质还是\",{\"1\":{\"1435\":1}}],[\"类的继承\",{\"0\":{\"1432\":1}}],[\"类的\",{\"1\":{\"627\":1}}],[\"类的定义很接近于\",{\"1\":{\"623\":1}}],[\"类的静态属性\",{\"1\":{\"621\":1}}],[\"类的同时\",{\"1\":{\"621\":1}}],[\"类的实例化已经可实现对\",{\"1\":{\"610\":1}}],[\"类上\",{\"1\":{\"620\":1,\"621\":1}}],[\"类作为一个独立的订阅系统\",{\"1\":{\"607\":1}}],[\"类初步实现\",{\"0\":{\"607\":1,\"608\":1}}],[\"类和\",{\"1\":{\"605\":1,\"609\":1,\"621\":1}}],[\"类\",{\"0\":{\"602\":1,\"1180\":1,\"1430\":1},\"1\":{\"605\":2,\"609\":1,\"620\":1,\"632\":1,\"854\":1,\"862\":1,\"1097\":1}}],[\"类库\",{\"1\":{\"590\":1}}],[\"类泛型\",{\"1\":{\"580\":1}}],[\"类组件对应的fiber存的是类实例状态\",{\"1\":{\"270\":1,\"272\":1}}],[\"类组件1\",{\"1\":{\"270\":1,\"272\":1}}],[\"类组件在\",{\"1\":{\"199\":1}}],[\"类型只有一个值\",{\"1\":{\"1244\":1}}],[\"类型的对象\",{\"1\":{\"1205\":1}}],[\"类型的属性\",{\"1\":{\"1177\":2}}],[\"类型的值也可以作为对象的属性名\",{\"1\":{\"1170\":1}}],[\"类型的值\",{\"1\":{\"1170\":1}}],[\"类型的数据\",{\"1\":{\"1063\":1}}],[\"类型的组件在执行挂载的时候\",{\"1\":{\"323\":1}}],[\"类型有很多种情况\",{\"1\":{\"702\":1}}],[\"类型等声明失效\",{\"1\":{\"591\":1}}],[\"类型推断性能\",{\"1\":{\"584\":1}}],[\"类型推导\",{\"1\":{\"89\":1}}],[\"类型文件中的类型注册成全局的\",{\"1\":{\"582\":1}}],[\"类型信息仅在开发阶段起作用\",{\"1\":{\"581\":1}}],[\"类型声明\",{\"0\":{\"581\":1},\"1\":{\"581\":1}}],[\"类型注解会累加\",{\"1\":{\"580\":1}}],[\"类型\",{\"0\":{\"580\":1},\"1\":{\"498\":1,\"580\":2,\"1243\":1}}],[\"类型相同\",{\"1\":{\"343\":1}}],[\"类型props\",{\"1\":{\"327\":1}}],[\"类型组件\",{\"1\":{\"323\":1}}],[\"类型区别执行不同的插入操作\",{\"1\":{\"274\":1}}],[\"类型为\",{\"1\":{\"216\":1}}],[\"类似字符串的数据类型\",{\"1\":{\"1167\":1}}],[\"类似微任务\",{\"1\":{\"371\":1,\"381\":1}}],[\"类似空标签\",{\"1\":{\"219\":1}}],[\"类似\",{\"1\":{\"200\":1,\"511\":1,\"727\":1}}],[\"类似于原生\",{\"1\":{\"1321\":1}}],[\"类似于原生setattribute\",{\"1\":{\"1311\":1}}],[\"类似于原生getattribute\",{\"1\":{\"1311\":1}}],[\"类似于全局对象\",{\"1\":{\"1231\":1}}],[\"类似于mustache中的tokens\",{\"1\":{\"695\":1}}],[\"类似于宏任务\",{\"1\":{\"371\":1,\"381\":1}}],[\"类似于\",{\"1\":{\"196\":1,\"209\":1,\"543\":1,\"718\":1,\"829\":1,\"963\":1,\"1126\":1}}],[\"类似于模拟类式组件中的生命周期钩子\",{\"1\":{\"184\":1}}],[\"类名后面不要加小括号\",{\"1\":{\"1431\":1}}],[\"类名是有顺序的\",{\"1\":{\"937\":1}}],[\"类名内部写法\",{\"1\":{\"149\":2}}],[\"类名外部写法\",{\"1\":{\"149\":2}}],[\"弃用写法\",{\"0\":{\"1118\":1}}],[\"弃用\",{\"1\":{\"149\":1}}],[\"属于一个工具类不用创建对象\",{\"1\":{\"1368\":1}}],[\"属于浏览器默认行为\",{\"1\":{\"1140\":1}}],[\"属于\",{\"1\":{\"1027\":1,\"1151\":1}}],[\"属于标记语言\",{\"1\":{\"1026\":1}}],[\"属于状态对象合并\",{\"1\":{\"144\":1}}],[\"属性返回\",{\"1\":{\"1440\":3}}],[\"属性返回对象的构造函数\",{\"1\":{\"1440\":1}}],[\"属性返回元素的类名\",{\"1\":{\"1097\":1}}],[\"属性为\",{\"1\":{\"1429\":1}}],[\"属性默认值为\",{\"1\":{\"1429\":1}}],[\"属性指向为\",{\"1\":{\"1423\":1}}],[\"属性指定非\",{\"1\":{\"900\":1}}],[\"属性指定当文本溢出包含它的元素时\",{\"1\":{\"897\":1}}],[\"属性发生改变时\",{\"1\":{\"1407\":1}}],[\"属性发送数据\",{\"1\":{\"388\":1}}],[\"属性就会返回\",{\"1\":{\"1406\":1}}],[\"属性删除\",{\"0\":{\"1406\":1}}],[\"属性查看\",{\"0\":{\"1404\":1}}],[\"属性遍历\",{\"0\":{\"1403\":1}}],[\"属性操作\",{\"0\":{\"1309\":1}}],[\"属性可以不用加引号\",{\"1\":{\"1296\":1}}],[\"属性可以通过一些简单的规则\",{\"1\":{\"909\":1}}],[\"属性必须加引号\",{\"1\":{\"1295\":1}}],[\"属性访问自定义属性\",{\"1\":{\"1103\":1}}],[\"属性不能采用这种方式\",{\"1\":{\"1085\":1}}],[\"属性节点并非是元素节点的子节点\",{\"1\":{\"1083\":1}}],[\"属性节点\",{\"0\":{\"1083\":1,\"1096\":1},\"1\":{\"1078\":1}}],[\"属性之后\",{\"1\":{\"1057\":1}}],[\"属性之间不分先后顺序\",{\"1\":{\"1044\":1}}],[\"属性=\",{\"1\":{\"1044\":1}}],[\"属性采取键值对\",{\"1\":{\"1044\":1}}],[\"属性与属性之间均以空格分开\",{\"1\":{\"1044\":1}}],[\"属性与方法注入\",{\"1\":{\"753\":1}}],[\"属性规定\",{\"1\":{\"1034\":1}}],[\"属性总是在\",{\"1\":{\"1029\":1}}],[\"属性书写顺序\",{\"0\":{\"1000\":1}}],[\"属性才能生效\",{\"1\":{\"996\":1}}],[\"属性根据媒体查询匹配方案自动转换为\",{\"1\":{\"966\":1}}],[\"属性写成\",{\"1\":{\"965\":1}}],[\"属性用于指定一个元素应可见还是隐藏\",{\"1\":{\"914\":1}}],[\"属性用来标明怎么样进行单词内的断句\",{\"1\":{\"900\":1}}],[\"属性用来标明是否允许浏览器在单词内进行断句\",{\"1\":{\"900\":1}}],[\"属性允许长单词或\",{\"1\":{\"899\":1}}],[\"属性增加或减少字符间的空白\",{\"1\":{\"896\":1}}],[\"属性增加或减少单词间的空白\",{\"1\":{\"895\":1}}],[\"属性间以空格隔开\",{\"1\":{\"887\":1}}],[\"属性复合使用\",{\"0\":{\"887\":1}}],[\"属性设置和读取的都是内联样式\",{\"1\":{\"1105\":1}}],[\"属性设置为\",{\"1\":{\"924\":1}}],[\"属性设置如何处理元素内的空白\",{\"1\":{\"900\":1}}],[\"属性设置小型大写字母的字体显示文本\",{\"1\":{\"886\":1}}],[\"属性设置文本的风格\",{\"1\":{\"885\":1}}],[\"属性设置文本字体的粗细\",{\"1\":{\"884\":1}}],[\"属性主要用于定义小型大写字母文本\",{\"1\":{\"886\":1}}],[\"属性只能在每个\",{\"1\":{\"863\":1}}],[\"属性是五个\",{\"1\":{\"909\":1}}],[\"属性是对指定的对象设置的样式属性\",{\"1\":{\"855\":1}}],[\"属性是否发生变化\",{\"1\":{\"162\":4}}],[\"属性和方法也都不尽相同\",{\"1\":{\"1078\":1}}],[\"属性和属性值之间用英文分号\",{\"1\":{\"855\":1}}],[\"属性和属性值以\",{\"1\":{\"855\":1}}],[\"属性和接收\",{\"1\":{\"588\":1}}],[\"属性实现\",{\"1\":{\"832\":1}}],[\"属性自动获取等\",{\"1\":{\"751\":1}}],[\"属性配置\",{\"1\":{\"739\":1}}],[\"属性配置的组件处理为懒加载\",{\"1\":{\"739\":1}}],[\"属性变化\",{\"1\":{\"636\":1}}],[\"属性创建真正的\",{\"1\":{\"636\":1}}],[\"属性计算值的情况\",{\"1\":{\"634\":1}}],[\"属性计算值完全依赖另一个\",{\"1\":{\"634\":1}}],[\"属性重新计算并在\",{\"1\":{\"634\":1}}],[\"属性绑定在组件实例上\",{\"1\":{\"631\":1}}],[\"属性值为\",{\"1\":{\"1423\":1}}],[\"属性值则指向该函数所在堆\",{\"1\":{\"1423\":1}}],[\"属性值查询一组元素节点对象\",{\"1\":{\"1092\":1}}],[\"属性值可以是\",{\"1\":{\"954\":1}}],[\"属性值前面\",{\"1\":{\"859\":1}}],[\"属性值关键字全部使用小写字母\",{\"1\":{\"858\":1}}],[\"属性值中的\",{\"1\":{\"636\":1}}],[\"属性值也可以正确响应了\",{\"1\":{\"635\":1}}],[\"属性值\",{\"0\":{\"1295\":1},\"1\":{\"628\":3,\"636\":1,\"862\":2,\"885\":1,\"914\":1,\"977\":2,\"984\":1,\"1044\":2,\"1048\":1,\"1057\":2,\"1078\":1,\"1310\":1,\"1311\":1}}],[\"属性值的读写\",{\"1\":{\"549\":1}}],[\"属性仅有数组和对象才有\",{\"1\":{\"627\":1}}],[\"属性路径\",{\"1\":{\"626\":1}}],[\"属性路径解析\",{\"1\":{\"626\":1}}],[\"属性将允许开启深度监听\",{\"1\":{\"626\":1}}],[\"属性时需要使用元素\",{\"1\":{\"1085\":1}}],[\"属性时\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1,\"634\":1,\"1042\":1}}],[\"属性定义字体大小\",{\"1\":{\"883\":1}}],[\"属性定义文本的字体系列\",{\"1\":{\"882\":1}}],[\"属性定义\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"612\":1}}],[\"属性`\",{\"1\":{\"601\":2,\"602\":4,\"604\":2,\"608\":2,\"609\":2,\"610\":2,\"613\":2}}],[\"属性包含了需要校验\",{\"1\":{\"582\":1}}],[\"属性的属性名\",{\"1\":{\"1215\":1}}],[\"属性的对象\",{\"1\":{\"1173\":1}}],[\"属性的百分比值来排列此元素\",{\"1\":{\"924\":1}}],[\"属性的简写\",{\"1\":{\"909\":1}}],[\"属性的值是一个\",{\"1\":{\"1103\":1}}],[\"属性的值\",{\"1\":{\"886\":1,\"894\":1,\"895\":1,\"896\":1,\"898\":1,\"924\":1}}],[\"属性的按需注入\",{\"1\":{\"753\":1}}],[\"属性的监听器\",{\"1\":{\"636\":1}}],[\"属性的\",{\"1\":{\"601\":2,\"635\":1}}],[\"属性的删除等\",{\"1\":{\"549\":1}}],[\"属性的添加\",{\"1\":{\"549\":1}}],[\"属性的添加todo\",{\"1\":{\"273\":1,\"297\":1,\"327\":1}}],[\"属性集合\",{\"1\":{\"515\":1}}],[\"属性集成的属性时\",{\"1\":{\"452\":1}}],[\"属性中设定\",{\"1\":{\"867\":1}}],[\"属性中写入\",{\"1\":{\"475\":1}}],[\"属性中获取\",{\"1\":{\"87\":1}}],[\"属性多次调用内部不会多次执行\",{\"1\":{\"450\":1}}],[\"属性添加声明与\",{\"1\":{\"332\":1}}],[\"属性更新\",{\"1\":{\"330\":2}}],[\"属性等于的是一个布尔值\",{\"1\":{\"1171\":1}}],[\"属性等\",{\"1\":{\"323\":1}}],[\"属性对老\",{\"1\":{\"323\":1}}],[\"属性对象\",{\"1\":{\"252\":1}}],[\"属性赋予为\",{\"1\":{\"323\":1}}],[\"属性冒泡\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"属性名获取\",{\"0\":{\"1405\":1}}],[\"属性名可以不带引号\",{\"1\":{\"1308\":1}}],[\"属性名和属性值是一组一组的键值对结构\",{\"1\":{\"1341\":1}}],[\"属性名和属性值用冒号隔开\",{\"1\":{\"1296\":1}}],[\"属性名和值\",{\"1\":{\"1210\":1}}],[\"属性名上\",{\"1\":{\"636\":1}}],[\"属性名\",{\"0\":{\"1294\":1,\"1295\":1},\"1\":{\"252\":1,\"628\":2,\"636\":1,\"858\":1,\"1048\":1,\"1078\":1,\"1085\":1,\"1240\":1,\"1341\":2}}],[\"属性来定义\",{\"1\":{\"1440\":1}}],[\"属性来设置\",{\"1\":{\"863\":1}}],[\"属性来调用\",{\"1\":{\"862\":1}}],[\"属性来命名\",{\"1\":{\"240\":1}}],[\"属性来标识自己\",{\"1\":{\"152\":1}}],[\"属性接受任何在组件加载过程中你想展示的\",{\"1\":{\"207\":1}}],[\"属性\",{\"1\":{\"147\":1,\"149\":1,\"213\":1,\"214\":1,\"237\":2,\"252\":1,\"269\":1,\"323\":1,\"327\":1,\"425\":1,\"432\":1,\"451\":1,\"465\":2,\"474\":1,\"520\":1,\"588\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"621\":1,\"626\":1,\"627\":2,\"628\":1,\"634\":2,\"661\":1,\"702\":1,\"722\":1,\"723\":1,\"736\":1,\"747\":2,\"753\":1,\"843\":1,\"862\":2,\"868\":2,\"887\":2,\"908\":1,\"927\":1,\"950\":1,\"954\":1,\"966\":1,\"969\":2,\"970\":1,\"985\":2,\"991\":1,\"992\":1,\"993\":1,\"994\":1,\"995\":1,\"996\":1,\"1019\":1,\"1021\":1,\"1029\":1,\"1044\":1,\"1052\":1,\"1053\":1,\"1057\":2,\"1061\":1,\"1065\":2,\"1067\":1,\"1078\":1,\"1106\":1,\"1142\":2,\"1152\":1,\"1275\":1,\"1310\":2,\"1311\":2,\"1391\":1,\"1406\":1,\"1423\":1,\"1429\":1}}],[\"属性获取一组元素节点对象\",{\"1\":{\"1085\":1,\"1092\":1}}],[\"属性获取一个元素节点对象\",{\"1\":{\"1085\":1,\"1092\":1}}],[\"属性获取响应结果\",{\"1\":{\"840\":1}}],[\"属性获取异常对象\",{\"1\":{\"840\":1}}],[\"属性获取到\",{\"1\":{\"425\":1}}],[\"属性获取\",{\"1\":{\"96\":1}}],[\"需求\",{\"1\":{\"1333\":1}}],[\"需使用\",{\"1\":{\"1146\":1}}],[\"需使用原型方法setstate\",{\"1\":{\"144\":1}}],[\"需结合\",{\"1\":{\"658\":1}}],[\"需配合\",{\"1\":{\"587\":1}}],[\"需加\",{\"1\":{\"583\":1}}],[\"需注意内存泄漏问题\",{\"1\":{\"165\":1}}],[\"需要加反斜杠\",{\"1\":{\"1381\":1}}],[\"需要转换\",{\"1\":{\"1319\":1}}],[\"需要添加\",{\"1\":{\"1276\":1}}],[\"需要通过\",{\"1\":{\"1145\":1,\"1206\":1}}],[\"需要通过响应式数据声明\",{\"1\":{\"631\":1}}],[\"需要统一\",{\"1\":{\"1131\":1}}],[\"需要一个字符串作为参数\",{\"1\":{\"1377\":1}}],[\"需要一个解决方案\",{\"1\":{\"1333\":1}}],[\"需要一个布尔值\",{\"1\":{\"1130\":1}}],[\"需要一个整数作为参数\",{\"1\":{\"1067\":1}}],[\"需要用\",{\"1\":{\"1108\":1,\"1230\":1}}],[\"需要两个参数\",{\"1\":{\"1106\":1}}],[\"需要改为驼峰命名法\",{\"1\":{\"1105\":1}}],[\"需要给对象添加obj\",{\"1\":{\"1073\":1}}],[\"需要给对象的\",{\"1\":{\"610\":1,\"617\":1}}],[\"需要书写大量看似没有逻辑的代码\",{\"1\":{\"1003\":1}}],[\"需要占有位置\",{\"1\":{\"997\":1}}],[\"需要定位来实现\",{\"1\":{\"987\":1}}],[\"需要花很大精力去调兼容性问题\",{\"1\":{\"958\":1}}],[\"需要手动添写\",{\"1\":{\"949\":1}}],[\"需要调用\",{\"1\":{\"841\":1}}],[\"需要调动数组对象的dep实例开启依赖收集\",{\"1\":{\"610\":1,\"614\":1}}],[\"需要跳转到其他页时\",{\"1\":{\"739\":1}}],[\"需要移动到旧前指向的旧节点之前\",{\"1\":{\"676\":1}}],[\"需要移动到旧后指向的旧节点之后\",{\"1\":{\"676\":1}}],[\"需要精细化比较\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"需要包装虚拟节点\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"需要遍历\",{\"1\":{\"675\":1,\"689\":1,\"1319\":1}}],[\"需要判断\",{\"1\":{\"675\":1,\"689\":1}}],[\"需要判断内部的解析路径\",{\"1\":{\"658\":1}}],[\"需要做额外判断\",{\"1\":{\"662\":1}}],[\"需要做dom\",{\"1\":{\"272\":1,\"318\":1}}],[\"需要借助栈结构的特性\",{\"1\":{\"658\":1}}],[\"需要递归调用rendertemplate将其内部数组递归殆尽\",{\"1\":{\"657\":1}}],[\"需要实现在精细化比较函数\",{\"1\":{\"692\":1}}],[\"需要实现\",{\"1\":{\"647\":1}}],[\"需要重新计算值\",{\"1\":{\"633\":1,\"634\":1}}],[\"需要根据执行环境和执行方法确定\",{\"1\":{\"1423\":1}}],[\"需要根据\",{\"1\":{\"632\":1}}],[\"需要对\",{\"1\":{\"626\":1,\"800\":1}}],[\"需要对多个属性同时监听才行\",{\"1\":{\"452\":1}}],[\"需要变量周转才能工作\",{\"1\":{\"601\":1}}],[\"需要将\",{\"1\":{\"584\":1}}],[\"需要脚手架支持\",{\"1\":{\"488\":1}}],[\"需要动态指定\",{\"1\":{\"454\":1}}],[\"需要为整数\",{\"1\":{\"432\":1}}],[\"需要为共享状态逻辑提供更好的原生途径\",{\"1\":{\"177\":1}}],[\"需要的时候再去挂载\",{\"1\":{\"425\":1}}],[\"需要修改fiber的flags\",{\"1\":{\"373\":1}}],[\"需要跟踪副作用且存在的老fiber\",{\"1\":{\"361\":1}}],[\"需要插入到旧前指针之前\",{\"1\":{\"683\":1,\"691\":1}}],[\"需要插入\",{\"1\":{\"357\":1,\"361\":1}}],[\"需要寻找弟弟或儿子\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"需要执行不同的生成策略\",{\"1\":{\"323\":1}}],[\"需要执行\",{\"1\":{\"272\":1,\"676\":1}}],[\"需要知道的它的子虚拟dom\",{\"1\":{\"272\":1,\"318\":1}}],[\"需要return执行completework\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"需要注意\",{\"1\":{\"244\":1}}],[\"需要注意的是\",{\"1\":{\"22\":1,\"339\":1,\"366\":1}}],[\"需要使用小括号把它们包裹在一起形成一个表达式分组\",{\"1\":{\"1384\":1}}],[\"需要使用<textarea>标签\",{\"1\":{\"1057\":1}}],[\"需要使用react\",{\"1\":{\"239\":1}}],[\"需要使用\",{\"1\":{\"236\":1,\"1142\":1,\"1148\":1,\"1274\":1}}],[\"需要引入各类优先级常量\",{\"1\":{\"393\":1}}],[\"需要引入\",{\"1\":{\"149\":1,\"639\":1,\"868\":1}}],[\"需要\",{\"1\":{\"46\":1,\"125\":1,\"138\":2,\"1191\":1}}],[\"需要服务端配置\",{\"1\":{\"12\":1}}],[\"箭头函数简写\",{\"1\":{\"1163\":1}}],[\"箭头函数\",{\"0\":{\"1163\":1},\"1\":{\"143\":1}}],[\"本节讲到的正则表达式语法适用于\",{\"1\":{\"1380\":1}}],[\"本文记录\",{\"1\":{\"705\":1}}],[\"本章记录基于\",{\"1\":{\"741\":1}}],[\"本章节重在讲解模板编译与指令绑定\",{\"1\":{\"693\":1}}],[\"本章节只讨论虚拟\",{\"1\":{\"664\":1}}],[\"本章节内容参考自\",{\"1\":{\"664\":1}}],[\"本章节不是对\",{\"1\":{\"637\":1}}],[\"本章同样也简化了\",{\"1\":{\"660\":1}}],[\"本章主要以类式组件为例\",{\"1\":{\"140\":1}}],[\"本身\",{\"1\":{\"1381\":1}}],[\"本身创建\",{\"1\":{\"809\":1}}],[\"本身的\",{\"1\":{\"636\":1}}],[\"本身并不具备依赖收集器\",{\"1\":{\"636\":1}}],[\"本身没有自己的\",{\"1\":{\"634\":1}}],[\"本身是一个纯函数\",{\"1\":{\"233\":1}}],[\"本质属于字体\",{\"1\":{\"917\":1}}],[\"本质就是一个外部的状态管理库\",{\"1\":{\"848\":1}}],[\"本质就是真实\",{\"1\":{\"269\":1}}],[\"本质上是内存中的一块空间\",{\"1\":{\"1239\":1}}],[\"本质上\",{\"1\":{\"843\":1,\"1004\":1}}],[\"本质\",{\"0\":{\"983\":1,\"1435\":1},\"1\":{\"500\":1,\"914\":1,\"1279\":1}}],[\"本质是一个函数\",{\"1\":{\"543\":1}}],[\"本质是一个特殊属性\",{\"1\":{\"474\":1}}],[\"本质是react\",{\"1\":{\"121\":1}}],[\"本质是初始状态的代理\",{\"1\":{\"103\":1}}],[\"连续执行和赋值\",{\"1\":{\"1265\":1}}],[\"连续触发时\",{\"1\":{\"1151\":1}}],[\"连等赋值\",{\"1\":{\"648\":1}}],[\"连接结束\",{\"1\":{\"1066\":1}}],[\"连接\",{\"1\":{\"139\":1,\"872\":1,\"1066\":1,\"1341\":1}}],[\"连带子组件一起重新渲染\",{\"1\":{\"91\":1}}],[\"注释标签里面的内容是给程序员看的\",{\"1\":{\"1040\":1}}],[\"注释语句\",{\"1\":{\"1040\":1}}],[\"注释\",{\"0\":{\"1040\":1},\"1\":{\"1078\":1}}],[\"注重计算出来的值\",{\"1\":{\"541\":1}}],[\"注册路由\",{\"1\":{\"822\":1}}],[\"注册视图\",{\"1\":{\"820\":1}}],[\"注册\",{\"1\":{\"820\":1}}],[\"注册全局指令\",{\"1\":{\"561\":1}}],[\"注册全局指令等\",{\"1\":{\"561\":1}}],[\"注册全局组件\",{\"1\":{\"561\":2}}],[\"注册组件\",{\"1\":{\"487\":1}}],[\"注册过滤器\",{\"1\":{\"466\":1}}],[\"注册原生事件\",{\"1\":{\"286\":1}}],[\"注册捕获事件关系\",{\"1\":{\"282\":1}}],[\"注册冒泡事件关系\",{\"1\":{\"282\":1}}],[\"注册两个阶段的事件名\",{\"1\":{\"282\":1}}],[\"注\",{\"1\":{\"271\":1,\"550\":1,\"583\":2,\"591\":1,\"664\":1}}],[\"注入到页面中被隔离的样式名\",{\"1\":{\"139\":1}}],[\"注意语法规范\",{\"1\":{\"1431\":1}}],[\"注意是从\",{\"1\":{\"1376\":1}}],[\"注意此处编码为十进制\",{\"1\":{\"1262\":1}}],[\"注意返回原值\",{\"1\":{\"1259\":2}}],[\"注意返回一个新数组\",{\"1\":{\"1198\":1}}],[\"注意这个事件给\",{\"1\":{\"1119\":1}}],[\"注意在书写时需要用引号括起来\",{\"1\":{\"1241\":1}}],[\"注意在\",{\"1\":{\"1031\":1}}],[\"注意网页中的坐标有所不同\",{\"1\":{\"916\":1}}],[\"注意顺序不能颠倒\",{\"1\":{\"873\":1}}],[\"注意该方式只能在\",{\"1\":{\"812\":1}}],[\"注意watchincrementasync这个函数必须在主入口index中运行sagamiddleware\",{\"1\":{\"762\":1}}],[\"注意区别\",{\"1\":{\"487\":1}}],[\"注意区分\",{\"1\":{\"443\":1}}],[\"注意对不同属性的\",{\"1\":{\"323\":1}}],[\"注意事件派发中事件捕获和冒泡累加回调函数的关键函数是\",{\"1\":{\"287\":1}}],[\"注意事项\",{\"0\":{\"231\":1,\"235\":1},\"1\":{\"578\":1}}],[\"注意监听器只针对根容器\",{\"1\":{\"283\":1}}],[\"注意每个\",{\"1\":{\"273\":1}}],[\"注意flags才是节点自己的副作用\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"注意结合递归创建\",{\"1\":{\"272\":1}}],[\"注意pending为循环链表\",{\"1\":{\"271\":1,\"272\":1}}],[\"注意大小写\",{\"1\":{\"158\":1}}],[\"注意全局变量污染\",{\"1\":{\"113\":1}}],[\"注意传递\",{\"1\":{\"86\":1}}],[\"注意点\",{\"0\":{\"425\":1},\"1\":{\"86\":1,\"534\":1,\"887\":1}}],[\"注意\",{\"0\":{\"143\":1,\"148\":1,\"153\":1,\"238\":1,\"1148\":1},\"1\":{\"26\":1,\"30\":1,\"84\":1,\"122\":1,\"139\":1,\"140\":1,\"145\":1,\"155\":1,\"159\":1,\"160\":1,\"161\":1,\"212\":1,\"215\":1,\"229\":1,\"242\":2,\"250\":1,\"262\":1,\"270\":1,\"272\":1,\"365\":1,\"443\":1,\"447\":1,\"457\":1,\"461\":1,\"466\":1,\"498\":1,\"505\":1,\"608\":1,\"633\":1,\"639\":1,\"674\":1,\"700\":1,\"713\":1,\"760\":1,\"773\":1,\"818\":1,\"830\":1,\"862\":1,\"863\":1,\"876\":1,\"877\":1,\"885\":1,\"918\":1,\"932\":1,\"948\":1,\"964\":1,\"970\":1,\"972\":1,\"975\":1,\"985\":1,\"1032\":1,\"1062\":1,\"1083\":1,\"1084\":1,\"1085\":1,\"1094\":1,\"1101\":1,\"1102\":1,\"1105\":1,\"1106\":1,\"1108\":1,\"1130\":2,\"1142\":2,\"1243\":1,\"1252\":1,\"1287\":1,\"1296\":1,\"1306\":1,\"1344\":1,\"1366\":1,\"1371\":1,\"1401\":1,\"1406\":1}}],[\"入执行栈中\",{\"1\":{\"1423\":1}}],[\"入口函数\",{\"0\":{\"1282\":1}}],[\"入口配置\",{\"0\":{\"735\":1}}],[\"入口组件\",{\"0\":{\"826\":1},\"1\":{\"732\":1}}],[\"入口文件\",{\"0\":{\"803\":1,\"810\":1},\"1\":{\"138\":1,\"823\":1}}],[\"入口文件样式\",{\"1\":{\"138\":1}}],[\"入栈\",{\"1\":{\"628\":1,\"656\":1}}],[\"入队更新\",{\"1\":{\"338\":1,\"373\":1}}],[\"入门\",{\"1\":{\"103\":1}}],[\"做铺垫\",{\"1\":{\"1452\":1}}],[\"做结构\",{\"1\":{\"854\":1}}],[\"做统一的路由前置钩子\",{\"1\":{\"738\":1}}],[\"做如下的稍加修改\",{\"1\":{\"644\":1}}],[\"做出了调整\",{\"1\":{\"561\":1}}],[\"做收尾工作\",{\"1\":{\"482\":1}}],[\"做持久化储存\",{\"1\":{\"430\":1}}],[\"做两件事\",{\"1\":{\"272\":1}}],[\"做一些收尾工作\",{\"1\":{\"173\":1}}],[\"做特定的工作\",{\"1\":{\"163\":1}}],[\"做测试\",{\"1\":{\"138\":1}}],[\"做数据转发代理\",{\"1\":{\"61\":1}}],[\"图像文件位于\",{\"1\":{\"1045\":3}}],[\"图像标签可以拥有多个属性\",{\"1\":{\"1044\":1}}],[\"图像标签注意点\",{\"1\":{\"1044\":1}}],[\"图像路径无效时的代替文字\",{\"1\":{\"1044\":1}}],[\"图像url\",{\"1\":{\"1044\":1}}],[\"图像\",{\"1\":{\"1043\":1}}],[\"图片加载完毕才执行代码\",{\"1\":{\"1282\":1}}],[\"图片标签\",{\"0\":{\"1044\":1}}],[\"图片压缩体积大约只有\",{\"1\":{\"955\":1}}],[\"图片压缩技术\",{\"1\":{\"955\":1}}],[\"图片格式\",{\"1\":{\"955\":1}}],[\"图片底侧会有一个空白缝隙\",{\"1\":{\"924\":1}}],[\"图片底部默认留白缝隙解决方法\",{\"1\":{\"924\":1}}],[\"图片\",{\"1\":{\"924\":1,\"998\":1}}],[\"图片本身放大和缩小会失真\",{\"1\":{\"916\":1}}],[\"图片文件比较大\",{\"1\":{\"916\":1}}],[\"图片路径\",{\"1\":{\"908\":1,\"1044\":1}}],[\"图片地址\",{\"1\":{\"907\":1}}],[\"图片的外形\",{\"1\":{\"854\":1}}],[\"图解\",{\"1\":{\"664\":1}}],[\"图\",{\"1\":{\"138\":3}}],[\"网景公司\",{\"1\":{\"1132\":1}}],[\"网景公司和微软公司对传播理解不同\",{\"1\":{\"1132\":1}}],[\"网易等\",{\"1\":{\"985\":1}}],[\"网站内部页面之间的相互链接\",{\"1\":{\"1043\":1}}],[\"网站中的一\",{\"1\":{\"1025\":1}}],[\"网站\",{\"1\":{\"1025\":1}}],[\"网站域名前面加\",{\"1\":{\"957\":1}}],[\"网站页签图标\",{\"1\":{\"138\":1}}],[\"网页中的所有节点都是它的子节点\",{\"1\":{\"1079\":1}}],[\"网页中的每一个部分都可以称为一个节点\",{\"1\":{\"1078\":1}}],[\"网页中的每一个部分都转换为了对象\",{\"1\":{\"1077\":1}}],[\"网页中一些标签天生具有跨域能力\",{\"1\":{\"26\":1}}],[\"网页文档\",{\"1\":{\"1077\":1}}],[\"网页模型的定义以及交互的编写\",{\"1\":{\"1028\":1,\"1379\":1}}],[\"网页的形成\",{\"1\":{\"1025\":1}}],[\"网页的美容师\",{\"0\":{\"854\":1}}],[\"网页是构成网站的基本元素\",{\"1\":{\"1025\":1}}],[\"网页\",{\"1\":{\"1025\":1,\"1262\":1}}],[\"网页元素链接\",{\"1\":{\"1043\":1}}],[\"网页元素很多都带有默认的内外边距\",{\"1\":{\"972\":1}}],[\"网页元素基本都是盒子\",{\"1\":{\"967\":1}}],[\"网页布局总结\",{\"0\":{\"1002\":1}}],[\"网页布局第二准则\",{\"1\":{\"980\":1}}],[\"网页布局第一准则\",{\"1\":{\"976\":1}}],[\"网页布局的核心本质\",{\"1\":{\"967\":1}}],[\"网页布局过程\",{\"1\":{\"967\":1}}],[\"网络请求过程中\",{\"1\":{\"840\":1}}],[\"网络请求\",{\"0\":{\"839\":1}}],[\"网络已重新连接\",{\"1\":{\"836\":1}}],[\"网格组件\",{\"1\":{\"789\":1}}],[\"工具看不到任何信息\",{\"1\":{\"482\":1}}],[\"工作中我们最常用\",{\"1\":{\"887\":1}}],[\"工作流程\",{\"1\":{\"754\":1}}],[\"工作流\",{\"0\":{\"745\":1}}],[\"工作方式\",{\"1\":{\"495\":1}}],[\"工作栈中的\",{\"1\":{\"323\":1}}],[\"工作进入提交阶段\",{\"1\":{\"274\":1}}],[\"工作单元执行方法\",{\"1\":{\"272\":1}}],[\"工作原理\",{\"1\":{\"26\":1,\"1269\":1}}],[\"工程化\",{\"1\":{\"136\":1}}],[\"整门语言有一个通用的数据模型\",{\"1\":{\"1416\":1}}],[\"整洁\",{\"1\":{\"1051\":1}}],[\"整理讯息\",{\"1\":{\"1027\":1}}],[\"整合起来\",{\"1\":{\"702\":1}}],[\"整体创建流程的总结\",{\"1\":{\"697\":1}}],[\"整体结构非常混乱\",{\"1\":{\"676\":1}}],[\"整体技术架构为\",{\"1\":{\"136\":1}}],[\"整个浏览器的窗口\",{\"1\":{\"1061\":1}}],[\"整个应用需要管理的数据都在这个\",{\"1\":{\"746\":1}}],[\"整个应用只有一个\",{\"1\":{\"425\":1}}],[\"整个应用只有一个完整页面\",{\"1\":{\"421\":1}}],[\"整个\",{\"1\":{\"272\":1,\"313\":1,\"1077\":1}}],[\"整个过程不影响初始状态\",{\"1\":{\"103\":1}}],[\"下文时\",{\"1\":{\"1423\":1}}],[\"下所有的\",{\"1\":{\"1287\":1}}],[\"下拉表单元素\",{\"1\":{\"1057\":1}}],[\"下一级路径\",{\"1\":{\"1045\":1}}],[\"下一个老fiber\",{\"1\":{\"357\":1,\"361\":1}}],[\"下载链接\",{\"1\":{\"1043\":1}}],[\"下载好了所有相关依赖\",{\"1\":{\"136\":1}}],[\"下图文字为<p>内文字\",{\"1\":{\"998\":1}}],[\"下图为官方的订阅\",{\"1\":{\"605\":1}}],[\"下外边距\",{\"1\":{\"970\":1}}],[\"下内边距\",{\"1\":{\"969\":2}}],[\"下划线命名法\",{\"1\":{\"1240\":1}}],[\"下划线\",{\"1\":{\"891\":1,\"1037\":1}}],[\"下标开始的指定数目的字符\",{\"1\":{\"1376\":1}}],[\"下标\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"648\":3}}],[\"下\",{\"1\":{\"472\":1}}],[\"下面代码定义一个反前向生命的匹配模式\",{\"1\":{\"1389\":1}}],[\"下面代码定义一个正前向生命的匹配模式\",{\"1\":{\"1388\":1}}],[\"下面代码演示如何使用边界量词\",{\"1\":{\"1386\":1}}],[\"下面示例定义匹配模式包含多个表达式分组\",{\"1\":{\"1391\":1}}],[\"下面示例演示了如何定义匹配模式\",{\"1\":{\"1385\":1}}],[\"下面示例显示当多个重复类量词同时满足条件时\",{\"1\":{\"1385\":1}}],[\"下面结合示例进行演示说明\",{\"1\":{\"1384\":1}}],[\"下面使用\",{\"1\":{\"1381\":1}}],[\"下面的\",{\"1\":{\"1061\":1}}],[\"下面又\",{\"1\":{\"971\":1}}],[\"下面是更推荐的写法\",{\"1\":{\"831\":1}}],[\"下面是附带了同步\",{\"1\":{\"820\":1}}],[\"下面是推荐写法\",{\"1\":{\"814\":1}}],[\"下面是自定义class类名\",{\"1\":{\"714\":1}}],[\"下面是初始化\",{\"1\":{\"273\":1}}],[\"下面举个栗子\",{\"1\":{\"582\":1}}],[\"下面将分阶段介绍事件系统的实现\",{\"1\":{\"277\":1}}],[\"下面这些都是语句\",{\"1\":{\"124\":1}}],[\"下面这些都是表达式\",{\"1\":{\"124\":1}}],[\"下存在子节点数组\",{\"1\":{\"272\":1}}],[\"包装成\",{\"1\":{\"1415\":1}}],[\"包装对象\",{\"1\":{\"1415\":2}}],[\"包装类的实际应用\",{\"1\":{\"1371\":1}}],[\"包装类\",{\"0\":{\"1371\":1}}],[\"包装组件之后\",{\"1\":{\"235\":1}}],[\"包头不包尾\",{\"1\":{\"1016\":1}}],[\"包头包尾\",{\"1\":{\"1016\":1}}],[\"包括方法\",{\"1\":{\"1442\":1}}],[\"包括空对象\",{\"1\":{\"1413\":1}}],[\"包括孙子等\",{\"1\":{\"1287\":1}}],[\"包括整数\",{\"1\":{\"1243\":1}}],[\"包括内容区和内边距\",{\"1\":{\"1111\":1}}],[\"包括内容区\",{\"1\":{\"1108\":1}}],[\"包括标签\",{\"1\":{\"1091\":1}}],[\"包括可以字面解释的文本内容\",{\"1\":{\"1084\":1}}],[\"包括图像\",{\"1\":{\"1062\":1}}],[\"包括\",{\"1\":{\"549\":1,\"968\":1,\"1076\":1,\"1155\":1,\"1376\":2}}],[\"包裹组件\",{\"1\":{\"568\":1}}],[\"包裹\",{\"0\":{\"508\":1}}],[\"包裹所需组件使用\",{\"1\":{\"242\":1}}],[\"包裹函数组件来阻止函数组件不必要的更新\",{\"1\":{\"100\":1}}],[\"包含开始索引\",{\"1\":{\"1359\":1}}],[\"包含封装好的特定的集合\",{\"1\":{\"1279\":1}}],[\"包含类型比较\",{\"1\":{\"1261\":2}}],[\"包含全局的\",{\"1\":{\"1231\":1}}],[\"包含浏览器信息内容\",{\"1\":{\"1064\":1}}],[\"包含关系和并列关系\",{\"1\":{\"1030\":1}}],[\"包含一套自定义的语法及一个解析器\",{\"1\":{\"1004\":1}}],[\"包含组件外部传递过来\",{\"1\":{\"535\":1}}],[\"包含组件外部传递进来\",{\"1\":{\"535\":1}}],[\"包含属性\",{\"1\":{\"535\":1}}],[\"包含父作用域里\",{\"1\":{\"515\":1}}],[\"包含父作用域里除\",{\"1\":{\"515\":1}}],[\"包含有共享数据\",{\"1\":{\"418\":1}}],[\"包含多个\",{\"1\":{\"418\":1}}],[\"包含多个用于返回数据的函数\",{\"1\":{\"412\":1}}],[\"包含多个直接更新\",{\"1\":{\"411\":1}}],[\"包含多个响应用户动作的回调函数\",{\"1\":{\"410\":1}}],[\"包含两大步骤\",{\"1\":{\"323\":1}}],[\"包含大量属性值\",{\"1\":{\"270\":1}}],[\"包含\",{\"1\":{\"181\":1,\"500\":1,\"707\":2,\"878\":1,\"1030\":1,\"1108\":1,\"1324\":3}}],[\"包含了所有需要的配置\",{\"1\":{\"136\":1}}],[\"包\",{\"0\":{\"707\":1},\"1\":{\"136\":1}}],[\"该阶段的主要作用\",{\"1\":{\"1420\":1}}],[\"该数组对元素是\",{\"1\":{\"1405\":1}}],[\"该数组来存放依赖自己的\",{\"1\":{\"608\":1}}],[\"该变量为全局变量\",{\"1\":{\"1350\":1}}],[\"该对象指定了使用\",{\"1\":{\"1171\":1}}],[\"该对象不能获取到具体历史记录\",{\"1\":{\"1067\":1}}],[\"该对象中所有的key\",{\"1\":{\"431\":1}}],[\"该标签用于定义多行文本输入的控件\",{\"1\":{\"1057\":1}}],[\"该标签会与<dt>\",{\"1\":{\"1054\":1}}],[\"该字段中的字符被掩码\",{\"1\":{\"1057\":1}}],[\"该属性用于在元素中添加\",{\"1\":{\"1097\":1}}],[\"该属性对浏览器起提示作用\",{\"1\":{\"1033\":1}}],[\"该属性是一个简写属性\",{\"1\":{\"911\":1}}],[\"该现象称为相邻块元素垂直外边距的合并\",{\"1\":{\"971\":1}}],[\"该方法所属对象\",{\"1\":{\"1446\":1}}],[\"该方法被自动调用\",{\"1\":{\"1410\":1}}],[\"该方法与\",{\"1\":{\"1376\":1}}],[\"该方法的两个参数均为位置坐标\",{\"1\":{\"1376\":1}}],[\"该方法将从后向前检索字符串\",{\"1\":{\"1366\":1}}],[\"该方法会返回一个由一个给定对象的自身可枚举属性组成的数组\",{\"1\":{\"1404\":1}}],[\"该方法会直接修改原数组\",{\"1\":{\"1363\":1}}],[\"该方法会将数组新的长度作为返回值返回\",{\"1\":{\"1355\":1}}],[\"该方法用来反转数组\",{\"1\":{\"1363\":1}}],[\"该方法不会对原数组产生升影响\",{\"1\":{\"1362\":1}}],[\"该方法不会对原数组产生影响\",{\"1\":{\"1361\":1}}],[\"该方法不会改变元素数组\",{\"1\":{\"1359\":1}}],[\"该方法可以指定原型对象和属性\",{\"1\":{\"1408\":1}}],[\"该方法可以将数组转换为一个字符串\",{\"1\":{\"1362\":1}}],[\"该方法可以删除数组的最后一个元素\",{\"1\":{\"1356\":1}}],[\"该方法可以向数组的末尾添加一个或多个元素\",{\"1\":{\"1355\":1}}],[\"该方法里的\",{\"1\":{\"1130\":2}}],[\"该方法和\",{\"1\":{\"1092\":1}}],[\"该方法清除所有连接的缓存\",{\"1\":{\"836\":1}}],[\"该方法返回此客户端连接到的执行缓存\",{\"1\":{\"836\":1}}],[\"该方法返回此客户端连接到的查询缓存\",{\"1\":{\"836\":1}}],[\"该方法接受一个参数\",{\"1\":{\"601\":1}}],[\"该任务在后台继续执行\",{\"1\":{\"765\":1}}],[\"该高阶\",{\"1\":{\"636\":1}}],[\"该参数会在\",{\"1\":{\"625\":1}}],[\"该参数传入\",{\"1\":{\"625\":1}}],[\"该函数每隔一段时间被调用一次\",{\"1\":{\"1063\":1}}],[\"该函数进入闭包引用位置\",{\"1\":{\"740\":1}}],[\"该函数主要针对\",{\"1\":{\"625\":1}}],[\"该函数的返回值会被用作属性的值\",{\"1\":{\"601\":1}}],[\"该函数返回的对象中每一对key\",{\"1\":{\"431\":1}}],[\"该模块在\",{\"1\":{\"578\":1}}],[\"该路由配置方法适用于\",{\"1\":{\"430\":1}}],[\"该组件的局限性在于\",{\"1\":{\"228\":1}}],[\"该\",{\"1\":{\"191\":1,\"214\":1,\"221\":1,\"365\":1,\"523\":1,\"843\":1}}],[\"该类实例\",{\"1\":{\"165\":1}}],[\"该类的实例对象\",{\"1\":{\"134\":1}}],[\"该请求允许跨域\",{\"1\":{\"27\":1}}],[\"渲染引擎\",{\"1\":{\"1027\":1}}],[\"渲染时主要考虑的问题是函数重载\",{\"1\":{\"702\":1}}],[\"渲染之前\",{\"1\":{\"696\":1}}],[\"渲染方法\",{\"1\":{\"653\":1}}],[\"渲染页面时碰到插值表达式\",{\"1\":{\"608\":1}}],[\"渲染阶段\",{\"1\":{\"365\":1}}],[\"渲染压力\",{\"1\":{\"341\":1}}],[\"渲染和\",{\"1\":{\"261\":1}}],[\"渲染备用\",{\"1\":{\"242\":1}}],[\"渲染dom时\",{\"1\":{\"218\":1}}],[\"渲染的节点嵌套\",{\"1\":{\"218\":1}}],[\"渲染\",{\"1\":{\"191\":1,\"698\":1,\"1025\":1}}],[\"渲染类组件标签基本流程\",{\"0\":{\"134\":1}}],[\"渲染函数的参数数量\",{\"1\":{\"702\":1}}],[\"渲染函数中有两个步骤\",{\"1\":{\"702\":1}}],[\"渲染函数是\",{\"1\":{\"660\":1}}],[\"渲染函数组件\",{\"1\":{\"306\":1,\"315\":1,\"338\":1,\"373\":1}}],[\"渲染函数\",{\"0\":{\"126\":1,\"702\":1},\"1\":{\"534\":1,\"660\":1}}],[\"保留回车\",{\"1\":{\"900\":1}}],[\"保留空格\",{\"1\":{\"900\":1}}],[\"保留空白符序列\",{\"1\":{\"898\":1}}],[\"保留一个空格\",{\"1\":{\"859\":1}}],[\"保持\",{\"1\":{\"779\":1}}],[\"保存独立的匹配结果\",{\"1\":{\"1390\":1}}],[\"保存的是\",{\"1\":{\"1093\":1}}],[\"保存\",{\"1\":{\"1031\":1,\"1093\":1}}],[\"保存这一整个应用状态\",{\"1\":{\"743\":1}}],[\"保存到\",{\"1\":{\"631\":1}}],[\"保存宽度和高度值\",{\"1\":{\"543\":1}}],[\"保存新回调\",{\"1\":{\"201\":1}}],[\"保存标签对象\",{\"1\":{\"190\":1}}],[\"保存在哪个组件\",{\"1\":{\"132\":1}}],[\"保证代码运行的安全\",{\"1\":{\"1452\":1}}],[\"保证了当前执行环境对符合访问权限的变量和函数有序访问\",{\"1\":{\"1423\":1}}],[\"保证了遍历的每个\",{\"1\":{\"648\":1}}],[\"保证任何用户浏览器都能正确显示\",{\"1\":{\"882\":1}}],[\"保证dep实例中成功加入当前watcher实例\",{\"1\":{\"635\":1}}],[\"保证父子对象的两个watcher实例初始化时不会出现target冲突\",{\"1\":{\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"保证原api顺利执行\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"保证最小堆\",{\"1\":{\"392\":2}}],[\"保证\",{\"1\":{\"14\":1}}],[\"拆分成许多晓得文件\",{\"1\":{\"1186\":1}}],[\"拆分界面\",{\"1\":{\"132\":1}}],[\"拆分组件\",{\"1\":{\"132\":1}}],[\"随指针移动不断缩减长度\",{\"1\":{\"661\":1}}],[\"随页面渲染自动调用\",{\"1\":{\"475\":1}}],[\"随着\",{\"1\":{\"174\":1}}],[\"随着业务逻辑增加\",{\"1\":{\"128\":1}}],[\"随后表达式的值会与结构中的每个\",{\"1\":{\"1269\":1}}],[\"随后初始化一系列实例\",{\"1\":{\"698\":1}}],[\"随后与旧的虚拟\",{\"1\":{\"480\":1}}],[\"随后释放其他键\",{\"1\":{\"472\":1}}],[\"随后替换掉页面中之前的真实\",{\"1\":{\"161\":1,\"461\":1}}],[\"随后呈现在页面中\",{\"1\":{\"134\":1,\"165\":1}}],[\"随后\",{\"1\":{\"134\":1,\"161\":1,\"461\":1,\"632\":1}}],[\"随后每次\",{\"1\":{\"91\":1}}],[\"文字加粗一行显\",{\"1\":{\"1035\":1}}],[\"文字长度超出限定宽度\",{\"1\":{\"926\":1}}],[\"文字阴影\",{\"0\":{\"913\":1}}],[\"文字类的元素内不能使用块级元素\",{\"1\":{\"876\":1}}],[\"文字\",{\"1\":{\"674\":4,\"686\":1}}],[\"文档或浏览器窗口中发生的一些特定的交互瞬间\",{\"1\":{\"1117\":1}}],[\"文档节点代表整个网页\",{\"1\":{\"1084\":1}}],[\"文档节点\",{\"0\":{\"1079\":1},\"1\":{\"1078\":1}}],[\"文档都是一个节点\",{\"1\":{\"1078\":1}}],[\"文档对象模型\",{\"1\":{\"1077\":1,\"1233\":1}}],[\"文档使用的字符编码\",{\"1\":{\"1034\":1}}],[\"文档类型声明标签\",{\"0\":{\"1032\":1}}],[\"文档主体\",{\"1\":{\"1031\":1}}],[\"文档主要记录\",{\"1\":{\"523\":1}}],[\"文档标题\",{\"1\":{\"1031\":1}}],[\"文档头部\",{\"1\":{\"1031\":1}}],[\"文档任何地方\",{\"1\":{\"866\":1}}],[\"文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字\",{\"1\":{\"1040\":1}}],[\"文档中出现一次\",{\"1\":{\"863\":1}}],[\"文档中描述的\",{\"1\":{\"549\":1}}],[\"文档\",{\"1\":{\"492\":1,\"993\":1,\"1031\":2,\"1077\":1,\"1079\":1}}],[\"文本框中输入内容\",{\"1\":{\"1151\":1}}],[\"文本内容\",{\"1\":{\"1078\":1}}],[\"文本内容加粗居中显示\",{\"1\":{\"1048\":1}}],[\"文本域元素\",{\"1\":{\"1057\":1}}],[\"文本或图像\",{\"1\":{\"1042\":1}}],[\"文本格式化标签\",{\"0\":{\"1037\":1}}],[\"文本在一个段落中会根据浏览器窗口的大小自动换行\",{\"1\":{\"1036\":1}}],[\"文本会在在同一行上继续\",{\"1\":{\"898\":1}}],[\"文本不会换行\",{\"1\":{\"898\":1}}],[\"文本被剪切\",{\"1\":{\"897\":1}}],[\"文本溢出限定的宽度就隐藏内容\",{\"1\":{\"927\":1}}],[\"文本溢出\",{\"0\":{\"897\":1}}],[\"文本中的每个单词以大写字母开头\",{\"1\":{\"894\":1}}],[\"文本转换\",{\"0\":{\"894\":1}}],[\"文本颜色\",{\"0\":{\"889\":1}}],[\"文本颜色等\",{\"1\":{\"855\":1}}],[\"文本缩进\",{\"0\":{\"892\":1},\"1\":{\"888\":1}}],[\"文本属性可定义文本外观\",{\"1\":{\"888\":1}}],[\"文本属性\",{\"0\":{\"888\":1},\"1\":{\"1000\":1}}],[\"文本风格\",{\"0\":{\"885\":1}}],[\"文本\",{\"1\":{\"695\":1,\"1044\":2,\"1078\":1}}],[\"文本节点之外\",{\"1\":{\"342\":1}}],[\"文本节点的props就是文本内容\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"文本节点\",{\"0\":{\"1084\":1},\"1\":{\"272\":1,\"273\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1,\"1078\":1}}],[\"文本text\",{\"1\":{\"120\":1}}],[\"文件等\",{\"1\":{\"1062\":1}}],[\"文件上一级\",{\"1\":{\"1045\":1}}],[\"文件下一级\",{\"1\":{\"1045\":1}}],[\"文件同一级\",{\"1\":{\"1045\":1}}],[\"文件地址\",{\"1\":{\"1021\":1}}],[\"文件后缀名为\",{\"1\":{\"1005\":1}}],[\"文件引入到\",{\"1\":{\"868\":1}}],[\"文件的基本对象\",{\"1\":{\"1029\":1}}],[\"文件的\",{\"1\":{\"702\":1}}],[\"文件来实现\",{\"1\":{\"647\":1}}],[\"文件定义\",{\"1\":{\"583\":1,\"591\":1}}],[\"文件是一个以\",{\"1\":{\"581\":1}}],[\"文件格式要改为\",{\"1\":{\"578\":1}}],[\"文件进行校验\",{\"1\":{\"578\":1}}],[\"文件系统路径的别名\",{\"1\":{\"572\":1}}],[\"文件夹\",{\"1\":{\"425\":2}}],[\"文件内函数的返回值转换为形似\",{\"1\":{\"249\":1}}],[\"文件中\",{\"1\":{\"868\":1,\"1028\":3,\"1235\":1}}],[\"文件中的\",{\"1\":{\"660\":1}}],[\"文件中的module\",{\"1\":{\"139\":1}}],[\"文件中只包含与类型相关的代码\",{\"1\":{\"581\":1}}],[\"文件中引入xxx\",{\"1\":{\"139\":1}}],[\"文件\",{\"1\":{\"128\":1,\"485\":1,\"578\":1,\"581\":2,\"648\":1,\"964\":1,\"1004\":1,\"1025\":1,\"1031\":1,\"1062\":1,\"1282\":2}}],[\"程序中一般都会创建多个执行上下文\",{\"1\":{\"1422\":1}}],[\"程序中同时只会有一个\",{\"1\":{\"621\":1}}],[\"程序员们为了自己的代码能更容易的在同行之间交流\",{\"1\":{\"1240\":1}}],[\"程序\",{\"1\":{\"128\":1,\"485\":1}}],[\"仅第一层对象脱离原址\",{\"1\":{\"1460\":1}}],[\"仅第一次执行\",{\"1\":{\"493\":1}}],[\"仅该函数体内执行严格模式\",{\"1\":{\"1453\":1}}],[\"仅在函数环境\",{\"1\":{\"1423\":1}}],[\"仅在对象中以\",{\"1\":{\"455\":1}}],[\"仅使用连字符~表示\",{\"1\":{\"1382\":1}}],[\"仅为值比较\",{\"1\":{\"1261\":2}}],[\"仅全部\",{\"1\":{\"1226\":1}}],[\"仅设置标签内的文本\",{\"1\":{\"1091\":1}}],[\"仅有小写字母\",{\"1\":{\"894\":1}}],[\"仅表示嵌套路由\",{\"1\":{\"712\":1}}],[\"仅判断三种形态\",{\"1\":{\"674\":1,\"686\":1}}],[\"仅生成常规闭合标签与内部常规属性的\",{\"1\":{\"660\":1}}],[\"仅当\",{\"1\":{\"602\":1}}],[\"仅当数组中指定的\",{\"1\":{\"186\":1}}],[\"仅限类型的\",{\"1\":{\"587\":2}}],[\"仅限一个服务器端口有效\",{\"1\":{\"495\":1}}],[\"仅仅用于条件判断来切换内部元素\",{\"1\":{\"457\":1}}],[\"仅仅是使用样式隐藏掉\",{\"1\":{\"457\":1}}],[\"仅仅是\",{\"1\":{\"270\":1}}],[\"仅需要\",{\"1\":{\"451\":1}}],[\"仅概念层面理论\",{\"1\":{\"272\":1}}],[\"仅适用于类式组件\",{\"1\":{\"214\":1}}],[\"仅用于渲染列表用于展示\",{\"1\":{\"161\":1,\"461\":1}}],[\"仅作了解\",{\"1\":{\"633\":1}}],[\"仅作\",{\"1\":{\"127\":1}}],[\"仅对\",{\"1\":{\"99\":1}}],[\"模拟手机调试\",{\"1\":{\"945\":1}}],[\"模拟了\",{\"1\":{\"388\":1}}],[\"模糊距离\",{\"1\":{\"912\":1,\"913\":1}}],[\"模型分析\",{\"0\":{\"838\":1}}],[\"模型\",{\"0\":{\"467\":1},\"1\":{\"272\":1,\"467\":1,\"1077\":1}}],[\"模板编译中有三个步骤\",{\"1\":{\"701\":1}}],[\"模板编译并不是存在于\",{\"1\":{\"701\":1}}],[\"模板编译主要用于传统的\",{\"1\":{\"696\":1}}],[\"模板编译侧重于对已有\",{\"1\":{\"696\":1}}],[\"模板编译的执行顺序在初始化依赖收集系统之后\",{\"1\":{\"696\":1}}],[\"模板编译\",{\"0\":{\"701\":1},\"1\":{\"694\":1,\"698\":1}}],[\"模板编译与指令\",{\"0\":{\"693\":1},\"1\":{\"704\":1}}],[\"模板编写没有提示\",{\"1\":{\"487\":1}}],[\"模板语法\",{\"1\":{\"660\":1}}],[\"模板的插值语法渲染原理\",{\"1\":{\"658\":1}}],[\"模板解析原理\",{\"1\":{\"644\":1}}],[\"模板引擎解析会把组件文件中的模板字符串逐个解析\",{\"1\":{\"702\":1}}],[\"模板引擎解析\",{\"1\":{\"702\":1}}],[\"模板引擎的核心原理是先将模板字符串编译为层次分明的\",{\"1\":{\"658\":1}}],[\"模板引擎的作用是将字符串模板变为\",{\"1\":{\"644\":1}}],[\"模板引擎的出现是为了更优雅地将数据转化为视图\",{\"1\":{\"638\":1}}],[\"模板引擎历史\",{\"0\":{\"638\":1}}],[\"模板引擎\",{\"0\":{\"637\":1},\"1\":{\"638\":1,\"658\":1,\"704\":1}}],[\"模板上访问计算属性\",{\"1\":{\"633\":1,\"634\":1}}],[\"模板上都可以直接使用\",{\"1\":{\"467\":1}}],[\"模板视图\",{\"1\":{\"595\":1}}],[\"模板直接插值使用\",{\"1\":{\"584\":1}}],[\"模板读取时直接读取\",{\"1\":{\"550\":1}}],[\"模板中读取数据\",{\"1\":{\"536\":1}}],[\"模板看不到\",{\"1\":{\"534\":1}}],[\"模板内无需用根节点标签包着组件元素\",{\"1\":{\"525\":1}}],[\"模板项目结构\",{\"0\":{\"494\":1}}],[\"模板项目的\",{\"1\":{\"136\":1}}],[\"模板\",{\"0\":{\"442\":1},\"1\":{\"443\":1,\"467\":1,\"639\":1,\"644\":1}}],[\"模板字符串`\",{\"0\":{\"1161\":1}}],[\"模板字符串已经成功编译为\",{\"1\":{\"649\":1}}],[\"模板字符串\",{\"1\":{\"250\":1,\"663\":2}}],[\"模块名\",{\"1\":{\"823\":2}}],[\"模块与组件\",{\"0\":{\"484\":1}}],[\"模块化语法\",{\"0\":{\"1189\":1}}],[\"模块化规范\",{\"0\":{\"1188\":1}}],[\"模块化是指将一个大的程序文件\",{\"1\":{\"1186\":1}}],[\"模块化就是将\",{\"1\":{\"1017\":1}}],[\"模块化\",{\"0\":{\"130\":1,\"1017\":1,\"1186\":1},\"1\":{\"136\":1,\"486\":1}}],[\"模块化与组件化\",{\"0\":{\"127\":1},\"1\":{\"246\":1}}],[\"模块\",{\"0\":{\"128\":1,\"485\":1}}],[\"模式修正符\",{\"1\":{\"1217\":1}}],[\"模式下将不能使用\",{\"1\":{\"918\":1}}],[\"模式处理数据状态变化的\",{\"1\":{\"840\":1}}],[\"模式处理状态变化\",{\"1\":{\"840\":1}}],[\"模式在生产环境的问题\",{\"0\":{\"440\":1}}],[\"模式相比略差\",{\"1\":{\"439\":1}}],[\"模式\",{\"0\":{\"87\":1,\"595\":1,\"1217\":1},\"1\":{\"396\":1,\"402\":1,\"439\":2,\"711\":1,\"840\":1}}],[\"纯数字字符串\",{\"1\":{\"1250\":1}}],[\"纯回调函数\",{\"1\":{\"1174\":1}}],[\"纯\",{\"1\":{\"126\":1,\"638\":1}}],[\"语言最主要的数据类型\",{\"1\":{\"1415\":1}}],[\"语言种类\",{\"0\":{\"1033\":1}}],[\"语言包\",{\"1\":{\"1031\":1}}],[\"语言\",{\"1\":{\"1004\":1,\"1275\":1}}],[\"语义更强烈\",{\"1\":{\"1037\":4}}],[\"语义\",{\"1\":{\"989\":1,\"1037\":1}}],[\"语意明确\",{\"1\":{\"919\":1}}],[\"语意不明确的问题\",{\"1\":{\"919\":1}}],[\"语句的条件部分\",{\"1\":{\"1414\":1}}],[\"语句用于基于不同的条件来执行不同的动作\",{\"1\":{\"1269\":1}}],[\"语句执行结果就是函数返回值\",{\"1\":{\"1163\":1}}],[\"语句均返回\",{\"1\":{\"964\":1}}],[\"语句\",{\"1\":{\"124\":1,\"245\":1,\"712\":1,\"1263\":2,\"1343\":1}}],[\"语法的一些不合理\",{\"1\":{\"1452\":1}}],[\"语法的前身是\",{\"1\":{\"936\":1}}],[\"语法都正确的下回将进入预编译阶段\",{\"1\":{\"1421\":1}}],[\"语法分析\",{\"0\":{\"1420\":1},\"1\":{\"1419\":1}}],[\"语法分为两种\",{\"1\":{\"442\":1}}],[\"语法格式如下\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"语法中的标识符包括变量名\",{\"1\":{\"1240\":1}}],[\"语法上\",{\"1\":{\"1175\":1}}],[\"语法相对简单\",{\"1\":{\"1003\":1}}],[\"语法规范书写后\",{\"1\":{\"1035\":1}}],[\"语法规范\",{\"0\":{\"855\":1},\"1\":{\"1303\":1,\"1304\":1}}],[\"语法规则\",{\"0\":{\"123\":1}}],[\"语法变化\",{\"1\":{\"708\":1}}],[\"语法糖中才能使用的编译器宏\",{\"1\":{\"587\":1}}],[\"语法糖\",{\"0\":{\"584\":1}}],[\"语法代码\",{\"1\":{\"442\":1}}],[\"语法代码转化\",{\"1\":{\"119\":1}}],[\"语法树之后\",{\"1\":{\"702\":1}}],[\"语法树最后可以经过渲染函数生成虚拟节点对象\",{\"1\":{\"663\":1}}],[\"语法树的形成\",{\"1\":{\"661\":1}}],[\"语法树的源码\",{\"1\":{\"660\":1}}],[\"语法树的步骤已经交由\",{\"1\":{\"250\":1}}],[\"语法树渲染过程\",{\"1\":{\"660\":1}}],[\"语法树\",{\"1\":{\"248\":1,\"249\":2,\"660\":1,\"663\":1}}],[\"语法及注意事项\",{\"0\":{\"242\":1}}],[\"语法执行分析\",{\"1\":{\"237\":1}}],[\"语法声明的片段可能具有\",{\"1\":{\"220\":1}}],[\"语法检查\",{\"1\":{\"136\":1}}],[\"语法\",{\"0\":{\"180\":1,\"185\":1,\"189\":1,\"194\":1,\"197\":1,\"207\":1,\"222\":1,\"225\":1,\"233\":1,\"237\":1,\"936\":1,\"984\":1,\"1169\":1,\"1176\":1,\"1343\":1},\"1\":{\"126\":1,\"443\":1,\"447\":1,\"460\":1,\"466\":1,\"475\":1,\"536\":1,\"537\":1,\"553\":2,\"578\":1,\"584\":1,\"719\":1,\"862\":1,\"863\":1,\"870\":1,\"871\":1,\"872\":1,\"909\":2,\"911\":1,\"912\":1,\"913\":1,\"964\":2,\"977\":1,\"1021\":1,\"1063\":1,\"1105\":1,\"1106\":2,\"1289\":1,\"1290\":1,\"1320\":1,\"1324\":1,\"1346\":1}}],[\"语法解析\",{\"1\":{\"123\":1}}],[\"语法环境时使用\",{\"1\":{\"103\":2}}],[\"若未指定此参数\",{\"1\":{\"1376\":1}}],[\"若需要同时兼容\",{\"1\":{\"1131\":1}}],[\"若需要传递参数需要\",{\"1\":{\"417\":1}}],[\"若添加了该参数\",{\"1\":{\"823\":1}}],[\"若将hash路由模式替换成browserhistory\",{\"1\":{\"822\":1}}],[\"若想设置\",{\"1\":{\"587\":1}}],[\"若想不带window使用userid\",{\"1\":{\"583\":1}}],[\"若想查看具体的\",{\"1\":{\"493\":1}}],[\"若要文件格式保留\",{\"1\":{\"578\":1}}],[\"若watch监视的是reactive定义的响应式数据\",{\"1\":{\"540\":2}}],[\"若返回一个渲染函数\",{\"1\":{\"534\":1}}],[\"若返回一个对象\",{\"1\":{\"534\":1}}],[\"若有多个元素需要过渡\",{\"1\":{\"508\":1}}],[\"若以后将地址通过第三方手机\",{\"1\":{\"439\":1}}],[\"若使用\",{\"1\":{\"430\":1}}],[\"若对数据进行\",{\"1\":{\"161\":1,\"461\":1}}],[\"若虚拟\",{\"1\":{\"161\":2,\"461\":2}}],[\"若组件没有定义\",{\"1\":{\"123\":1}}],[\"若大写字母开头\",{\"1\":{\"123\":1}}],[\"若\",{\"1\":{\"123\":1,\"159\":2,\"439\":1,\"1429\":3}}],[\"若小写字母开头\",{\"1\":{\"123\":1}}],[\"内创建另一个函数\",{\"1\":{\"1456\":1}}],[\"内建对象\",{\"0\":{\"1339\":1}}],[\"内联\",{\"1\":{\"1235\":1}}],[\"内联样式优先级很高\",{\"1\":{\"1105\":1}}],[\"内联样式\",{\"1\":{\"123\":1}}],[\"内置值\",{\"0\":{\"1171\":1}}],[\"内置组件变化\",{\"1\":{\"708\":1}}],[\"内嵌套的黄色\",{\"1\":{\"971\":1}}],[\"内边距撑开盒子\",{\"1\":{\"969\":1}}],[\"内边距\",{\"0\":{\"969\":1},\"1\":{\"969\":1}}],[\"内边距和边框\",{\"1\":{\"1108\":1}}],[\"内边距和\",{\"1\":{\"968\":1}}],[\"内核浏览器即可\",{\"1\":{\"943\":1}}],[\"内核\",{\"1\":{\"927\":1,\"1027\":2}}],[\"内层标签就成为外层标签的后代\",{\"1\":{\"870\":1}}],[\"内层标签写在后面\",{\"1\":{\"870\":1}}],[\"内递归式地循环比较新旧\",{\"1\":{\"702\":1}}],[\"内是不能像\",{\"1\":{\"639\":1}}],[\"内存地址引用\",{\"1\":{\"1423\":1}}],[\"内存也能被及时释放\",{\"1\":{\"843\":1}}],[\"内存溢出\",{\"1\":{\"843\":1}}],[\"内存回收等工作\",{\"1\":{\"838\":1}}],[\"内存减少\",{\"1\":{\"524\":1}}],[\"内存中的fiber构建\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"内的\",{\"1\":{\"332\":1}}],[\"内的函数\",{\"1\":{\"237\":1}}],[\"内容文本值\",{\"0\":{\"1314\":1}}],[\"内容理论上均可作为标识符\",{\"1\":{\"1240\":1}}],[\"内容中可以出现换行符\",{\"1\":{\"1161\":1}}],[\"内容区的宽度\",{\"1\":{\"1116\":2}}],[\"内容能被更广泛的设备访问\",{\"1\":{\"1028\":1}}],[\"内容和边框有了距离\",{\"1\":{\"969\":1}}],[\"内容向两侧填充\",{\"1\":{\"960\":1}}],[\"内容堆栈\",{\"1\":{\"661\":1}}],[\"内容堆栈推入一个包含标签属性和\",{\"1\":{\"661\":1}}],[\"内容遍历\",{\"1\":{\"646\":1,\"655\":1}}],[\"内容\",{\"1\":{\"229\":1,\"230\":1,\"663\":1,\"1315\":1,\"1316\":1,\"1317\":1,\"1321\":3}}],[\"内部添加元素\",{\"1\":{\"1321\":1}}],[\"内部添加\",{\"1\":{\"1321\":1}}],[\"内部链接\",{\"1\":{\"1043\":1}}],[\"内部已集成语法\",{\"1\":{\"936\":1}}],[\"内部样式表\",{\"0\":{\"866\":1},\"1\":{\"865\":1,\"868\":1}}],[\"内部使用了\",{\"1\":{\"793\":1}}],[\"内部文本\",{\"1\":{\"702\":1}}],[\"内部文本等内容更新\",{\"1\":{\"330\":1}}],[\"内部绑定与该属性值关联的\",{\"1\":{\"700\":1}}],[\"内部嵌套\",{\"1\":{\"676\":1}}],[\"内部循环旧节点\",{\"1\":{\"676\":1}}],[\"内部是子节点\",{\"1\":{\"675\":1,\"689\":1}}],[\"内部是文本文字\",{\"1\":{\"675\":1,\"689\":1}}],[\"内部存在\",{\"1\":{\"636\":1}}],[\"内部会将多个标签包含在一个\",{\"1\":{\"566\":1}}],[\"内部会创建组件实例对象\",{\"1\":{\"134\":1}}],[\"内部基于\",{\"1\":{\"537\":1}}],[\"内部借助\",{\"1\":{\"536\":1}}],[\"内部就执行多少次\",{\"1\":{\"450\":1}}],[\"内部有缓存机制\",{\"1\":{\"450\":1}}],[\"内部设置了一个默认的执行函数\",{\"1\":{\"339\":1}}],[\"内部的数据结构存在两种复杂情况待处理\",{\"1\":{\"649\":1}}],[\"内部的数组嵌套\",{\"1\":{\"647\":1}}],[\"内部的属性变化无法正常监测\",{\"1\":{\"602\":1}}],[\"内部的\",{\"1\":{\"236\":1,\"1434\":1}}],[\"内部的针对性优化\",{\"1\":{\"93\":1}}],[\"内部触发的事件会一直冒泡至包含\",{\"1\":{\"223\":1}}],[\"内部\",{\"1\":{\"215\":1,\"709\":1}}],[\"内部用其覆盖原来的状态值\",{\"1\":{\"182\":2}}],[\"表格是用来显示数据的\",{\"1\":{\"1051\":1}}],[\"表格是实际开发中非常常用的标签\",{\"1\":{\"1046\":1}}],[\"表格结构标签\",{\"0\":{\"1049\":1}}],[\"表格浏览器中对齐\",{\"1\":{\"1048\":1}}],[\"表格的表头部分\",{\"1\":{\"1048\":1}}],[\"表格的基本语法\",{\"0\":{\"1048\":1}}],[\"表格的主要作用\",{\"0\":{\"1047\":1}}],[\"表格不是用来布局页面的\",{\"1\":{\"1047\":1}}],[\"表格主要用于显示\",{\"1\":{\"1047\":1}}],[\"表格标签这部分属性我们实际开发不常用\",{\"1\":{\"1048\":1}}],[\"表格标签\",{\"0\":{\"1046\":1}}],[\"表格\",{\"1\":{\"1043\":1}}],[\"表格细线边框\",{\"1\":{\"909\":1}}],[\"表现的像对象一样\",{\"1\":{\"1415\":1}}],[\"表现为贪婪的无限性\",{\"1\":{\"1385\":1}}],[\"表现为贪婪的有限性\",{\"1\":{\"1385\":1}}],[\"表现=外观装饰\",{\"1\":{\"1028\":1}}],[\"表现写到\",{\"1\":{\"1028\":1}}],[\"表现\",{\"1\":{\"1028\":3}}],[\"表现用于设置网页元素的版式\",{\"1\":{\"933\":1,\"1028\":1}}],[\"表达意思\",{\"1\":{\"969\":1}}],[\"表达式分组具有独立的匹配功能\",{\"1\":{\"1390\":1}}],[\"表达式分组\",{\"0\":{\"1390\":1}}],[\"表达式将会短路计算直接返回\",{\"1\":{\"1228\":1}}],[\"表达式文本\",{\"1\":{\"695\":1}}],[\"表达式被解析\",{\"1\":{\"444\":1}}],[\"表达式\",{\"0\":{\"1206\":1},\"1\":{\"124\":1,\"443\":2,\"457\":4,\"607\":1,\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"表达式时要用\",{\"1\":{\"123\":1}}],[\"表达式必须用\",{\"1\":{\"123\":1}}],[\"表单元素是允许用户在表单中输入或者选择的内容控件\",{\"1\":{\"1057\":1}}],[\"表单元素\",{\"0\":{\"1057\":1}}],[\"表单元素控件\",{\"1\":{\"1056\":1}}],[\"表单域名称\",{\"1\":{\"1056\":1}}],[\"表单控件\",{\"0\":{\"1057\":1},\"1\":{\"1055\":1}}],[\"表单需求\",{\"1\":{\"1055\":1}}],[\"表单标签\",{\"0\":{\"1055\":1}}],[\"表单这些行内块元素的\",{\"1\":{\"924\":1}}],[\"表单默认属于行内块元素\",{\"1\":{\"924\":1}}],[\"表明为默认子路由\",{\"1\":{\"712\":1}}],[\"表明剩余待删除节点\",{\"1\":{\"683\":1,\"691\":1}}],[\"表明剩余待新增节点\",{\"1\":{\"683\":1,\"691\":1}}],[\"表明是与当前\",{\"1\":{\"636\":1}}],[\"表演的舞台\",{\"1\":{\"534\":1}}],[\"表示输出的进制\",{\"1\":{\"1413\":1}}],[\"表示属性名\",{\"1\":{\"1401\":1}}],[\"表示对正则表达式中第\",{\"1\":{\"1391\":2}}],[\"表示对第\",{\"1\":{\"1391\":3}}],[\"表示前面字符或表达式可以不出现\",{\"1\":{\"1384\":1}}],[\"表示前面字符或表达式分组为可有可无\",{\"1\":{\"1384\":1}}],[\"表示在两个表达式分组的匹配结果中任选一个\",{\"1\":{\"1383\":1}}],[\"表示匹配其中任意一个字符\",{\"1\":{\"1382\":1}}],[\"表示字符的方法有多种\",{\"1\":{\"1381\":1}}],[\"表示从字符串尾部往头部开始数\",{\"1\":{\"1376\":1}}],[\"表示为毫秒\",{\"1\":{\"1367\":1}}],[\"表示为拉平深度\",{\"1\":{\"1221\":1}}],[\"表示删除的数量\",{\"1\":{\"1360\":1}}],[\"表示开始位置的索引\",{\"1\":{\"1360\":1}}],[\"表示制表符\",{\"1\":{\"1242\":1}}],[\"表示换行\",{\"1\":{\"1242\":1}}],[\"表示需要增加的字符串长度\",{\"1\":{\"1202\":2}}],[\"表示将原字符串重复\",{\"1\":{\"1202\":1}}],[\"表示将相邻边框合并\",{\"1\":{\"1048\":1}}],[\"表示参数字符串是否在原字符串的尾部\",{\"1\":{\"1202\":1}}],[\"表示参数字符串是否在原字符串的头部\",{\"1\":{\"1202\":1}}],[\"表示某个数组是否包含给定的值\",{\"1\":{\"1196\":1}}],[\"表示该对象用于\",{\"1\":{\"1171\":1}}],[\"表示独一无二的值\",{\"1\":{\"1167\":1}}],[\"表示没有边框\",{\"1\":{\"1048\":1}}],[\"表示没有任何\",{\"1\":{\"842\":1}}],[\"表示就是\",{\"1\":{\"963\":1}}],[\"表示最多显示\",{\"1\":{\"927\":1}}],[\"表示被链接的文档是一个样式表文件\",{\"1\":{\"868\":1}}],[\"表示选区页面中所有元素\",{\"1\":{\"864\":1}}],[\"表示一个控制器对象\",{\"1\":{\"841\":1}}],[\"表示调用过\",{\"1\":{\"636\":1}}],[\"表示已更新且未调用\",{\"1\":{\"636\":1}}],[\"表示这个属性是对象的成员属性\",{\"1\":{\"1274\":1}}],[\"表示这个\",{\"1\":{\"636\":1}}],[\"表示是\",{\"1\":{\"628\":1}}],[\"表示监视\",{\"1\":{\"451\":1}}],[\"表示时间片的开始\",{\"1\":{\"395\":1}}],[\"表示hasmorework\",{\"1\":{\"395\":1}}],[\"表示当前节点的最后一个子节点\",{\"1\":{\"1087\":1}}],[\"表示当前节点的第一个子节点\",{\"1\":{\"1087\":1}}],[\"表示当前节点的所有子节点\",{\"1\":{\"1087\":1}}],[\"表示当前工作未完成\",{\"1\":{\"395\":1}}],[\"表示当前fiber的beginwork已经完成\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"表示工作单元递归的\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"表示还未生效\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"表示要针对此fiber节点进行何种操作\",{\"1\":{\"270\":1,\"272\":1}}],[\"表示\",{\"1\":{\"63\":1,\"644\":1,\"887\":1,\"889\":1,\"1242\":2,\"1274\":1}}],[\"表示服务器响应的数据类型\",{\"1\":{\"52\":1}}],[\"表示应该使用\",{\"1\":{\"51\":1}}],[\"表示跨域请求时是否需要使用凭证\",{\"1\":{\"49\":1}}],[\"表示无超时时间\",{\"1\":{\"48\":1}}],[\"表示成功\",{\"1\":{\"9\":1}}],[\"变体的一种方式\",{\"1\":{\"1452\":1}}],[\"变成了$\",{\"1\":{\"609\":1,\"610\":3}}],[\"变成单链表\",{\"1\":{\"272\":1}}],[\"变化\",{\"1\":{\"823\":1}}],[\"变化的组件\",{\"1\":{\"257\":1}}],[\"变化更新界面\",{\"1\":{\"120\":1}}],[\"变更为\",{\"1\":{\"323\":1}}],[\"变更\",{\"1\":{\"215\":1,\"747\":1}}],[\"变更之后同步调用\",{\"1\":{\"187\":1,\"376\":1}}],[\"变量对象没有变量名属性\",{\"1\":{\"1423\":1}}],[\"变量对象没有该函数名属性\",{\"1\":{\"1423\":1}}],[\"变量对象\",{\"1\":{\"1423\":1}}],[\"变量对等号右边的字面量做相应的四则运算\",{\"1\":{\"1260\":1}}],[\"变量规定新名称\",{\"1\":{\"1333\":1}}],[\"变量被赋予了非数字值\",{\"1\":{\"1243\":1}}],[\"变量名为a\",{\"1\":{\"1239\":1}}],[\"变量声明\",{\"1\":{\"1424\":1}}],[\"变量声明等就可以被访问到了\",{\"1\":{\"1423\":1}}],[\"变量声明创建属性\",{\"1\":{\"1423\":1}}],[\"变量声明提前\",{\"1\":{\"1349\":1}}],[\"变量声明关键字\",{\"1\":{\"1239\":1}}],[\"变量声明为例创建示例文件\",{\"1\":{\"581\":1}}],[\"变量是内存中存储数据的最基本单元\",{\"1\":{\"1239\":1}}],[\"变量拼接\",{\"1\":{\"1161\":1}}],[\"变量不能重复声明\",{\"1\":{\"1158\":1}}],[\"变量的操作\",{\"1\":{\"1014\":1}}],[\"变量无疑为\",{\"1\":{\"1011\":1}}],[\"变量转换\",{\"0\":{\"965\":1}}],[\"变量配置\",{\"1\":{\"578\":1}}],[\"变量和\",{\"1\":{\"468\":1}}],[\"变量值的多次重复使用不会重新调用计算函数执行计算\",{\"1\":{\"195\":1}}],[\"变量\",{\"0\":{\"1011\":1},\"1\":{\"182\":1,\"237\":1,\"965\":1,\"1163\":1,\"1239\":1,\"1349\":2,\"1350\":2,\"1456\":1}}],[\"变为element=\",{\"1\":{\"708\":1}}],[\"变为\",{\"1\":{\"15\":1,\"662\":1}}],[\"臃肿\",{\"1\":{\"117\":1}}],[\"全选选择器\",{\"1\":{\"1286\":1}}],[\"全为\",{\"1\":{\"1413\":1}}],[\"全为真\",{\"1\":{\"1271\":1}}],[\"全为假\",{\"1\":{\"1271\":1}}],[\"全等\",{\"1\":{\"1261\":2}}],[\"全下陷\",{\"1\":{\"971\":1}}],[\"全中国唯一\",{\"1\":{\"863\":1}}],[\"全部脱离原引用地址\",{\"1\":{\"1461\":1}}],[\"全部小写\",{\"1\":{\"894\":1}}],[\"全部大写\",{\"1\":{\"894\":1}}],[\"全部转为\",{\"1\":{\"593\":1}}],[\"全部处理完之后\",{\"1\":{\"361\":1}}],[\"全部都要重新写一遍\",{\"1\":{\"228\":1}}],[\"全局上下文只有唯一的一个\",{\"1\":{\"1425\":1}}],[\"全局上下文的活动对象\",{\"1\":{\"1423\":1}}],[\"全局执行的上下文中变量对象的\",{\"1\":{\"1423\":1}}],[\"全局环境没有此过程\",{\"1\":{\"1423\":1}}],[\"全局环境\",{\"1\":{\"1422\":1}}],[\"全局作用域中创建的变量都会作为\",{\"1\":{\"1349\":1}}],[\"全局作用域中的变量都是全局变量\",{\"1\":{\"1349\":1}}],[\"全局作用域中的\",{\"1\":{\"1231\":1}}],[\"全局作用域在页面打开时创建\",{\"1\":{\"1349\":1}}],[\"全局作用域指直接编写在\",{\"1\":{\"1349\":1}}],[\"全局作用域\",{\"0\":{\"1349\":1},\"1\":{\"1436\":1}}],[\"全局封装\",{\"0\":{\"1336\":1}}],[\"全局属性\",{\"0\":{\"1033\":1},\"1\":{\"1231\":1}}],[\"全局实例化的\",{\"1\":{\"848\":1}}],[\"全局唯一的\",{\"1\":{\"843\":1}}],[\"全局路由配置\",{\"1\":{\"739\":1}}],[\"全局路由拦截\",{\"0\":{\"736\":1},\"1\":{\"739\":1}}],[\"全局提供ssg\",{\"1\":{\"653\":1}}],[\"全局类型声明\",{\"0\":{\"582\":1}}],[\"全局变量允许使用\",{\"1\":{\"591\":1}}],[\"全局变量的\",{\"0\":{\"591\":1}}],[\"全局变量声明\",{\"0\":{\"583\":1}}],[\"全局变量\",{\"1\":{\"578\":1}}],[\"全局事件总线\",{\"0\":{\"518\":1},\"1\":{\"518\":1}}],[\"全局过滤器\",{\"1\":{\"500\":1}}],[\"全局混入\",{\"1\":{\"499\":1}}],[\"全局注册\",{\"1\":{\"487\":1}}],[\"全局指令\",{\"1\":{\"475\":1}}],[\"全局后置守卫\",{\"1\":{\"436\":1}}],[\"全局前置守卫\",{\"1\":{\"436\":1}}],[\"全局守卫\",{\"0\":{\"436\":1},\"1\":{\"435\":1}}],[\"全局共享对象\",{\"1\":{\"306\":1}}],[\"全局\",{\"0\":{\"561\":1},\"1\":{\"210\":1,\"561\":1}}],[\"全局污染\",{\"1\":{\"139\":1}}],[\"全局安装\",{\"1\":{\"137\":1,\"493\":1}}],[\"全局数据统一管理\",{\"1\":{\"117\":1}}],[\"全称\",{\"1\":{\"1\":1,\"121\":1,\"1059\":1,\"1077\":1}}],[\"改对象被转为原始类型的值时\",{\"1\":{\"1171\":1}}],[\"改为内部阴影\",{\"1\":{\"912\":1}}],[\"改写初始化app\",{\"1\":{\"822\":1}}],[\"改\",{\"1\":{\"816\":1}}],[\"改动\",{\"1\":{\"610\":3,\"613\":1,\"614\":1,\"617\":1,\"635\":1,\"683\":1}}],[\"改成并发渲染\",{\"1\":{\"396\":1}}],[\"改变图片在背景中的位置\",{\"1\":{\"905\":1}}],[\"改变state的方法\",{\"1\":{\"823\":2}}],[\"改变收集器为栈结构队尾\",{\"1\":{\"656\":1}}],[\"改变尾巴为从当前指针这个字符开始\",{\"1\":{\"646\":1,\"655\":1}}],[\"改变\",{\"0\":{\"1447\":1},\"1\":{\"365\":1,\"1108\":1}}],[\"改变状态并重绘\",{\"1\":{\"165\":1}}],[\"改变列表在可视区域的渲染部分\",{\"1\":{\"96\":1}}],[\"改良通信模块可以专门建立一个\",{\"1\":{\"115\":1}}],[\"改良通信模块\",{\"0\":{\"115\":1}}],[\"虽然可以写在标签属性中\",{\"1\":{\"1235\":1}}],[\"虽然增加了\",{\"1\":{\"636\":1}}],[\"虽然生产环境依然还是通过rollup打包的\",{\"1\":{\"531\":1}}],[\"虽然它也会渲染一个\",{\"1\":{\"239\":1}}],[\"虽然\",{\"1\":{\"223\":1,\"1092\":1}}],[\"虽然render渲染调用了三次memo返回值\",{\"1\":{\"194\":1}}],[\"虽然不是用来解决组件通信问题的\",{\"1\":{\"112\":1}}],[\"虽然是空对象\",{\"1\":{\"92\":1}}],[\"主体标签的关系\",{\"1\":{\"1031\":1}}],[\"主体内容的一大段文章\",{\"1\":{\"1020\":1}}],[\"主流\",{\"0\":{\"957\":1},\"1\":{\"959\":1}}],[\"主函数\",{\"1\":{\"661\":1}}],[\"主动获取子组件的属性或者调用子组件的方法\",{\"1\":{\"513\":1}}],[\"主要应用场景\",{\"1\":{\"1451\":1}}],[\"主要应用于很多不同层级的组件需要访问共享\",{\"1\":{\"210\":1}}],[\"主要指浏览器提供的对象\",{\"1\":{\"1340\":1}}],[\"主要指的是\",{\"1\":{\"1028\":1}}],[\"主要操作类里面的参数不要加点\",{\"1\":{\"1297\":1}}],[\"主要用于数据处理\",{\"1\":{\"1319\":1}}],[\"主要用于筛选数组\",{\"1\":{\"1198\":1}}],[\"主要用来给\",{\"1\":{\"1007\":1}}],[\"主要供\",{\"1\":{\"1172\":1}}],[\"主要借助于背景位置来实现\",{\"1\":{\"916\":1}}],[\"主要还是点状的频率不同\",{\"1\":{\"909\":1}}],[\"主要还是用来在开发跟发布过程中的一个替代\",{\"1\":{\"531\":1}}],[\"主要针对表单元素使用\",{\"1\":{\"873\":1}}],[\"主要作用为自动填充\",{\"1\":{\"1019\":1}}],[\"主要作用\",{\"1\":{\"854\":1}}],[\"主要作用有\",{\"1\":{\"692\":1}}],[\"主要使用场景\",{\"1\":{\"852\":1,\"994\":1}}],[\"主要使用者是\",{\"1\":{\"621\":1}}],[\"主要负责网络数据请求\",{\"1\":{\"838\":1}}],[\"主要实现类是\",{\"1\":{\"620\":1}}],[\"主要是为了避免语义混淆\",{\"1\":{\"1381\":1}}],[\"主要是解决\",{\"1\":{\"919\":1}}],[\"主要是将当前活跃的侦听器\",{\"1\":{\"700\":1}}],[\"主要是将属性挂载到原生\",{\"1\":{\"330\":1}}],[\"主要是对第一轮遍历彻底完成后残留的新旧节点做处理\",{\"1\":{\"357\":1}}],[\"主要讨论\",{\"1\":{\"93\":1}}],[\"主页面\",{\"1\":{\"138\":1}}],[\"主题或语言等\",{\"1\":{\"210\":1}}],[\"主题\",{\"1\":{\"111\":1}}],[\"它在浏览器关闭时出栈\",{\"1\":{\"1425\":1}}],[\"它总是有值的\",{\"1\":{\"1424\":1}}],[\"它遍历的是对象所有可遍历\",{\"1\":{\"1403\":1}}],[\"它定义在\",{\"1\":{\"1402\":1}}],[\"它可以返回匹配字符串\",{\"1\":{\"1385\":1}}],[\"它可以方便地管理服务端的状态\",{\"1\":{\"825\":1}}],[\"它由一系列特殊字符和普通字符构成\",{\"1\":{\"1380\":1}}],[\"它代表的是一个浏览器窗口\",{\"1\":{\"1349\":1}}],[\"它代表请求唯一标识\",{\"1\":{\"845\":1}}],[\"它确保可以在有无窗口的各种环境下正常工作\",{\"1\":{\"1231\":1}}],[\"它就具有了超链接功能\",{\"1\":{\"1042\":1}}],[\"它会先在对象自身中寻找\",{\"1\":{\"1438\":1}}],[\"它会先从局部作用域查找变量\",{\"1\":{\"1012\":1}}],[\"它会在所有代码执行之前声明\",{\"1\":{\"1349\":1}}],[\"它会在组件渲染的过程中把\",{\"1\":{\"593\":1}}],[\"它会产生动态效果\",{\"1\":{\"995\":1}}],[\"它没有边偏移\",{\"1\":{\"991\":1}}],[\"它还用于将媒体功能与媒体类型结合在一起\",{\"1\":{\"964\":1}}],[\"它将仅否定应用了该查询的特定查询\",{\"1\":{\"964\":1}}],[\"它将被编译为嵌套更深的\",{\"1\":{\"644\":1}}],[\"它需要组合其他的\",{\"1\":{\"927\":1}}],[\"它本身内容的宽度\",{\"1\":{\"878\":2}}],[\"它本身只关注\",{\"1\":{\"402\":1}}],[\"它作为\",{\"1\":{\"847\":1}}],[\"它对\",{\"1\":{\"817\":1}}],[\"它接收一个action\",{\"1\":{\"781\":1}}],[\"它使用\",{\"1\":{\"780\":1}}],[\"它创建\",{\"1\":{\"757\":1}}],[\"它只是指向原型对象\",{\"1\":{\"1439\":1}}],[\"它只是把子元素渲染到\",{\"1\":{\"222\":1}}],[\"它只能同时为一个元素的一个事件绑定一个响应函数\",{\"1\":{\"1129\":1}}],[\"它只存在于完整版本\",{\"1\":{\"701\":1}}],[\"它表示真正的\",{\"1\":{\"667\":1}}],[\"它专门用来管理依赖\",{\"1\":{\"605\":1}}],[\"它不仅遍历对象自身的属性\",{\"1\":{\"1403\":1}}],[\"它不是分组\",{\"1\":{\"1388\":1}}],[\"它不是字符串\",{\"1\":{\"122\":1}}],[\"它不能给\",{\"1\":{\"587\":1}}],[\"它是\",{\"1\":{\"1167\":1}}],[\"它是用户正在看到的网站区域\",{\"1\":{\"948\":1}}],[\"它是数据流的中转站\",{\"1\":{\"790\":1}}],[\"它是一个数组\",{\"1\":{\"644\":1}}],[\"它是在\",{\"1\":{\"584\":1}}],[\"它是组合式\",{\"1\":{\"584\":1}}],[\"它具有更多优势\",{\"1\":{\"584\":1}}],[\"它内部实际上自动通过\",{\"1\":{\"550\":1}}],[\"它内部的所有消费组件都会重新渲染\",{\"1\":{\"213\":1}}],[\"它们对应包装对象的属性值或方法\",{\"1\":{\"1415\":1}}],[\"它们引用的匹配文本分别是字符串\",{\"1\":{\"1391\":1}}],[\"它们定义了重复匹配字符的确数或约数\",{\"1\":{\"1384\":1}}],[\"它们是兄弟关系\",{\"1\":{\"1321\":1}}],[\"它们是父子关系\",{\"1\":{\"1321\":1}}],[\"它们都无法获取\",{\"1\":{\"1231\":1}}],[\"它们两者之间的差别是\",{\"1\":{\"1126\":1}}],[\"它们的顺序将根据左括号的顺序来确定\",{\"1\":{\"1391\":1}}],[\"它们的作用旨在为开发者提供类型信息\",{\"1\":{\"581\":1}}],[\"它们的this均是vue实例对象\",{\"1\":{\"489\":1}}],[\"它们的this均是vuecomponent实例对象\",{\"1\":{\"489\":1}}],[\"它们就可以通过父组件作为中间层来实现数据互通了\",{\"1\":{\"110\":1}}],[\"它应该是唯一的\",{\"1\":{\"409\":1}}],[\"它应该是一个真实dom\",{\"1\":{\"288\":1,\"297\":1}}],[\"它跟\",{\"1\":{\"365\":1,\"742\":1}}],[\"它的左边是一个字符串\",{\"1\":{\"1401\":1}}],[\"它的赋值是堆内存地址的引用\",{\"1\":{\"1396\":1}}],[\"它的底层实现机理在当时是非常有创造性\",{\"1\":{\"639\":1}}],[\"它的所有子fiber全部完成了\",{\"1\":{\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"它的特点是不需要在客户端做任何特殊的操作\",{\"1\":{\"27\":1}}],[\"它无法捕获其自身的错误\",{\"1\":{\"242\":1}}],[\"它自身抛出的错误\",{\"1\":{\"242\":1}}],[\"它指的是相同的函数\",{\"1\":{\"231\":1}}],[\"它允许消费组件订阅\",{\"1\":{\"213\":1}}],[\"它最终产生的就是一个\",{\"1\":{\"122\":1}}],[\"即在严格的条件下运行\",{\"1\":{\"1452\":1}}],[\"即调用包装对象的属性和方法\",{\"1\":{\"1418\":1}}],[\"即所有大小写的字母\",{\"1\":{\"1382\":1}}],[\"即查找大写字母\",{\"1\":{\"1382\":1}}],[\"即查找小写字母\",{\"1\":{\"1382\":1}}],[\"即查找数字\",{\"1\":{\"1382\":1}}],[\"即长度为\",{\"1\":{\"1376\":1}}],[\"即自然对数的底数\",{\"1\":{\"1369\":1}}],[\"即时对于纯数字的数组\",{\"1\":{\"1364\":1}}],[\"即为全局方法\",{\"1\":{\"1336\":1}}],[\"即为对象方法\",{\"1\":{\"1335\":1}}],[\"即根据事件名称进行断点设置\",{\"1\":{\"1155\":1}}],[\"即数据单元格的内容\",{\"1\":{\"1048\":1}}],[\"即控制盒子和盒子之间的距离\",{\"1\":{\"970\":1}}],[\"即边框与内容之间的距离\",{\"1\":{\"969\":1}}],[\"即单词间隔\",{\"1\":{\"895\":1}}],[\"即结构与样式分离\",{\"1\":{\"854\":1}}],[\"即结构正确的\",{\"1\":{\"661\":1}}],[\"即reducer\",{\"1\":{\"823\":1}}],[\"即export\",{\"1\":{\"822\":1}}],[\"即不使用\",{\"1\":{\"752\":1}}],[\"即对于相同的输入\",{\"1\":{\"748\":1}}],[\"即普通\",{\"1\":{\"701\":1}}],[\"即新节点newvnode中有无子节点的情况\",{\"1\":{\"692\":1}}],[\"即使初始条件不成立\",{\"1\":{\"1272\":1}}],[\"即使编写了浏览器也会忽略\",{\"1\":{\"1235\":1}}],[\"即使符合条件的元素只有一个\",{\"1\":{\"1092\":1}}],[\"即使查询到的元素只有一个\",{\"1\":{\"1085\":1}}],[\"即使返回的数据内容并没有改变\",{\"1\":{\"815\":1}}],[\"即使是同一片虚拟节点\",{\"1\":{\"672\":1}}],[\"即使在\",{\"1\":{\"505\":1}}],[\"即模板字符串里的\",{\"1\":{\"651\":1,\"657\":1}}],[\"即代表数据的\",{\"1\":{\"650\":1}}],[\"即依赖对象原有的\",{\"1\":{\"636\":1}}],[\"即封装后的\",{\"1\":{\"632\":1}}],[\"即只在当前屏幕上实际使用时才会被处理\",{\"1\":{\"530\":1}}],[\"即页面尚未和数据保持同步\",{\"1\":{\"480\":1}}],[\"即\",{\"1\":{\"439\":1,\"561\":1,\"829\":1,\"1044\":1}}],[\"即包含$store\",{\"1\":{\"416\":1,\"417\":1}}],[\"即可实现字符串的颠倒来替换原字符串\",{\"1\":{\"1391\":1}}],[\"即可\",{\"1\":{\"274\":1,\"970\":1}}],[\"即便这些元素并不是\",{\"1\":{\"223\":1}}],[\"即它们是否在同一个父组件下\",{\"1\":{\"110\":1}}],[\"即视觉视口\",{\"1\":{\"96\":1}}],[\"巧妙的利用下事件冒泡机制\",{\"1\":{\"109\":1}}],[\"转数值为\",{\"1\":{\"1414\":2}}],[\"转义字符\",{\"0\":{\"1242\":1},\"1\":{\"1381\":1}}],[\"转到或者选择对应的表单元素上\",{\"1\":{\"1057\":1}}],[\"转化完成后的虚拟\",{\"1\":{\"702\":1}}],[\"转而将参数中的dep实例取出\",{\"1\":{\"635\":1}}],[\"转为\",{\"1\":{\"1250\":1}}],[\"转为代理对象\",{\"1\":{\"550\":1}}],[\"转为真实\",{\"1\":{\"134\":1}}],[\"转译一次之后再监听\",{\"1\":{\"451\":1}}],[\"转译\",{\"1\":{\"249\":1}}],[\"转译过程\",{\"0\":{\"249\":1},\"1\":{\"249\":1}}],[\"转译为纯\",{\"1\":{\"125\":1}}],[\"转发来实现\",{\"1\":{\"236\":1}}],[\"转发\",{\"0\":{\"236\":1}}],[\"转发调用子组件方法需要用到useimperativehandle和forwardref两个\",{\"1\":{\"107\":1}}],[\"转换结果都是\",{\"1\":{\"1413\":1}}],[\"转换规则\",{\"1\":{\"1413\":2}}],[\"转换规则如下\",{\"1\":{\"1271\":1}}],[\"转换方法与\",{\"1\":{\"1257\":1}}],[\"转换字符串快捷方法\",{\"1\":{\"1255\":1}}],[\"转换布尔值\",{\"1\":{\"1251\":1}}],[\"转换有效位置从字符串首字符为数字开始\",{\"1\":{\"1250\":1}}],[\"转换器模块化流程\",{\"0\":{\"1192\":1}}],[\"转换是同时进行的\",{\"1\":{\"663\":1}}],[\"转换函数\",{\"1\":{\"662\":1}}],[\"转换成\",{\"1\":{\"487\":1}}],[\"转换为布尔值\",{\"1\":{\"1414\":1}}],[\"转换为数字后再比较\",{\"1\":{\"1261\":1}}],[\"转换为数字\",{\"1\":{\"1250\":1}}],[\"转换为符合react\",{\"1\":{\"737\":1,\"740\":1}}],[\"转换为每个层级的属性都是响应式\",{\"1\":{\"602\":1}}],[\"转换为\",{\"1\":{\"250\":1,\"966\":1,\"1250\":2}}],[\"转换为真实\",{\"1\":{\"120\":1,\"165\":1}}],[\"转换\",{\"0\":{\"1249\":1,\"1250\":1,\"1251\":1},\"1\":{\"92\":1,\"249\":2,\"1250\":1,\"1256\":1}}],[\"转换处理的\",{\"1\":{\"68\":1}}],[\"转换请求数据和响应数据\",{\"1\":{\"29\":1}}],[\"传统绑定\",{\"0\":{\"1129\":1}}],[\"传统注册事件方式\",{\"1\":{\"1062\":1}}],[\"传统写法\",{\"1\":{\"103\":1}}],[\"传送\",{\"1\":{\"510\":1}}],[\"传入导入路径和元信息\",{\"1\":{\"737\":1}}],[\"传入的第一个参数是100px并且第二个参数是100px才会执行\",{\"1\":{\"1015\":1}}],[\"传入的第一个参数是100px或者第二个参数是100px才会执行\",{\"1\":{\"1015\":1}}],[\"传入的第一个参数\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"传入的第三个参数类型有误\",{\"1\":{\"674\":1,\"686\":1}}],[\"传入的c是唯一的children\",{\"1\":{\"674\":1,\"686\":1}}],[\"传入的数组参数中有项不是h函数\",{\"1\":{\"674\":1,\"686\":1}}],[\"传入的是get\",{\"1\":{\"633\":1}}],[\"传入的是方法\",{\"1\":{\"633\":1}}],[\"传入set方法绑定\",{\"1\":{\"633\":1}}],[\"传入方法\",{\"1\":{\"633\":1}}],[\"传入\",{\"1\":{\"249\":1,\"628\":2,\"636\":1}}],[\"传递参数\",{\"1\":{\"1451\":1}}],[\"传递参数不一样\",{\"1\":{\"1451\":1}}],[\"传递错误\",{\"1\":{\"835\":1}}],[\"传递成功结果\",{\"1\":{\"835\":1}}],[\"传递给请求方法\",{\"1\":{\"841\":1}}],[\"传递给\",{\"1\":{\"811\":4}}],[\"传递给消费组件\",{\"1\":{\"213\":1}}],[\"传递的参数\",{\"1\":{\"1449\":1}}],[\"传递的其他参数\",{\"1\":{\"1448\":1,\"1450\":1}}],[\"传递的方法\",{\"1\":{\"588\":1}}],[\"传递的数据不是响应式的\",{\"1\":{\"517\":1}}],[\"传递\",{\"1\":{\"149\":1,\"237\":1}}],[\"传数据给子组件\",{\"1\":{\"106\":1}}],[\"父盒子布局时\",{\"1\":{\"997\":1}}],[\"父盒子需要加定位限制子盒子在外部的父盒子内部显示\",{\"1\":{\"997\":1}}],[\"父盒子不方便给高度\",{\"1\":{\"982\":1}}],[\"父级或外部元素要使用相对定位\",{\"1\":{\"997\":1}}],[\"父级添加双伪元素\",{\"1\":{\"985\":1}}],[\"父级添加\",{\"1\":{\"985\":2}}],[\"父级有了高度就不会影响下面的标准流\",{\"1\":{\"983\":1}}],[\"父级就会根据浮动的子盒子自动检测高度\",{\"1\":{\"983\":1}}],[\"父级盒子高度为\",{\"1\":{\"982\":1}}],[\"父级宽度\",{\"1\":{\"876\":1}}],[\"父元素有上外边距同时子元素也有子外边距\",{\"1\":{\"971\":1}}],[\"父元素如果设置行高\",{\"1\":{\"931\":1}}],[\"父传子\",{\"1\":{\"520\":1}}],[\"父节点索引\",{\"1\":{\"391\":2}}],[\"父节点编号\",{\"1\":{\"391\":2}}],[\"父节点的\",{\"1\":{\"274\":1}}],[\"父捕获\",{\"1\":{\"301\":1}}],[\"父冒泡\",{\"1\":{\"301\":1}}],[\"父真实dom节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"父fiber\",{\"1\":{\"273\":1,\"317\":1,\"349\":2,\"360\":1,\"374\":1,\"375\":2,\"385\":2,\"396\":1}}],[\"父释放\",{\"1\":{\"172\":1}}],[\"父释放中\",{\"1\":{\"172\":1}}],[\"父\",{\"1\":{\"172\":8,\"295\":2}}],[\"父子附件渲染顺序\",{\"0\":{\"172\":1}}],[\"父子通信的函数调用需要使用柯里化维持\",{\"1\":{\"159\":1}}],[\"父子组件初次渲染会各打印一次信息\",{\"1\":{\"91\":1}}],[\"父组件访问数据\",{\"1\":{\"521\":1}}],[\"父组件根据子组件传过来的插槽数据来进行不同的展现和填充内容\",{\"1\":{\"520\":1}}],[\"父组件里的方法\",{\"1\":{\"516\":1}}],[\"父组件监听了两个事件\",{\"1\":{\"515\":1}}],[\"父组件数据\",{\"1\":{\"515\":1,\"516\":1,\"517\":1}}],[\"父组件组件\",{\"1\":{\"511\":1}}],[\"父组件传递内部函数给子组件时\",{\"1\":{\"197\":1}}],[\"父组件释放\",{\"1\":{\"172\":1}}],[\"父组件更新\",{\"1\":{\"172\":1}}],[\"父组件第一次渲染\",{\"1\":{\"172\":1}}],[\"父组件没有更新不触发\",{\"1\":{\"167\":1}}],[\"父组件及下属子组件均不触发\",{\"1\":{\"162\":1}}],[\"父组件自身不会\",{\"1\":{\"162\":1}}],[\"父组件执行\",{\"1\":{\"156\":1}}],[\"父组件\",{\"1\":{\"105\":2,\"106\":1,\"502\":1,\"504\":3,\"511\":1,\"512\":1,\"513\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"520\":1,\"563\":1}}],[\"提醒\",{\"1\":{\"1048\":1}}],[\"提倡使用\",{\"1\":{\"924\":1}}],[\"提倡使用数字表示加粗或者变细\",{\"1\":{\"884\":1}}],[\"提升维护度\",{\"1\":{\"790\":1}}],[\"提示文本\",{\"1\":{\"1044\":2}}],[\"提示\",{\"1\":{\"587\":1,\"900\":1,\"1142\":1}}],[\"提交按钮会把表单数据发送到服务器\",{\"1\":{\"1057\":1}}],[\"提交方式\",{\"1\":{\"1056\":1}}],[\"提交之后后退表单属性保留\",{\"1\":{\"1019\":1}}],[\"提交阶段删除真实dom\",{\"1\":{\"357\":1,\"361\":1}}],[\"提交阶段分两步\",{\"1\":{\"274\":1}}],[\"提交删除副作用\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"提交更新阶段相对简单一点\",{\"1\":{\"330\":1}}],[\"提交更改的全过程\",{\"1\":{\"303\":1}}],[\"提前缓存fiber节点的实例到dom节点上\",{\"1\":{\"289\":1}}],[\"提前总结\",{\"0\":{\"105\":1}}],[\"提高编译器效率\",{\"1\":{\"1452\":1}}],[\"提高程序性能\",{\"1\":{\"1127\":1}}],[\"提高页面浏览速度\",{\"1\":{\"1028\":1}}],[\"提高网页的\",{\"1\":{\"1020\":1}}],[\"提高运行效率\",{\"1\":{\"129\":1,\"486\":1}}],[\"提高\",{\"1\":{\"128\":1,\"485\":1,\"936\":1}}],[\"提供clientprovider\",{\"1\":{\"826\":1}}],[\"提供更丰富的\",{\"1\":{\"779\":1}}],[\"提供race\",{\"1\":{\"758\":1}}],[\"提供全局\",{\"1\":{\"753\":1}}],[\"提供者\",{\"1\":{\"753\":1}}],[\"提供组件懒加载导入函数\",{\"1\":{\"730\":1}}],[\"提供组件\",{\"1\":{\"707\":1}}],[\"提供watcher新增\",{\"1\":{\"635\":1}}],[\"提供dep新增\",{\"1\":{\"635\":1}}],[\"提供已声明的响应式数据\",{\"1\":{\"595\":1}}],[\"提供依赖注入\",{\"1\":{\"560\":2}}],[\"提供的默认\",{\"1\":{\"966\":1}}],[\"提供的\",{\"1\":{\"303\":1,\"451\":1,\"731\":1,\"849\":1}}],[\"提供了\",{\"1\":{\"1035\":1}}],[\"提供了三种传统布局方式\",{\"1\":{\"974\":1}}],[\"提供了解决方案\",{\"1\":{\"962\":1}}],[\"提供了一个标准的方式来获取不同环境下的全局\",{\"1\":{\"1231\":1}}],[\"提供了一种方便高效的图标使用方式\",{\"1\":{\"917\":1}}],[\"提供了一种非常灵活的方式\",{\"1\":{\"499\":1}}],[\"提供了一些\",{\"1\":{\"120\":1}}],[\"提供了两种\",{\"1\":{\"365\":1}}],[\"提供了类似\",{\"1\":{\"303\":1}}],[\"提供了有别于原生\",{\"1\":{\"277\":1}}],[\"提供了现成的\",{\"1\":{\"114\":1}}],[\"提供\",{\"1\":{\"119\":1,\"595\":1,\"752\":1,\"758\":3}}],[\"提供操作\",{\"1\":{\"119\":1}}],[\"提取query字符串的回调函数字符串编码\",{\"1\":{\"26\":1}}],[\"按键松开\",{\"1\":{\"1150\":1}}],[\"按键按下\",{\"1\":{\"1150\":1}}],[\"按键修饰符\",{\"0\":{\"472\":1}}],[\"按文件上传\",{\"1\":{\"1057\":1}}],[\"按钮\",{\"1\":{\"1057\":1}}],[\"按钮点击同时调用多次\",{\"1\":{\"339\":1}}],[\"按下\",{\"1\":{\"940\":1}}],[\"按下修饰键的同事\",{\"1\":{\"472\":1}}],[\"按\",{\"1\":{\"937\":1,\"938\":2}}],[\"按标签名称分类\",{\"1\":{\"861\":1}}],[\"按元素节点方式编译\",{\"1\":{\"695\":1}}],[\"按判断的先后顺序\",{\"1\":{\"676\":1}}],[\"按道理应该会通知三次\",{\"1\":{\"505\":1}}],[\"按优先级执行任务\",{\"1\":{\"395\":1}}],[\"按照代码顺序查找\",{\"1\":{\"1423\":2}}],[\"按照自上向下顺序加载\",{\"1\":{\"1119\":1}}],[\"按照指定的周期\",{\"1\":{\"1063\":1}}],[\"按照定位的方式移动盒子\",{\"1\":{\"988\":1}}],[\"按照\",{\"1\":{\"865\":1}}],[\"按照上面的情况\",{\"1\":{\"676\":1}}],[\"按照正确的结构拼接在\",{\"1\":{\"658\":1}}],[\"按照事件捕获\",{\"1\":{\"277\":1}}],[\"按照之前的工作单元渲染顺序\",{\"1\":{\"274\":1}}],[\"按照组件树更新原理5项条件\",{\"1\":{\"92\":1}}],[\"按需深拷贝的实现\",{\"1\":{\"103\":1}}],[\"还遍历继承的属性\",{\"1\":{\"1403\":1}}],[\"还不如\",{\"1\":{\"920\":1}}],[\"还会停止垃圾回收机制\",{\"1\":{\"842\":1}}],[\"还剩下服务端状态未能解决\",{\"1\":{\"825\":1}}],[\"还内置了\",{\"1\":{\"819\":1}}],[\"还需要执行\",{\"1\":{\"702\":1}}],[\"还需要对\",{\"1\":{\"610\":1}}],[\"还需要设计一套精密的系统\",{\"1\":{\"597\":1}}],[\"还可以表示范围之外的字符\",{\"1\":{\"1382\":1}}],[\"还可以直接使用八进制数值表示字符\",{\"1\":{\"1381\":1}}],[\"还可以使用\",{\"1\":{\"1381\":1}}],[\"还可以设置一些额外隐藏的属性\",{\"1\":{\"600\":1}}],[\"还可以通过传递一个\",{\"1\":{\"67\":1}}],[\"还挺好用的\",{\"1\":{\"517\":1}}],[\"还能从页面流向\",{\"1\":{\"447\":1}}],[\"还有以下优点\",{\"1\":{\"1028\":1}}],[\"还有任务要执行\",{\"1\":{\"395\":1}}],[\"还有\",{\"1\":{\"354\":2}}],[\"还有我们熟悉的单个类组件\",{\"1\":{\"342\":1}}],[\"还有一个地方可以调用\",{\"1\":{\"178\":1}}],[\"还是内部脚本代码块\",{\"1\":{\"1419\":1}}],[\"还是会调用\",{\"1\":{\"841\":1}}],[\"还是会正常打印的\",{\"1\":{\"197\":1}}],[\"还是暴力替换\",{\"1\":{\"672\":1}}],[\"还是针对原生标签组件\",{\"1\":{\"330\":1}}],[\"还使用proxy\",{\"1\":{\"103\":1}}],[\"然后进入这个执行环境继续执行其中的代码\",{\"1\":{\"1423\":1}}],[\"然后从头开始执行\",{\"1\":{\"1423\":1}}],[\"然后继续查找并加载下一个代码块\",{\"1\":{\"1420\":1}}],[\"然后继续上述规则\",{\"1\":{\"1376\":2}}],[\"然后使用竖线把它们连接在一起\",{\"1\":{\"1383\":1}}],[\"然后使用命令创建项目\",{\"1\":{\"493\":1}}],[\"然后取2个长度的字符串\",{\"1\":{\"1376\":1}}],[\"然后循环执行\",{\"1\":{\"1270\":1}}],[\"然后将小文件组合起来\",{\"1\":{\"1186\":1}}],[\"然后摆放到相应位置\",{\"1\":{\"967\":1}}],[\"然后引用不同的\",{\"1\":{\"964\":1}}],[\"然后再按照顺序找下一个代码块\",{\"1\":{\"1419\":1}}],[\"然后再调用自己独有的类\",{\"1\":{\"862\":1}}],[\"然后再去搜索距离为\",{\"1\":{\"266\":1}}],[\"然后为了简化开发体验\",{\"1\":{\"819\":1}}],[\"然后出发请求函数fetchuser\",{\"1\":{\"777\":1}}],[\"然后做一些副作用\",{\"1\":{\"759\":1}}],[\"然后\",{\"1\":{\"756\":1}}],[\"然后还可以有一个\",{\"1\":{\"747\":1}}],[\"然后还要继续传给子组件内部的其他组件\",{\"1\":{\"515\":1}}],[\"然后层层推回父节点\",{\"1\":{\"702\":1}}],[\"然后判断\",{\"1\":{\"661\":1}}],[\"然后在定义参数和默认值之间用等号\",{\"1\":{\"1013\":1}}],[\"然后在该函数的函数体末尾处\",{\"1\":{\"644\":1}}],[\"然后在子组件中用\",{\"1\":{\"514\":1}}],[\"然后通过\",{\"1\":{\"639\":1,\"1235\":1}}],[\"然后手动开启依赖收集watcher\",{\"1\":{\"636\":1}}],[\"然后读取数据\",{\"1\":{\"605\":1}}],[\"然后才能提供服务\",{\"1\":{\"530\":1}}],[\"然后调用需要的方法\",{\"1\":{\"514\":1}}],[\"然后父组件就可以通过\",{\"1\":{\"513\":1}}],[\"然后逐个执行子项\",{\"1\":{\"505\":1}}],[\"然后遵循事件捕获和事件冒泡的顺序执行合成事件\",{\"1\":{\"277\":1}}],[\"然后剪开变成单向链表\",{\"1\":{\"272\":1}}],[\"然后是关键任务\",{\"1\":{\"272\":1,\"273\":1}}],[\"然后与上一次更新之后生成的旧\",{\"1\":{\"162\":1}}],[\"然后返回一个新状态\",{\"1\":{\"103\":1}}],[\"然后根据请求地址去请求不同服务器\",{\"1\":{\"28\":1}}],[\"开源\",{\"1\":{\"1279\":1}}],[\"开心\",{\"1\":{\"644\":1}}],[\"开始检索的位置在字符串的\",{\"1\":{\"1366\":1}}],[\"开始计算子字符串最后出现的位置\",{\"1\":{\"1366\":1}}],[\"开始拖拽\",{\"1\":{\"1138\":1}}],[\"开始支持\",{\"1\":{\"1124\":1}}],[\"开始执行\",{\"1\":{\"1076\":1}}],[\"开始执行任务队列中的任务\",{\"1\":{\"395\":1}}],[\"开始的\",{\"1\":{\"1065\":2}}],[\"开始转化为虚拟\",{\"1\":{\"702\":1}}],[\"开始标签内的\",{\"1\":{\"663\":1}}],[\"开始标签与开始标签之间的文本内容本章节不做判断\",{\"1\":{\"661\":1}}],[\"开始标记入栈1\",{\"1\":{\"661\":1,\"662\":1}}],[\"开始标记\",{\"1\":{\"661\":1}}],[\"开始收集依赖\",{\"1\":{\"635\":1}}],[\"开始遍历剩下的虚拟dom子节点\",{\"1\":{\"361\":1}}],[\"开始处理移动的情况\",{\"1\":{\"361\":1}}],[\"开始第一轮循环\",{\"1\":{\"357\":1,\"361\":1}}],[\"开始串起更新任务\",{\"1\":{\"323\":1}}],[\"开始进入提交阶段\",{\"1\":{\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"开始创建子协调器\",{\"1\":{\"272\":1}}],[\"开始创建后台节点链表\",{\"1\":{\"272\":1}}],[\"开始构建fiber树\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"开始根据fiber构建fiber树\",{\"1\":{\"272\":1,\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"开始\",{\"1\":{\"244\":1,\"1100\":1,\"1289\":1,\"1290\":1,\"1376\":2}}],[\"开启严格模式\",{\"0\":{\"1453\":1}}],[\"开启devtools工具监听saga\",{\"1\":{\"760\":1}}],[\"开启依赖收集前\",{\"1\":{\"703\":1}}],[\"开启深度监听亦可触发\",{\"1\":{\"628\":1}}],[\"开启深度监听后\",{\"1\":{\"628\":1}}],[\"开启响应式数据声明definereactive\",{\"1\":{\"620\":1}}],[\"开启\",{\"1\":{\"574\":2,\"636\":1}}],[\"开启服务\",{\"0\":{\"574\":1}}],[\"开启命名空间后\",{\"1\":{\"418\":4}}],[\"开启命名空间\",{\"1\":{\"418\":1}}],[\"开启对所有已注册事件的监听\",{\"1\":{\"283\":1}}],[\"开启已注册事件的代理监听\",{\"1\":{\"277\":1}}],[\"开启浏览器空闲时间碎片化加载的功能之后\",{\"1\":{\"272\":1}}],[\"开启闲时\",{\"1\":{\"272\":1}}],[\"开启props\",{\"1\":{\"229\":1}}],[\"开启监听入口\",{\"0\":{\"732\":1}}],[\"开启监听\",{\"1\":{\"173\":1}}],[\"开启定时器\",{\"1\":{\"167\":1,\"479\":1}}],[\"开发工具\",{\"1\":{\"1031\":1}}],[\"开发使用的比较常见的布局方式\",{\"1\":{\"960\":1}}],[\"开发尺寸\",{\"1\":{\"952\":1}}],[\"开发时候的\",{\"1\":{\"952\":1}}],[\"开发平台\",{\"1\":{\"492\":1}}],[\"开发者更是直接正常书写\",{\"1\":{\"966\":1}}],[\"开发者只需要关注\",{\"1\":{\"966\":1}}],[\"开发者可以在请求主体方法\",{\"1\":{\"841\":1}}],[\"开发者自行封装\",{\"1\":{\"198\":1}}],[\"开发者修改数据\",{\"1\":{\"103\":1}}],[\"开发中\",{\"1\":{\"672\":1}}],[\"开发中尽可能使用useeffect以避免阻塞视觉更新\",{\"1\":{\"187\":1}}],[\"开发中如何选择\",{\"1\":{\"161\":1,\"461\":1}}],[\"开头注意\",{\"1\":{\"964\":1}}],[\"开头就是指令\",{\"1\":{\"695\":1}}],[\"开头是否满足标签结束标签之前的正文内容\",{\"1\":{\"661\":1}}],[\"开头是否满足标签结束标签的正则\",{\"1\":{\"661\":1}}],[\"开头是否满足标签开始标签的正则\",{\"1\":{\"661\":1}}],[\"开头的代码\",{\"1\":{\"123\":1}}],[\"开头\",{\"1\":{\"86\":1,\"442\":1,\"695\":1,\"1011\":2,\"1252\":3}}],[\"睡觉\",{\"1\":{\"103\":2}}],[\"吃饭\",{\"1\":{\"103\":2}}],[\"众所周知\",{\"1\":{\"103\":1}}],[\"作new\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"作者\",{\"1\":{\"401\":1}}],[\"作用等同于以前的\",{\"1\":{\"1297\":1}}],[\"作用和\",{\"1\":{\"1374\":1}}],[\"作用和刷新一样\",{\"1\":{\"1065\":1}}],[\"作用和直接修改\",{\"1\":{\"1065\":1}}],[\"作用是从一个页面链接到另一个页面\",{\"1\":{\"1041\":1}}],[\"作用就是告诉浏览器使用哪种\",{\"1\":{\"1032\":1}}],[\"作用域规则确定\",{\"1\":{\"1428\":1}}],[\"作用域链保证了变量和函数的有序访问\",{\"1\":{\"1423\":1}}],[\"作用域链的第一项永远是当前作用域\",{\"1\":{\"1423\":1}}],[\"作用域链由当前执行环境的变量对象\",{\"1\":{\"1423\":1}}],[\"作用域指一个变量的作用范围\",{\"1\":{\"1348\":1}}],[\"作用域\",{\"0\":{\"1012\":1,\"1348\":1}}],[\"作用域插槽子传父\",{\"1\":{\"520\":1}}],[\"作用域插槽是带数据的插槽\",{\"1\":{\"520\":1}}],[\"作用域插槽\",{\"1\":{\"503\":1,\"504\":1}}],[\"作用同\",{\"1\":{\"763\":1}}],[\"作用类似于数组的\",{\"1\":{\"1195\":1}}],[\"作用类似于\",{\"1\":{\"716\":1}}],[\"作用类似于vue3\",{\"1\":{\"193\":1}}],[\"作用与<link>类似\",{\"1\":{\"714\":1}}],[\"作用与<browserrouter>一样\",{\"1\":{\"711\":1}}],[\"作用与purecomponent相同\",{\"1\":{\"100\":1}}],[\"作用3\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"作用2\",{\"1\":{\"602\":3,\"603\":1,\"604\":3,\"608\":1,\"609\":3,\"610\":2,\"613\":1,\"617\":1,\"618\":1}}],[\"作用1\",{\"1\":{\"602\":3,\"603\":1,\"604\":3,\"608\":1,\"609\":3,\"610\":2,\"613\":1,\"617\":1,\"618\":1}}],[\"作用\",{\"0\":{\"190\":1,\"502\":1,\"1457\":1},\"1\":{\"121\":1,\"126\":1,\"128\":1,\"129\":1,\"184\":1,\"427\":1,\"431\":1,\"432\":2,\"433\":1,\"434\":1,\"435\":1,\"485\":1,\"486\":1,\"497\":1,\"498\":1,\"507\":1,\"536\":1,\"537\":1,\"553\":1,\"556\":2,\"557\":1,\"713\":1,\"715\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":1,\"722\":1,\"723\":1,\"864\":1,\"868\":5,\"873\":1,\"908\":1,\"969\":1,\"970\":1,\"1031\":1,\"1116\":1,\"1407\":4}}],[\"作为普通函数调用\",{\"1\":{\"1438\":1}}],[\"作为函数使用\",{\"1\":{\"1434\":1}}],[\"作为函数的第一个函数传递进去\",{\"1\":{\"755\":1}}],[\"作为连接符\",{\"1\":{\"1362\":1}}],[\"作为遍历所有数据结构的统一的方法\",{\"1\":{\"1275\":1}}],[\"作为对象使用\",{\"1\":{\"1434\":1}}],[\"作为对象的属性和方法\",{\"1\":{\"1162\":1}}],[\"作为对象有\",{\"1\":{\"74\":1}}],[\"作为单独定义的模块\",{\"1\":{\"1013\":1}}],[\"作为一门标记性语言\",{\"1\":{\"1003\":1}}],[\"作为一个外部的\",{\"1\":{\"848\":1}}],[\"作为开发者无需关注这些分辨率\",{\"1\":{\"944\":1}}],[\"作为查询键\",{\"1\":{\"830\":1}}],[\"作为应用全局状态管理机而存在\",{\"1\":{\"743\":1}}],[\"作为承载容器\",{\"1\":{\"675\":1}}],[\"作为它下标为3的项\",{\"1\":{\"656\":1}}],[\"作为标识符\",{\"1\":{\"647\":1,\"1333\":2}}],[\"作为definereactive响应式数据劫持函数的递归操作入口函数\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"作为基本类型可以正常监测属性\",{\"1\":{\"602\":1}}],[\"作为文件后缀名的\",{\"1\":{\"581\":1}}],[\"作为第二参数\",{\"1\":{\"237\":1}}],[\"作为\",{\"1\":{\"161\":2,\"272\":1,\"461\":2,\"563\":1,\"829\":1,\"1097\":1,\"1215\":1}}],[\"作为请求主体被发送的数据\",{\"1\":{\"47\":1}}],[\"触发条件\",{\"1\":{\"1117\":1}}],[\"触发更新渲染的内容比较复杂\",{\"1\":{\"849\":1}}],[\"触发更新渲染\",{\"0\":{\"849\":1}}],[\"触发更新之后\",{\"1\":{\"162\":1}}],[\"触发调用\",{\"1\":{\"843\":1}}],[\"触发路由守卫函数判断\",{\"1\":{\"740\":1}}],[\"触发update时必定更新\",{\"1\":{\"609\":1,\"616\":1}}],[\"触发了\",{\"1\":{\"605\":1}}],[\"触发了parent中的clickhandler\",{\"1\":{\"515\":1}}],[\"触发了parent中的eventhandler\",{\"1\":{\"515\":1}}],[\"触发的\",{\"1\":{\"605\":1}}],[\"触发的更新引起组件树重新渲染\",{\"1\":{\"97\":1}}],[\"触发时机\",{\"0\":{\"671\":1}}],[\"触发时\",{\"1\":{\"593\":1}}],[\"触发父组件的事件\",{\"1\":{\"514\":1}}],[\"触发watchobj的handler执行\",{\"1\":{\"451\":1}}],[\"触发多次更新情况时\",{\"1\":{\"339\":1}}],[\"触发\",{\"1\":{\"167\":2,\"171\":2,\"410\":1,\"411\":1,\"849\":1}}],[\"触发初次渲染\",{\"1\":{\"167\":1,\"171\":1}}],[\"触发重新渲染\",{\"1\":{\"92\":1}}],[\"优雅\",{\"1\":{\"1291\":1}}],[\"优缺点同上\",{\"1\":{\"985\":1}}],[\"优秀的冷启动\",{\"0\":{\"530\":1}}],[\"优先级更高\",{\"1\":{\"1410\":1,\"1411\":1}}],[\"优先级\",{\"0\":{\"932\":1}}],[\"优先级低于app中设置的初始值\",{\"1\":{\"823\":1}}],[\"优先级别\",{\"1\":{\"395\":1}}],[\"优先\",{\"1\":{\"534\":1}}],[\"优先匹配前端资源\",{\"1\":{\"495\":1}}],[\"优势\",{\"1\":{\"450\":1,\"1328\":3}}],[\"优化了\",{\"1\":{\"1279\":1}}],[\"优化渲染性能\",{\"1\":{\"231\":1}}],[\"优化\",{\"0\":{\"97\":1},\"1\":{\"388\":1}}],[\"优点是非常便于控制位置\",{\"1\":{\"903\":1}}],[\"优点\",{\"0\":{\"4\":1},\"1\":{\"117\":1,\"779\":1,\"861\":1,\"917\":1,\"985\":3,\"1127\":1,\"1279\":1}}],[\"其隐式转换会调用默认的\",{\"1\":{\"1410\":1}}],[\"其祖先元素的相同事件也会被触发\",{\"1\":{\"1125\":1}}],[\"其本质上做的事情与\",{\"1\":{\"1007\":1}}],[\"其缺点是比起\",{\"1\":{\"1006\":1}}],[\"其次是使得原始类型的值也有办法调用自己的方法\",{\"1\":{\"1416\":1}}],[\"其次\",{\"0\":{\"958\":1},\"1\":{\"959\":1}}],[\"其次判断\",{\"1\":{\"661\":1}}],[\"其设备的主要分辨率有\",{\"1\":{\"944\":1}}],[\"其语法格式如下\",{\"1\":{\"909\":1}}],[\"其行为方式类似\",{\"1\":{\"898\":1}}],[\"其字体尺寸更小\",{\"1\":{\"886\":1}}],[\"其写法就是把外层标签写在前面\",{\"1\":{\"870\":1}}],[\"其原因是复杂数据类型栈地址的变化引发更新机制\",{\"1\":{\"815\":1}}],[\"其原理是将全部的派发事件全部代理到根节点\",{\"1\":{\"277\":1}}],[\"其核心思想实际就是利用了object\",{\"1\":{\"792\":1}}],[\"其初始化的主要流程为\",{\"1\":{\"700\":1}}],[\"其内部的节点不再精细化比较而是直接暴力替换\",{\"1\":{\"672\":1}}],[\"其内容都会让收集器推入内部子项\",{\"1\":{\"648\":1}}],[\"其实变量对象和激活对象都是一个东西\",{\"1\":{\"1423\":1}}],[\"其实固定定位也可以看做是一种特殊的绝对定位\",{\"1\":{\"994\":1}}],[\"其实我们并不陌生\",{\"1\":{\"840\":1}}],[\"其实就是\",{\"1\":{\"644\":1}}],[\"其实就是对应的\",{\"1\":{\"636\":1}}],[\"其实\",{\"1\":{\"634\":1}}],[\"其实第三轮遍历的关键在于对于剩余\",{\"1\":{\"358\":1}}],[\"其模板会被编译成与其同一作用域的渲染函数\",{\"1\":{\"584\":1}}],[\"其底层就是用\",{\"1\":{\"524\":1}}],[\"其底层原理大体分为三步\",{\"1\":{\"303\":1}}],[\"其中属性\",{\"1\":{\"1391\":1}}],[\"其中每个特殊字符都包含一定的语义和功能\",{\"1\":{\"1380\":1}}],[\"其中一个才有效\",{\"1\":{\"995\":1}}],[\"其中字号和字体必须同时出现\",{\"1\":{\"887\":1}}],[\"其中这些文件会识别为model文件\",{\"1\":{\"823\":1}}],[\"其中当属newvnode和oldvnode都存在子节点\",{\"1\":{\"692\":1}}],[\"其中的\",{\"1\":{\"626\":1}}],[\"其中\",{\"1\":{\"455\":2,\"470\":1,\"822\":1,\"823\":1,\"876\":1,\"877\":1,\"1042\":1,\"1410\":1}}],[\"其中任一非终端节点的数据均不大于其左子节点和右子节点的值\",{\"1\":{\"391\":1}}],[\"其函数签名与\",{\"1\":{\"376\":1}}],[\"其他运算符都会把运算子自动转成数值\",{\"1\":{\"1414\":1}}],[\"其他全为\",{\"1\":{\"1413\":1}}],[\"其他静态方法\",{\"0\":{\"1408\":1}}],[\"其他情况和substring处理方式一致\",{\"1\":{\"1376\":1}}],[\"其他\",{\"1\":{\"1333\":1}}],[\"其他事件和原生基本一致\",{\"1\":{\"1327\":1}}],[\"其他类型跟\",{\"1\":{\"1261\":1}}],[\"其他进制数字\",{\"0\":{\"1252\":1}}],[\"其他都是\",{\"1\":{\"1251\":2}}],[\"其他都是基本数据类型\",{\"1\":{\"1241\":1}}],[\"其他不建议字符\",{\"1\":{\"1240\":1}}],[\"其他会非常快\",{\"1\":{\"1151\":1}}],[\"其他浏览器\",{\"1\":{\"1106\":1}}],[\"其他标签作为正文\",{\"1\":{\"1020\":1}}],[\"其他属性\",{\"1\":{\"1000\":1,\"1044\":1,\"1057\":1}}],[\"其他图片格式\",{\"0\":{\"955\":1}}],[\"其他声明可另起\",{\"1\":{\"583\":1,\"591\":1}}],[\"其他组件\",{\"0\":{\"565\":1},\"1\":{\"592\":1}}],[\"其他api\",{\"0\":{\"551\":1}}],[\"其他改变\",{\"1\":{\"525\":1}}],[\"其他基础属性与指令与\",{\"1\":{\"523\":1}}],[\"其他的元素索引会依次调整\",{\"1\":{\"1357\":1}}],[\"其他的内部属性挂载如\",{\"1\":{\"664\":1}}],[\"其他的会被过滤掉\",{\"1\":{\"505\":1}}],[\"其他的组件代码包括\",{\"1\":{\"228\":1}}],[\"其他节点尽数删除\",{\"1\":{\"353\":1}}],[\"其他需要注册的事件往里面添加就可以\",{\"1\":{\"281\":1}}],[\"其余情况继续上述规则\",{\"1\":{\"1376\":2}}],[\"其余参数都可以省略\",{\"1\":{\"1308\":1}}],[\"其余兄弟元素\",{\"1\":{\"1291\":1}}],[\"其余节点方法\",{\"0\":{\"1093\":1}}],[\"其余设备屏幕下的\",{\"1\":{\"966\":1}}],[\"其余和react导航相同\",{\"1\":{\"822\":1}}],[\"其余旧节点不变\",{\"1\":{\"702\":1}}],[\"其余的做一个默认处理\",{\"1\":{\"648\":1}}],[\"其余源码详见\",{\"1\":{\"332\":1}}],[\"其余\",{\"1\":{\"273\":1,\"965\":1}}],[\"其过程简要来说是对每一个可能的分支路径深入到不能再深入为止\",{\"1\":{\"266\":1}}],[\"其默认值才会是\",{\"1\":{\"212\":1}}],[\"其\",{\"1\":{\"212\":1,\"553\":1}}],[\"其作用是\",{\"1\":{\"125\":1}}],[\"其它标签需要特别解析\",{\"1\":{\"123\":1}}],[\"其具体步骤如下\",{\"1\":{\"96\":1}}],[\"其高度\",{\"1\":{\"96\":1}}],[\"每当进入一个函数的执行就会创建函数的执行上下文\",{\"1\":{\"1425\":1}}],[\"每当调用\",{\"1\":{\"626\":1}}],[\"每进入到一个不同的运行环境都会创建\",{\"1\":{\"1422\":1}}],[\"每调用一次函数就会创建一个新的函数作用域\",{\"1\":{\"1350\":1}}],[\"每调用\",{\"1\":{\"1173\":1}}],[\"每隔\",{\"1\":{\"1142\":1}}],[\"每行中的字符数\",{\"1\":{\"1057\":1}}],[\"每种方式各有利弊\",{\"1\":{\"583\":1}}],[\"每一条语句以\",{\"1\":{\"1238\":1}}],[\"每一份作为\",{\"1\":{\"966\":1}}],[\"每一个\",{\"1\":{\"779\":1}}],[\"每一层上的所有节点都有两个子节点的二叉树\",{\"1\":{\"390\":1}}],[\"每一种fiber状态存的类型不一样\",{\"1\":{\"270\":1,\"272\":1}}],[\"每三个一组\",{\"1\":{\"323\":1}}],[\"每三个索引分别存储渲染对象\",{\"1\":{\"323\":1}}],[\"每次可以走\",{\"1\":{\"1458\":1}}],[\"每次执行时\",{\"1\":{\"1276\":1}}],[\"每次执行完依赖更新后\",{\"1\":{\"635\":1}}],[\"每次执行完一个执行单元\",{\"1\":{\"264\":1}}],[\"每次保存\",{\"1\":{\"1031\":1}}],[\"每次运行都返回了一个新的引用值\",{\"1\":{\"815\":1}}],[\"每次触发都会执行我们定义的\",{\"1\":{\"790\":1}}],[\"每次触发更新都会从头开始生成一个新的\",{\"1\":{\"162\":1}}],[\"每次都返回一个新对象\",{\"1\":{\"744\":1}}],[\"每次\",{\"1\":{\"628\":1,\"636\":1}}],[\"每次调用间隔的时间\",{\"1\":{\"1063\":1}}],[\"每次调用\",{\"1\":{\"505\":1,\"841\":1}}],[\"每次调用vue\",{\"1\":{\"489\":1}}],[\"每次路由切换后执行\",{\"1\":{\"436\":1}}],[\"每次路由切换时执行\",{\"1\":{\"436\":1}}],[\"每次渲染hook前需要清除更新队列\",{\"1\":{\"373\":1}}],[\"每次更新都会牵一发而动全身\",{\"1\":{\"257\":1}}],[\"每次更新都会触发\",{\"1\":{\"257\":1}}],[\"每次在value变化以后\",{\"1\":{\"204\":1}}],[\"每次修改都会重新设置\",{\"1\":{\"156\":1}}],[\"每次修改调用都会重新调用\",{\"1\":{\"156\":1}}],[\"每个对象都有一个\",{\"1\":{\"1410\":1}}],[\"每个元素的索引号\",{\"1\":{\"1319\":1}}],[\"每个元素执行一次\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"每个元素内含有两个子元素\",{\"1\":{\"1210\":1}}],[\"每个网页都会有一个基本的结构标签\",{\"1\":{\"1031\":1}}],[\"每个小背景图片的大小和位置\",{\"1\":{\"916\":1}}],[\"每个<guard>组件都传入了闭包位置\",{\"1\":{\"740\":1}}],[\"每个节点内部都含有属性\",{\"1\":{\"692\":1}}],[\"每个节点最多有两个子节点\",{\"1\":{\"390\":1}}],[\"每个属性就能拥有一个属于自己的\",{\"1\":{\"608\":1}}],[\"每个数据都应该维护一个属于自己的数组\",{\"1\":{\"608\":1}}],[\"每个组件实例都对应一个\",{\"1\":{\"593\":1}}],[\"每个组件都有自己的$route\",{\"1\":{\"425\":1}}],[\"每个组件对象都会有\",{\"1\":{\"147\":1}}],[\"每个端口都可以通过\",{\"1\":{\"388\":1}}],[\"每个原生事件注册的监听函数以事件派发\",{\"1\":{\"277\":1}}],[\"每个fiber身上可能还有更新队列\",{\"1\":{\"270\":1,\"272\":1}}],[\"每个fiber会有自己的状态\",{\"1\":{\"270\":1,\"272\":1}}],[\"每个虚拟节点内部表示为一个\",{\"1\":{\"265\":1}}],[\"每个帧的开头包括样式计算\",{\"1\":{\"261\":1}}],[\"每个帧的预算时间是\",{\"1\":{\"260\":1}}],[\"每个\",{\"1\":{\"213\":1,\"605\":1,\"644\":1,\"747\":1,\"1103\":1,\"1319\":1}}],[\"每个列表项的高度是\",{\"1\":{\"96\":1}}],[\"每点一次就各打印一次信息\",{\"1\":{\"91\":1}}],[\"也返回\",{\"1\":{\"1345\":1}}],[\"也无法覆盖\",{\"1\":{\"1105\":1}}],[\"也称实例方法\",{\"1\":{\"1402\":1}}],[\"也称非固定像素布局\",{\"1\":{\"960\":1}}],[\"也称为表单元素\",{\"1\":{\"1055\":1}}],[\"也称为内联元素\",{\"1\":{\"877\":1}}],[\"也称为\",{\"1\":{\"270\":1}}],[\"也称为时间切片\",{\"1\":{\"259\":1}}],[\"也称为虚拟dom\",{\"1\":{\"252\":1}}],[\"也创建了关联的\",{\"1\":{\"812\":1}}],[\"也能延续原型链遍历出对象的原型属性所以\",{\"1\":{\"1274\":1}}],[\"也能够传递参数\",{\"1\":{\"1013\":1}}],[\"也能被一个或多个下游订阅\",{\"1\":{\"790\":1}}],[\"也能转发\",{\"1\":{\"238\":1}}],[\"也对应三种执行状态与默认的初始状态\",{\"1\":{\"787\":1}}],[\"也会转为对象\",{\"1\":{\"1415\":1}}],[\"也会按照\",{\"1\":{\"1364\":1}}],[\"也会影响原数组\",{\"1\":{\"1364\":1}}],[\"也会用$\",{\"1\":{\"1333\":1}}],[\"也会返回数组\",{\"1\":{\"1092\":1}}],[\"也会封装到数组中返回\",{\"1\":{\"1085\":1}}],[\"也会插入\",{\"1\":{\"703\":1}}],[\"也会执行\",{\"1\":{\"635\":1}}],[\"也存在\",{\"1\":{\"634\":1}}],[\"也需要根据不同的\",{\"1\":{\"632\":1}}],[\"也提供了\",{\"1\":{\"542\":1}}],[\"也要指明监视的回调\",{\"1\":{\"541\":1}}],[\"也可能有一个特定想用于保存所有\",{\"1\":{\"816\":1}}],[\"也可能是在节点头部\",{\"1\":{\"683\":1,\"691\":1}}],[\"也可定义复杂类型\",{\"1\":{\"550\":1}}],[\"也可称之为\",{\"1\":{\"489\":1}}],[\"也可以简单认为类就是构造函数另一种写法\",{\"1\":{\"1435\":1}}],[\"也可以从目标字符串中抽出与表达式分组相匹配的子内容\",{\"1\":{\"1390\":1}}],[\"也可以指定开始查找的位置\",{\"1\":{\"1375\":1}}],[\"也可以操作类\",{\"1\":{\"1293\":1}}],[\"也可以利用浏览器缓存机制\",{\"1\":{\"1235\":1}}],[\"也可以完成\",{\"1\":{\"1094\":1}}],[\"也可以直接使用\",{\"1\":{\"1069\":1}}],[\"也可以直接通过设置静态\",{\"1\":{\"240\":1}}],[\"也可以设置参数\",{\"1\":{\"1013\":1}}],[\"也可以虚线跟实线定义\",{\"1\":{\"909\":1}}],[\"也可以通过\",{\"1\":{\"843\":1}}],[\"也可以通过布局的方式\",{\"1\":{\"96\":1}}],[\"也可以传入h函数生成的vnode\",{\"1\":{\"675\":1}}],[\"也可以兄弟通信\",{\"1\":{\"518\":1}}],[\"也可以兄弟b\",{\"1\":{\"518\":1}}],[\"也可以兄弟a\",{\"1\":{\"518\":1}}],[\"也可以拿数据\",{\"1\":{\"517\":1}}],[\"也可以使用keycode去指定具体的按键\",{\"1\":{\"472\":1}}],[\"也可以引入其它第三方库开发项\",{\"1\":{\"402\":1}}],[\"也可以将单独的组件包装在错误边界以保护应用其他部分不崩溃\",{\"1\":{\"243\":1}}],[\"也可以是函数\",{\"1\":{\"1344\":1}}],[\"也可以是绝对路径\",{\"1\":{\"868\":1}}],[\"也可以是数组\",{\"1\":{\"830\":1}}],[\"也可以是对象类型\",{\"1\":{\"536\":1,\"625\":1}}],[\"也可以是对象\",{\"1\":{\"510\":1}}],[\"也可以是\",{\"1\":{\"229\":1}}],[\"也可以是基于当前鼠标位置实现其他功能的封装组件\",{\"1\":{\"228\":1}}],[\"也可以手动实现观察者模式\",{\"1\":{\"116\":1}}],[\"也相同\",{\"1\":{\"354\":1,\"1010\":1}}],[\"也是在执行环境中就准备好的\",{\"1\":{\"1424\":1}}],[\"也是给父元素添加\",{\"1\":{\"985\":1}}],[\"也是平台目前推荐的用法\",{\"1\":{\"920\":1}}],[\"也是通过\",{\"1\":{\"841\":1}}],[\"也是一种标记语言\",{\"1\":{\"854\":1}}],[\"也是一种组件间通信方式\",{\"1\":{\"502\":1}}],[\"也是一种组件间通信的方式\",{\"1\":{\"406\":1}}],[\"也是一个\",{\"1\":{\"824\":1}}],[\"也是旧后节点\",{\"1\":{\"676\":1}}],[\"也是旧前节点\",{\"1\":{\"676\":1}}],[\"也是\",{\"1\":{\"660\":1,\"790\":1}}],[\"也是最复杂的\",{\"1\":{\"636\":1}}],[\"也是无非正确监听\",{\"1\":{\"634\":1}}],[\"也是对象观察者模式初始化执行或后续值改变时触发的函数\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"也是能获取到函数的\",{\"1\":{\"299\":1}}],[\"也是可以的\",{\"1\":{\"161\":1,\"461\":1}}],[\"也就是该上下文中的\",{\"1\":{\"1423\":1}}],[\"也就是原始类型的\",{\"1\":{\"1415\":1}}],[\"也就是全局对象自身\",{\"1\":{\"1231\":1}}],[\"也就是一个键值对的映射\",{\"1\":{\"1103\":1}}],[\"也就是存在生命周期\",{\"1\":{\"1012\":1}}],[\"也就是最近一次发起的异步请求\",{\"1\":{\"763\":1}}],[\"也就是惰性缓存\",{\"1\":{\"700\":1}}],[\"也就是当某个\",{\"1\":{\"651\":1}}],[\"也就是如何解决循环里面嵌套循环的情况\",{\"1\":{\"648\":1}}],[\"也就是\",{\"1\":{\"625\":1,\"648\":1,\"1442\":1}}],[\"也就是实现了\",{\"1\":{\"623\":1}}],[\"也就是依赖变化时触发\",{\"1\":{\"608\":1}}],[\"也就是派发更新\",{\"1\":{\"608\":1}}],[\"也就是获取依赖或者收集依赖\",{\"1\":{\"608\":1}}],[\"也就是说\",{\"1\":{\"1275\":1,\"1376\":2}}],[\"也就是说触发哪个数据的\",{\"1\":{\"608\":1}}],[\"也就是说用\",{\"1\":{\"517\":1}}],[\"也就是说一个父fiber\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"也就是没有过期\",{\"1\":{\"395\":1}}],[\"也就是把此fiber对应的真实dom节点添加到父真实dom上\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"也就是文本节点\",{\"1\":{\"272\":1}}],[\"也就是仍存在\",{\"1\":{\"272\":1}}],[\"也就结束了整个\",{\"1\":{\"272\":1}}],[\"也将包含其名称\",{\"1\":{\"240\":1}}],[\"也与vue3\",{\"1\":{\"184\":1}}],[\"也不会影响到全局作用域\",{\"1\":{\"1438\":1}}],[\"也不交换位置\",{\"1\":{\"1364\":1}}],[\"也不再需要redux\",{\"1\":{\"780\":1}}],[\"也不尽相同\",{\"1\":{\"358\":1}}],[\"也不是\",{\"1\":{\"122\":1,\"1228\":1}}],[\"也不进入更新\",{\"1\":{\"92\":1}}],[\"也不触发插槽\",{\"1\":{\"92\":1}}],[\"也不利于\",{\"1\":{\"89\":1}}],[\"一些保留字\",{\"1\":{\"1452\":1}}],[\"一些时候是\",{\"1\":{\"995\":1}}],[\"一致\",{\"1\":{\"1436\":1}}],[\"一种便捷写法\",{\"1\":{\"1435\":1}}],[\"一开始浏览器执行全局的代码时\",{\"1\":{\"1425\":1}}],[\"一开始让收集器\",{\"1\":{\"648\":1}}],[\"一律解释为代码块\",{\"1\":{\"1398\":1}}],[\"一切非\",{\"1\":{\"1271\":1}}],[\"一元运算符\",{\"0\":{\"1257\":1}}],[\"一只没有尾巴\",{\"1\":{\"1174\":1}}],[\"一只没有耳朵\",{\"1\":{\"1174\":1}}],[\"一行上可以放多个<span>\",{\"1\":{\"1038\":1}}],[\"一行中的列模块经常浮动布局\",{\"1\":{\"1001\":1}}],[\"一行放多个行内块元素\",{\"1\":{\"878\":1}}],[\"一行可以放多个行内元素\",{\"1\":{\"878\":1}}],[\"一行可以显示多个\",{\"1\":{\"877\":1,\"878\":1}}],[\"一行只能放一个块级元素\",{\"1\":{\"878\":1}}],[\"一次只能选择\",{\"1\":{\"864\":1}}],[\"一级一级往下查找\",{\"1\":{\"1012\":1}}],[\"一级组件内部渲染后续子路由需要使用\",{\"1\":{\"716\":1}}],[\"一级路由组件\",{\"1\":{\"709\":1}}],[\"一步步获取\",{\"1\":{\"650\":2,\"657\":2}}],[\"一并通过\",{\"1\":{\"636\":1}}],[\"一时间被修改三次时\",{\"1\":{\"505\":1}}],[\"一定在\",{\"1\":{\"1364\":1}}],[\"一定要赋初始值\",{\"1\":{\"1159\":1}}],[\"一定要跟上单位\",{\"1\":{\"887\":1}}],[\"一定要是\",{\"1\":{\"511\":1}}],[\"一定要在可信的内容上使用\",{\"1\":{\"474\":1}}],[\"一定可以获取到\",{\"1\":{\"457\":1}}],[\"一定程度上优化了\",{\"1\":{\"339\":1}}],[\"一层\",{\"1\":{\"451\":1}}],[\"一旦页面刷新\",{\"1\":{\"1312\":1}}],[\"一旦执行栈中的所有同步任务执行完毕\",{\"1\":{\"1076\":1}}],[\"一旦图片制作完毕想要更换非常复杂\",{\"1\":{\"916\":1}}],[\"一旦结束嵌套\",{\"1\":{\"648\":1}}],[\"一旦\",{\"1\":{\"443\":1,\"842\":1,\"843\":1}}],[\"一直冒泡到祖先元素\",{\"1\":{\"1127\":1}}],[\"一直向上查找直到找到真实dom节点为止\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"一直找到parent为null\",{\"1\":{\"271\":1,\"316\":1}}],[\"一起使用\",{\"1\":{\"191\":1,\"457\":1,\"1054\":1,\"1436\":1}}],[\"一样\",{\"1\":{\"190\":1,\"763\":1,\"1012\":1,\"1015\":2,\"1065\":1,\"1091\":1,\"1374\":1}}],[\"一个函数在内部调用其本身\",{\"1\":{\"1458\":1}}],[\"一个函数\",{\"1\":{\"1456\":1}}],[\"一个函数即可实现\",{\"1\":{\"452\":1}}],[\"一个作用域可以访问另一个函数内部的局部变量\",{\"1\":{\"1456\":1}}],[\"一个相应的执行上下文\",{\"1\":{\"1422\":1}}],[\"一个或多个用空格分隔的事件类型\",{\"1\":{\"1328\":1}}],[\"一个数据结构只要部署了\",{\"1\":{\"1275\":1}}],[\"一个完整的\",{\"1\":{\"1233\":1}}],[\"一个清爽简约的表格能够把繁杂的数据表现得很有条理\",{\"1\":{\"1047\":1}}],[\"一个标题独占一行\",{\"1\":{\"1035\":1}}],[\"一个元素浮动\",{\"1\":{\"980\":1}}],[\"一个页面基本都包含了这三种布局方式\",{\"1\":{\"975\":1}}],[\"一个人可以有多个名字\",{\"1\":{\"863\":1}}],[\"一个新的\",{\"1\":{\"781\":1}}],[\"一个新的对象就会被创建\",{\"1\":{\"743\":1}}],[\"一个对象\",{\"1\":{\"721\":2}}],[\"一个组件选项\",{\"1\":{\"584\":1}}],[\"一个click\",{\"1\":{\"515\":1}}],[\"一个eventone\",{\"1\":{\"515\":1}}],[\"一个混入对象可以包含任意组件选项\",{\"1\":{\"499\":1}}],[\"一个单词组成\",{\"1\":{\"488\":1}}],[\"一个路由就是一组映射关系\",{\"1\":{\"422\":1}}],[\"一个\",{\"1\":{\"418\":1,\"739\":1,\"952\":1,\"966\":1,\"1063\":1,\"1376\":2}}],[\"一个从\",{\"1\":{\"223\":1}}],[\"一个使用场景是将一个集合映射到一个\",{\"1\":{\"220\":1}}],[\"一个界面的功能更复杂\",{\"1\":{\"129\":1}}],[\"一个表达式会产生一个值\",{\"1\":{\"124\":1}}],[\"一般位置要靠后\",{\"1\":{\"1164\":1}}],[\"一般常量使用大写\",{\"1\":{\"1159\":1}}],[\"一般都传\",{\"1\":{\"1130\":1}}],[\"一般为\",{\"1\":{\"1106\":1}}],[\"一般两种方式结合使用\",{\"1\":{\"1094\":1}}],[\"一般先要获取元素节点\",{\"1\":{\"1084\":1}}],[\"一般作为元素节点的子节点存在\",{\"1\":{\"1084\":1}}],[\"一般不会希望在捕获阶段触发事件\",{\"1\":{\"1136\":1}}],[\"一般不会在\",{\"1\":{\"482\":1}}],[\"一般不使用属性节点\",{\"1\":{\"1083\":1}}],[\"一般而言\",{\"1\":{\"1076\":1}}],[\"一般只会使用\",{\"1\":{\"1064\":1}}],[\"一般较少使用\",{\"1\":{\"1057\":1}}],[\"一般默认\",{\"1\":{\"1048\":1}}],[\"一般默认可以通过手动缩放网页\",{\"1\":{\"947\":1}}],[\"一般表头单元格位于表格的首行\",{\"1\":{\"1048\":1}}],[\"一般移动设备的浏览器都默认设置了一个布局视口\",{\"1\":{\"947\":1}}],[\"一般习惯把\",{\"1\":{\"908\":1}}],[\"一般书写规范\",{\"1\":{\"907\":1}}],[\"一般情况<input>才能获取\",{\"1\":{\"873\":1}}],[\"一般情况下我们以一套或两套效果图适应大部分的屏幕\",{\"1\":{\"966\":1}}],[\"一般情况下精灵图都是负值\",{\"1\":{\"916\":1}}],[\"一般情况下背景颜色默认值\",{\"1\":{\"902\":1}}],[\"一般情况下\",{\"1\":{\"96\":1,\"882\":1,\"1403\":1}}],[\"一般是在\",{\"1\":{\"497\":1}}],[\"一般是一个\",{\"1\":{\"126\":1}}],[\"一般在此阶段\",{\"1\":{\"481\":1}}],[\"一般在此进行\",{\"1\":{\"479\":1}}],[\"一般在这个钩子中做一些收尾的事\",{\"1\":{\"167\":1}}],[\"一般在这个钩子中做一些初始化的事\",{\"1\":{\"167\":1}}],[\"一般简写为\",{\"1\":{\"474\":1}}],[\"一般组件通常存放在\",{\"1\":{\"425\":1}}],[\"一般无法直接绑定\",{\"1\":{\"236\":1}}],[\"一般就是一个\",{\"1\":{\"128\":1,\"485\":1}}],[\"一般多用于\",{\"1\":{\"112\":1}}],[\"一般来说\",{\"1\":{\"110\":1}}],[\"一句话描述\",{\"1\":{\"92\":1}}],[\"参阅\",{\"1\":{\"912\":1,\"913\":1}}],[\"参考链接\",{\"1\":{\"96\":1,\"103\":1}}],[\"参考库\",{\"0\":{\"95\":1}}],[\"参数都可以省略\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":1}}],[\"参数原理一致\",{\"1\":{\"1198\":1}}],[\"参数必须放到参数最后\",{\"1\":{\"1165\":1}}],[\"参数名为变量$声明的形式\",{\"1\":{\"1013\":1}}],[\"参数变量为\",{\"1\":{\"1013\":1}}],[\"参数值可以为数值或百分比的形式\",{\"1\":{\"911\":1}}],[\"参数是\",{\"0\":{\"1295\":1}}],[\"参数是混合单位\",{\"1\":{\"905\":1}}],[\"参数是精确单位\",{\"1\":{\"905\":1}}],[\"参数是方位名词\",{\"1\":{\"905\":1}}],[\"参数是可选的\",{\"1\":{\"67\":1}}],[\"参数中传递给请求主体\",{\"1\":{\"841\":1}}],[\"参数2\",{\"1\":{\"823\":1}}],[\"参数1\",{\"1\":{\"823\":1}}],[\"参数既定义了\",{\"1\":{\"812\":1}}],[\"参数选项表\",{\"1\":{\"811\":1}}],[\"参数排列组合数量很多\",{\"1\":{\"692\":1}}],[\"参数可以是对象形式\",{\"0\":{\"1296\":1}}],[\"参数可能有多种情况\",{\"1\":{\"674\":1}}],[\"参数可传递\",{\"1\":{\"430\":1}}],[\"参数时\",{\"1\":{\"430\":1}}],[\"参数到<button\",{\"1\":{\"237\":1}}],[\"参数才会生效\",{\"1\":{\"212\":1}}],[\"参数为root\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"参数为一开始createcontext\",{\"1\":{\"215\":1}}],[\"参数为函数\",{\"1\":{\"182\":1}}],[\"参数为非函数值\",{\"1\":{\"182\":1}}],[\"参数二\",{\"1\":{\"126\":1}}],[\"参数一\",{\"1\":{\"126\":1}}],[\"参数说明\",{\"1\":{\"126\":1}}],[\"参数\",{\"0\":{\"830\":1,\"835\":1,\"1214\":1,\"1344\":1},\"1\":{\"17\":1,\"20\":2,\"45\":1,\"181\":1,\"238\":1,\"429\":1,\"430\":2,\"601\":1,\"720\":1,\"721\":1,\"811\":1,\"884\":1,\"1063\":1,\"1072\":1,\"1130\":2,\"1131\":1,\"1359\":1,\"1360\":1,\"1376\":3,\"1377\":1,\"1402\":1,\"1407\":1}}],[\"参数的方式\",{\"0\":{\"10\":1}}],[\"继承name\",{\"1\":{\"1433\":1}}],[\"继承拿到所有person的属性\",{\"1\":{\"1433\":1}}],[\"继承的权重是\",{\"1\":{\"932\":1}}],[\"继承\",{\"0\":{\"1431\":1},\"1\":{\"932\":1,\"1180\":1,\"1225\":1,\"1410\":1}}],[\"继承性\",{\"0\":{\"931\":1}}],[\"继承了老\",{\"1\":{\"323\":1}}],[\"继续保留原来位置\",{\"1\":{\"992\":1}}],[\"继续占有原来的位置\",{\"1\":{\"914\":1}}],[\"继续执行下一次循环\",{\"1\":{\"1277\":1}}],[\"继续执行循环后面的语句\",{\"1\":{\"1277\":1}}],[\"继续执行\",{\"1\":{\"395\":1}}],[\"继续循环\",{\"1\":{\"354\":1}}],[\"继续向下查找节点\",{\"1\":{\"272\":1}}],[\"继而重新创建\",{\"1\":{\"92\":1}}],[\"继进阶技巧记录之后\",{\"1\":{\"83\":1}}],[\"而构造函数需要\",{\"1\":{\"1436\":1}}],[\"而构成的唯一识别字时\",{\"1\":{\"1240\":1}}],[\"而这个临时对象并不会继续保留下来\",{\"1\":{\"1415\":1}}],[\"而八进制则不需要添加前缀\",{\"1\":{\"1381\":1}}],[\"而少数元字符\",{\"1\":{\"1381\":1}}],[\"而响应函数会在超链接被点击时时才执行\",{\"1\":{\"1120\":1}}],[\"而其他先被执\",{\"1\":{\"1076\":1}}],[\"而文本也会呈现为等宽字体\",{\"1\":{\"1020\":1}}],[\"而第二次vm\",{\"1\":{\"634\":1}}],[\"而代码的实现方式是在数据中存储依赖自己的\",{\"1\":{\"608\":1}}],[\"而我们重写了数据的访问行为\",{\"1\":{\"608\":1}}],[\"而且返回\",{\"1\":{\"1406\":1}}],[\"而且\",{\"1\":{\"1406\":1}}],[\"而且不用担心属性名冲突\",{\"1\":{\"1170\":1}}],[\"而且不同浏览器默认的也不一致\",{\"1\":{\"972\":1}}],[\"而且该操作只在当次访问时有效\",{\"1\":{\"1067\":1}}],[\"而且变量名和变量值需要使用冒号\",{\"1\":{\"1011\":1}}],[\"而且只要是在\",{\"1\":{\"630\":1}}],[\"而且从\",{\"1\":{\"623\":1}}],[\"而且有实现成本\",{\"1\":{\"564\":1}}],[\"而且每个节点只能访问一次\",{\"1\":{\"266\":1}}],[\"而一个端口只要绑定了\",{\"1\":{\"388\":1}}],[\"而言更加简洁\",{\"1\":{\"1015\":1}}],[\"而言\",{\"1\":{\"274\":1}}],[\"而不做中间处理的话就可以用这个\",{\"1\":{\"515\":1}}],[\"而不会影响延迟关键事件\",{\"1\":{\"262\":1}}],[\"而不是表达式分组的匹配模式\",{\"1\":{\"1391\":1}}],[\"而不是字符串\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"而不是字符模式\",{\"1\":{\"1381\":1}}],[\"而不是位置\",{\"1\":{\"1376\":1}}],[\"而不是原先属性\",{\"1\":{\"1274\":1}}],[\"而不是原生\",{\"1\":{\"158\":1}}],[\"而不是默认值\",{\"1\":{\"1106\":1}}],[\"而不是去调用\",{\"1\":{\"636\":1}}],[\"而不是渲染崩溃了的子组件树\",{\"1\":{\"241\":1}}],[\"而不是\",{\"1\":{\"239\":1,\"1381\":1}}],[\"而\",{\"1\":{\"259\":1,\"354\":1,\"376\":1,\"524\":1,\"541\":1,\"580\":1,\"765\":1,\"909\":1,\"1091\":2,\"1391\":1}}],[\"而错误边界捕获的是组件渲染的错误\",{\"1\":{\"245\":1}}],[\"而非执行渲染\",{\"1\":{\"224\":1}}],[\"而是将转换后的字符串作为结果返回\",{\"1\":{\"1362\":1}}],[\"而是将截取到的元素封装到一个新数组中返回\",{\"1\":{\"1359\":1}}],[\"而是元素节点的一部分\",{\"1\":{\"1083\":1}}],[\"而是隔一段时间以后再执行\",{\"1\":{\"1063\":1}}],[\"而是真正的属性列表\",{\"1\":{\"695\":1}}],[\"而是先略过已经加了undefined标记的节点项\",{\"1\":{\"683\":1,\"691\":1}}],[\"而是对模板引擎的鼻祖\",{\"1\":{\"637\":1}}],[\"而是一个类型别名\",{\"1\":{\"580\":1}}],[\"而是生新的对象来替换\",{\"1\":{\"554\":1}}],[\"而是\",{\"1\":{\"534\":1,\"674\":1,\"847\":1}}],[\"而是产生新的代理对象\",{\"1\":{\"524\":1}}],[\"而是用来展示数据的\",{\"1\":{\"1047\":1}}],[\"而是用\",{\"1\":{\"457\":1,\"1015\":1}}],[\"而是触发activated和deactivated\",{\"1\":{\"434\":1}}],[\"而是标记为需要一些准备时间的\",{\"1\":{\"208\":1}}],[\"而是直接返回缓存的变量值\",{\"1\":{\"195\":1}}],[\"而是合理地优化更新\",{\"1\":{\"169\":1}}],[\"而是在其代理上进行修改\",{\"1\":{\"103\":1}}],[\"而是利用\",{\"1\":{\"84\":1}}],[\"而没有\",{\"1\":{\"92\":1}}],[\"此种方法不能连接model的方法\",{\"1\":{\"822\":1}}],[\"此种情况在上一个情况中的\",{\"1\":{\"353\":1}}],[\"此为惰性取值\",{\"1\":{\"636\":1}}],[\"此任务的开始时间\",{\"1\":{\"395\":1}}],[\"此根节点上有没有useeffect类似的副作用\",{\"1\":{\"374\":1,\"396\":1}}],[\"此真实dom对应的fiber\",{\"1\":{\"288\":1,\"297\":1}}],[\"此方法就是委托给容器的回调\",{\"1\":{\"288\":1}}],[\"此文件本来还需要考虑处理优先级问题\",{\"1\":{\"271\":1,\"316\":1}}],[\"此时反斜杠就失去转义功能\",{\"1\":{\"1381\":1}}],[\"此时会截取从开始索引往后的所有元素\",{\"1\":{\"1359\":1}}],[\"此时导致拖拽功能异常\",{\"1\":{\"1140\":1}}],[\"此时父元素会塌陷较大的外边距值\",{\"1\":{\"971\":1}}],[\"此时父节点的\",{\"1\":{\"92\":1}}],[\"此时再指定内边框\",{\"1\":{\"969\":1}}],[\"此时通过\",{\"1\":{\"966\":1}}],[\"此时宽和高都是\",{\"1\":{\"966\":1}}],[\"此时一个样式会覆盖\",{\"1\":{\"930\":1}}],[\"此时可以给图片\",{\"1\":{\"924\":1}}],[\"此时可以使用$\",{\"1\":{\"1332\":1}}],[\"此时可以使用\",{\"1\":{\"916\":1}}],[\"此时可以通过\",{\"1\":{\"829\":1}}],[\"此时如果没有任何观察者使用\",{\"1\":{\"843\":1}}],[\"此时让内容堆栈的栈顶对象\",{\"1\":{\"661\":1}}],[\"此时需要判断当前处于活化状态的\",{\"1\":{\"636\":1}}],[\"此时存储在newdeps和newdepids中的数据进行无用id判断后真正落实到deps和depids中\",{\"1\":{\"635\":1}}],[\"此时触发dep\",{\"1\":{\"635\":1}}],[\"此时调用\",{\"1\":{\"621\":1}}],[\"此时不再执行new\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"此时son组件把从父组件传来的监听器\",{\"1\":{\"515\":1}}],[\"此时数据和页面都是最新的\",{\"1\":{\"480\":1}}],[\"此时\",{\"1\":{\"272\":1,\"479\":3,\"480\":1,\"481\":1,\"840\":1,\"996\":1,\"1163\":1}}],[\"此时就会执行\",{\"1\":{\"262\":1}}],[\"此处指定位置为正向指定\",{\"1\":{\"1375\":1}}],[\"此处length是必须的\",{\"1\":{\"1195\":1}}],[\"此处不作详细记录\",{\"1\":{\"1008\":1}}],[\"此处不涉及异步处理\",{\"1\":{\"628\":1}}],[\"此处默认设计稿750px与15等分\",{\"1\":{\"965\":1}}],[\"此处默认为true\",{\"1\":{\"633\":1}}],[\"此处实际获取到的结果就是ast\",{\"1\":{\"701\":1}}],[\"此处是对\",{\"1\":{\"697\":1}}],[\"此处是整个章节中最复杂的地方\",{\"1\":{\"676\":1}}],[\"此处待新增的节点可能需要追加到待处理新前节点末尾\",{\"1\":{\"683\":1,\"691\":1}}],[\"此处插值语法单独处理\",{\"1\":{\"663\":1}}],[\"此处记为\",{\"1\":{\"636\":1}}],[\"此处使用了十分巧妙的class耦合\",{\"1\":{\"635\":1}}],[\"此处使用函数式组件简写\",{\"1\":{\"226\":1}}],[\"此处为与key值匹配的watcher实例\",{\"1\":{\"633\":1,\"634\":1}}],[\"此处暂定为响应式声明函数definereactive\",{\"1\":{\"620\":1}}],[\"此处暂时忽略不计\",{\"1\":{\"627\":1}}],[\"此处暂时只考虑虚拟\",{\"1\":{\"273\":1}}],[\"此处暂时不考虑优先级\",{\"1\":{\"271\":1,\"272\":1}}],[\"此处以全局类型\",{\"1\":{\"581\":1}}],[\"此处由于监视的是reactive素定义的对象中的某个属性\",{\"1\":{\"540\":1}}],[\"此处的deep配置不再奏效\",{\"1\":{\"540\":1}}],[\"此处搬运了\",{\"1\":{\"509\":1}}],[\"此处内容会被覆写<\",{\"1\":{\"504\":1}}],[\"此处内容与vue2\",{\"1\":{\"127\":1}}],[\"此处必须是name\",{\"1\":{\"430\":1}}],[\"此处一定不要写\",{\"1\":{\"426\":2}}],[\"此处比较关键的是新\",{\"1\":{\"323\":1}}],[\"此处函数更新\",{\"1\":{\"323\":1}}],[\"此处更新的情况只考虑新节点插入\",{\"1\":{\"272\":1}}],[\"此处仅为\",{\"1\":{\"250\":1}}],[\"此处位置应该空出给其他组件使用\",{\"1\":{\"228\":1}}],[\"此处可调用\",{\"1\":{\"1349\":1,\"1350\":2}}],[\"此处可直接使用showname方法\",{\"1\":{\"499\":1}}],[\"此处可以是记录当前鼠标位置的文本信息\",{\"1\":{\"228\":1}}],[\"此处可理解为传送门\",{\"1\":{\"221\":1}}],[\"此处禁止写\",{\"1\":{\"145\":1,\"155\":1,\"160\":1}}],[\"此处转换处理略\",{\"1\":{\"69\":1,\"72\":1}}],[\"完善一开始的\",{\"1\":{\"651\":1}}],[\"完善对象的依赖收集\",{\"1\":{\"610\":1,\"613\":1}}],[\"完整流程图\",{\"1\":{\"682\":1}}],[\"完整流程图如下\",{\"1\":{\"682\":1}}],[\"完整的\",{\"1\":{\"658\":1}}],[\"完整的数据劫持源码参考\",{\"0\":{\"604\":1}}],[\"完整\",{\"1\":{\"539\":1}}],[\"完整路径\",{\"1\":{\"427\":1}}],[\"完整描述\",{\"1\":{\"92\":1}}],[\"完成的\",{\"1\":{\"536\":1}}],[\"完成的fiber\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"完成副作用操作\",{\"1\":{\"365\":1}}],[\"完成后\",{\"1\":{\"274\":1}}],[\"完成\",{\"1\":{\"274\":1}}],[\"完成一个fiber节点\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"完成了\",{\"1\":{\"272\":1,\"480\":1}}],[\"完成当前fiber的子fiber链表构建\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"完成变化追踪\",{\"1\":{\"103\":1}}],[\"完全克隆\",{\"1\":{\"1332\":1}}],[\"完全一致\",{\"1\":{\"970\":1}}],[\"完全实现结构和样式相分离\",{\"1\":{\"868\":1}}],[\"完全二叉树\",{\"1\":{\"390\":2}}],[\"完全可选的\",{\"1\":{\"176\":1}}],[\"完全相同\",{\"1\":{\"92\":1}}],[\"完全在服务器中进行处理\",{\"1\":{\"27\":1}}],[\"来访问该属性\",{\"1\":{\"1438\":1}}],[\"来指定排序规则\",{\"1\":{\"1364\":1}}],[\"来指定盒模型\",{\"1\":{\"973\":1}}],[\"来绑定事件\",{\"1\":{\"1329\":1}}],[\"来取到每一个值\",{\"1\":{\"1274\":1}}],[\"来取消\",{\"1\":{\"71\":1}}],[\"来阻止代码自动地向下一个\",{\"1\":{\"1269\":1}}],[\"来获取对象的所有键名\",{\"1\":{\"1168\":1}}],[\"来获取对检查数据更加友好的用户界面\",{\"1\":{\"593\":1}}],[\"来获取\",{\"1\":{\"1115\":2}}],[\"来调用\",{\"1\":{\"1436\":1}}],[\"来调用函数或计算表达式\",{\"1\":{\"1063\":1}}],[\"来调整样式\",{\"1\":{\"920\":1}}],[\"来操作浏览器\",{\"1\":{\"1059\":1}}],[\"来改变大小\",{\"1\":{\"1057\":1}}],[\"来改正了webpack在打包依赖的过程中时间太长的问题\",{\"1\":{\"531\":1}}],[\"来连接\",{\"1\":{\"1013\":1}}],[\"来\",{\"1\":{\"1006\":1}}],[\"来控制盒子的前后次序\",{\"1\":{\"996\":1}}],[\"来控制清空定时器\",{\"1\":{\"204\":1}}],[\"来代表被修剪的文本\",{\"1\":{\"897\":1}}],[\"来定义图标\",{\"1\":{\"919\":1}}],[\"来定义\",{\"1\":{\"863\":1}}],[\"来定义样式\",{\"1\":{\"139\":1}}],[\"来统一管理路由入口与出口\",{\"1\":{\"733\":1}}],[\"来插入内容\",{\"1\":{\"658\":1}}],[\"来派发更新\",{\"1\":{\"608\":1}}],[\"来检测需要预构建的依赖项\",{\"1\":{\"575\":1}}],[\"来检查\",{\"1\":{\"98\":1}}],[\"来接受数据\",{\"1\":{\"520\":1}}],[\"来接受\",{\"1\":{\"510\":1}}],[\"来判断是否是缓存中的页面触发的\",{\"1\":{\"1119\":1}}],[\"来判断浏览器信息\",{\"1\":{\"1064\":1}}],[\"来判断\",{\"1\":{\"505\":1}}],[\"来分发\",{\"1\":{\"499\":1}}],[\"来显示计算结果\",{\"1\":{\"450\":1}}],[\"来说\",{\"1\":{\"439\":1,\"1385\":1}}],[\"来触发\",{\"1\":{\"410\":1}}],[\"来自\",{\"1\":{\"1007\":1}}],[\"来自不同组件的行为需要变更同一状态\",{\"1\":{\"406\":1}}],[\"来自于虚拟dom节点的type\",{\"1\":{\"270\":1,\"272\":1}}],[\"来自于父组件\",{\"1\":{\"92\":1}}],[\"来标识同一个节点\",{\"1\":{\"354\":1}}],[\"来存储新的回调\",{\"1\":{\"201\":1}}],[\"来实现这种用法\",{\"1\":{\"1015\":1}}],[\"来实现浏览器帧渲染与\",{\"1\":{\"388\":1}}],[\"来实现源码效果\",{\"1\":{\"262\":1}}],[\"来实现它\",{\"1\":{\"234\":1}}],[\"来实现\",{\"1\":{\"199\":1,\"1391\":1}}],[\"来切换状态\",{\"1\":{\"144\":1}}],[\"来更新对应的页面显示\",{\"1\":{\"142\":1}}],[\"来处理\",{\"1\":{\"125\":1}}],[\"来创建一种特别的一般\",{\"1\":{\"120\":1}}],[\"来管理\",{\"1\":{\"115\":1,\"487\":1}}],[\"来发送自定义事件\",{\"1\":{\"114\":1}}],[\"来记录修改后的值\",{\"1\":{\"103\":1}}],[\"上一级路径\",{\"1\":{\"1045\":1}}],[\"上一个老hook\",{\"1\":{\"373\":1}}],[\"上一个不需要移动的老节点的索引\",{\"1\":{\"361\":1}}],[\"上一个state\",{\"1\":{\"338\":1,\"373\":1}}],[\"上一个reducer\",{\"1\":{\"338\":1,\"373\":1}}],[\"上一个useeffect处理完后清理\",{\"1\":{\"204\":1}}],[\"上部外边距\",{\"1\":{\"971\":1}}],[\"上下外边距均为\",{\"1\":{\"971\":1}}],[\"上下相邻的两个兄弟块元素相遇\",{\"1\":{\"971\":1}}],[\"上下\",{\"1\":{\"970\":1}}],[\"上下文对象\",{\"1\":{\"535\":1}}],[\"上外边距\",{\"1\":{\"970\":1}}],[\"上是\",{\"1\":{\"969\":1}}],[\"上内边距\",{\"1\":{\"969\":1}}],[\"上划线\",{\"1\":{\"891\":1}}],[\"上划线等\",{\"1\":{\"891\":1}}],[\"上的网页大多都能在手机上呈现\",{\"1\":{\"947\":1}}],[\"上的属性\",{\"1\":{\"702\":1}}],[\"上的文本输入元素\",{\"1\":{\"189\":1}}],[\"上提供\",{\"1\":{\"665\":1}}],[\"上方已经重新执行过一次dep收集\",{\"1\":{\"635\":1}}],[\"上帝的钥匙\",{\"0\":{\"597\":1},\"1\":{\"597\":1}}],[\"上最近的那一个\",{\"1\":{\"297\":1}}],[\"上绑定的事件回调函数\",{\"1\":{\"296\":1}}],[\"上面\",{\"1\":{\"1417\":1}}],[\"上面有\",{\"1\":{\"971\":1}}],[\"上面声明的\",{\"1\":{\"847\":1}}],[\"上面我们介绍过\",{\"1\":{\"765\":1}}],[\"上面的index\",{\"1\":{\"674\":1}}],[\"上面的\",{\"1\":{\"627\":1,\"662\":1}}],[\"上面的事件监听\",{\"1\":{\"287\":1}}],[\"上面技术的综合使用叫做\",{\"1\":{\"2\":1}}],[\"上述运算在两变量类型不相同时均遵循隐式类型转换\",{\"1\":{\"1266\":1}}],[\"上述代码继续执行\",{\"1\":{\"635\":1}}],[\"上述的实现只能处理普通对象形式\",{\"1\":{\"603\":1}}],[\"上述示例完成了\",{\"1\":{\"468\":1}}],[\"上述三个旧版本生命周期函数在\",{\"1\":{\"169\":1}}],[\"上述\",{\"1\":{\"162\":1}}],[\"上述核心思想就是通过递归遍历子属性\",{\"1\":{\"103\":1}}],[\"上\",{\"1\":{\"92\":1,\"450\":1,\"470\":1,\"472\":1,\"561\":1,\"671\":1}}],[\"分割\",{\"1\":{\"1273\":1}}],[\"分割成一维数组\",{\"1\":{\"658\":1}}],[\"分割成一个数组\",{\"1\":{\"650\":1,\"657\":1}}],[\"分组\",{\"1\":{\"1020\":1}}],[\"分隔开\",{\"1\":{\"1011\":1}}],[\"分开\",{\"1\":{\"855\":1}}],[\"分钟后执行垃圾回收\",{\"1\":{\"836\":1}}],[\"分页\",{\"1\":{\"825\":1}}],[\"分发对应的\",{\"1\":{\"840\":1}}],[\"分发action\",{\"1\":{\"823\":1}}],[\"分发一个\",{\"1\":{\"766\":1}}],[\"分发自定义事件的函数\",{\"1\":{\"535\":1}}],[\"分享\",{\"1\":{\"439\":1}}],[\"分类\",{\"0\":{\"423\":1,\"503\":1},\"1\":{\"435\":1}}],[\"分为三个阶段\",{\"1\":{\"1419\":1}}],[\"分为\",{\"1\":{\"365\":1,\"1453\":1}}],[\"分辨与遍历规则\",{\"1\":{\"354\":1}}],[\"分布在每一帧里\",{\"1\":{\"259\":1}}],[\"分别暴露\",{\"1\":{\"1190\":1}}],[\"分别代表左上角\",{\"1\":{\"911\":1}}],[\"分别代表挂载\",{\"1\":{\"303\":1}}],[\"分别是\",{\"1\":{\"676\":1,\"908\":1,\"1004\":1,\"1016\":1,\"1233\":1}}],[\"分别是订阅评论与发布评论的组件\",{\"1\":{\"234\":1}}],[\"分别为\",{\"1\":{\"432\":1,\"442\":1}}],[\"分别在指令与元素成功绑定时\",{\"1\":{\"475\":1}}],[\"分别在\",{\"1\":{\"62\":1}}],[\"分析局部变量\",{\"1\":{\"1429\":1}}],[\"分析函数参数\",{\"1\":{\"1429\":2}}],[\"分析函数声明\",{\"1\":{\"1428\":1,\"1429\":1}}],[\"分析变量声明\",{\"1\":{\"1428\":1,\"1429\":2}}],[\"分析形参\",{\"1\":{\"1428\":1}}],[\"分析该\",{\"1\":{\"1420\":1}}],[\"分析页面中的行模块\",{\"1\":{\"1001\":1}}],[\"分析指令\",{\"1\":{\"695\":1}}],[\"分析\",{\"0\":{\"92\":1,\"478\":1},\"1\":{\"192\":1}}],[\"控制对象状态的方法\",{\"1\":{\"1408\":1}}],[\"控制浏览器弹出一个警示框\",{\"1\":{\"1237\":1}}],[\"控制文字行与行之间的距离\",{\"1\":{\"893\":1}}],[\"控制多个页面\",{\"1\":{\"868\":1}}],[\"控制一个页面\",{\"1\":{\"868\":1}}],[\"控制一个标签\",{\"1\":{\"868\":1}}],[\"控制路由配置的\",{\"1\":{\"736\":1}}],[\"控制路由跳转时操作浏览器历史记录的模式\",{\"1\":{\"432\":1}}],[\"控制台打印\",{\"1\":{\"760\":1}}],[\"控制台打印结果\",{\"0\":{\"362\":1}}],[\"控制台都只停留在页面第一次渲染时打印的信息\",{\"1\":{\"91\":1}}],[\"控制反转\",{\"0\":{\"90\":1},\"1\":{\"91\":1}}],[\"再找不到就会排除错误\",{\"1\":{\"1423\":1}}],[\"再继续执行三个阶段\",{\"1\":{\"1419\":1}}],[\"再继续往内部嵌套也是如此\",{\"1\":{\"674\":1}}],[\"再将原始类型的值转为字符串\",{\"1\":{\"1414\":1}}],[\"再将其更新到页面上\",{\"1\":{\"162\":1}}],[\"再进行以下步骤\",{\"1\":{\"1413\":1}}],[\"再进行数据跟踪\",{\"1\":{\"743\":1}}],[\"再读取\",{\"1\":{\"1406\":1}}],[\"再调用原对象的\",{\"1\":{\"1413\":1}}],[\"再调用属性和方法\",{\"1\":{\"1371\":1}}],[\"再调用patchnode进入子节点内部判断其内部children再度判断\",{\"1\":{\"683\":1,\"691\":1}}],[\"再并用短路计算获取最终结果\",{\"1\":{\"1228\":1}}],[\"再执行\",{\"1\":{\"1076\":1}}],[\"再执行函数\",{\"1\":{\"471\":1}}],[\"再去执行处理函数\",{\"1\":{\"1062\":1}}],[\"再去处理剩下的子节点\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"再写代码尤为重要\",{\"1\":{\"1001\":1}}],[\"再移动版心宽度一半的位置\",{\"1\":{\"994\":1}}],[\"再次请求就会直接使用\",{\"1\":{\"829\":1}}],[\"再次回到\",{\"1\":{\"290\":1}}],[\"再使用遍历循环来查找节点\",{\"1\":{\"676\":1}}],[\"再加attrs长度\",{\"1\":{\"662\":1}}],[\"再直接转译为\",{\"1\":{\"660\":1}}],[\"再结合\",{\"1\":{\"658\":1}}],[\"再获取任务\",{\"1\":{\"1076\":1}}],[\"再获取\",{\"1\":{\"650\":1,\"657\":1}}],[\"再见\",{\"1\":{\"627\":2}}],[\"再实现收集依赖的功能\",{\"1\":{\"608\":1}}],[\"再按下其他键\",{\"1\":{\"472\":1}}],[\"再把自己删除\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"再把真实的dom节点插入容器\",{\"1\":{\"272\":1,\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"再查找\",{\"1\":{\"274\":1}}],[\"再处理自己身上的副作用\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"再延续上面更新用时的话题\",{\"1\":{\"259\":1}}],[\"再根据代理状态的变化来生成新状态\",{\"1\":{\"103\":1}}],[\"再打开\",{\"1\":{\"91\":1}}],[\"再起一篇\",{\"1\":{\"83\":1}}],[\"所谓\",{\"1\":{\"1415\":1}}],[\"所谓盒子模型\",{\"1\":{\"968\":1}}],[\"所匹配的字符串\",{\"1\":{\"1391\":1}}],[\"所匹配的字符\",{\"1\":{\"1391\":2}}],[\"所能够匹配的字符后面不跟随一个等号字符\",{\"1\":{\"1389\":1}}],[\"所能够匹配的字符后面跟随一个等号字符\",{\"1\":{\"1388\":1}}],[\"所表示的那样\",{\"1\":{\"1240\":1}}],[\"所示\",{\"1\":{\"815\":1}}],[\"所处理的属性之间没有联系的\",{\"1\":{\"750\":1}}],[\"所在结构的更新\",{\"1\":{\"474\":1}}],[\"所管理的函数\",{\"1\":{\"470\":1}}],[\"所制定的容器去使用\",{\"1\":{\"443\":1}}],[\"所定义的全部\",{\"1\":{\"277\":1}}],[\"所有实例的方法都是唯一的\",{\"1\":{\"1436\":1}}],[\"所有方法均可调用\",{\"1\":{\"1411\":1}}],[\"所有\",{\"1\":{\"1402\":1}}],[\"所有表达式分组匹配的文本都被分组存储在\",{\"1\":{\"1391\":1}}],[\"所有按钮统一绑定事件统一赋予属性\",{\"1\":{\"1291\":1}}],[\"所有循环中\",{\"1\":{\"1274\":1}}],[\"所有非空字符串为真\",{\"1\":{\"1271\":1}}],[\"所有任务需要排队\",{\"1\":{\"1075\":1}}],[\"所有设备\",{\"1\":{\"964\":1}}],[\"所有使用\",{\"1\":{\"842\":1}}],[\"所有匹配的查询都会立即标记为无效\",{\"1\":{\"836\":1}}],[\"所有数据都由参数\",{\"1\":{\"752\":1}}],[\"所有的代码都是排队执行\",{\"1\":{\"1425\":1}}],[\"所有的变量和函数都是\",{\"1\":{\"1423\":1}}],[\"所有的值\",{\"1\":{\"1416\":1}}],[\"所有的\",{\"1\":{\"779\":1}}],[\"所有的路由配置均在\",{\"1\":{\"709\":1}}],[\"所有的子fiber全部完成了\",{\"1\":{\"273\":1}}],[\"所有内容\",{\"1\":{\"707\":2}}],[\"所有混入对象的选项将被\",{\"1\":{\"499\":1}}],[\"所有对象都是\",{\"1\":{\"1436\":1}}],[\"所有对象\",{\"1\":{\"1413\":1}}],[\"所有对\",{\"1\":{\"479\":1}}],[\"所有不被\",{\"1\":{\"452\":1}}],[\"所有被\",{\"1\":{\"452\":1}}],[\"所有响应头\",{\"1\":{\"9\":1}}],[\"所以原形对象也可以使用\",{\"1\":{\"1402\":1}}],[\"所以两个变量指向的还是同一个对象\",{\"1\":{\"1396\":1}}],[\"所以要注意是否有可能接收到非法参数\",{\"1\":{\"1344\":1}}],[\"所以要把string转number\",{\"1\":{\"749\":2}}],[\"所以所有\",{\"1\":{\"1240\":1}}],[\"所以多采取统一的可读性比较好的命名方式\",{\"1\":{\"1240\":1}}],[\"所以多色图标还是不支持的\",{\"1\":{\"919\":1}}],[\"所以一般情况下这两个词认为是一个意思\",{\"1\":{\"1233\":1}}],[\"所以一般设为\",{\"1\":{\"1136\":1}}],[\"所以每次定时器函数调用时必须先清除定时器再向下执行\",{\"1\":{\"1071\":1}}],[\"所以每一帧分到的时间就是\",{\"1\":{\"260\":1}}],[\"所以是绝对定位\",{\"1\":{\"997\":1}}],[\"所以是广度优先算法\",{\"1\":{\"692\":1}}],[\"所以定位也是在摆放盒子\",{\"1\":{\"988\":1}}],[\"所以它会对后面的元素排版产生影响\",{\"1\":{\"982\":1}}],[\"所以它们只在开发阶段起作用\",{\"1\":{\"581\":1}}],[\"所以数值是负值\",{\"1\":{\"916\":1}}],[\"所以只会有一次请求\",{\"1\":{\"847\":1}}],[\"所以使用\",{\"1\":{\"829\":1,\"1403\":1}}],[\"所以这种机制被称为事件循环\",{\"1\":{\"1076\":1}}],[\"所以这里用temp变量处理了一下\",{\"1\":{\"738\":1}}],[\"所以这是合理的优化机制\",{\"1\":{\"672\":1}}],[\"所以弹出的栈顶对象\",{\"1\":{\"661\":1}}],[\"所以解析值取token\",{\"1\":{\"657\":1}}],[\"所以指向同一个数组\",{\"1\":{\"656\":1}}],[\"所以在vm\",{\"1\":{\"635\":1}}],[\"所以会触发这个数据的\",{\"1\":{\"605\":1}}],[\"所以建议安装\",{\"1\":{\"593\":1}}],[\"所以不支持多色\",{\"1\":{\"918\":1}}],[\"所以不需要显式地定义它们\",{\"1\":{\"585\":1}}],[\"所以不用写返回值\",{\"1\":{\"541\":1}}],[\"所以需要继续完善补充正则与判断\",{\"1\":{\"662\":1}}],[\"所以需要\",{\"1\":{\"578\":1}}],[\"所以必须要谢返回值\",{\"1\":{\"541\":1}}],[\"所以deep配置有效\",{\"1\":{\"540\":1}}],[\"所以我们需要开辟额外的内存空间用来储存临时结构\",{\"1\":{\"676\":1}}],[\"所以我们书写代码时力求不让一帧的工作量超过\",{\"1\":{\"260\":1}}],[\"所以我觉得用也没啥\",{\"1\":{\"517\":1}}],[\"所以子组件接收到数据后可以直接修改\",{\"1\":{\"512\":1}}],[\"所以目前\",{\"1\":{\"388\":1}}],[\"所以目前最推荐的还是react\",{\"1\":{\"156\":1}}],[\"所以开始进行新老\",{\"1\":{\"323\":1}}],[\"所以从头开始循环\",{\"1\":{\"323\":1}}],[\"所以函数组件如果重新执行渲染\",{\"1\":{\"323\":1}}],[\"所以对于\",{\"1\":{\"1381\":1}}],[\"所以对于根节点只需要创建\",{\"1\":{\"270\":1}}],[\"所以对数字进行默认排序时\",{\"1\":{\"1364\":1}}],[\"所以对上面的代码进行改动\",{\"1\":{\"91\":1}}],[\"所以如果vm实例正在被销毁\",{\"1\":{\"626\":1}}],[\"所以如果\",{\"1\":{\"259\":1}}],[\"所以更新速度相对较快\",{\"1\":{\"257\":1}}],[\"所以代码块中import\",{\"1\":{\"249\":1}}],[\"所以当要替换图标时\",{\"1\":{\"919\":1}}],[\"所以当复杂对象内部属性变化时\",{\"1\":{\"628\":1}}],[\"所以当父组件重新渲染时\",{\"1\":{\"510\":1}}],[\"所以当三次修改数据的时候\",{\"1\":{\"505\":1}}],[\"所以当\",{\"1\":{\"197\":1}}],[\"所以完整的五项更新\",{\"1\":{\"162\":1}}],[\"所以\",{\"1\":{\"162\":1,\"223\":1,\"339\":1,\"451\":1,\"505\":1,\"635\":1,\"947\":1,\"1007\":1,\"1012\":1,\"1105\":1,\"1231\":1,\"1388\":1,\"1389\":1}}],[\"所以也把它列在十种方法里\",{\"1\":{\"112\":1}}],[\"所以进入复用逻辑但不会跳过子组件的对比\",{\"1\":{\"92\":1}}],[\"但属于非标准属性\",{\"1\":{\"1439\":1}}],[\"但点表示法却不一定能全部代替方括号表示法\",{\"1\":{\"1400\":1}}],[\"但又不返回这些字符\",{\"1\":{\"1388\":1}}],[\"但又使用\",{\"1\":{\"1006\":1}}],[\"但返回是从起始位置\",{\"1\":{\"1366\":1}}],[\"但肯定的是数组中\",{\"1\":{\"1364\":1}}],[\"但实际上\",{\"1\":{\"1233\":1}}],[\"但实际上请求只会发出一次\",{\"1\":{\"845\":1}}],[\"但变量与变量值之间需要使用=\",{\"1\":{\"1011\":1}}],[\"但变化时只是外层属性变化\",{\"1\":{\"554\":1}}],[\"但同时也带来一些问题\",{\"1\":{\"1003\":1}}],[\"但也有\",{\"1\":{\"953\":1}}],[\"但不包括\",{\"1\":{\"1376\":2}}],[\"但不会被赋值\",{\"1\":{\"1349\":1}}],[\"但不会影响布局视口\",{\"1\":{\"948\":1}}],[\"但不可使用\",{\"1\":{\"149\":1}}],[\"但目前暂时不接触\",{\"1\":{\"917\":1}}],[\"但三者仍有区别\",{\"1\":{\"900\":1}}],[\"但并不适合处理异步和服务端状态\",{\"1\":{\"825\":1}}],[\"但当标签内书写\",{\"1\":{\"662\":1}}],[\"但这里有个问题\",{\"1\":{\"648\":1}}],[\"但打包时会报错\",{\"1\":{\"583\":1}}],[\"但需重复声明\",{\"1\":{\"583\":1}}],[\"但需要通过<outlet>组件渲染子路由\",{\"1\":{\"712\":1}}],[\"但需要\",{\"1\":{\"534\":1}}],[\"但需要注意\",{\"1\":{\"455\":1}}],[\"但有一个明显区别在于\",{\"1\":{\"580\":1}}],[\"但有两个更名\",{\"1\":{\"542\":1}}],[\"但它可以改变函数的\",{\"1\":{\"1448\":1,\"1449\":1}}],[\"但它需要一个自定义语法\",{\"1\":{\"564\":1}}],[\"但它会在所有的\",{\"1\":{\"376\":1}}],[\"但可以批量创建多个\",{\"1\":{\"553\":1}}],[\"但没有在\",{\"1\":{\"535\":1}}],[\"但根据数据生成的结构需要组件使用者来决定\",{\"1\":{\"504\":1}}],[\"但原生\",{\"1\":{\"482\":1}}],[\"但数据代理还未开始\",{\"1\":{\"479\":1}}],[\"但使用数据所遍历出来的结构由父组件决定\",{\"1\":{\"504\":1}}],[\"但使用时要加\",{\"1\":{\"475\":1}}],[\"但使用它们有两个额外规则\",{\"1\":{\"178\":1}}],[\"但后者可以传参\",{\"1\":{\"470\":1}}],[\"但要注意转为\",{\"1\":{\"472\":1}}],[\"但要求结构不能被\",{\"1\":{\"457\":1}}],[\"但要动态决定用还是不用\",{\"1\":{\"454\":1}}],[\"但\",{\"1\":{\"451\":1,\"541\":1,\"635\":1}}],[\"但总体分为两步\",{\"1\":{\"274\":1}}],[\"但会在\",{\"1\":{\"187\":1}}],[\"但效率低\",{\"1\":{\"161\":1,\"461\":1}}],[\"但在\",{\"1\":{\"112\":1,\"534\":1}}],[\"但因为它也涉及到组件通信问题\",{\"1\":{\"112\":1}}],[\"但是能改变函数内部\",{\"1\":{\"1450\":1}}],[\"但是它什么时候能被访问到呢\",{\"1\":{\"1423\":1}}],[\"但是它只针对于行内元素或者行内块元素有效\",{\"1\":{\"924\":1}}],[\"但是对于原型对象本身来说\",{\"1\":{\"1402\":1}}],[\"但是又不希望存储无用的匹配信息\",{\"1\":{\"1392\":1}}],[\"但是为了满足限定条件也可能最多匹配\",{\"1\":{\"1385\":1}}],[\"但是为了满足限定条件也可能最多重复\",{\"1\":{\"1385\":1}}],[\"但是为了满足限定条件也可能匹配任意次\",{\"1\":{\"1385\":3}}],[\"但是为了能够确保匹配条件成立\",{\"1\":{\"1385\":1}}],[\"但是为全局变量\",{\"1\":{\"1350\":1}}],[\"但是截取长度还是从左到右\",{\"1\":{\"1376\":1}}],[\"但是使用函数表达式\",{\"1\":{\"1349\":1}}],[\"但是如果你试图给属性赋值\",{\"1\":{\"1415\":1}}],[\"但是如果你不想\",{\"1\":{\"176\":1}}],[\"但是如果声明变量时不使用\",{\"1\":{\"1349\":1}}],[\"但是两个\",{\"1\":{\"1273\":1}}],[\"但是最终都会转为真假\",{\"1\":{\"1271\":1}}],[\"但是最后只会更新一次\",{\"1\":{\"505\":1}}],[\"但是结构与行为耦合\",{\"1\":{\"1235\":1}}],[\"但是结构更清晰\",{\"1\":{\"1095\":1}}],[\"但是文档流执行完毕\",{\"1\":{\"1095\":1}}],[\"但是可以使用\",{\"1\":{\"1092\":1,\"1168\":1}}],[\"但是一行只能放一个<div>\",{\"1\":{\"1038\":1}}],[\"但是转换为块级和行内块元素就可以了\",{\"1\":{\"972\":1}}],[\"但是转换块级模式更安全\",{\"1\":{\"877\":1}}],[\"但是必须满足两个条件\",{\"1\":{\"970\":1}}],[\"但是样式前面有黄色叹号提示\",{\"1\":{\"940\":1}}],[\"但是永远不会有进位\",{\"1\":{\"932\":1}}],[\"但是不赋值\",{\"1\":{\"1349\":1}}],[\"但是不会压住下面标准流盒子里面的文字\",{\"1\":{\"998\":1}}],[\"但是不会有进位\",{\"1\":{\"932\":1}}],[\"但是不可直接点出属性\",{\"1\":{\"721\":1}}],[\"但是因为是字体\",{\"1\":{\"918\":1}}],[\"但是保留换行符\",{\"1\":{\"898\":1}}],[\"但是正常地进行换行\",{\"1\":{\"898\":1}}],[\"但是所有使用小型大写字体的字母与其余文本相比\",{\"1\":{\"886\":1}}],[\"但是他们之间会有空白缝隙\",{\"1\":{\"878\":1}}],[\"但是相对于\",{\"1\":{\"765\":1}}],[\"但是更加简单和清晰\",{\"1\":{\"742\":1}}],[\"但是实际\",{\"1\":{\"672\":1}}],[\"但是实际上子组件是一个静态\",{\"1\":{\"91\":1}}],[\"但是跨层了\",{\"1\":{\"672\":1}}],[\"但是复杂情况下\",{\"1\":{\"644\":1}}],[\"但是解决了嵌套依赖不能正确响应的问题\",{\"1\":{\"636\":1}}],[\"但是笔者在查询了网上很多博客和文档的源码分析\",{\"1\":{\"634\":1}}],[\"但是仍存在两个问题\",{\"1\":{\"610\":1}}],[\"但是这样做的代价就是\",{\"1\":{\"604\":1}}],[\"但是会传入\",{\"1\":{\"601\":1}}],[\"但是仅有\",{\"1\":{\"597\":1}}],[\"但是在\",{\"1\":{\"1231\":1}}],[\"但是在内部它们让\",{\"1\":{\"593\":1}}],[\"但是在开发环境中\",{\"1\":{\"531\":1}}],[\"但是在一些插件或组件库里却是被常用\",{\"1\":{\"517\":1}}],[\"但是只有第一次是\",{\"1\":{\"505\":1}}],[\"但是页面刷新后\",{\"1\":{\"430\":1}}],[\"但是目前\",{\"1\":{\"388\":1}}],[\"但是新的fiber并没有成功复用老fiber和老的真实dom\",{\"1\":{\"357\":1,\"361\":1}}],[\"但是函数体仅调用一次\",{\"1\":{\"194\":1}}],[\"但是子组件继续进入对比判断\",{\"1\":{\"162\":1}}],[\"但是每次都从头开始对比整棵树\",{\"1\":{\"162\":1}}],[\"但是\",{\"1\":{\"92\":1,\"162\":1,\"223\":1,\"296\":1,\"634\":1,\"649\":1,\"1380\":1,\"1403\":1,\"1410\":1}}],[\"但是其子组件\",{\"1\":{\"92\":1}}],[\"但是秉承能不用就不用的原则\",{\"1\":{\"91\":1}}],[\"但缺点也很明显\",{\"1\":{\"85\":1}}],[\"更加清晰方便的方法就是语法糖\",{\"1\":{\"1435\":1}}],[\"更加简单快捷\",{\"1\":{\"809\":1}}],[\"更推荐第一种方式\",{\"1\":{\"1282\":1}}],[\"更推荐使用<ins>标签\",{\"1\":{\"1037\":1}}],[\"更推荐使用<del>标签\",{\"1\":{\"1037\":1}}],[\"更推荐使用<em>标签\",{\"1\":{\"1037\":1}}],[\"更推荐使用<strong>标签\",{\"1\":{\"1037\":1}}],[\"更合适\",{\"1\":{\"1108\":1}}],[\"更改无序列表前面的点\",{\"1\":{\"1052\":1}}],[\"更改为函数\",{\"1\":{\"755\":1}}],[\"更容易被搜寻引擎搜索\",{\"1\":{\"1028\":1}}],[\"更容易处理\",{\"1\":{\"580\":1}}],[\"更统一之外\",{\"1\":{\"1028\":1}}],[\"更易维护\",{\"1\":{\"1004\":1}}],[\"更高效地选择目标元素\",{\"1\":{\"869\":1}}],[\"更进一步简化了\",{\"1\":{\"818\":1}}],[\"更完整的参考链接详见\",{\"1\":{\"790\":1}}],[\"更好的\",{\"1\":{\"584\":1}}],[\"更好的运行时性能\",{\"1\":{\"584\":1}}],[\"更简洁的代码\",{\"1\":{\"584\":1}}],[\"更少的样板内容\",{\"1\":{\"584\":1}}],[\"更注重过程\",{\"1\":{\"541\":1}}],[\"更多使用函数声明创建\",{\"1\":{\"1343\":1}}],[\"更多vite的分析详见vite工具\",{\"1\":{\"531\":1}}],[\"更多记录详见高阶组件\",{\"1\":{\"86\":1}}],[\"更偏向于优化版的webpack\",{\"1\":{\"531\":1}}],[\"更快\",{\"1\":{\"524\":1}}],[\"更详细的内容详见\",{\"1\":{\"849\":1}}],[\"更详细的发布订阅模式\",{\"1\":{\"605\":1}}],[\"更详细的\",{\"1\":{\"192\":1}}],[\"更新循环变量\",{\"1\":{\"1270\":1,\"1271\":1,\"1273\":1}}],[\"更新页面\",{\"1\":{\"742\":1}}],[\"更新后\",{\"1\":{\"742\":1}}],[\"更新导航菜单\",{\"1\":{\"731\":1}}],[\"更新路由表\",{\"1\":{\"731\":1}}],[\"更新的时间节点前后\",{\"1\":{\"703\":1}}],[\"更新的写法\",{\"1\":{\"103\":1}}],[\"更新到销毁过程中\",{\"1\":{\"703\":1}}],[\"更新之后\",{\"1\":{\"692\":1}}],[\"更新依赖值\",{\"1\":{\"700\":1}}],[\"更新依赖值的时候\",{\"1\":{\"632\":1}}],[\"更新依赖值时\",{\"1\":{\"628\":1}}],[\"更新数据并执行回调\",{\"1\":{\"621\":1}}],[\"更新渲染快\",{\"1\":{\"524\":1}}],[\"更新或移除dom元素时\",{\"1\":{\"507\":1}}],[\"更新状态\",{\"0\":{\"480\":1}}],[\"更新元素的\",{\"1\":{\"474\":2}}],[\"更新state某属性\",{\"1\":{\"411\":1}}],[\"更新了传入参数\",{\"1\":{\"396\":1}}],[\"更新完成后\",{\"1\":{\"376\":1}}],[\"更新标识并且\",{\"1\":{\"330\":1}}],[\"更新函数\",{\"1\":{\"323\":1}}],[\"更新时另起一个case\",{\"1\":{\"323\":1}}],[\"更新时的对象\",{\"1\":{\"272\":1}}],[\"更新内容\",{\"1\":{\"323\":1}}],[\"更新当前fiber的hook链表\",{\"1\":{\"315\":1,\"338\":1,\"373\":1}}],[\"更新真实dom\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"更新会从这里执行\",{\"1\":{\"272\":1}}],[\"更新为workinprogress映射\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"更新容易\",{\"1\":{\"271\":1,\"272\":1}}],[\"更新队列和\",{\"1\":{\"323\":1}}],[\"更新队列\",{\"1\":{\"306\":1,\"313\":1,\"323\":1}}],[\"更新队列采取单循环链表的原因\",{\"1\":{\"271\":1}}],[\"更新队列为单向循环链表\",{\"1\":{\"271\":1}}],[\"更新策略为深度嵌套的虚拟\",{\"1\":{\"257\":1}}],[\"更新阶段\",{\"1\":{\"167\":1,\"171\":1}}],[\"更新\",{\"0\":{\"144\":1,\"329\":1},\"1\":{\"161\":2,\"242\":1,\"272\":1,\"273\":1,\"303\":1,\"323\":1,\"330\":1,\"358\":1,\"360\":1,\"374\":1,\"382\":1,\"396\":1,\"461\":2,\"505\":1,\"607\":1,\"721\":1,\"744\":1}}],[\"更新前后父节点的\",{\"1\":{\"92\":1}}],[\"更新触发重新渲染\",{\"1\":{\"91\":1}}],[\"案例效果图\",{\"0\":{\"778\":1}}],[\"案例\",{\"0\":{\"91\":1},\"1\":{\"182\":1,\"1456\":1,\"1458\":3}}],[\"关闭一个定时器\",{\"1\":{\"1063\":1}}],[\"关闭定时器\",{\"1\":{\"167\":1,\"481\":1}}],[\"关系运算符\",{\"0\":{\"1261\":1}}],[\"关系到显示模式\",{\"1\":{\"1000\":1}}],[\"关系之外\",{\"1\":{\"273\":1}}],[\"关联的代码块会被执行\",{\"1\":{\"1269\":1}}],[\"关联的网络请求时\",{\"1\":{\"841\":1}}],[\"关联代码需要被拆分到不同生命周期函数中\",{\"1\":{\"89\":1}}],[\"关掉就行了\",{\"1\":{\"590\":1}}],[\"关于this指向\",{\"1\":{\"489\":1}}],[\"关于\",{\"1\":{\"272\":1}}],[\"关键词用来规定匹配不存在时做的事情\",{\"1\":{\"1269\":1}}],[\"关键词\",{\"1\":{\"1269\":1}}],[\"关键参数有二\",{\"1\":{\"625\":1}}],[\"关键代码如下\",{\"1\":{\"588\":1}}],[\"关键字指向全局对象\",{\"1\":{\"1454\":1}}],[\"关键字创建\",{\"1\":{\"1431\":1}}],[\"关键字声明变量\",{\"1\":{\"1350\":1}}],[\"关键字声明的变量\",{\"1\":{\"1349\":1}}],[\"关键字和保留字\",{\"1\":{\"1240\":1}}],[\"关键字时\",{\"1\":{\"1171\":1}}],[\"关键字将媒体类型或多个媒体特性连接到一起作为媒体查询条件\",{\"1\":{\"964\":1}}],[\"关键字\",{\"1\":{\"578\":1,\"964\":2,\"1155\":1,\"1180\":2,\"1349\":1,\"1350\":1}}],[\"关键\",{\"1\":{\"72\":1}}],[\"重复类具有强贪婪性\",{\"1\":{\"1385\":1}}],[\"重复类具有弱贪婪性\",{\"1\":{\"1385\":1}}],[\"重复类量词都具有贪婪性\",{\"1\":{\"1385\":1}}],[\"重复类量词总是出现在它们所作用的字符或表达式分组后面\",{\"1\":{\"1384\":1}}],[\"重复匹配\",{\"0\":{\"1384\":1}}],[\"重复定义会报错\",{\"1\":{\"580\":1}}],[\"重命名\",{\"1\":{\"1191\":1}}],[\"重写say这个函数\",{\"1\":{\"1433\":1}}],[\"重写\",{\"1\":{\"1180\":1}}],[\"重写虚拟\",{\"1\":{\"524\":1}}],[\"重置按钮会清除表单中的所有数据\",{\"1\":{\"1057\":1}}],[\"重难点\",{\"0\":{\"978\":1}}],[\"重试延迟时间\",{\"1\":{\"839\":1}}],[\"重试次数\",{\"1\":{\"839\":1}}],[\"重试器\",{\"1\":{\"839\":1}}],[\"重定向this\",{\"1\":{\"799\":1}}],[\"重点\",{\"0\":{\"1052\":1},\"1\":{\"966\":1,\"1436\":1}}],[\"重点记住\",{\"1\":{\"873\":1}}],[\"重点编译\",{\"1\":{\"695\":1}}],[\"重点关注\",{\"1\":{\"534\":1}}],[\"重渲染\",{\"1\":{\"323\":1}}],[\"重新加载当前页面\",{\"1\":{\"1065\":1}}],[\"重新定义了\",{\"1\":{\"781\":1}}],[\"重新挂载组件会导致该组件及其所有子组件已有状态丢失\",{\"1\":{\"235\":1}}],[\"重新渲染组件\",{\"1\":{\"142\":1}}],[\"重新调用生成新\",{\"1\":{\"92\":1}}],[\"重构组件结构\",{\"1\":{\"89\":1}}],[\"重要思想\",{\"1\":{\"648\":1}}],[\"重要的\",{\"1\":{\"932\":1}}],[\"重要的属性在于\",{\"1\":{\"632\":1}}],[\"重要的钩子\",{\"0\":{\"173\":1}}],[\"重要\",{\"0\":{\"23\":1,\"28\":1,\"870\":1,\"871\":1,\"917\":1,\"962\":1,\"971\":1,\"992\":1,\"993\":1,\"994\":1,\"1000\":1,\"1035\":1,\"1036\":1,\"1196\":1,\"1241\":1,\"1288\":1,\"1441\":1,\"1446\":1,\"1455\":1},\"1\":{\"609\":2,\"610\":2,\"613\":2}}],[\"会指向不同对象\",{\"1\":{\"1446\":1}}],[\"会有一个\",{\"1\":{\"1429\":1}}],[\"会有所差异\",{\"1\":{\"1027\":1}}],[\"会退出这个执行环境并把这个执行环境销毁\",{\"1\":{\"1423\":1}}],[\"会向执行栈中添加这个方法\",{\"1\":{\"1423\":1}}],[\"会首先进入到语法分析阶段\",{\"1\":{\"1420\":1}}],[\"会被\",{\"1\":{\"1413\":1}}],[\"会被每个实例对象\",{\"1\":{\"1410\":1}}],[\"会被解析\",{\"1\":{\"1091\":1}}],[\"会跳过不可遍历的属性\",{\"1\":{\"1403\":1}}],[\"会匹配一行的结尾\",{\"1\":{\"1386\":1}}],[\"会匹配一行的开头\",{\"1\":{\"1386\":1}}],[\"会匹配尽可能多的字符\",{\"1\":{\"1385\":1}}],[\"会封装为当前代码执行时间\",{\"1\":{\"1367\":1}}],[\"会将指定元素从原数组中删除\",{\"1\":{\"1360\":1}}],[\"会将项目路径下每一个\",{\"1\":{\"702\":1}}],[\"会影响到原数组\",{\"1\":{\"1360\":1}}],[\"会先形成一个激活对象\",{\"1\":{\"1428\":1}}],[\"会先进行词法分析\",{\"1\":{\"1428\":1}}],[\"会先在自身作用域中寻找\",{\"1\":{\"1350\":1}}],[\"会先判断\",{\"1\":{\"636\":1}}],[\"会覆盖元素原先类名\",{\"1\":{\"1301\":1}}],[\"会直接转换为\",{\"1\":{\"1249\":1}}],[\"会抛出异常\",{\"1\":{\"1206\":1}}],[\"会冲突报错\",{\"1\":{\"1191\":1}}],[\"会使用该属性\",{\"1\":{\"1171\":1}}],[\"会使组件重新渲染\",{\"1\":{\"815\":1}}],[\"会获取元素宽度和高度\",{\"1\":{\"1111\":1}}],[\"会获取到离当前元素最近的开启了定位的祖先元素\",{\"1\":{\"1108\":1}}],[\"会获取包括文本节点在内的所有节点\",{\"1\":{\"1087\":1}}],[\"会以最后一个\",{\"1\":{\"1062\":1}}],[\"会下载这个文件\",{\"1\":{\"1043\":1}}],[\"会像冒泡一样\",{\"1\":{\"1012\":1}}],[\"会完全压住盒子\",{\"1\":{\"998\":1}}],[\"会撑大盒子\",{\"1\":{\"969\":1}}],[\"会自动出现滚动条\",{\"1\":{\"1124\":1}}],[\"会自动跳转到该路径\",{\"1\":{\"1065\":1}}],[\"会自动更新\",{\"1\":{\"854\":1}}],[\"会自底向上地推入回调函数队列\",{\"1\":{\"277\":1}}],[\"会发送\",{\"1\":{\"845\":1}}],[\"会发出一个关键警告\",{\"1\":{\"220\":1}}],[\"会开启垃圾回收\",{\"1\":{\"843\":1}}],[\"会开启this\",{\"1\":{\"214\":1}}],[\"会调用函数\",{\"1\":{\"1451\":1}}],[\"会调用这个方法\",{\"1\":{\"1171\":1}}],[\"会调用它\",{\"1\":{\"1171\":4}}],[\"会调用\",{\"1\":{\"703\":1,\"841\":1,\"1171\":1}}],[\"会调用此函数\",{\"1\":{\"601\":2}}],[\"会执行四指针命中查找法\",{\"1\":{\"692\":1}}],[\"会更深一层\",{\"1\":{\"644\":1}}],[\"会传入\",{\"1\":{\"636\":1}}],[\"会传入赋值时的\",{\"1\":{\"601\":1}}],[\"会出现的一个问题\",{\"1\":{\"634\":1}}],[\"会实例化一个\",{\"1\":{\"608\":1}}],[\"会循环依赖列表\",{\"1\":{\"605\":1}}],[\"会误判一些变量\",{\"1\":{\"578\":1}}],[\"会误判一些\",{\"1\":{\"578\":1}}],[\"会抓取你的\",{\"1\":{\"575\":1}}],[\"会报错\",{\"1\":{\"510\":1}}],[\"会\",{\"1\":{\"505\":1}}],[\"会通知\",{\"1\":{\"593\":1}}],[\"会通知所有收集到的\",{\"1\":{\"505\":1}}],[\"会通过此方法创建真实dom\",{\"1\":{\"327\":1}}],[\"会通过原有的\",{\"1\":{\"103\":1}}],[\"会收集到\",{\"1\":{\"505\":1}}],[\"会判断\",{\"1\":{\"505\":1}}],[\"会导致\",{\"1\":{\"1105\":1}}],[\"会导致整个页面全部重绘\",{\"1\":{\"1095\":1}}],[\"会导致后续组件不能渲染\",{\"1\":{\"488\":1}}],[\"会导致增强组件丢失\",{\"1\":{\"86\":1}}],[\"会删掉\",{\"1\":{\"474\":1}}],[\"会替换掉节点中所有内容\",{\"1\":{\"474\":1}}],[\"会替换节点中的内容\",{\"1\":{\"474\":1}}],[\"会作为\",{\"1\":{\"443\":1,\"444\":1}}],[\"会消失\",{\"1\":{\"430\":1}}],[\"会浏览器渲染\",{\"1\":{\"376\":1}}],[\"会随着事件回调执行不断变化\",{\"1\":{\"295\":1}}],[\"会走事件处理函数\",{\"1\":{\"282\":1}}],[\"会对虚拟\",{\"1\":{\"273\":1}}],[\"会继续指向给后台节点\",{\"1\":{\"272\":1}}],[\"会在保证右侧重复类量词最低匹配次数基础上\",{\"1\":{\"1385\":1}}],[\"会在函数中所有代码执行前提前声明\",{\"1\":{\"1350\":1}}],[\"会在所有代码执行之前被声明\",{\"1\":{\"1349\":1}}],[\"会在尝试访问\",{\"1\":{\"1228\":1}}],[\"会在内部存储所有未过期的\",{\"1\":{\"848\":1}}],[\"会在内部找到或者创建与之对应的\",{\"1\":{\"847\":1}}],[\"会在不同的状态变化回调函数中\",{\"1\":{\"840\":1}}],[\"会在后台自动请求新的数据\",{\"1\":{\"837\":1}}],[\"会在浏览器渲染结束后执行\",{\"1\":{\"376\":1}}],[\"会在执行调度更新前\",{\"1\":{\"339\":1}}],[\"会在最后一个\",{\"1\":{\"272\":1}}],[\"会在子节点没有\",{\"1\":{\"272\":1}}],[\"会在特定的生命周期回调函数中\",{\"1\":{\"163\":1}}],[\"会在特定的时刻调用\",{\"1\":{\"163\":1}}],[\"会切换为\",{\"1\":{\"208\":1}}],[\"会保留旧的\",{\"1\":{\"208\":1}}],[\"会再次调用计算函数执行计算后返回新值赋给变量\",{\"1\":{\"195\":1}}],[\"会依赖于某个usestate的依赖项发生变化而变化\",{\"1\":{\"195\":1}}],[\"会返回一个惰性的函数\",{\"1\":{\"196\":1}}],[\"会返回一个惰性的变量值\",{\"1\":{\"193\":1}}],[\"会返回成功的\",{\"1\":{\"71\":1}}],[\"会产生错误\",{\"1\":{\"161\":1,\"461\":1}}],[\"会产生没有必要的真实\",{\"1\":{\"161\":1,\"461\":1}}],[\"会根据\",{\"1\":{\"161\":1,\"461\":1}}],[\"会转换为真实\",{\"1\":{\"120\":1}}],[\"方括号表示法可以用打空格的字符串为属性名\",{\"1\":{\"1400\":1}}],[\"方括号表示法可以用纯数字为属性名\",{\"1\":{\"1400\":1}}],[\"方括号表示法可以用变量名作为属性名\",{\"1\":{\"1400\":1}}],[\"方括号表示法总是能代替点表示法\",{\"1\":{\"1400\":1}}],[\"方向正常\",{\"1\":{\"1376\":1}}],[\"方向相反\",{\"1\":{\"1376\":2}}],[\"方向词\",{\"1\":{\"954\":1}}],[\"方便设置多组样式\",{\"1\":{\"1296\":1}}],[\"方便获取对象\",{\"1\":{\"1077\":1}}],[\"方便\",{\"1\":{\"1004\":1}}],[\"方便在\",{\"1\":{\"86\":1}}],[\"方位名词和精确单位混用\",{\"1\":{\"905\":1}}],[\"方式是额外标签法升级版\",{\"1\":{\"985\":1}}],[\"方式\",{\"1\":{\"725\":2}}],[\"方式生成\",{\"1\":{\"639\":1}}],[\"方式引入\",{\"1\":{\"639\":1}}],[\"方式提供源码\",{\"1\":{\"530\":1}}],[\"方式二\",{\"1\":{\"418\":4,\"822\":1}}],[\"方式一\",{\"1\":{\"418\":4,\"822\":1}}],[\"方案\",{\"1\":{\"451\":1}}],[\"方案二\",{\"1\":{\"143\":1}}],[\"方案一\",{\"1\":{\"143\":1}}],[\"方法不会调用函数\",{\"1\":{\"1450\":1}}],[\"方法理解\",{\"1\":{\"1436\":1}}],[\"方法重写\",{\"0\":{\"1433\":1}}],[\"方法用来把对象转换成原始类型的值\",{\"1\":{\"1410\":1}}],[\"方法用于提取字符串中介于两个指定下标之间的字符\",{\"1\":{\"1376\":1}}],[\"方法用于停止动画效果\",{\"1\":{\"1306\":1}}],[\"方法用于检测数组所有元素是否都符合指定条件\",{\"1\":{\"1201\":1}}],[\"方法用于关闭浏览器窗口\",{\"1\":{\"1063\":1}}],[\"方法内的逻辑在赋值时会自动执行\",{\"1\":{\"1407\":1}}],[\"方法内传递两个函数作为参数\",{\"1\":{\"1177\":1}}],[\"方法是\",{\"1\":{\"1402\":1}}],[\"方法调用一个函数\",{\"1\":{\"1448\":1,\"1449\":1}}],[\"方法调用\",{\"1\":{\"1396\":1}}],[\"方法把所有关键字符替换为可以显示的编码格式\",{\"1\":{\"1383\":1}}],[\"方法代替\",{\"1\":{\"1367\":1}}],[\"方法添加的事件处理程序\",{\"1\":{\"1329\":1}}],[\"方法在匹配元素上绑定一个或多个事件的函数\",{\"1\":{\"1328\":1}}],[\"方法可在字符串中抽取从\",{\"1\":{\"1376\":1}}],[\"方法可提取字符串的某个部分\",{\"1\":{\"1376\":1}}],[\"方法可以接受一个参数\",{\"1\":{\"1413\":1}}],[\"方法可以监听对应属性值的改变\",{\"1\":{\"1407\":1}}],[\"方法可以移除通过\",{\"1\":{\"1329\":1}}],[\"方法可以在指定的元素上存取数据\",{\"1\":{\"1312\":1}}],[\"方法可用于遍历任何对象\",{\"1\":{\"1319\":1}}],[\"方法来修改简单元素样式\",{\"1\":{\"1293\":1}}],[\"方法和函数\",{\"1\":{\"1279\":1}}],[\"方法和通知更新\",{\"1\":{\"621\":1}}],[\"方法需要一个函数作为参数\",{\"1\":{\"1276\":1}}],[\"方法二\",{\"1\":{\"1249\":1,\"1250\":1,\"1251\":1}}],[\"方法一\",{\"1\":{\"1249\":1,\"1250\":1,\"1251\":1}}],[\"方法按照原始数组元素顺序依次处理元素\",{\"1\":{\"1200\":1}}],[\"方法还可接受第二个参数\",{\"1\":{\"1195\":1}}],[\"方法还没有执行完毕\",{\"1\":{\"608\":1}}],[\"方法将创建一个新的\",{\"1\":{\"1170\":1}}],[\"方法绑定响应函数\",{\"1\":{\"1148\":1}}],[\"方法之后\",{\"1\":{\"1141\":1}}],[\"方法之中藏有结束循环的条件\",{\"1\":{\"272\":1}}],[\"方法时\",{\"1\":{\"841\":1,\"1171\":1}}],[\"方法即可\",{\"1\":{\"841\":1}}],[\"方法与array\",{\"1\":{\"816\":1}}],[\"方法涉及到复杂逻辑运算时\",{\"1\":{\"815\":1}}],[\"方法为弃用\",{\"1\":{\"809\":1}}],[\"方法返回原\",{\"1\":{\"1413\":1}}],[\"方法返回原始类型的值\",{\"1\":{\"1413\":1}}],[\"方法返回值为\",{\"1\":{\"1229\":1}}],[\"方法返回一个新数组\",{\"1\":{\"1200\":1}}],[\"方法返回一个包含\",{\"1\":{\"1173\":1}}],[\"方法返回的是对象\",{\"1\":{\"1413\":3}}],[\"方法返回的还是对象\",{\"1\":{\"1413\":1}}],[\"方法返回的子串从\",{\"1\":{\"1376\":1}}],[\"方法返回的子串包括\",{\"1\":{\"1376\":2}}],[\"方法返回的\",{\"1\":{\"769\":1}}],[\"方法返回宽高值\",{\"1\":{\"543\":1}}],[\"方法转属性\",{\"1\":{\"753\":2}}],[\"方法获取\",{\"1\":{\"636\":1}}],[\"方法获取依赖值\",{\"1\":{\"636\":1}}],[\"方法后\",{\"1\":{\"635\":1}}],[\"方法创建getter\",{\"1\":{\"633\":1}}],[\"方法创建的代理\",{\"1\":{\"558\":1}}],[\"方法执行\",{\"1\":{\"632\":1}}],[\"方法执行完毕\",{\"1\":{\"608\":1}}],[\"方法会从两端删除空白字符\",{\"1\":{\"1202\":1}}],[\"方法会读取数据的值\",{\"1\":{\"608\":1}}],[\"方法会直接在一个对象上定义一个新属性\",{\"1\":{\"599\":1,\"1407\":1}}],[\"方法简介\",{\"0\":{\"599\":1}}],[\"方法简析\",{\"1\":{\"392\":1}}],[\"方法等等\",{\"1\":{\"534\":1}}],[\"方法给\",{\"1\":{\"500\":1}}],[\"方法的参数是对象时\",{\"1\":{\"1413\":1}}],[\"方法的返回值也不再包括该属性\",{\"1\":{\"1406\":1}}],[\"方法的返回结果是\",{\"1\":{\"1177\":1}}],[\"方法的第\",{\"1\":{\"1391\":1}}],[\"方法的作用就是获取自己依赖的数据\",{\"1\":{\"608\":1}}],[\"方法的一个对象\",{\"1\":{\"500\":1}}],[\"方法的对象\",{\"1\":{\"500\":1}}],[\"方法的语法糖\",{\"1\":{\"121\":1}}],[\"方法提供的\",{\"1\":{\"450\":1}}],[\"方法名\",{\"1\":{\"411\":1,\"450\":1,\"823\":1}}],[\"方法做补充\",{\"1\":{\"350\":1}}],[\"方法开始的时候加入了\",{\"1\":{\"272\":1}}],[\"方法销毁\",{\"1\":{\"103\":1}}],[\"方法放在了成功的\",{\"1\":{\"71\":1}}],[\"方法去调用\",{\"1\":{\"71\":1}}],[\"方法中触发模版重新渲染逻辑\",{\"1\":{\"1407\":1}}],[\"方法中传递\",{\"1\":{\"1065\":1}}],[\"方法中需要一个定时器的标识作为参数\",{\"1\":{\"1063\":1}}],[\"方法中已经实现\",{\"1\":{\"353\":1}}],[\"方法中使用\",{\"1\":{\"235\":1,\"1391\":1}}],[\"方法中的创建实例的函数进行修改\",{\"1\":{\"296\":1}}],[\"方法中的\",{\"1\":{\"143\":1}}],[\"方法中\",{\"1\":{\"71\":2,\"623\":1,\"1391\":1}}],[\"方法\",{\"0\":{\"17\":1,\"18\":1,\"413\":1,\"1063\":1,\"1177\":1,\"1227\":1,\"1293\":1,\"1347\":1},\"1\":{\"22\":1,\"68\":1,\"71\":1,\"134\":1,\"156\":1,\"165\":1,\"229\":1,\"272\":1,\"323\":1,\"451\":1,\"534\":1,\"608\":2,\"621\":1,\"623\":1,\"632\":3,\"633\":1,\"636\":4,\"728\":1,\"758\":2,\"842\":1,\"843\":1,\"1067\":1,\"1094\":1,\"1106\":2,\"1155\":1,\"1171\":1,\"1173\":2,\"1177\":1,\"1195\":1,\"1249\":1,\"1275\":1,\"1279\":2,\"1283\":1,\"1319\":1,\"1332\":1,\"1367\":1,\"1370\":1,\"1402\":2,\"1403\":1,\"1404\":1,\"1407\":1,\"1410\":3,\"1413\":5}}],[\"高维护性\",{\"1\":{\"1187\":1}}],[\"高\",{\"1\":{\"877\":1,\"917\":1}}],[\"高度如何设置\",{\"1\":{\"962\":1}}],[\"高度省略的会等比例缩放\",{\"1\":{\"954\":1}}],[\"高度\",{\"1\":{\"876\":1,\"878\":1}}],[\"高亮\",{\"1\":{\"714\":1}}],[\"高阶面向对象\",{\"0\":{\"1393\":1},\"1\":{\"1379\":1}}],[\"高阶函数转发\",{\"0\":{\"239\":1}}],[\"高阶函数\",{\"0\":{\"159\":1}}],[\"高阶组件参数为组件\",{\"1\":{\"233\":1}}],[\"高阶组件\",{\"0\":{\"232\":1},\"1\":{\"232\":1}}],[\"高阶组件内部创建一个类组件\",{\"1\":{\"86\":1}}],[\"高阶组件命名约定以\",{\"1\":{\"86\":1}}],[\"高效的原因\",{\"0\":{\"82\":1}}],[\"高效优秀的diff算法\",{\"1\":{\"81\":1}}],[\"因为立即执行函数里任何一个函数都可以使用它的\",{\"1\":{\"1456\":1}}],[\"因为后一个元素触发响应时总会清除前一个timer定时器\",{\"1\":{\"1073\":1}}],[\"因为表格可能很长\",{\"1\":{\"1049\":1}}],[\"因为第一次浏览的时候\",{\"1\":{\"1027\":1}}],[\"因为第二轮遍历也相对简单\",{\"1\":{\"357\":1}}],[\"因为父级需要占有位置\",{\"1\":{\"997\":1}}],[\"因为我们常用的尺寸单位是\",{\"1\":{\"944\":1}}],[\"因为我们都是在80端口上进行交互的\",{\"1\":{\"28\":1}}],[\"因为使用时会带来不可预期的结果\",{\"1\":{\"1371\":1}}],[\"因为使用\",{\"1\":{\"919\":1}}],[\"因为一般情况下都是往上往左移动\",{\"1\":{\"916\":1}}],[\"因为常态下边框会额外增加盒子的实际大小\",{\"1\":{\"909\":1}}],[\"因为三个\",{\"1\":{\"845\":1}}],[\"因为内部已经默认集成了该异步中间件\",{\"1\":{\"812\":1}}],[\"因为引用了\",{\"1\":{\"812\":1}}],[\"因为根元素\",{\"1\":{\"696\":1}}],[\"因为只在同层级进行比较\",{\"1\":{\"692\":1}}],[\"因为新节点存在随机插入\",{\"1\":{\"676\":1}}],[\"因为栈结构的性质\",{\"1\":{\"661\":1}}],[\"因为是\",{\"1\":{\"657\":1}}],[\"因为它就是一次函数调用\",{\"1\":{\"1448\":1,\"1449\":1}}],[\"因为它可以让数据显示得非常的规整\",{\"1\":{\"1047\":1}}],[\"因为它会隐藏多余部分\",{\"1\":{\"914\":1}}],[\"因为它的嵌入标记\",{\"1\":{\"639\":1}}],[\"因为它不光是惰性缓存\",{\"1\":{\"630\":1}}],[\"因为当前函数内仅有\",{\"1\":{\"636\":1}}],[\"因为缺失\",{\"1\":{\"634\":1}}],[\"因为js为单线程执行\",{\"1\":{\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"因为读取了数据\",{\"1\":{\"605\":1}}],[\"因为被编译的文件里可能有中文导致\",{\"1\":{\"590\":1}}],[\"因为接口更灵活\",{\"1\":{\"580\":1}}],[\"因为里面使用了\",{\"1\":{\"578\":1}}],[\"因为返回值不再是\",{\"1\":{\"534\":1}}],[\"因为已经存在了\",{\"1\":{\"505\":1}}],[\"因为mixins已经混入了methods\",{\"1\":{\"499\":1}}],[\"因为即便更新数据也无法更新\",{\"1\":{\"482\":1}}],[\"因为这可能会产生莫名其妙的\",{\"1\":{\"365\":1}}],[\"因为浏览器提供的\",{\"1\":{\"262\":1}}],[\"因为组件\",{\"1\":{\"235\":1}}],[\"因为此时组件尚未挂载\",{\"1\":{\"153\":1}}],[\"因为自增运算符是对原count值的修改\",{\"1\":{\"145\":1,\"155\":1,\"160\":1}}],[\"因为\",{\"1\":{\"92\":1,\"162\":1,\"197\":1,\"210\":1,\"451\":1,\"487\":1,\"585\":1,\"634\":1,\"635\":1,\"636\":2,\"873\":1,\"1062\":1}}],[\"因为<br\",{\"1\":{\"91\":1}}],[\"因此作为表达式分组\",{\"1\":{\"1388\":1}}],[\"因此如果要匹配字符\",{\"1\":{\"1381\":1}}],[\"因此比较两个字符串型数字一定要转型\",{\"1\":{\"1261\":1}}],[\"因此是相对定位\",{\"1\":{\"997\":1}}],[\"因此父亲只能是相对定位\",{\"1\":{\"997\":1}}],[\"因此布局前首先要清除网页元素的内外边距\",{\"1\":{\"972\":1}}],[\"因此<p>里面不能放块级元素\",{\"1\":{\"876\":1}}],[\"因此出现了异步中间件用来增强\",{\"1\":{\"754\":1}}],[\"因此代码功能实现暂不考虑\",{\"1\":{\"693\":1}}],[\"因此对\",{\"1\":{\"635\":1}}],[\"因此其他依赖这个\",{\"1\":{\"634\":1}}],[\"因此在这里需要声明一个递归式手动依赖管理函数\",{\"1\":{\"627\":1}}],[\"因此本章对\",{\"1\":{\"623\":1}}],[\"因此调用\",{\"1\":{\"621\":1,\"633\":1}}],[\"因此oldvalue与newvalue也总是相等\",{\"1\":{\"609\":1,\"616\":1}}],[\"因此同一时刻仅有一个watcher实例执行\",{\"1\":{\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"因此数据变化的时候\",{\"1\":{\"608\":1}}],[\"因此需要创建一个definecomputed函数\",{\"1\":{\"632\":1}}],[\"因此需要一套依赖收集与订阅发布系统\",{\"1\":{\"597\":1}}],[\"因此需要注意方法拷贝\",{\"1\":{\"235\":1}}],[\"因此无法被正常解析\",{\"1\":{\"572\":1}}],[\"因此上面的\",{\"1\":{\"357\":1}}],[\"因此一次\",{\"1\":{\"339\":1}}],[\"因此也不存在更新副作用\",{\"1\":{\"273\":1}}],[\"因此外部组件的\",{\"1\":{\"236\":1}}],[\"因此\",{\"1\":{\"85\":1,\"162\":1,\"197\":1,\"323\":1,\"603\":1,\"608\":1,\"636\":2,\"657\":1,\"676\":1,\"843\":1,\"848\":1,\"964\":1,\"1277\":1}}],[\"维护复杂\",{\"1\":{\"85\":1}}],[\"组织和其他标准化组织制定的一系列标准的集合\",{\"1\":{\"1028\":1}}],[\"组数字组成\",{\"1\":{\"932\":1}}],[\"组建中不会调用\",{\"1\":{\"753\":1}}],[\"组成的数组\",{\"1\":{\"465\":1}}],[\"组合式\",{\"0\":{\"533\":1,\"544\":1}}],[\"组合式api\",{\"0\":{\"532\":1}}],[\"组合\",{\"1\":{\"525\":1,\"534\":1}}],[\"组合特性的特殊设计模式\",{\"1\":{\"232\":1}}],[\"组合混乱\",{\"1\":{\"85\":1}}],[\"组件连接model\",{\"1\":{\"823\":1}}],[\"组件前\",{\"1\":{\"740\":1}}],[\"组件都是包裹了正确路径组件的<guard>组件\",{\"1\":{\"740\":1}}],[\"组件结构响应式重构\",{\"1\":{\"732\":1}}],[\"组件懒加载\",{\"1\":{\"730\":1}}],[\"组件可以没有根标签\",{\"1\":{\"566\":1}}],[\"组件必须有一个根标签\",{\"1\":{\"566\":1}}],[\"组件文件中\",{\"1\":{\"525\":1}}],[\"组件或\",{\"1\":{\"497\":1}}],[\"组件实例对象\",{\"1\":{\"489\":1}}],[\"组件配置中\",{\"1\":{\"489\":1}}],[\"组件标签\",{\"1\":{\"488\":1}}],[\"组件标签的所有属性都保存在\",{\"1\":{\"147\":1}}],[\"组件名\",{\"0\":{\"488\":1},\"1\":{\"487\":1}}],[\"组件名必须首字母大写\",{\"1\":{\"133\":1}}],[\"组件内\",{\"1\":{\"582\":1,\"583\":3}}],[\"组件内守卫\",{\"0\":{\"438\":1},\"1\":{\"435\":1}}],[\"组件内的标签可以定义\",{\"1\":{\"152\":1}}],[\"组件即将销毁\",{\"1\":{\"434\":1}}],[\"组件挂载时调用\",{\"1\":{\"749\":1}}],[\"组件挂载\",{\"1\":{\"434\":1}}],[\"组件会在首次加载时触发mounted钩子\",{\"1\":{\"434\":1}}],[\"组件类型\",{\"1\":{\"318\":1}}],[\"组件类的构造函数\",{\"1\":{\"149\":1}}],[\"组件属性\",{\"1\":{\"306\":1,\"315\":1,\"338\":1,\"373\":1}}],[\"组件定义\",{\"1\":{\"306\":1,\"315\":1,\"338\":1,\"373\":1}}],[\"组件在<p>中显示其\",{\"1\":{\"227\":1}}],[\"组件包裹多个懒加载组件\",{\"1\":{\"207\":1}}],[\"组件置于懒加载组件之上的任何位置\",{\"1\":{\"207\":1}}],[\"组件首次执行\",{\"1\":{\"196\":1}}],[\"组件首次执行生成\",{\"1\":{\"196\":1}}],[\"组件首次执行及更新都会生成新函数\",{\"1\":{\"196\":1}}],[\"组件卸载前执行\",{\"1\":{\"185\":1}}],[\"组件渲染的顺序依赖于深度优先原则\",{\"1\":{\"172\":1}}],[\"组件setstate\",{\"1\":{\"167\":1,\"171\":1}}],[\"组件使用完毕后\",{\"1\":{\"165\":1}}],[\"组件状态数据的初始化及初始化渲染\",{\"1\":{\"165\":1}}],[\"组件状态逻辑\",{\"1\":{\"84\":1}}],[\"组件树被卸载\",{\"1\":{\"244\":1}}],[\"组件树卸载\",{\"0\":{\"244\":1}}],[\"组件树中有组件触发更新后\",{\"1\":{\"162\":1}}],[\"组件树更新原理\",{\"0\":{\"162\":1}}],[\"组件初始化时可以对props进行操作\",{\"1\":{\"149\":1}}],[\"组件示例\",{\"0\":{\"145\":1,\"150\":1,\"155\":1}}],[\"组件自治\",{\"1\":{\"782\":1}}],[\"组件自定义的方法中\",{\"1\":{\"143\":1}}],[\"组件自身的问题\",{\"1\":{\"89\":1}}],[\"组件中引入路由守卫函数\",{\"1\":{\"740\":1}}],[\"组件中引入路由表数据开启\",{\"1\":{\"732\":1}}],[\"组件中所用到的\",{\"1\":{\"534\":1}}],[\"组件中调用\",{\"1\":{\"418\":2}}],[\"组件中读取\",{\"1\":{\"418\":2}}],[\"组件中的可复用功能\",{\"1\":{\"499\":1}}],[\"组件中的\",{\"1\":{\"365\":1}}],[\"组件中定义了\",{\"1\":{\"242\":1}}],[\"组件中有执行过数据获取\",{\"1\":{\"184\":1}}],[\"组件中包含一系列钩子函数\",{\"1\":{\"163\":1}}],[\"组件中\",{\"1\":{\"143\":1,\"751\":1}}],[\"组件被称为\",{\"1\":{\"142\":1}}],[\"组件单元测试的文件\",{\"1\":{\"138\":1}}],[\"组件书写规范\",{\"0\":{\"133\":1}}],[\"组件化\",{\"0\":{\"131\":1},\"1\":{\"136\":1,\"486\":1}}],[\"组件化编程\",{\"0\":{\"483\":1},\"1\":{\"522\":1}}],[\"组件化编程大同小异\",{\"1\":{\"127\":1}}],[\"组件化编码\",{\"1\":{\"81\":1}}],[\"组件通信\",{\"0\":{\"104\":1,\"509\":1},\"1\":{\"246\":1,\"522\":1}}],[\"组件只有当props\",{\"1\":{\"98\":1}}],[\"组件rerender\",{\"1\":{\"97\":1}}],[\"组件开始\",{\"1\":{\"92\":1}}],[\"组件的样式\",{\"1\":{\"138\":1}}],[\"组件的原始组件中更新是\",{\"1\":{\"92\":1}}],[\"组件的更新既不触发外层\",{\"1\":{\"92\":1}}],[\"组件的状态逻辑复用\",{\"1\":{\"89\":1}}],[\"组件的状态逻辑复用经历了\",{\"1\":{\"84\":1}}],[\"组件\",{\"0\":{\"129\":1,\"486\":1,\"709\":1,\"752\":1},\"1\":{\"91\":1,\"92\":2,\"134\":1,\"138\":1,\"208\":1,\"213\":1,\"238\":1,\"241\":1,\"487\":1,\"707\":1,\"752\":1}}],[\"组件进行序列化\",{\"1\":{\"46\":1}}],[\"跟父级无关\",{\"1\":{\"1325\":1}}],[\"跟父元素没有任何关系\",{\"1\":{\"994\":1}}],[\"跟数字比较均为\",{\"1\":{\"1261\":1}}],[\"跟方法一不同之处在于\",{\"1\":{\"1249\":1}}],[\"跟用户进行交互\",{\"1\":{\"1055\":1}}],[\"跟页面滚动搭配使用\",{\"1\":{\"995\":1}}],[\"跟前面四个属性值都不一样\",{\"1\":{\"995\":1}}],[\"跟表单相关\",{\"1\":{\"873\":1}}],[\"跟虚拟\",{\"1\":{\"698\":1}}],[\"跟\",{\"1\":{\"85\":1,\"257\":1}}],[\"等不能做变量名\",{\"1\":{\"1452\":1}}],[\"等价\",{\"1\":{\"1439\":1}}],[\"等价于以下表达式\",{\"1\":{\"1228\":1}}],[\"等来实现\",{\"1\":{\"1391\":1}}],[\"等方法中使用\",{\"1\":{\"1391\":1}}],[\"等方法来处理事件绑定或事件委派\",{\"1\":{\"1328\":1}}],[\"等方法来发送请求获取\",{\"1\":{\"65\":1}}],[\"等效于\",{\"1\":{\"1384\":4}}],[\"等几乎所有的编程语言中都能使用\",{\"1\":{\"1380\":1}}],[\"等着\",{\"1\":{\"1282\":1}}],[\"等低版本浏览器\",{\"1\":{\"1281\":3}}],[\"等等\",{\"1\":{\"1155\":1}}],[\"等到其他任务执行完毕后\",{\"1\":{\"1076\":1}}],[\"等到根节点渲染\",{\"1\":{\"274\":1}}],[\"等于\",{\"1\":{\"1183\":1,\"1261\":1}}],[\"等于back\",{\"1\":{\"1067\":1}}],[\"等于forward\",{\"1\":{\"1067\":1}}],[\"等制作的用于展示特定内容相关的网页集合\",{\"1\":{\"1025\":1}}],[\"等类似\",{\"1\":{\"1007\":1}}],[\"等份媒体查询方法可提供媒体查询与设备的匹配关系方案\",{\"1\":{\"966\":1}}],[\"等份\",{\"1\":{\"966\":3}}],[\"等级判断从左向右\",{\"1\":{\"932\":1}}],[\"等腰三角\",{\"0\":{\"922\":1}}],[\"等状态\",{\"1\":{\"847\":1}}],[\"等状态管理库\",{\"1\":{\"117\":1}}],[\"等数据状态管理库都是通过\",{\"1\":{\"840\":1}}],[\"等同于\",{\"1\":{\"764\":1}}],[\"等进行解析\",{\"1\":{\"701\":1}}],[\"等指令\",{\"1\":{\"695\":1}}],[\"等操作\",{\"1\":{\"636\":1}}],[\"等配置项属性\",{\"1\":{\"621\":1}}],[\"等需要数据等地方\",{\"1\":{\"608\":1}}],[\"等属性只读\",{\"1\":{\"1108\":1}}],[\"等属性的内容\",{\"1\":{\"692\":1}}],[\"等属性时\",{\"1\":{\"662\":1}}],[\"等属性\",{\"1\":{\"323\":1}}],[\"等属性指定事件处理函数\",{\"1\":{\"158\":1}}],[\"等dom变更后\",{\"1\":{\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"384\":1,\"396\":1}}],[\"等待\",{\"1\":{\"776\":1}}],[\"等待value值成功析出之后\",{\"1\":{\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"等待异步组件时渲染一些额外内容\",{\"1\":{\"568\":1}}],[\"等待当时同步代码执行完毕再执行\",{\"1\":{\"505\":1}}],[\"等待函数组件执行渲染\",{\"1\":{\"323\":1}}],[\"等待下一次工作单元执行beginwork\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"等待生效的属性\",{\"1\":{\"270\":1,\"272\":1}}],[\"等待处理或者生效的属性\",{\"1\":{\"270\":1,\"272\":1}}],[\"等待项目创建好之后进入项目文件夹\",{\"1\":{\"137\":1}}],[\"等构建工具打包带来的性能优化本章略过\",{\"1\":{\"93\":1}}],[\"等\",{\"0\":{\"117\":1},\"1\":{\"86\":1,\"105\":1,\"129\":1,\"159\":1,\"323\":1,\"342\":1,\"578\":1,\"692\":1,\"702\":1,\"839\":1,\"924\":1,\"944\":2,\"1076\":3,\"1391\":1}}],[\"等模式\",{\"1\":{\"84\":1}}],[\"操作符\",{\"1\":{\"1228\":1,\"1397\":1}}],[\"操作符取代\",{\"1\":{\"1228\":1}}],[\"操作符用于将多个媒体查询规则组合成单条媒体查询\",{\"1\":{\"964\":1}}],[\"操作浏览器跳转页面\",{\"1\":{\"1065\":1}}],[\"操作是阻塞的\",{\"1\":{\"765\":1}}],[\"操作原对象内部数据\",{\"1\":{\"550\":1}}],[\"操作数据与模板读取数据均不需要\",{\"1\":{\"550\":1}}],[\"操作数据需要\",{\"1\":{\"550\":1}}],[\"操作数据\",{\"1\":{\"482\":1}}],[\"操作的某个按键名的键\",{\"1\":{\"472\":1}}],[\"操作的是某个\",{\"1\":{\"472\":1}}],[\"操作一个由多个\",{\"1\":{\"452\":1}}],[\"操作前就会先执行\",{\"1\":{\"376\":1}}],[\"操作\",{\"0\":{\"149\":1,\"154\":1,\"1104\":1,\"1293\":1},\"1\":{\"84\":1,\"273\":1,\"274\":1,\"411\":1,\"818\":1,\"820\":1,\"1279\":2}}],[\"操作异步对象\",{\"1\":{\"3\":1}}],[\"专注去做结构呈现\",{\"1\":{\"854\":1}}],[\"专用\",{\"1\":{\"707\":1}}],[\"专门用来表示一个空对象\",{\"1\":{\"1244\":1}}],[\"专门用于创建redux中最核心的store对象\",{\"1\":{\"749\":1}}],[\"专门在\",{\"1\":{\"406\":1}}],[\"专门记录逻辑复用的技巧与跨组件通信方法\",{\"1\":{\"83\":1}}],[\"专属\",{\"1\":{\"47\":1}}],[\"声明放在函数体所有语句之前\",{\"1\":{\"1453\":1}}],[\"声明包含在小括号内\",{\"1\":{\"1388\":1}}],[\"声明表示条件的意思\",{\"1\":{\"1387\":1}}],[\"声明词量包括正向声明和反向声明两种模式\",{\"1\":{\"1387\":1}}],[\"声明词量\",{\"0\":{\"1387\":1}}],[\"声明循环变量\",{\"1\":{\"1270\":1,\"1271\":1,\"1273\":1}}],[\"声明变量不赋值\",{\"1\":{\"1245\":1}}],[\"声明了\",{\"1\":{\"1124\":1}}],[\"声明式导航\",{\"1\":{\"822\":1}}],[\"声明式任务处理\",{\"1\":{\"782\":1}}],[\"声明式编码\",{\"1\":{\"81\":1}}],[\"声明在当前组件实例的\",{\"1\":{\"636\":1}}],[\"声明响应式数据\",{\"1\":{\"632\":1}}],[\"声明文件中添加一行代码\",{\"1\":{\"591\":1}}],[\"声明的不足之处在于\",{\"1\":{\"587\":1}}],[\"声明的变量没有任何的限定\",{\"1\":{\"1011\":1}}],[\"声明的变量跟\",{\"1\":{\"1011\":1}}],[\"声明的变量必须以\",{\"1\":{\"1011\":1}}],[\"声明的变量\",{\"1\":{\"584\":1}}],[\"声明\",{\"1\":{\"563\":1,\"584\":1,\"587\":1,\"720\":1,\"1013\":2,\"1161\":1}}],[\"声明默认不可枚举\",{\"1\":{\"468\":1}}],[\"声明接收\",{\"1\":{\"430\":1}}],[\"声明静态属性后\",{\"1\":{\"217\":1}}],[\"声明一个peson类\",{\"1\":{\"1274\":1}}],[\"声明一个字面为数字1的变量\",{\"1\":{\"1239\":1}}],[\"声明一个指向\",{\"1\":{\"214\":1}}],[\"声明一个叫\",{\"1\":{\"182\":1}}],[\"声明一个变量\",{\"1\":{\"71\":1}}],[\"声明需要\",{\"1\":{\"125\":1}}],[\"库不冲突\",{\"1\":{\"1333\":1}}],[\"库实现\",{\"0\":{\"667\":1}}],[\"库底层重点做两个事情\",{\"1\":{\"645\":1}}],[\"库的实现源码\",{\"1\":{\"673\":1}}],[\"库的源码解读\",{\"1\":{\"637\":1}}],[\"库的支持\",{\"1\":{\"138\":2}}],[\"库进限制\",{\"1\":{\"149\":1}}],[\"库\",{\"0\":{\"119\":1},\"1\":{\"80\":1,\"149\":1,\"639\":1,\"665\":1,\"818\":1,\"824\":1,\"1279\":1}}],[\"都指向\",{\"1\":{\"1424\":1}}],[\"都在主线程上执行\",{\"1\":{\"1076\":1}}],[\"都为\",{\"1\":{\"847\":1}}],[\"都要被添加到\",{\"1\":{\"842\":1}}],[\"都可以改变函数内部的\",{\"1\":{\"1451\":1}}],[\"都可以被中断\",{\"1\":{\"779\":1}}],[\"都可以完成\",{\"1\":{\"452\":1}}],[\"都没有匹配到\",{\"1\":{\"683\":1,\"691\":1}}],[\"都没有匹配到的情况\",{\"1\":{\"683\":1,\"691\":1}}],[\"都没有完成\",{\"1\":{\"354\":1}}],[\"都能指向正确的地址\",{\"1\":{\"648\":1}}],[\"都能放在正确的地方\",{\"1\":{\"648\":1}}],[\"都放入一个容器\",{\"1\":{\"648\":1}}],[\"都会自动格式化\",{\"1\":{\"1031\":1}}],[\"都会实例化一个\",{\"1\":{\"841\":1}}],[\"都会对this\",{\"1\":{\"628\":1}}],[\"都会导致这个页面的重新渲染\",{\"1\":{\"604\":1}}],[\"都通知一遍\",{\"1\":{\"605\":1}}],[\"都需要用到同一个接口的\",{\"1\":{\"845\":1}}],[\"都需要触发它的响应式变化\",{\"1\":{\"630\":1}}],[\"都需要借助框架的\",{\"1\":{\"596\":1}}],[\"都需要把新的effect组成完整的单循环链表放到fiber\",{\"1\":{\"373\":1}}],[\"都处于可用状态\",{\"1\":{\"481\":1}}],[\"都相同的节点进行\",{\"1\":{\"355\":1}}],[\"都同时遍历完成\",{\"1\":{\"354\":1}}],[\"都以模块来编写的\",{\"1\":{\"130\":1,\"486\":1}}],[\"都是一样的\",{\"1\":{\"1419\":1}}],[\"都是一个generator\",{\"1\":{\"779\":1}}],[\"都是一个能发任意请求的函数\",{\"1\":{\"75\":1}}],[\"都是只想遍\",{\"1\":{\"1403\":1}}],[\"都是隐藏\",{\"1\":{\"1225\":1}}],[\"都是纯净的对象字面量\",{\"1\":{\"790\":1}}],[\"都是\",{\"1\":{\"473\":1,\"1251\":1}}],[\"都是被\",{\"1\":{\"470\":1}}],[\"都是同步执行\",{\"1\":{\"272\":1,\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"都是采用组件混合的方式进行的\",{\"1\":{\"85\":1}}],[\"都有\",{\"1\":{\"1410\":1}}],[\"都有默认配置和拦截器的属性\",{\"1\":{\"75\":1}}],[\"都有发特定请求的各种方法\",{\"1\":{\"75\":1}}],[\"都设置了\",{\"1\":{\"61\":1}}],[\"相等\",{\"1\":{\"1376\":1}}],[\"相邻块元素垂直外边距合并\",{\"1\":{\"971\":1}}],[\"相邻边框合并在一起\",{\"1\":{\"909\":1}}],[\"相邻行内元素在一行上\",{\"1\":{\"877\":1}}],[\"相对路径分类\",{\"1\":{\"1045\":1}}],[\"相对路径\",{\"1\":{\"1045\":1,\"1065\":1}}],[\"相对路径的三种形式\",{\"0\":{\"1045\":1}}],[\"相对路径的别名值会原封不动地被使用\",{\"1\":{\"572\":1}}],[\"相对\",{\"1\":{\"993\":1,\"1225\":1}}],[\"相对于元素的\",{\"1\":{\"1139\":1}}],[\"相对于自身位置移动\",{\"1\":{\"999\":1}}],[\"相对于自己原来的位置来移动\",{\"1\":{\"992\":1}}],[\"相对于它祖先元素而言的\",{\"1\":{\"993\":1}}],[\"相对于它原来的位置来说的\",{\"1\":{\"992\":1}}],[\"相对于父盒子而言\",{\"1\":{\"954\":1}}],[\"相对定位特点\",{\"1\":{\"995\":1}}],[\"相对定位\",{\"0\":{\"992\":1},\"1\":{\"989\":1,\"999\":2}}],[\"相对当前元素的倍数\",{\"1\":{\"892\":1}}],[\"相对单位\",{\"1\":{\"892\":1}}],[\"相反\",{\"1\":{\"842\":1,\"1130\":1,\"1218\":1}}],[\"相应结果\",{\"1\":{\"788\":1}}],[\"相互之间构成你中有我\",{\"1\":{\"635\":1}}],[\"相较于在\",{\"1\":{\"376\":1}}],[\"相比于\",{\"1\":{\"919\":1}}],[\"相比于普通的\",{\"1\":{\"584\":1}}],[\"相比\",{\"0\":{\"524\":1},\"1\":{\"339\":1,\"523\":1}}],[\"相当于用set赋值\",{\"1\":{\"1433\":1}}],[\"相当于直接使用函数对象\",{\"1\":{\"1344\":1}}],[\"相当于使用函数返回值\",{\"1\":{\"1344\":1}}],[\"相当于停止结束上一次的动画\",{\"1\":{\"1306\":1}}],[\"相当于$\",{\"1\":{\"1290\":3}}],[\"相当于原生\",{\"1\":{\"1282\":1,\"1283\":1,\"1315\":1,\"1316\":1,\"1317\":1}}],[\"相当于this\",{\"1\":{\"535\":3}}],[\"相当于\",{\"1\":{\"186\":2,\"766\":1,\"767\":1,\"1015\":2,\"1265\":1,\"1305\":2,\"1385\":3}}],[\"相同选择器给设置相同的样式\",{\"1\":{\"930\":1}}],[\"相同而\",{\"1\":{\"354\":1}}],[\"相同一样\",{\"1\":{\"350\":1}}],[\"相同\",{\"0\":{\"343\":1,\"350\":1},\"1\":{\"332\":1,\"355\":1,\"376\":1,\"672\":1,\"1194\":1,\"1273\":1}}],[\"相同栈地址的浅拷贝对象\",{\"1\":{\"313\":1}}],[\"相同的变量\",{\"1\":{\"1169\":1}}],[\"相同的不再赘述\",{\"1\":{\"523\":1}}],[\"相同的解决方案\",{\"1\":{\"451\":1}}],[\"相同的节点进行了处理\",{\"1\":{\"358\":1}}],[\"相同的\",{\"1\":{\"161\":1,\"461\":1}}],[\"相同点\",{\"1\":{\"75\":1,\"1451\":1}}],[\"相关\",{\"0\":{\"1081\":1}}],[\"相关标识\",{\"1\":{\"1064\":1}}],[\"相关介绍可以参考这篇文章\",{\"1\":{\"920\":1}}],[\"相关组件只有在其内部才能使用\",{\"1\":{\"710\":1}}],[\"相关的所有\",{\"1\":{\"636\":1}}],[\"相关的配置\",{\"1\":{\"493\":1}}],[\"相关声明下会带下划线\",{\"1\":{\"591\":2}}],[\"相关数据\",{\"1\":{\"120\":1}}],[\"相关信息\",{\"1\":{\"0\":1}}],[\"有参\",{\"1\":{\"1431\":1}}],[\"有可能把运算子转为字符串\",{\"1\":{\"1414\":1}}],[\"有字符串\",{\"1\":{\"1376\":2}}],[\"有正小数\",{\"1\":{\"1376\":1}}],[\"有负数\",{\"1\":{\"1376\":1}}],[\"有丰富的第三方插件\",{\"1\":{\"1279\":1}}],[\"有三个表达式\",{\"1\":{\"1273\":1}}],[\"有三个概念需要了解\",{\"1\":{\"96\":1}}],[\"有两个特殊\",{\"1\":{\"1183\":1}}],[\"有两种方法可以实现同样的功能\",{\"1\":{\"1435\":1}}],[\"有两种方式设置默认值\",{\"1\":{\"587\":1}}],[\"有两种简便写法\",{\"1\":{\"799\":1}}],[\"有两种情况\",{\"1\":{\"628\":1,\"636\":1}}],[\"有两种遍历方法\",{\"1\":{\"266\":1}}],[\"有序列表\",{\"0\":{\"1053\":1},\"1\":{\"1051\":1}}],[\"有序\",{\"1\":{\"1051\":1}}],[\"有利于提高网站访问量\",{\"1\":{\"1020\":1}}],[\"有利于提高选择器性能\",{\"1\":{\"139\":1}}],[\"有较大兼容性问题\",{\"1\":{\"927\":1}}],[\"有部分不需要\",{\"1\":{\"864\":1}}],[\"有四种状态\",{\"1\":{\"840\":1}}],[\"有子节点还是有文本\",{\"1\":{\"675\":1,\"689\":1}}],[\"有了变量对象存每个上下文中的东西\",{\"1\":{\"1423\":1}}],[\"有了\",{\"1\":{\"647\":1,\"1062\":1}}],[\"有依赖获取方法和依赖更新方法\",{\"1\":{\"621\":1}}],[\"有依赖收集\",{\"1\":{\"621\":1}}],[\"有一个数组来存储\",{\"1\":{\"608\":1}}],[\"有些事件希望自动触发\",{\"1\":{\"1330\":1}}],[\"有些特殊的标签必须是单个标签\",{\"1\":{\"1030\":1}}],[\"有些资料称为行内块元素\",{\"1\":{\"878\":1}}],[\"有些同学可能会想\",{\"1\":{\"604\":1}}],[\"有些值不应被设置为响应式的\",{\"1\":{\"556\":1}}],[\"有函数泛型\",{\"1\":{\"580\":1}}],[\"有许多全局\",{\"1\":{\"561\":1}}],[\"有点像\",{\"1\":{\"541\":1}}],[\"有安全性问题\",{\"1\":{\"474\":1}}],[\"有key用key\",{\"1\":{\"361\":1}}],[\"有的仅支持一个子集\",{\"1\":{\"1380\":1}}],[\"有的编程语言支持所有的语法\",{\"1\":{\"1380\":1}}],[\"有的\",{\"1\":{\"355\":1}}],[\"有老fiber\",{\"1\":{\"272\":1,\"318\":1,\"357\":1,\"361\":1}}],[\"有\",{\"1\":{\"74\":1,\"990\":1}}],[\"原值\",{\"1\":{\"1413\":1}}],[\"原值赋予给新的子节点\",{\"1\":{\"92\":1}}],[\"原字符串\",{\"1\":{\"1202\":1}}],[\"原来在标准流的位置继续占有\",{\"1\":{\"992\":1}}],[\"原始类型的值会自动当作包装对象调用\",{\"1\":{\"1418\":1}}],[\"原始类型与实例对象自动转换\",{\"0\":{\"1418\":1}}],[\"原始类型\",{\"1\":{\"1413\":1}}],[\"原始\",{\"1\":{\"917\":1}}],[\"原本代码冗余\",{\"1\":{\"817\":1}}],[\"原则\",{\"1\":{\"792\":1,\"930\":1}}],[\"原型链\",{\"0\":{\"1441\":1},\"1\":{\"1441\":1}}],[\"原型链相关方法\",{\"1\":{\"1408\":1}}],[\"原型对象里面的方法也指向实例对象\",{\"1\":{\"1446\":1}}],[\"原型对象三角关系\",{\"1\":{\"1441\":1}}],[\"原型对象\",{\"1\":{\"1439\":1,\"1442\":1}}],[\"原型对象上的所有方法\",{\"1\":{\"74\":1}}],[\"原型指向类的原型对象\",{\"1\":{\"1435\":1}}],[\"原型方法$watch\",{\"1\":{\"625\":1}}],[\"原型上所有属性\",{\"1\":{\"467\":1}}],[\"原先的\",{\"1\":{\"323\":1}}],[\"原因是行内块元素和文字的基线对齐\",{\"1\":{\"924\":1}}],[\"原因\",{\"1\":{\"245\":1,\"451\":1,\"590\":1}}],[\"原组件上的静态方法或原型方法将丢失\",{\"1\":{\"235\":1}}],[\"原理就是直接在\",{\"1\":{\"964\":1}}],[\"原理与本质\",{\"0\":{\"844\":1}}],[\"原理简述\",{\"0\":{\"277\":1}}],[\"原理\",{\"0\":{\"96\":1,\"461\":1,\"1173\":1},\"1\":{\"86\":1,\"450\":1,\"755\":1}}],[\"原生具备\",{\"1\":{\"1172\":1}}],[\"原生对象存储数据\",{\"1\":{\"793\":1}}],[\"原生事件对象\",{\"1\":{\"293\":1}}],[\"原生事件源\",{\"1\":{\"292\":1,\"293\":1}}],[\"原生事件\",{\"1\":{\"286\":1,\"288\":2,\"292\":1,\"297\":1}}],[\"原生事件数组\",{\"1\":{\"282\":1}}],[\"原生元素节点\",{\"1\":{\"273\":1}}],[\"原生组件5\",{\"1\":{\"270\":1,\"272\":1}}],[\"原生写法\",{\"1\":{\"26\":1}}],[\"原生\",{\"0\":{\"9\":1},\"1\":{\"530\":1,\"1301\":1}}],[\"从右到左\",{\"1\":{\"1376\":1}}],[\"从右往左数\",{\"1\":{\"1376\":1}}],[\"从8=>9\",{\"1\":{\"1376\":1}}],[\"从8=>1\",{\"1\":{\"1376\":1}}],[\"从2=>1\",{\"1\":{\"1376\":1}}],[\"从1开始\",{\"1\":{\"1376\":1}}],[\"从后往前寻找索引\",{\"1\":{\"1375\":1}}],[\"从左到右\",{\"1\":{\"1265\":1}}],[\"从左到右顺序排列\",{\"1\":{\"975\":1}}],[\"从不同的\",{\"1\":{\"1231\":1}}],[\"从输入\",{\"0\":{\"1066\":1}}],[\"从重到轻随之变\",{\"1\":{\"1035\":1}}],[\"从服务器接收的数据会存放在一个临时的文件夹\",{\"1\":{\"1027\":1}}],[\"从上到下逐行执行\",{\"1\":{\"1236\":1}}],[\"从上向下顺序排列\",{\"1\":{\"975\":1}}],[\"从上面的\",{\"1\":{\"634\":1}}],[\"从父元素继承该属性值\",{\"1\":{\"897\":1}}],[\"从未被\",{\"1\":{\"843\":1}}],[\"从缓存中移除\",{\"1\":{\"843\":1}}],[\"从非observable值创建一个observable\",{\"1\":{\"788\":1}}],[\"从代码风格上来看\",{\"1\":{\"753\":1}}],[\"从action对象中拿出\",{\"1\":{\"749\":1}}],[\"从外部获取路由守卫函数\",{\"1\":{\"737\":1}}],[\"从元素标签名\",{\"1\":{\"702\":1}}],[\"从所有依赖项的订阅者列表中删除自身\",{\"1\":{\"626\":1}}],[\"从依赖收集部分我们知道\",{\"1\":{\"608\":1}}],[\"从使用角度对比\",{\"1\":{\"550\":1}}],[\"从原理角度对比\",{\"1\":{\"550\":1}}],[\"从原有性能瓶颈出发\",{\"1\":{\"263\":1}}],[\"从定义数据角度对比\",{\"1\":{\"550\":1}}],[\"从这里可以看出\",{\"1\":{\"531\":1}}],[\"从何获取\",{\"1\":{\"296\":1}}],[\"从真实的dom节点上获取它对应的fiber节点\",{\"1\":{\"289\":1}}],[\"从当前的fiber到根节点\",{\"1\":{\"271\":1,\"272\":1}}],[\"从顶层对象开始递归调用声明下的数组\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"从顶层父节点开始递归遍历各个子节点\",{\"1\":{\"162\":1}}],[\"从顶点开始遍历\",{\"1\":{\"265\":1}}],[\"从react源码中获取工具方法和变量\",{\"1\":{\"252\":1}}],[\"从而报错\",{\"1\":{\"1413\":1}}],[\"从而在数据发生变化时精确锁定组件\",{\"1\":{\"792\":1}}],[\"从而使得我们的执行流能继续往下执行而不必一定要等待返回\",{\"1\":{\"765\":1}}],[\"从而使它关联的组件重新渲染\",{\"1\":{\"593\":1}}],[\"从而完成依赖收集\",{\"1\":{\"608\":1}}],[\"从而触发\",{\"1\":{\"608\":1}}],[\"从而触发了数据的\",{\"1\":{\"608\":1}}],[\"从而调用cb\",{\"1\":{\"607\":1,\"609\":1,\"616\":1}}],[\"从而页面只会更新一次\",{\"1\":{\"505\":1}}],[\"从而提高用户的响应速度\",{\"1\":{\"263\":1}}],[\"从而提高渲染效率优化加载性能\",{\"1\":{\"97\":1}}],[\"从而可以简写为\",{\"1\":{\"230\":1}}],[\"从\",{\"1\":{\"92\":1,\"244\":1,\"608\":1,\"636\":1,\"684\":1,\"842\":1,\"1289\":1,\"1290\":1,\"1367\":4}}],[\"从功能上来说\",{\"1\":{\"74\":1}}],[\"从语法上来说\",{\"1\":{\"74\":1}}],[\"执行变量赋值\",{\"1\":{\"1426\":1}}],[\"执行引擎总是访问栈顶的执行上下文\",{\"1\":{\"1425\":1}}],[\"执行在单线程上\",{\"1\":{\"1425\":1}}],[\"执行流其实是一个压栈出栈的过程\",{\"1\":{\"1425\":1}}],[\"执行流和执行环境\",{\"0\":{\"1425\":1}}],[\"执行流程\",{\"1\":{\"1076\":1,\"1436\":1}}],[\"执行上下文出栈等待\",{\"1\":{\"1426\":1}}],[\"执行上下文栈\",{\"1\":{\"1425\":1}}],[\"执行上下文\",{\"1\":{\"1423\":1}}],[\"执行环境生命周期\",{\"1\":{\"1426\":1}}],[\"执行环境的生命周期\",{\"0\":{\"1426\":1}}],[\"执行环境的作用就是生成一个变量对象\",{\"1\":{\"1424\":1}}],[\"执行环境的作用\",{\"0\":{\"1424\":1}}],[\"执行环境栈\",{\"1\":{\"1423\":1}}],[\"执行环境\",{\"0\":{\"1423\":1},\"1\":{\"1423\":1,\"1425\":1}}],[\"执行阶段\",{\"0\":{\"1427\":1,\"1429\":1},\"1\":{\"1419\":1,\"1426\":1}}],[\"执行相应的方法\",{\"1\":{\"1288\":1}}],[\"执行循环体操作\",{\"1\":{\"1270\":1,\"1271\":1}}],[\"执行代码块\",{\"1\":{\"1269\":2}}],[\"执行回调后返回的是二维数组\",{\"1\":{\"1221\":1}}],[\"执行的时间过长\",{\"1\":{\"1075\":1}}],[\"执行的是深度优先的子\",{\"1\":{\"273\":1}}],[\"执行机制分析\",{\"0\":{\"1419\":1}}],[\"执行机制\",{\"0\":{\"1074\":1}}],[\"执行动画的目标位置\",{\"1\":{\"1072\":1}}],[\"执行动画的对象\",{\"1\":{\"1072\":1}}],[\"执行层叠性\",{\"1\":{\"932\":1}}],[\"执行异步任务并返回\",{\"1\":{\"835\":1}}],[\"执行模板编译\",{\"1\":{\"694\":1}}],[\"执行dom元素的最小量更新\",{\"1\":{\"692\":1}}],[\"执行definereactive\",{\"1\":{\"604\":6}}],[\"执行暴力替换新旧dom元素\",{\"1\":{\"692\":1}}],[\"执行节点插入\",{\"1\":{\"676\":1}}],[\"执行数组对象的\",{\"1\":{\"621\":1}}],[\"执行数组的老方法\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"执行依赖更新的原理是\",{\"1\":{\"621\":1}}],[\"执行依赖收集的原理是\",{\"1\":{\"621\":1}}],[\"执行到\",{\"1\":{\"608\":1}}],[\"执行observe\",{\"1\":{\"604\":4}}],[\"执行`def\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"执行时不传入任何参数\",{\"1\":{\"601\":1}}],[\"执行时机\",{\"0\":{\"535\":1}}],[\"执行时间问题\",{\"1\":{\"259\":1}}],[\"执行完\",{\"1\":{\"703\":1}}],[\"执行完实例的\",{\"1\":{\"635\":1}}],[\"执行完以后说明还有更多工作要做\",{\"1\":{\"395\":1}}],[\"执行完毕并返\",{\"1\":{\"1423\":1}}],[\"执行完毕后\",{\"1\":{\"608\":1}}],[\"执行完毕\",{\"1\":{\"323\":1,\"608\":1}}],[\"执行flushwork\",{\"1\":{\"395\":1}}],[\"执行fiber上的副作用\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"执行工作直到截止时间\",{\"1\":{\"395\":1}}],[\"执行工作如果返回新的函数\",{\"1\":{\"395\":1}}],[\"执行工作单元调度\",{\"1\":{\"323\":1}}],[\"执行任务\",{\"1\":{\"395\":1,\"1076\":1}}],[\"执行挂载副作用\",{\"1\":{\"374\":1,\"396\":1}}],[\"执行卸载副作用\",{\"1\":{\"374\":1,\"396\":1}}],[\"执行诸如\",{\"1\":{\"330\":1}}],[\"执行函数代码\",{\"1\":{\"1429\":1}}],[\"执行函数成功后触发\",{\"1\":{\"835\":1}}],[\"执行函数的\",{\"1\":{\"339\":1}}],[\"执行函数组件副作用冒泡\",{\"1\":{\"325\":1}}],[\"执行函数拿到返回值\",{\"1\":{\"318\":1}}],[\"执行真实\",{\"1\":{\"273\":1}}],[\"执行递归的\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"执行此fiber的完成工作\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"执行不同情况的\",{\"1\":{\"272\":1}}],[\"执行completework\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"执行callback\",{\"1\":{\"197\":1}}],[\"执行一个工作单元\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"执行权\",{\"1\":{\"263\":1}}],[\"执行两者互斥\",{\"1\":{\"261\":1}}],[\"执行操作\",{\"1\":{\"245\":1}}],[\"执行栈触发\",{\"1\":{\"245\":1}}],[\"执行reactdom\",{\"1\":{\"165\":1}}],[\"执行resolvepromise函数\",{\"1\":{\"72\":1}}],[\"执行销毁\",{\"1\":{\"165\":1}}],[\"执行\",{\"1\":{\"156\":2,\"186\":1,\"249\":1,\"261\":1,\"273\":1,\"274\":2,\"298\":1,\"323\":1,\"330\":1,\"376\":1,\"604\":1,\"628\":1,\"698\":1,\"703\":1,\"744\":1,\"765\":1,\"1426\":1}}],[\"执行了\",{\"1\":{\"134\":1}}],[\"执行顺序和\",{\"1\":{\"1130\":1}}],[\"执行顺序\",{\"0\":{\"1236\":1},\"1\":{\"66\":1,\"604\":1}}],[\"简便形式\",{\"1\":{\"1191\":1}}],[\"简便地实现模板\",{\"1\":{\"248\":1}}],[\"简体\",{\"1\":{\"1031\":1}}],[\"简易源码实现\",{\"0\":{\"673\":1}}],[\"简而言之\",{\"1\":{\"598\":1,\"644\":1,\"849\":1}}],[\"简称\",{\"1\":{\"536\":1,\"537\":1}}],[\"简写属性没有特定书写顺序\",{\"1\":{\"907\":1}}],[\"简写\",{\"1\":{\"514\":1,\"539\":1}}],[\"简写方式\",{\"0\":{\"230\":1}}],[\"简述\",{\"0\":{\"165\":1,\"169\":1}}],[\"简单理解为一次函数的立即调用\",{\"1\":{\"1448\":1,\"1449\":1}}],[\"简单理解\",{\"1\":{\"1028\":1,\"1435\":1,\"1456\":1}}],[\"简单理解就是设备有多宽\",{\"1\":{\"949\":1}}],[\"简单点来说\",{\"1\":{\"1013\":1}}],[\"简单地开始新一行\",{\"1\":{\"1036\":1}}],[\"简单地解释为\",{\"1\":{\"964\":1}}],[\"简单地说\",{\"1\":{\"161\":1,\"461\":1}}],[\"简单总结\",{\"1\":{\"71\":1}}],[\"简化层级\",{\"1\":{\"1407\":1}}],[\"简化调用\",{\"1\":{\"1407\":1}}],[\"简化操作方便调用\",{\"1\":{\"1288\":1}}],[\"简化对象写法\",{\"0\":{\"1162\":1}}],[\"简化了\",{\"1\":{\"812\":1}}],[\"简化的流程有\",{\"1\":{\"753\":1}}],[\"简化写法配合传递参数\",{\"1\":{\"427\":1}}],[\"简化后\",{\"1\":{\"427\":1}}],[\"简化前\",{\"1\":{\"427\":1}}],[\"简化跳转写法\",{\"1\":{\"427\":1}}],[\"简化路由的跳转\",{\"1\":{\"427\":1}}],[\"简化项目编码\",{\"1\":{\"129\":1,\"486\":1}}],[\"简化\",{\"1\":{\"128\":1,\"485\":1,\"756\":1}}],[\"简介\",{\"0\":{\"2\":1,\"78\":1,\"175\":1,\"399\":1,\"523\":1,\"852\":1},\"1\":{\"246\":1,\"522\":1,\"592\":1}}],[\"使最左侧的重复类量词尽可能占有所有字符\",{\"1\":{\"1385\":1}}],[\"使网站更易于维护\",{\"1\":{\"1028\":1}}],[\"使元素及其后代元素的底部与整行的底部对齐\",{\"1\":{\"924\":1}}],[\"使界面更新粒度更加精细\",{\"1\":{\"792\":1}}],[\"使\",{\"1\":{\"751\":1}}],[\"使类型更具体化\",{\"1\":{\"580\":1}}],[\"使其永远不会再成为响应式对象\",{\"1\":{\"556\":1}}],[\"使推入最小堆中的任务队列永远是优先级最高的任务对象拍在顶点\",{\"1\":{\"391\":1}}],[\"使开发者能够在主事件循环上执行后台和低优先级工作\",{\"1\":{\"262\":1}}],[\"使下一次渲染能够显示降级后的\",{\"1\":{\"242\":1}}],[\"使得\",{\"1\":{\"841\":1}}],[\"使得异步操作集中处理\",{\"1\":{\"779\":1}}],[\"使得每个监听回调函数能自动执行事件派发功能\",{\"1\":{\"287\":1}}],[\"使得我们只需要专注于组件细节\",{\"1\":{\"234\":1}}],[\"使得后代组件可以轻松拿到挂在根组件上的全局数据如用户信息\",{\"1\":{\"111\":1}}],[\"使上面的\",{\"1\":{\"71\":1}}],[\"使用工厂方法批量创建对象\",{\"1\":{\"1446\":1}}],[\"使用小括号可以对字符模式进行任意分组\",{\"1\":{\"1390\":1}}],[\"使用正前向声明\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"使用竖线|描述\",{\"1\":{\"1383\":1}}],[\"使用反义字符范围可以匹配很多无法直接描述的字符\",{\"1\":{\"1382\":1}}],[\"使用下面字符模式可以匹配任意小写字母\",{\"1\":{\"1382\":1}}],[\"使用下面字符模式可以匹配任意大写字母\",{\"1\":{\"1382\":1}}],[\"使用十六进制需要添加\",{\"1\":{\"1381\":1}}],[\"使用哪个元素调用不确定\",{\"1\":{\"1364\":1}}],[\"使用数字作为索引操作元素\",{\"1\":{\"1351\":1}}],[\"使用函数声明形式创建的函数\",{\"1\":{\"1349\":1}}],[\"使用构造函数\",{\"1\":{\"1341\":1}}],[\"使用$\",{\"1\":{\"1333\":1}}],[\"使用空格\",{\"1\":{\"1287\":1}}],[\"使用>号\",{\"1\":{\"1287\":1}}],[\"使用这两个循环时\",{\"1\":{\"1277\":1}}],[\"使用这个语法\",{\"1\":{\"584\":1}}],[\"使用for\",{\"1\":{\"1274\":1}}],[\"使用foo全局变量时得带window\",{\"1\":{\"583\":1}}],[\"使用该方法总会返回唯一的一个元素\",{\"1\":{\"1092\":1}}],[\"使用模型表示对象之间的关系\",{\"1\":{\"1077\":1}}],[\"使用一个新的页面替换当前页面\",{\"1\":{\"1065\":1}}],[\"使用倍图来提高图片质量\",{\"1\":{\"953\":1}}],[\"使用外网服务器\",{\"1\":{\"945\":1}}],[\"使用缩写\",{\"1\":{\"936\":1}}],[\"使用精灵图的时候需要精确测量\",{\"1\":{\"916\":1}}],[\"使用浏览器默认的换行规则\",{\"1\":{\"900\":1}}],[\"使用给定的字符串来代表被修剪的文本\",{\"1\":{\"897\":1}}],[\"使用<link>标签引入这个文件\",{\"1\":{\"868\":1}}],[\"使用<transition>包裹要过渡的元素\",{\"1\":{\"508\":1}}],[\"使用行内样式表设定\",{\"1\":{\"867\":1}}],[\"使用情况\",{\"1\":{\"864\":1,\"873\":1}}],[\"使用的构造函数都是\",{\"1\":{\"1446\":1}}],[\"使用的时候\",{\"1\":{\"1124\":1}}],[\"使用的话\",{\"1\":{\"843\":1}}],[\"使用的是自定义事件\",{\"1\":{\"158\":1}}],[\"使用经典的\",{\"1\":{\"840\":1}}],[\"使用很少量的代码完成对服务端的状态管理\",{\"1\":{\"824\":1}}],[\"使用记忆化selector\",{\"1\":{\"815\":1}}],[\"使用可观察对象\",{\"1\":{\"793\":1}}],[\"使用案例\",{\"0\":{\"772\":1},\"1\":{\"823\":1}}],[\"使用纯函数\",{\"1\":{\"744\":1}}],[\"使用三原则\",{\"0\":{\"744\":1}}],[\"使用订阅\",{\"1\":{\"605\":1}}],[\"使用了\",{\"1\":{\"590\":1}}],[\"使用类型声明时的默认\",{\"1\":{\"587\":1}}],[\"使用运行时声明\",{\"1\":{\"587\":1}}],[\"使用开发模式不会报错\",{\"1\":{\"583\":1}}],[\"使用此选项可强制预构建链接的包\",{\"1\":{\"576\":1}}],[\"使用程序员自定义的ref\",{\"1\":{\"557\":1}}],[\"使用vue准备好的内置ref\",{\"1\":{\"557\":1}}],[\"使用场景\",{\"1\":{\"556\":1,\"1049\":1,\"1057\":1}}],[\"使用传统\",{\"1\":{\"545\":1}}],[\"使用最长递增子序列算法\",{\"1\":{\"524\":1}}],[\"使用最小堆的原因\",{\"1\":{\"391\":1}}],[\"使用即可\",{\"1\":{\"519\":1}}],[\"使用方式相比\",{\"1\":{\"919\":1}}],[\"使用方式的一种变种\",{\"1\":{\"919\":1}}],[\"使用方式\",{\"0\":{\"504\":1}}],[\"使用插件\",{\"1\":{\"500\":1}}],[\"使用组件标签\",{\"1\":{\"490\":1}}],[\"使用组件实现静态页面效果\",{\"1\":{\"132\":1}}],[\"使用事件的捕获模式\",{\"1\":{\"471\":1}}],[\"使用过滤器\",{\"1\":{\"466\":1}}],[\"使用占位符声明接收params参数\",{\"1\":{\"430\":1}}],[\"使用显式\",{\"1\":{\"220\":1}}],[\"使用时\",{\"1\":{\"417\":1}}],[\"使用时需要考虑组件的复用性\",{\"1\":{\"210\":1}}],[\"使用时机与考虑\",{\"0\":{\"210\":1}}],[\"使用规则\",{\"0\":{\"178\":1}}],[\"使用脚手架开发项目的特点\",{\"1\":{\"136\":1}}],[\"使用immer\",{\"1\":{\"103\":1}}],[\"使用react\",{\"1\":{\"99\":1}}],[\"使用虚拟dom\",{\"1\":{\"82\":1}}],[\"使用\",{\"0\":{\"527\":1,\"528\":1,\"815\":1},\"1\":{\"3\":2,\"26\":1,\"137\":1,\"139\":1,\"149\":1,\"161\":1,\"204\":1,\"242\":1,\"365\":1,\"426\":1,\"430\":1,\"451\":1,\"457\":1,\"461\":1,\"470\":1,\"474\":1,\"487\":1,\"515\":1,\"524\":1,\"568\":1,\"583\":3,\"585\":2,\"591\":2,\"639\":1,\"709\":1,\"732\":1,\"743\":1,\"811\":2,\"822\":1,\"831\":1,\"841\":1,\"864\":1,\"882\":1,\"883\":1,\"884\":1,\"885\":1,\"924\":1,\"964\":1,\"971\":1,\"1020\":1,\"1025\":1,\"1052\":1,\"1094\":1,\"1124\":2,\"1129\":1,\"1130\":1,\"1148\":1,\"1172\":1,\"1243\":1,\"1349\":1,\"1350\":1,\"1360\":1,\"1364\":1,\"1381\":1,\"1382\":1,\"1405\":1,\"1407\":2}}],[\"调试\",{\"1\":{\"1155\":1}}],[\"调试工具\",{\"0\":{\"940\":1},\"1\":{\"1155\":1}}],[\"调试方便\",{\"1\":{\"450\":1}}],[\"调取客户端实例来查询缓存\",{\"1\":{\"836\":1}}],[\"调整开始标签正则判断内部语句\",{\"1\":{\"662\":1}}],[\"调度更新逻辑\",{\"1\":{\"338\":1,\"373\":1}}],[\"调用方式\",{\"0\":{\"1445\":1},\"1\":{\"1446\":1}}],[\"调用对象自身的\",{\"1\":{\"1413\":1}}],[\"调用对应的阶段函数进行迭代\",{\"1\":{\"692\":1}}],[\"调用完毕后转为基本数据类型\",{\"1\":{\"1371\":1}}],[\"调用完毕后跳转页面\",{\"1\":{\"1065\":1}}],[\"调用报错\",{\"1\":{\"1141\":1}}],[\"调用error\",{\"1\":{\"1013\":2}}],[\"调用executor函数\",{\"1\":{\"72\":1}}],[\"调用该\",{\"1\":{\"841\":1}}],[\"调用该方法时删除对应事件对象中的id\",{\"1\":{\"116\":1}}],[\"调用同步方法改变model中的数据\",{\"1\":{\"823\":1}}],[\"调用路由拦截\",{\"1\":{\"738\":1}}],[\"调用渲染\",{\"1\":{\"653\":1}}],[\"调用rendertemplate函数\",{\"1\":{\"653\":1}}],[\"调用parsetemplatetotokens函数\",{\"1\":{\"653\":1}}],[\"调用definecomputed函数\",{\"1\":{\"636\":1}}],[\"调用dep\",{\"1\":{\"635\":1}}],[\"调用这个方法\",{\"1\":{\"1171\":1}}],[\"调用这个\",{\"1\":{\"635\":1}}],[\"调用一个元素的\",{\"1\":{\"1141\":1}}],[\"调用一个initcomputed初始化\",{\"1\":{\"636\":1}}],[\"调用一个initwatch初始化\",{\"1\":{\"628\":1}}],[\"调用一次响应式\",{\"1\":{\"632\":1}}],[\"调用一次get\",{\"1\":{\"626\":1}}],[\"调用一次\",{\"1\":{\"451\":1}}],[\"调用createcomputedgetter\",{\"1\":{\"633\":1}}],[\"调用createwatcher解构\",{\"1\":{\"625\":1}}],[\"调用createref创建一个react\",{\"1\":{\"237\":1}}],[\"调用回调函数\",{\"1\":{\"609\":1,\"616\":1}}],[\"调用关系\",{\"1\":{\"604\":2}}],[\"调用父组件的方法\",{\"1\":{\"516\":1}}],[\"调用第一个子组件的方法\",{\"1\":{\"516\":1}}],[\"调用几次\",{\"1\":{\"450\":1}}],[\"调用函数时创建函数作用域\",{\"1\":{\"1350\":1}}],[\"调用函数时解析器不会检查实参类型\",{\"1\":{\"1344\":1}}],[\"调用函数\",{\"1\":{\"450\":1}}],[\"调用属性\",{\"1\":{\"450\":1}}],[\"调用setnumber的时候传入的是老状态\",{\"1\":{\"333\":1}}],[\"调用浏览器\",{\"1\":{\"272\":1}}],[\"调用转换方法jsxs\",{\"1\":{\"249\":1}}],[\"调用正确的\",{\"1\":{\"197\":1}}],[\"调用的时候使用\",{\"1\":{\"1013\":1}}],[\"调用的时机\",{\"1\":{\"165\":1}}],[\"调用的返回值依然是一个函数\",{\"1\":{\"159\":1}}],[\"调用\",{\"1\":{\"134\":1,\"156\":1,\"234\":1,\"323\":2,\"429\":1,\"430\":1,\"623\":1,\"633\":1,\"667\":1,\"698\":1,\"809\":1,\"827\":1,\"840\":1,\"841\":1,\"843\":1,\"863\":1,\"1170\":1,\"1410\":1,\"1411\":1}}],[\"调用生成新的\",{\"1\":{\"92\":1}}],[\"调用了全局变量\",{\"1\":{\"1012\":1}}],[\"调用了局部变量\",{\"1\":{\"1012\":1}}],[\"调用了实例的\",{\"1\":{\"608\":1}}],[\"调用了子组件的方法\",{\"1\":{\"513\":1}}],[\"调用了\",{\"1\":{\"71\":1}}],[\"调用执行器参数函数\",{\"1\":{\"71\":1}}],[\"调适配器\",{\"1\":{\"68\":1}}],[\"指继承父类的子类将父类的同名方法重写为子类独有方法\",{\"1\":{\"1433\":1}}],[\"指要检测的属性名\",{\"1\":{\"1402\":1}}],[\"指字符串中最后一个字符\",{\"1\":{\"1376\":2}}],[\"指字符串的最后一个字符\",{\"1\":{\"1376\":1}}],[\"指倒数第二个字符\",{\"1\":{\"1376\":2}}],[\"指数操作符\",{\"0\":{\"1194\":1}}],[\"指表格是数据\",{\"1\":{\"1048\":1}}],[\"指并发执行查询\",{\"1\":{\"831\":1}}],[\"指示输入字段的值是必需的\",{\"1\":{\"1019\":1}}],[\"指示字段的值初始化后无法被修改\",{\"1\":{\"1019\":1}}],[\"指示\",{\"1\":{\"770\":1,\"771\":1}}],[\"指的是与数值\",{\"1\":{\"1415\":1}}],[\"指的是\",{\"1\":{\"816\":1}}],[\"指的是视图层发起的一个操作\",{\"1\":{\"747\":1}}],[\"指的是data对象中的属性\",{\"1\":{\"657\":1}}],[\"指回原结果数组\",{\"1\":{\"656\":1}}],[\"指针一直往后移动\",{\"1\":{\"1173\":1}}],[\"指针自动指向数据结构的第一个成员\",{\"1\":{\"1173\":1}}],[\"指针\",{\"1\":{\"661\":1,\"1396\":1,\"1423\":1}}],[\"指针遍历内容进行扫描\",{\"1\":{\"646\":1,\"655\":1}}],[\"指针位置\",{\"1\":{\"646\":1,\"655\":1}}],[\"指令等\",{\"1\":{\"702\":1}}],[\"指令等等\",{\"1\":{\"481\":1}}],[\"指令都是v\",{\"1\":{\"695\":1}}],[\"指令定义时不加\",{\"1\":{\"475\":1}}],[\"指令名如果是多个单词\",{\"1\":{\"475\":1}}],[\"指令名\",{\"1\":{\"475\":2}}],[\"指令明\",{\"1\":{\"475\":1}}],[\"指令所在模板结构重新解析时调用\",{\"1\":{\"475\":1}}],[\"指令所在模板被重新解析时触发\",{\"1\":{\"475\":1}}],[\"指令所在元素被插入页面时调用\",{\"1\":{\"475\":1}}],[\"指令所在元素被插入页面时\",{\"1\":{\"475\":1}}],[\"指令所在的模板被重新解析时\",{\"1\":{\"475\":1}}],[\"指令与元素成功绑定时调用\",{\"1\":{\"475\":1}}],[\"指令与元素成功绑定时\",{\"1\":{\"475\":1}}],[\"指令的一部分\",{\"1\":{\"473\":1}}],[\"指令语法\",{\"0\":{\"444\":1}}],[\"指令\",{\"0\":{\"473\":1},\"1\":{\"137\":2,\"442\":1,\"522\":1}}],[\"指向类本身\",{\"1\":{\"1435\":1}}],[\"指向子类的实例\",{\"1\":{\"1434\":1}}],[\"指向比较灵活\",{\"1\":{\"1423\":1}}],[\"指向作用域\",{\"1\":{\"1423\":1}}],[\"指向当前数据结构的起始位置\",{\"1\":{\"1173\":1}}],[\"指向当前的\",{\"1\":{\"71\":1}}],[\"指向全局唯一的\",{\"1\":{\"830\":1}}],[\"指向的是一个对象\",{\"1\":{\"1446\":1}}],[\"指向的\",{\"1\":{\"1442\":1}}],[\"指向的字符串\",{\"1\":{\"1222\":1}}],[\"指向的节点\",{\"1\":{\"680\":1}}],[\"指向的组件如this\",{\"1\":{\"153\":1}}],[\"指向最终返回的数组\",{\"1\":{\"648\":1}}],[\"指向移出完后的栈顶\",{\"1\":{\"648\":1}}],[\"指向新的\",{\"1\":{\"648\":1}}],[\"指向这个\",{\"1\":{\"648\":1}}],[\"指向\",{\"0\":{\"1446\":1,\"1447\":1},\"1\":{\"621\":1,\"1423\":1,\"1439\":1,\"1446\":1,\"1448\":1,\"1449\":1,\"1450\":1,\"1451\":5}}],[\"指向第三个参数\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"指向第一个更新\",{\"1\":{\"272\":1,\"323\":1}}],[\"指向第一个子节点\",{\"1\":{\"270\":1,\"272\":1}}],[\"指向插入的新项\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"指向该内部值\",{\"1\":{\"586\":1}}],[\"指向是\",{\"1\":{\"470\":1}}],[\"指向弟节点\",{\"1\":{\"270\":1,\"272\":1}}],[\"指向父节点\",{\"1\":{\"270\":1,\"272\":1}}],[\"指向已挂载到\",{\"1\":{\"189\":1}}],[\"指向为空\",{\"1\":{\"153\":1}}],[\"指向存在学习门槛\",{\"1\":{\"89\":1}}],[\"指定执行匹配不必满足的条件\",{\"1\":{\"1389\":1}}],[\"指定执行匹配必须满足的条件\",{\"1\":{\"1388\":1}}],[\"指定接下来的字符都不必被匹配\",{\"1\":{\"1389\":1}}],[\"指定只有在\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"指定匹配模式后面的字符必须被匹配\",{\"1\":{\"1388\":1}}],[\"指定开始查找的位置\",{\"1\":{\"1365\":1,\"1375\":1}}],[\"指定数字进制\",{\"1\":{\"1252\":1}}],[\"指定清除字符串左侧\",{\"1\":{\"1220\":1}}],[\"指定了如果内容溢出了一个元素的框\",{\"1\":{\"914\":1}}],[\"指定文本的第一行缩进\",{\"1\":{\"892\":1}}],[\"指定整个页面文字的大小\",{\"1\":{\"883\":1}}],[\"指定的毫秒时间之后\",{\"1\":{\"843\":1}}],[\"指定路径\",{\"1\":{\"719\":1}}],[\"指定复杂类型\",{\"1\":{\"586\":1}}],[\"指定名称\",{\"1\":{\"498\":1}}],[\"指定名称和类型\",{\"1\":{\"498\":1}}],[\"指定次数\",{\"1\":{\"460\":1}}],[\"指定展示位置\",{\"1\":{\"424\":1}}],[\"指定新fiber的存放位置\",{\"1\":{\"361\":1}}],[\"指定新fiber的位置\",{\"1\":{\"357\":1,\"361\":1}}],[\"指定为\",{\"1\":{\"237\":1}}],[\"指定\",{\"1\":{\"237\":1,\"839\":1}}],[\"指定用于取消请求的\",{\"1\":{\"64\":1}}],[\"指定请求超时的毫秒数\",{\"1\":{\"48\":1}}],[\"值和初始化参数改造的原函数拷贝\",{\"1\":{\"1450\":1}}],[\"值和值之间没有任何联系\",{\"1\":{\"1338\":1}}],[\"值类型和引用类型\",{\"0\":{\"1394\":1}}],[\"值类型监听判断函数\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"值如果是数字可以不用跟单位和引号\",{\"1\":{\"1295\":1}}],[\"值可以由程序创建\",{\"1\":{\"1170\":1}}],[\"值不相等\",{\"1\":{\"1183\":1}}],[\"值不能与其他数据进行运算\",{\"1\":{\"1168\":1}}],[\"值不能修改\",{\"1\":{\"1159\":1}}],[\"值不会带给服务器\",{\"1\":{\"439\":1}}],[\"值不会包含在\",{\"1\":{\"439\":1}}],[\"值的个数\",{\"1\":{\"969\":1}}],[\"值的键\",{\"1\":{\"472\":1}}],[\"值画菱形边框\",{\"1\":{\"909\":1}}],[\"值画\",{\"1\":{\"909\":3}}],[\"值无关\",{\"1\":{\"909\":1}}],[\"值作为判断标准\",{\"1\":{\"702\":1}}],[\"值进行地毯式循环+递归查询\",{\"1\":{\"628\":1}}],[\"值进行渲染\",{\"1\":{\"215\":1}}],[\"值递归式查找其内部嵌套的全部\",{\"1\":{\"626\":1}}],[\"值在模板中使用的时候会自动解包\",{\"1\":{\"586\":1}}],[\"值指向另一个对象中的某个属性\",{\"1\":{\"553\":1}}],[\"值为对象\",{\"1\":{\"535\":2}}],[\"值为一个函数\",{\"1\":{\"534\":1}}],[\"值为一个对象\",{\"1\":{\"410\":1,\"412\":1}}],[\"值去绑定\",{\"1\":{\"472\":1}}],[\"值通常为\",{\"1\":{\"443\":1}}],[\"值\",{\"1\":{\"439\":2,\"455\":1,\"463\":2,\"464\":2,\"587\":1,\"636\":2,\"681\":1,\"727\":2,\"811\":2,\"886\":1,\"894\":1,\"895\":1,\"896\":1,\"897\":1,\"898\":1,\"899\":1,\"900\":1,\"908\":1,\"909\":1,\"912\":1,\"913\":1,\"924\":1,\"966\":2,\"971\":1,\"989\":1,\"1021\":1,\"1171\":1,\"1206\":1,\"1231\":1,\"1369\":1,\"1448\":1,\"1450\":1}}],[\"值是否可重写\",{\"1\":{\"1407\":1}}],[\"值是否相同\",{\"1\":{\"676\":1}}],[\"值是唯一的\",{\"1\":{\"1168\":1}}],[\"值是一个对象\",{\"1\":{\"411\":1}}],[\"值是对象\",{\"1\":{\"142\":1}}],[\"值发生变化时\",{\"1\":{\"213\":1}}],[\"值由上层组件中距离当前组件最近\",{\"1\":{\"192\":1}}],[\"值返回给\",{\"1\":{\"71\":1}}],[\"值设置\",{\"1\":{\"55\":1}}],[\"同方法名\",{\"1\":{\"1180\":1}}],[\"同一级路径\",{\"1\":{\"1045\":1}}],[\"同一节点的更新策略\",{\"0\":{\"676\":1,\"683\":1}}],[\"同理\",{\"1\":{\"299\":1,\"703\":1,\"960\":1,\"1057\":1}}],[\"同样的\",{\"1\":{\"1235\":1}}],[\"同样影响盒子实际大小\",{\"1\":{\"969\":1}}],[\"同样围绕模板字符串的循环遍历\",{\"1\":{\"661\":1}}],[\"同样在\",{\"1\":{\"634\":1}}],[\"同样\",{\"1\":{\"625\":1}}],[\"同样包含父节点中所有数据和方法等\",{\"1\":{\"516\":1}}],[\"同样有三种写法\",{\"1\":{\"455\":1}}],[\"同样地需要根据是否首次执行来动态切换\",{\"1\":{\"339\":1}}],[\"同样也是\",{\"1\":{\"273\":1}}],[\"同样利用了\",{\"1\":{\"201\":1}}],[\"同步任务\",{\"1\":{\"1076\":1}}],[\"同步和异步\",{\"0\":{\"1076\":1}}],[\"同步方法名\",{\"1\":{\"823\":1}}],[\"同步方法\",{\"1\":{\"823\":1}}],[\"同步的方式来写异步代码\",{\"1\":{\"777\":1}}],[\"同步代码执行完毕\",{\"1\":{\"505\":1}}],[\"同步执行layouteffect\",{\"1\":{\"384\":1,\"396\":1}}],[\"同步工作单元中的props\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"同步刷新的数据\",{\"1\":{\"210\":1}}],[\"同步触发渲染\",{\"1\":{\"187\":1}}],[\"同名元素\",{\"1\":{\"123\":2}}],[\"同名标签转换为\",{\"1\":{\"123\":1}}],[\"同时存在\",{\"1\":{\"1410\":1,\"1411\":1}}],[\"同时还抽出每个变量及其值\",{\"1\":{\"1390\":1}}],[\"同时解析器也不会检查实参的数量\",{\"1\":{\"1344\":1}}],[\"同时为对象也提供了像数组一样的扩展运算符\",{\"1\":{\"1214\":1}}],[\"同时为他们定义相同的样式\",{\"1\":{\"872\":1}}],[\"同时清除左右两侧浮动的影响\",{\"1\":{\"984\":1}}],[\"同时全元素尺寸属性通过\",{\"1\":{\"966\":1}}],[\"同时具有块元素和行内元素的特点\",{\"1\":{\"878\":1}}],[\"同时一个名字也可以被多个人使用\",{\"1\":{\"863\":1}}],[\"同时调度垃圾回收机制\",{\"1\":{\"842\":1}}],[\"同时调用\",{\"1\":{\"71\":1}}],[\"同时正处于请求网络中\",{\"1\":{\"840\":1}}],[\"同时在\",{\"1\":{\"700\":1}}],[\"同时标签堆栈\",{\"1\":{\"661\":1}}],[\"同时\",{\"1\":{\"580\":1,\"600\":1,\"1390\":1}}],[\"同时也可以读取\",{\"1\":{\"1312\":1}}],[\"同时也是网页中的全局对象\",{\"1\":{\"1061\":1}}],[\"同时也能让我们的代码更加规范化\",{\"1\":{\"764\":2}}],[\"同时也不再支持\",{\"1\":{\"563\":1}}],[\"同时也接收一个新的用于\",{\"1\":{\"234\":1}}],[\"同时设置的派发函数\",{\"1\":{\"339\":1}}],[\"同时启动\",{\"1\":{\"272\":1}}],[\"同时被包装组件也不需要关心数据何处而来\",{\"1\":{\"234\":1}}],[\"同时通过state\",{\"1\":{\"103\":1}}],[\"同时声明\",{\"1\":{\"71\":1}}],[\"同源策略\",{\"0\":{\"24\":1},\"1\":{\"24\":1}}],[\"同源\",{\"1\":{\"5\":1,\"24\":1}}],[\"发起\",{\"1\":{\"748\":1}}],[\"发起ajax请求\",{\"1\":{\"69\":1}}],[\"发出\",{\"1\":{\"748\":1}}],[\"发出一个\",{\"1\":{\"742\":1}}],[\"发出用户的\",{\"1\":{\"742\":1}}],[\"发布数据变化的操作\",{\"1\":{\"621\":1}}],[\"发布初步实现\",{\"0\":{\"609\":1}}],[\"发布系统的具现化体现在\",{\"1\":{\"621\":1}}],[\"发布系统的核心是依赖收集与依赖更新\",{\"1\":{\"621\":1}}],[\"发布系统组成\",{\"1\":{\"620\":1}}],[\"发布系统\",{\"0\":{\"606\":1,\"621\":1},\"1\":{\"700\":1}}],[\"发布订阅模式\",{\"1\":{\"605\":1}}],[\"发布模式\",{\"1\":{\"605\":1}}],[\"发布模式图例\",{\"1\":{\"605\":1}}],[\"发布模式的依赖收集\",{\"0\":{\"605\":1}}],[\"发布方法\",{\"1\":{\"116\":1}}],[\"发现右侧没有样式引入\",{\"1\":{\"940\":1}}],[\"发现用户发出的\",{\"1\":{\"759\":1}}],[\"发现obj\",{\"1\":{\"604\":3}}],[\"发现组件是类定义组件\",{\"1\":{\"165\":1}}],[\"发现组件是使用类定义的\",{\"1\":{\"134\":1}}],[\"发生\",{\"1\":{\"676\":2}}],[\"发生变化时\",{\"1\":{\"712\":1}}],[\"发生变化\",{\"1\":{\"92\":1}}],[\"发生了变化\",{\"1\":{\"92\":1}}],[\"发送给port1\",{\"1\":{\"388\":1}}],[\"发送给port2\",{\"1\":{\"388\":1}}],[\"发送数据\",{\"1\":{\"388\":1}}],[\"发送网络请求\",{\"1\":{\"167\":1,\"479\":1}}],[\"发送事件\",{\"1\":{\"114\":1}}],[\"发送一个简单请求\",{\"1\":{\"70\":1}}],[\"发送请求模拟实现\",{\"0\":{\"69\":1}}],[\"发送请求工作原理\",{\"0\":{\"68\":1}}],[\"发送请求\",{\"0\":{\"30\":1}}],[\"发送\",{\"0\":{\"1207\":1},\"1\":{\"9\":1,\"69\":1,\"72\":1,\"173\":1,\"184\":1,\"482\":1,\"1066\":1}}],[\"被转换为十六进制数值后为\",{\"1\":{\"1381\":1}}],[\"被拖拽元素固定在当前位置\",{\"1\":{\"1138\":1}}],[\"被包围在\",{\"1\":{\"1020\":1}}],[\"被包装组件<wrappedcomponent>接收来自容器组件所有的\",{\"1\":{\"234\":1}}],[\"被很多选择器重复使用\",{\"1\":{\"1013\":1}}],[\"被观察者\",{\"1\":{\"795\":1}}],[\"被发起时\",{\"1\":{\"768\":1}}],[\"被赋予的新值\",{\"1\":{\"601\":1}}],[\"被访问和修改时通知变更\",{\"1\":{\"593\":1}}],[\"被解析之后执行\",{\"1\":{\"584\":1}}],[\"被修改时\",{\"1\":{\"505\":1}}],[\"被\",{\"1\":{\"505\":1,\"781\":1}}],[\"被dispatchrequest调用\",{\"1\":{\"69\":1}}],[\"被request调用\",{\"1\":{\"69\":1}}],[\"示例请求url地址\",{\"1\":{\"788\":1}}],[\"示例代码详见redux\",{\"1\":{\"753\":1}}],[\"示例代码\",{\"0\":{\"749\":1,\"760\":1},\"1\":{\"409\":1,\"410\":1,\"411\":1,\"412\":1,\"712\":1,\"964\":1,\"1019\":1,\"1020\":1}}],[\"示例\",{\"1\":{\"66\":1,\"239\":1,\"557\":1,\"560\":1,\"935\":1,\"971\":1,\"1381\":3,\"1382\":5,\"1383\":1,\"1384\":1,\"1385\":2,\"1390\":1,\"1391\":4}}],[\"拦截函数onroutebefore会传入到每一个路由容器<guard>中\",{\"1\":{\"739\":1}}],[\"拦截删除属性\",{\"1\":{\"549\":1}}],[\"拦截设置属性值或添加新属性\",{\"1\":{\"549\":1}}],[\"拦截读取属性值\",{\"1\":{\"549\":1}}],[\"拦截对象中任意属性的变化\",{\"1\":{\"549\":1}}],[\"拦截管理器构造函数\",{\"1\":{\"70\":1}}],[\"拦截器模拟实现\",{\"0\":{\"70\":1}}],[\"拦截器\",{\"0\":{\"66\":1}}],[\"拦截请求和响应\",{\"1\":{\"29\":1}}],[\"可覆盖\",{\"1\":{\"1411\":1}}],[\"可返回一个指定的字符串值最后出现的位置\",{\"1\":{\"1366\":1}}],[\"可读不可写\",{\"1\":{\"1325\":1}}],[\"可读性非常好\",{\"1\":{\"1047\":1}}],[\"可设置元素偏移\",{\"1\":{\"1325\":1}}],[\"可设置非标准属性\",{\"1\":{\"1096\":1}}],[\"可获取自定义属性\",{\"1\":{\"1311\":1}}],[\"可获取到用户的显示器相关信息\",{\"1\":{\"1068\":1}}],[\"可用参数\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"可用于在整个程序中重新获取数据\",{\"1\":{\"828\":1}}],[\"可迭代\",{\"1\":{\"1227\":1}}],[\"可通过\",{\"1\":{\"1140\":1}}],[\"可通过ref获取真实dom的需求\",{\"1\":{\"252\":1}}],[\"可传递伪元素\",{\"1\":{\"1106\":1}}],[\"可直接使用\",{\"1\":{\"1106\":1,\"1349\":1}}],[\"可有可无\",{\"1\":{\"1011\":1}}],[\"可编程功能不够\",{\"1\":{\"1006\":1}}],[\"可自动保存格式化代码\",{\"1\":{\"939\":1}}],[\"可生成\",{\"1\":{\"938\":2}}],[\"可添加下划线\",{\"1\":{\"891\":1}}],[\"可利用浮动完成\",{\"1\":{\"976\":1}}],[\"可利用同步的方式处理异步逻辑\",{\"1\":{\"779\":1}}],[\"可利用该指令跳过没有使用指令语法\",{\"1\":{\"474\":1}}],[\"可选链操作符\",{\"0\":{\"1228\":1},\"1\":{\"1228\":1}}],[\"可选\",{\"1\":{\"912\":4,\"913\":2,\"1376\":3}}],[\"可选属性\",{\"1\":{\"747\":1}}],[\"可选key\",{\"1\":{\"252\":1}}],[\"可实现导航的\",{\"1\":{\"714\":1}}],[\"可乐\",{\"1\":{\"666\":1,\"670\":2}}],[\"可将cache设置为false\",{\"1\":{\"633\":1}}],[\"可运行项目\",{\"1\":{\"621\":1,\"628\":1,\"636\":1,\"658\":1,\"663\":1,\"692\":1}}],[\"可枚举\",{\"1\":{\"601\":1,\"602\":2,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"可插入三个函数方法\",{\"1\":{\"475\":1}}],[\"可遍历\",{\"1\":{\"460\":1,\"604\":1}}],[\"可配置高亮样式\",{\"1\":{\"424\":1}}],[\"可能值\",{\"1\":{\"1099\":1}}],[\"可能会得到错误结果\",{\"1\":{\"1364\":1}}],[\"可能会获取到空白文本\",{\"1\":{\"1088\":1}}],[\"可能会出现盒子重叠的情况\",{\"1\":{\"996\":1}}],[\"可能会出现外边距合并或塌陷\",{\"1\":{\"971\":1}}],[\"可能会引发的问题\",{\"1\":{\"161\":1,\"461\":1}}],[\"可能在旧节点之前\",{\"1\":{\"676\":1}}],[\"可能存在的\",{\"1\":{\"636\":1}}],[\"可能遇到的报错\",{\"0\":{\"589\":1}}],[\"可能是\",{\"1\":{\"422\":1}}],[\"可越过\",{\"1\":{\"411\":1}}],[\"可在函数组件中使用\",{\"1\":{\"176\":1}}],[\"可视区域就是浏览器的视口大小\",{\"1\":{\"96\":1}}],[\"可视区域\",{\"1\":{\"96\":1,\"1001\":1}}],[\"可视区域渲染\",{\"1\":{\"96\":1}}],[\"可滚动区域当前具体高度值一般通过滚动容器元素的\",{\"1\":{\"96\":1}}],[\"可滚动区域\",{\"1\":{\"96\":1}}],[\"可借助于\",{\"1\":{\"65\":1}}],[\"可以改变函数内部\",{\"1\":{\"1451\":1}}],[\"可以改成其他端口\",{\"1\":{\"28\":1}}],[\"可以调用父类的构造函数也可以调用普通函数\",{\"1\":{\"1432\":1}}],[\"可以调用组件内部的methods或data属性等\",{\"1\":{\"497\":1}}],[\"可以监听属性值的改变\",{\"1\":{\"1407\":1}}],[\"可以监视对象内部值改变\",{\"1\":{\"451\":1}}],[\"可以不暴露组件内部属性名\",{\"1\":{\"1407\":1}}],[\"可以禁止反向引用\",{\"1\":{\"1392\":1}}],[\"可以设计\",{\"1\":{\"1384\":5}}],[\"可以设置\",{\"1\":{\"950\":1}}],[\"可以设置溢出后\",{\"1\":{\"897\":1}}],[\"可以设置宽度高度\",{\"1\":{\"878\":1}}],[\"可以定义多重选择模式\",{\"1\":{\"1383\":1}}],[\"可以定义共享的数据源\",{\"1\":{\"519\":1}}],[\"可以仅指定开头和结尾字符\",{\"1\":{\"1382\":1}}],[\"可以指定第二个参数\",{\"1\":{\"1365\":1,\"1375\":1}}],[\"可以连接两个或多个数组\",{\"1\":{\"1361\":1}}],[\"可以删除数组的第一个元素\",{\"1\":{\"1358\":1}}],[\"可以同时存在\",{\"1\":{\"1333\":1}}],[\"可以同时为一个元素的相同事件同时绑定多个响应函数\",{\"1\":{\"1130\":1}}],[\"可以利用定时器自动触发右侧按钮点击事件\",{\"1\":{\"1330\":1}}],[\"可以绑定多个事件\",{\"1\":{\"1328\":1}}],[\"可以遍历数组\",{\"1\":{\"1319\":1}}],[\"可以操作类样式\",{\"1\":{\"1297\":1}}],[\"可以确保代码执行时所有\",{\"1\":{\"1119\":1}}],[\"可以得到任意样式表中的样式值\",{\"1\":{\"1108\":1}}],[\"可以接收任意参数\",{\"1\":{\"1063\":1}}],[\"可以使我们通过\",{\"1\":{\"1059\":1}}],[\"可以使用$开头\",{\"1\":{\"1011\":1}}],[\"可以使用方位名词或精确单位\",{\"1\":{\"905\":1}}],[\"可以使用接口就尽量使用接口\",{\"1\":{\"580\":1}}],[\"可以使用name配置项指定组件在开发者工具中呈现的名字\",{\"1\":{\"488\":1}}],[\"可以使用按键原始的\",{\"1\":{\"472\":1}}],[\"可以使用react\",{\"1\":{\"248\":1}}],[\"可以使用\",{\"1\":{\"98\":1,\"758\":1,\"996\":1,\"1274\":1,\"1293\":1,\"1329\":1,\"1404\":1}}],[\"可以容纳所有元素\",{\"1\":{\"1052\":1}}],[\"可以快速定位到页面中的某个位置\",{\"1\":{\"1043\":1}}],[\"可以创建健壮的\",{\"1\":{\"1007\":1}}],[\"可以严格按照\",{\"1\":{\"1005\":1}}],[\"可以放到父盒子里面任何一个地方\",{\"1\":{\"997\":1}}],[\"可以放在任何一个需要值的地方\",{\"1\":{\"124\":1}}],[\"可以针对不同的屏幕尺寸设置不同的样式\",{\"1\":{\"964\":1}}],[\"可以针对不同的媒体类型定义不同的样式\",{\"1\":{\"964\":1}}],[\"可以整体控制\",{\"1\":{\"963\":1}}],[\"可以打开移动端\",{\"1\":{\"957\":1}}],[\"可以打开控制台查看按钮点击后的结果\",{\"1\":{\"262\":1}}],[\"可以很容易分辨这个\",{\"1\":{\"919\":1}}],[\"可以做很多的网页特效\",{\"1\":{\"914\":1}}],[\"可以跟四个值\",{\"1\":{\"911\":1}}],[\"可以给动态生成的元素绑定事件\",{\"1\":{\"1328\":1}}],[\"可以给父级添加\",{\"1\":{\"985\":1}}],[\"可以给页面元素添加背景样式\",{\"1\":{\"901\":1}}],[\"可以给\",{\"1\":{\"883\":1}}],[\"可以这是宽度高度\",{\"1\":{\"878\":1}}],[\"可以方便控制整个页面中的元素样式设置\",{\"1\":{\"866\":1}}],[\"可以根据需求选择\",{\"1\":{\"864\":2}}],[\"可以选择父元素里面的子元素\",{\"1\":{\"870\":1}}],[\"可以选择为查询配置重新设置时间间隔\",{\"1\":{\"836\":1}}],[\"可以选出\",{\"1\":{\"864\":1}}],[\"可以选出所有相同的标签\",{\"1\":{\"864\":1}}],[\"可以实例化一个\",{\"1\":{\"843\":1}}],[\"可以实现将父组件传给子组件的数据为双向绑定\",{\"1\":{\"511\":1}}],[\"可以判断\",{\"1\":{\"842\":1}}],[\"可以轻松管理客户端状态\",{\"1\":{\"825\":1}}],[\"可以多\",{\"1\":{\"793\":1}}],[\"可以取负值\",{\"1\":{\"1376\":1}}],[\"可以取消\",{\"1\":{\"1147\":1}}],[\"可以取消或延迟异步请求\",{\"1\":{\"758\":1}}],[\"可以取到最快完成的那个结果\",{\"1\":{\"770\":1}}],[\"可以进行取消关闭\",{\"1\":{\"769\":1}}],[\"可以用于删除数组中的指定元素\",{\"1\":{\"1360\":1}}],[\"可以用于集体声明\",{\"1\":{\"873\":1}}],[\"可以用没有大括号的方式书写\",{\"1\":{\"1010\":1}}],[\"可以用来对数组中的元素进行排序\",{\"1\":{\"1364\":1}}],[\"可以用来从数组提取指定元素\",{\"1\":{\"1359\":1}}],[\"可以用来获取当前元素的定位父元素\",{\"1\":{\"1108\":1}}],[\"可以用来调试\",{\"1\":{\"940\":1}}],[\"可以用来发起异步操作\",{\"1\":{\"765\":1}}],[\"可以用自增符号$\",{\"1\":{\"937\":1}}],[\"可以用>\",{\"1\":{\"937\":1}}],[\"可以用正则表达式实现\",{\"1\":{\"644\":1}}],[\"可以\",{\"1\":{\"739\":1,\"1231\":1}}],[\"可以生成数据完整且静态的\",{\"1\":{\"663\":1}}],[\"可以看成\",{\"1\":{\"843\":1}}],[\"可以看出\",{\"1\":{\"634\":1,\"676\":1}}],[\"可以看到\",{\"1\":{\"91\":1}}],[\"可以发现问题\",{\"1\":{\"634\":1}}],[\"可以被解析为数值\",{\"1\":{\"1413\":1}}],[\"可以被侦测\",{\"1\":{\"602\":1}}],[\"可以被配置\",{\"1\":{\"601\":1,\"602\":2,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"可以重复定义\",{\"1\":{\"580\":1}}],[\"可以访问到\",{\"1\":{\"534\":1,\"1456\":1}}],[\"可以更好的支持\",{\"1\":{\"524\":1}}],[\"可以拿到\",{\"1\":{\"521\":1}}],[\"可以拿到父组件传来的数据\",{\"1\":{\"515\":1}}],[\"可以父子通信\",{\"1\":{\"518\":1}}],[\"可以触发parent组件中的eventhandler函数\",{\"1\":{\"515\":2}}],[\"可以传参数\",{\"1\":{\"514\":1}}],[\"可以传送子元素到\",{\"1\":{\"223\":1}}],[\"可以帮我们实现父组件向子组件传递的数据\",{\"1\":{\"512\":1}}],[\"可以修改事件名\",{\"1\":{\"511\":1}}],[\"可以限定接收的数据类型\",{\"1\":{\"510\":1}}],[\"可以配置\",{\"1\":{\"582\":1}}],[\"可以配置多个代理\",{\"1\":{\"495\":1}}],[\"可以配置组件结构\",{\"1\":{\"487\":1}}],[\"可以解决网速慢时页面展示出\",{\"1\":{\"474\":1}}],[\"可以省略\",{\"1\":{\"474\":1}}],[\"可以识别\",{\"1\":{\"474\":1}}],[\"可以搭配<template>标签使用\",{\"1\":{\"457\":1}}],[\"可以和\",{\"1\":{\"457\":1}}],[\"可以异步操作\",{\"1\":{\"452\":1}}],[\"可以在字符串对象的\",{\"1\":{\"1391\":1}}],[\"可以在任何元素节点下创建\",{\"1\":{\"1094\":1}}],[\"可以在页面中直接使用\",{\"1\":{\"1084\":1}}],[\"可以在\",{\"1\":{\"1013\":1}}],[\"可以在浏览器页面滚动时元素的位置不会改变\",{\"1\":{\"994\":1}}],[\"可以在调用\",{\"1\":{\"586\":1}}],[\"可以在跳转的时候对\",{\"1\":{\"430\":1}}],[\"可以在无需修改组件结构的情况下复用状态逻辑\",{\"1\":{\"177\":1}}],[\"可以包含异步代码\",{\"1\":{\"410\":1}}],[\"可以包含多个\",{\"1\":{\"142\":1}}],[\"可以把\",{\"1\":{\"750\":1}}],[\"可以把此任务弹出\",{\"1\":{\"395\":1}}],[\"可以把useeffect\",{\"1\":{\"186\":1}}],[\"可以通过元素节点来获取指定的属性节点\",{\"1\":{\"1083\":1}}],[\"可以通过window对象来使用\",{\"1\":{\"1069\":1}}],[\"可以通过该对象操作浏览器的历史记录\",{\"1\":{\"1067\":1}}],[\"可以通过闭包存储\",{\"1\":{\"601\":1}}],[\"可以通过组件的$router\",{\"1\":{\"425\":1}}],[\"可以通过\",{\"1\":{\"354\":1,\"479\":1,\"840\":2,\"1115\":1,\"1231\":1}}],[\"可以通过这种方法获取\",{\"1\":{\"139\":1}}],[\"可以理解为类选择永远大于元素选择器\",{\"1\":{\"932\":1}}],[\"可以理解为给这个标签起了一个名字来表示\",{\"1\":{\"862\":1}}],[\"可以理解为异步请求防抖\",{\"1\":{\"763\":1}}],[\"可以理解为\",{\"1\":{\"332\":1}}],[\"可以直接在对象下设置到对应属性\",{\"1\":{\"1407\":1}}],[\"可以直接在对象下读取到对应属性\",{\"1\":{\"1407\":1}}],[\"可以直接在定义的字符模式中包含反向引用\",{\"1\":{\"1391\":1}}],[\"可以直接进行计算\",{\"1\":{\"1111\":1}}],[\"可以直接设置高度和宽度\",{\"1\":{\"998\":1}}],[\"可以直接通过\",{\"1\":{\"639\":1}}],[\"可以直接拿到子组件中所有数据和方法等\",{\"1\":{\"516\":1}}],[\"可以直接简写\",{\"1\":{\"451\":1}}],[\"可以直接根据虚拟dom创建新的fiber节点\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"可以直接运行一个简单效果\",{\"1\":{\"136\":1}}],[\"可以让页面结构更清晰\",{\"1\":{\"1034\":1}}],[\"可以让多个盒子前后叠压来显示\",{\"1\":{\"1002\":1}}],[\"可以让多个块级元素一行显示或者左右对齐盒子\",{\"1\":{\"1002\":1}}],[\"可以让盒子上下排列或左右排列\",{\"1\":{\"1002\":1}}],[\"可以让一个类去实现接口\",{\"1\":{\"580\":1}}],[\"可以让我们指定想要提供给后代组件的数据或方法\",{\"1\":{\"517\":1}}],[\"可以让浏览器及时地响应用户的交互\",{\"1\":{\"263\":1}}],[\"可以让你在使用\",{\"1\":{\"191\":1}}],[\"可以声明一个函数后在绑定给\",{\"1\":{\"231\":1}}],[\"可以将这些对象共有的属性和方法\",{\"1\":{\"1438\":1}}],[\"可以将要添加的元素作为方法的参数传递\",{\"1\":{\"1355\":1}}],[\"可以将\",{\"1\":{\"1217\":1}}],[\"可以将表格分割为表格头部和表格主体两大部分\",{\"1\":{\"1049\":1}}],[\"可以将整个网页分为若干个段落\",{\"1\":{\"1036\":1}}],[\"可以将一部分样式抽出\",{\"1\":{\"1013\":1}}],[\"可以将子节点渲染到父组件之外的\",{\"1\":{\"221\":1}}],[\"可以将组件中相互关联的部分拆分成更小的函数\",{\"1\":{\"177\":1}}],[\"可以减少\",{\"1\":{\"218\":1}}],[\"可以获取垂直滚动条滚动的距离\",{\"1\":{\"1114\":1}}],[\"可以获取水平滚动条滚动的距离\",{\"1\":{\"1114\":1}}],[\"可以获取元素整个滚动区域的宽度和高度\",{\"1\":{\"1113\":1}}],[\"可以获取到元素内部\",{\"1\":{\"1085\":1}}],[\"可以获取\",{\"1\":{\"199\":1}}],[\"可以执行收尾工作\",{\"1\":{\"185\":1}}],[\"可以借助\",{\"1\":{\"139\":1}}],[\"可以是对象也可以是函数\",{\"1\":{\"1345\":1}}],[\"可以是对象\",{\"1\":{\"1344\":1}}],[\"可以是负数\",{\"1\":{\"924\":1}}],[\"可以是子孙后代\",{\"1\":{\"873\":1}}],[\"可以是任意基础选择器\",{\"1\":{\"870\":1}}],[\"可以是相对路径\",{\"1\":{\"868\":1}}],[\"可以是字符串\",{\"1\":{\"830\":1}}],[\"可以是函数类型\",{\"1\":{\"625\":1}}],[\"可以是\",{\"1\":{\"52\":1,\"966\":1}}],[\"可以无需刷新页面与服务器端进行通信\",{\"1\":{\"4\":1}}],[\"创建构造函数时\",{\"1\":{\"1438\":1}}],[\"创建类\",{\"1\":{\"1431\":1}}],[\"创建执行上下文\",{\"1\":{\"1429\":1}}],[\"创建阶段\",{\"1\":{\"1426\":1}}],[\"创建作用域链\",{\"1\":{\"1423\":1,\"1426\":1}}],[\"创建变量对象\",{\"1\":{\"1423\":1,\"1426\":1}}],[\"创建元素\",{\"0\":{\"1320\":1}}],[\"创建元素节点\",{\"1\":{\"1094\":1}}],[\"创建当前对象的键值对数组\",{\"1\":{\"1210\":1}}],[\"创建衍生对象时\",{\"1\":{\"1171\":1}}],[\"创建以键名为导向的\",{\"1\":{\"1169\":1}}],[\"创建多个元素效率稍低一点\",{\"1\":{\"1095\":1}}],[\"创建多个元素效率更高\",{\"1\":{\"1095\":1}}],[\"创建文本节点\",{\"1\":{\"1094\":1}}],[\"创建属性节点\",{\"1\":{\"1094\":1}}],[\"创建model\",{\"1\":{\"823\":1}}],[\"创建应用\",{\"1\":{\"820\":1}}],[\"创建复杂的步骤进行了优化\",{\"1\":{\"817\":1}}],[\"创建entityadapter\",{\"1\":{\"816\":1}}],[\"创建记忆化selector\",{\"1\":{\"815\":1}}],[\"创建store\",{\"1\":{\"760\":1,\"773\":1}}],[\"创建dom上树\",{\"1\":{\"683\":1,\"690\":1}}],[\"创建生成新的\",{\"1\":{\"681\":1}}],[\"创建真正节点\",{\"1\":{\"675\":1,\"689\":1}}],[\"创建真实的dom节点\",{\"1\":{\"273\":2,\"320\":2,\"325\":2}}],[\"创建出patch函数\",{\"1\":{\"668\":1,\"669\":1}}],[\"创建虚拟节点\",{\"0\":{\"668\":1},\"1\":{\"668\":1,\"669\":1}}],[\"创建虚拟dom文本节点\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"创建computed的getter方法\",{\"1\":{\"633\":1,\"634\":1}}],[\"创建内部watcher\",{\"1\":{\"625\":1}}],[\"创建项目\",{\"0\":{\"570\":1}}],[\"创建项目并启动\",{\"0\":{\"137\":1}}],[\"创建工程\",{\"0\":{\"526\":1},\"1\":{\"529\":1,\"592\":1}}],[\"创建组件\",{\"1\":{\"487\":1}}],[\"创建步骤\",{\"1\":{\"487\":1,\"490\":1}}],[\"创建该\",{\"1\":{\"451\":1}}],[\"创建并默认暴露一个路由器\",{\"1\":{\"424\":1}}],[\"创建了一个通信的管道\",{\"1\":{\"388\":1}}],[\"创建了一个根节点处的\",{\"1\":{\"270\":1}}],[\"创建方法\",{\"1\":{\"373\":1}}],[\"创建基于优先级的监听函数回调\",{\"1\":{\"286\":1}}],[\"创建fiber节点\",{\"1\":{\"272\":1}}],[\"创建fiber树\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"创建完\",{\"1\":{\"608\":1}}],[\"创建完成子\",{\"1\":{\"272\":1}}],[\"创建完根节点\",{\"1\":{\"283\":1}}],[\"创建完根\",{\"1\":{\"271\":1}}],[\"创建后台进程节点\",{\"1\":{\"272\":1}}],[\"创建更新\",{\"1\":{\"271\":1,\"272\":1}}],[\"创建结果\",{\"1\":{\"269\":1}}],[\"创建的函数\",{\"1\":{\"1349\":1}}],[\"创建的函数作为\",{\"1\":{\"1349\":1}}],[\"创建的只读代理\",{\"1\":{\"558\":1}}],[\"创建的响应式代理\",{\"1\":{\"558\":1}}],[\"创建的\",{\"1\":{\"154\":1,\"628\":1}}],[\"创建的虚拟\",{\"1\":{\"126\":1}}],[\"创建的对象\",{\"0\":{\"75\":1}}],[\"创建唯一的symbol变量id\",{\"1\":{\"116\":1}}],[\"创建\",{\"0\":{\"527\":1,\"528\":1},\"1\":{\"71\":1,\"270\":1,\"527\":1,\"807\":1,\"811\":1,\"1423\":2,\"1426\":1}}],[\"创建axios函数\",{\"1\":{\"70\":1}}],[\"创建实例\",{\"1\":{\"70\":1}}],[\"创建实例对象\",{\"0\":{\"65\":1}}],[\"创建链条数组\",{\"1\":{\"70\":1}}],[\"创建一个name名为张三的构造函数man\",{\"1\":{\"1436\":1}}],[\"创建一个长度为\",{\"1\":{\"1353\":1}}],[\"创建一个单元素\",{\"1\":{\"1353\":1}}],[\"创建一个新数组\",{\"1\":{\"1198\":1}}],[\"创建一个新的更新队列\",{\"1\":{\"271\":1,\"272\":1}}],[\"创建一个新的\",{\"1\":{\"222\":1}}],[\"创建一个指针对象\",{\"1\":{\"1173\":1}}],[\"创建一个全局client实例\",{\"1\":{\"826\":1}}],[\"创建一个saga中间件\",{\"1\":{\"760\":1,\"773\":1}}],[\"创建一个实现了防抖效果的响应式数据\",{\"1\":{\"557\":1}}],[\"创建一个自定义的\",{\"1\":{\"557\":1}}],[\"创建一个方法\",{\"1\":{\"543\":1}}],[\"创建一个对象\",{\"1\":{\"543\":1}}],[\"创建一个包含响应式数据的引用对象\",{\"1\":{\"536\":1}}],[\"创建一个描述列表\",{\"1\":{\"220\":1}}],[\"创建一个\",{\"1\":{\"212\":1,\"553\":1,\"603\":1,\"769\":1,\"770\":1,\"771\":1,\"843\":1}}],[\"创建一个resolve返回的promise对象\",{\"1\":{\"70\":1}}],[\"创建一个成功的\",{\"1\":{\"68\":1}}],[\"创建拦截器中间件\",{\"1\":{\"68\":1}}],[\"创建对象中隐含属性指向该构造函数的原型对象\",{\"1\":{\"1438\":1}}],[\"创建对象\",{\"1\":{\"9\":1}}],[\"代表父类的构造函数\",{\"1\":{\"1434\":1}}],[\"代表后代选择器\",{\"1\":{\"1287\":1}}],[\"代表整个\",{\"1\":{\"1079\":1}}],[\"代表网站\",{\"1\":{\"985\":1}}],[\"代表上内边距\",{\"1\":{\"969\":1}}],[\"代表上下内边距\",{\"1\":{\"969\":1}}],[\"代表上下左右都有\",{\"1\":{\"969\":1}}],[\"代表\",{\"1\":{\"935\":4}}],[\"代表请求唯一标识的并不是请求的路径\",{\"1\":{\"847\":1}}],[\"代表的item元素传入\",{\"1\":{\"657\":1}}],[\"代表当前已经渲染完成的fiber\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"代表当前节点对应的\",{\"1\":{\"270\":1}}],[\"代价未免太大了吧\",{\"1\":{\"604\":1}}],[\"代理到vm实例上\",{\"1\":{\"633\":1}}],[\"代理\",{\"1\":{\"549\":1}}],[\"代理类似\",{\"1\":{\"61\":1}}],[\"代替\",{\"1\":{\"524\":1,\"1092\":1,\"1283\":1}}],[\"代码自上而下执行前\",{\"1\":{\"1429\":1}}],[\"代码整体运行分为两个阶段\",{\"1\":{\"1429\":1}}],[\"代码在解释阶段就要确定好\",{\"1\":{\"1428\":1}}],[\"代码的任何位置打印\",{\"1\":{\"1424\":1}}],[\"代码的执行\",{\"1\":{\"1420\":1}}],[\"代码的库\",{\"1\":{\"119\":1}}],[\"代码如下\",{\"1\":{\"1383\":1}}],[\"代码编写到外部\",{\"1\":{\"1235\":1}}],[\"代码编写到页面下部\",{\"1\":{\"1119\":1}}],[\"代码复用\",{\"1\":{\"1187\":1}}],[\"代码体只有一条语句\",{\"1\":{\"1163\":1}}],[\"代码加载\",{\"0\":{\"1119\":1}}],[\"代码执行\",{\"1\":{\"1118\":1,\"1426\":1}}],[\"代码执行结束\",{\"1\":{\"604\":1}}],[\"代码写到页面元素的上方\",{\"1\":{\"1062\":1}}],[\"代码含义\",{\"1\":{\"1032\":1}}],[\"代码分成一个个模块\",{\"1\":{\"1017\":1}}],[\"代码简洁\",{\"1\":{\"985\":1}}],[\"代码都放入此文件中\",{\"1\":{\"868\":1}}],[\"代码抽取出来单独放到<style>标签里\",{\"1\":{\"866\":1}}],[\"代码异常\",{\"1\":{\"779\":1}}],[\"代码易读性提高\",{\"1\":{\"779\":1}}],[\"代码可以采用同步书写方式处理异步逻辑\",{\"1\":{\"779\":1}}],[\"代码继续执行\",{\"1\":{\"635\":1}}],[\"代码实现的巧妙之处\",{\"1\":{\"605\":1}}],[\"代码实现\",{\"1\":{\"604\":1}}],[\"代码块通过语法分析阶段之后\",{\"1\":{\"1421\":1}}],[\"代码块加载完毕之后\",{\"1\":{\"1419\":1}}],[\"代码块解析\",{\"0\":{\"1398\":1}}],[\"代码块\",{\"1\":{\"1276\":1}}],[\"代码块上\",{\"1\":{\"584\":1}}],[\"代码块中导入路径react\",{\"1\":{\"249\":1}}],[\"代码示例引用了react\",{\"1\":{\"753\":1}}],[\"代码示例\",{\"1\":{\"475\":1}}],[\"代码转换\",{\"1\":{\"248\":1}}],[\"代码转换成\",{\"1\":{\"248\":1}}],[\"代码越来越多且复杂\",{\"1\":{\"128\":1}}],[\"代码\",{\"0\":{\"683\":1},\"1\":{\"26\":1,\"124\":2,\"125\":1,\"443\":1,\"862\":1,\"889\":1,\"908\":1,\"919\":1,\"920\":2,\"1003\":1,\"1031\":1,\"1085\":1,\"1118\":1,\"1119\":1,\"1342\":1,\"1349\":1,\"1452\":1}}],[\"与上层环境的一系列活动对象组成\",{\"1\":{\"1423\":1}}],[\"与上面同理\",{\"1\":{\"1087\":1}}],[\"与上面两种相比具有如下特点\",{\"1\":{\"920\":1}}],[\"与正向声明匹配相反\",{\"1\":{\"1389\":1}}],[\"与贪婪匹配相反\",{\"1\":{\"1385\":1}}],[\"与数字和字符串一样\",{\"1\":{\"1170\":1}}],[\"与解构赋值结合\",{\"1\":{\"1164\":1}}],[\"与定时调用区别\",{\"1\":{\"1063\":1}}],[\"与浏览器基础\",{\"0\":{\"1024\":1}}],[\"与<legend>标签配合使用\",{\"1\":{\"1020\":1}}],[\"与任何指定的\",{\"1\":{\"909\":1}}],[\"与v\",{\"1\":{\"701\":1}}],[\"与旧后\",{\"0\":{\"678\":1,\"680\":1},\"1\":{\"676\":2}}],[\"与旧前\",{\"0\":{\"677\":1,\"679\":1},\"1\":{\"676\":2}}],[\"与虚拟\",{\"0\":{\"666\":1}}],[\"与结束标记\",{\"1\":{\"647\":1,\"654\":1}}],[\"与一个\",{\"1\":{\"636\":1}}],[\"与一个组件\",{\"1\":{\"418\":1}}],[\"与其他普通watcher最特别的地方\",{\"1\":{\"626\":1}}],[\"与其他js框架的关联\",{\"0\":{\"403\":1}}],[\"与普通的递归有所不同\",{\"1\":{\"604\":1}}],[\"与扩展\",{\"1\":{\"522\":1}}],[\"与插值语法的区别\",{\"1\":{\"474\":2}}],[\"与不可变数据判断的\",{\"1\":{\"332\":1}}],[\"与组件一样\",{\"1\":{\"234\":1}}],[\"与组件树数据解耦\",{\"1\":{\"117\":1}}],[\"与\",{\"0\":{\"75\":1,\"257\":1,\"458\":1,\"531\":1,\"550\":1,\"554\":1,\"555\":1,\"556\":1,\"560\":1,\"708\":1,\"712\":1,\"793\":1},\"1\":{\"61\":1,\"68\":1,\"161\":1,\"209\":1,\"223\":1,\"396\":1,\"417\":1,\"450\":2,\"457\":1,\"461\":1,\"474\":1,\"525\":3,\"536\":1,\"539\":1,\"540\":1,\"542\":1,\"553\":1,\"568\":1,\"618\":1,\"636\":1,\"664\":1,\"753\":2,\"770\":1,\"834\":1,\"842\":1,\"847\":1,\"919\":1,\"1005\":1,\"1012\":2,\"1019\":1,\"1091\":5,\"1108\":1,\"1117\":1,\"1126\":1,\"1183\":1,\"1269\":1,\"1273\":1,\"1370\":2,\"1376\":1,\"1436\":1}}],[\"将临界条件加入到递归体中\",{\"1\":{\"1458\":1}}],[\"将递推关系的结构转换为递归体\",{\"1\":{\"1458\":1}}],[\"将整个脚本文件放在一个立即执行函数中开启严格模式\",{\"1\":{\"1453\":1}}],[\"将新建对象返回\",{\"1\":{\"1436\":1}}],[\"将函数的参数添加为\",{\"1\":{\"1429\":1}}],[\"将函数本身内容作为字符串返回\",{\"1\":{\"1410\":1}}],[\"将代码执行过程中可能用到的所有变量都提前准备好\",{\"1\":{\"1424\":1}}],[\"将找到的变量提前声明\",{\"1\":{\"1423\":1}}],[\"将找到的函数提前声明\",{\"1\":{\"1423\":1}}],[\"将字符串拆分为数组\",{\"1\":{\"1377\":1}}],[\"将跳过\",{\"1\":{\"1277\":1}}],[\"将多维数组转为低维数组\",{\"1\":{\"1221\":1}}],[\"将处理后的值放入返回的数组\",{\"1\":{\"1195\":1}}],[\"将处于遍历中的\",{\"1\":{\"663\":1}}],[\"将类数组或可遍历对象转换为真正的数组\",{\"1\":{\"1195\":1}}],[\"将失败的结果返回给构造函数对象\",{\"1\":{\"1176\":1}}],[\"将异步请求成功的结果返回给构造函数对象\",{\"1\":{\"1176\":1}}],[\"将异步函数和函数参数作为\",{\"1\":{\"764\":1}}],[\"将事件统一绑定给元素的共同祖先元素\",{\"1\":{\"1127\":1}}],[\"将事件名\",{\"1\":{\"278\":1}}],[\"将获取到的首个p标签隐藏\",{\"1\":{\"1106\":1}}],[\"将内容写入某个\",{\"1\":{\"1095\":1}}],[\"将盒子定在某一个位置\",{\"1\":{\"988\":1}}],[\"将全部的\",{\"1\":{\"966\":1}}],[\"将全局的\",{\"1\":{\"561\":1}}],[\"将元素升高或降低指定的高度\",{\"1\":{\"924\":1}}],[\"将外部阴影\",{\"1\":{\"912\":1}}],[\"将一副图像划分为\",{\"1\":{\"909\":1}}],[\"将一个由reactive生成的响应式对象转为普通对象\",{\"1\":{\"556\":1}}],[\"将所有\",{\"1\":{\"866\":1}}],[\"将所有异步操作逻辑存放在一个地方集中处理\",{\"1\":{\"757\":1}}],[\"将会匹配除了数字以外任意的字符\",{\"1\":{\"1382\":1}}],[\"将会根据该字符串拆分数组\",{\"1\":{\"1377\":1}}],[\"将会同步执行\",{\"1\":{\"771\":1}}],[\"将会循环调用\",{\"1\":{\"272\":1}}],[\"将来自后端的路由数据进行格式化转换\",{\"1\":{\"737\":1}}],[\"将默认路由表转换成格式完整的路由表后重设路由表\",{\"1\":{\"732\":1}}],[\"将路由表嵌入默认路由表得到完整路由表\",{\"1\":{\"732\":1}}],[\"将不同的属性\",{\"1\":{\"702\":1}}],[\"将不会再影响盒子实际大小\",{\"1\":{\"973\":1}}],[\"将不会\",{\"1\":{\"60\":1}}],[\"将其属性设置为\",{\"1\":{\"985\":1}}],[\"将其移动到一边\",{\"1\":{\"977\":1}}],[\"将其实际匹配的值填入进去\",{\"1\":{\"701\":1}}],[\"将其向下传递给<fancybutton\",{\"1\":{\"237\":1}}],[\"将对象拷贝\",{\"1\":{\"1332\":1}}],[\"将对象作为弹性伸缩盒子模型显示\",{\"1\":{\"927\":1}}],[\"将对象属性拆解\",{\"1\":{\"692\":1}}],[\"将对象的所有属性通过\",{\"1\":{\"149\":1}}],[\"将indexinold指向的原旧节点移动到旧前指针之前\",{\"1\":{\"683\":1,\"691\":1}}],[\"将vnode创建为完整的dom对象并返回\",{\"1\":{\"675\":1,\"689\":1}}],[\"将嵌套的数组不断堆叠在栈顶数组\",{\"1\":{\"658\":1}}],[\"将传入的\",{\"1\":{\"648\":1}}],[\"将模板字符串编译为\",{\"1\":{\"645\":1}}],[\"将如下图所示\",{\"1\":{\"644\":1}}],[\"将高阶\",{\"1\":{\"636\":1}}],[\"将上述代码复制到项目中运行\",{\"1\":{\"634\":1}}],[\"将它们的依赖收集到\",{\"1\":{\"627\":1}}],[\"将当前出于活性化的\",{\"1\":{\"621\":1}}],[\"将当前实例从targetstack中弹出\",{\"1\":{\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"将第一个参数的原型对象指向到第二个参数\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"将这个数组的原型指向重写后的arraymethods\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"将遍历此对象所有的\",{\"1\":{\"593\":1}}],[\"将转而去抓取这些入口点\",{\"1\":{\"575\":1}}],[\"将回调延迟到绘制操作之后执行\",{\"1\":{\"388\":1}}],[\"将回调推入\",{\"1\":{\"287\":1}}],[\"将剩下的\",{\"1\":{\"354\":1}}],[\"将更新队列\",{\"1\":{\"323\":1}}],[\"将要插入的fiber节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"将子\",{\"1\":{\"272\":1}}],[\"将子组件挂在\",{\"1\":{\"92\":1}}],[\"将虚拟\",{\"1\":{\"126\":1}}],[\"将复用的状态传递给被包装组件\",{\"1\":{\"86\":1}}],[\"将resolve赋值给resolvepromise\",{\"1\":{\"72\":1}}],[\"将取消请求的\",{\"1\":{\"71\":1}}],[\"将\",{\"1\":{\"71\":1,\"116\":1,\"134\":1,\"165\":1,\"249\":1,\"323\":1,\"621\":1,\"645\":1,\"646\":1,\"650\":1,\"656\":1,\"657\":1,\"658\":1,\"662\":1,\"680\":1,\"692\":1,\"755\":1,\"781\":1,\"1119\":1,\"1235\":1}}],[\"将context属性config\",{\"1\":{\"70\":1}}],[\"将配置项中关于方法的配置项全部删除\",{\"1\":{\"68\":1}}],[\"将被\",{\"1\":{\"59\":2}}],[\"中仍然没有找到\",{\"1\":{\"1438\":1}}],[\"中已存在与声明的变量所对应的属性\",{\"1\":{\"1429\":1}}],[\"中在调用函数的那一瞬间之前\",{\"1\":{\"1428\":1}}],[\"中进行的\",{\"1\":{\"1423\":1}}],[\"中三种原始类型的值\",{\"1\":{\"1415\":1}}],[\"中一切皆对象\",{\"1\":{\"1410\":1}}],[\"中一个无法\",{\"1\":{\"593\":1}}],[\"中一个新的配置项\",{\"1\":{\"534\":1}}],[\"中输出一个内容\",{\"1\":{\"1237\":1}}],[\"中可以指定一个字符串作为参数\",{\"1\":{\"1362\":1}}],[\"中可以通过元素的\",{\"1\":{\"1103\":1}}],[\"中可以继续使用\",{\"1\":{\"542\":1}}],[\"中为我们提供了一组对象\",{\"1\":{\"1059\":1}}],[\"中为该组件提供一个更有用的显示名\",{\"1\":{\"240\":1}}],[\"中只能嵌套\",{\"1\":{\"1052\":1,\"1053\":1}}],[\"中只有一个\",{\"1\":{\"746\":1}}],[\"中直接支持循环语句\",{\"1\":{\"1016\":1}}],[\"中当条件不为\",{\"1\":{\"1015\":1}}],[\"中支持的条件判断如下\",{\"1\":{\"1015\":1}}],[\"中也支持条件判断\",{\"1\":{\"1015\":1}}],[\"中引入另一个已经定义的\",{\"1\":{\"1013\":1}}],[\"中定义变量或者默认参数\",{\"1\":{\"1013\":1}}],[\"中定义一个数组\",{\"1\":{\"608\":1}}],[\"中最好不要定义相同的变量名\",{\"1\":{\"1012\":1}}],[\"中最复杂的一个\",{\"1\":{\"630\":1}}],[\"中不存在与声明的变量所对应的属性\",{\"1\":{\"1429\":1}}],[\"中不存在全局变量\",{\"1\":{\"1012\":1}}],[\"中不能访问到\",{\"1\":{\"534\":1}}],[\"中我们不建议使用\",{\"1\":{\"1011\":1}}],[\"中我们需要手动实现\",{\"1\":{\"733\":1}}],[\"中无法避免的重复\",{\"1\":{\"1011\":1}}],[\"中无该标签对应的同名元素\",{\"1\":{\"123\":1}}],[\"中声明变量\",{\"1\":{\"965\":1}}],[\"中判断设备的尺寸\",{\"1\":{\"964\":1}}],[\"中日韩\",{\"1\":{\"900\":1}}],[\"中文\",{\"1\":{\"1031\":1,\"1033\":1}}],[\"中文名\",{\"1\":{\"1020\":1}}],[\"中文等命名\",{\"1\":{\"862\":1}}],[\"中文官网\",{\"1\":{\"79\":1,\"400\":1}}],[\"中移除\",{\"1\":{\"842\":1}}],[\"中止网络请求的基本过程如下\",{\"1\":{\"841\":1}}],[\"中止请求\",{\"0\":{\"841\":1}}],[\"中管理的异步数据均存在缓存\",{\"1\":{\"836\":1}}],[\"中每个特定数据只有一个副本\",{\"1\":{\"816\":1}}],[\"中编写\",{\"1\":{\"812\":1}}],[\"中间用逗号隔开\",{\"1\":{\"872\":1}}],[\"中间用大于号隔开\",{\"1\":{\"871\":1}}],[\"中间用空格分隔\",{\"1\":{\"870\":1}}],[\"中间件\",{\"1\":{\"811\":1}}],[\"中间人\",{\"1\":{\"644\":1}}],[\"中相应部分的\",{\"1\":{\"767\":1}}],[\"中vue\",{\"1\":{\"733\":1}}],[\"中含有\",{\"1\":{\"692\":1}}],[\"中还有剩余节点\",{\"1\":{\"682\":1}}],[\"中还有剩余\",{\"1\":{\"682\":1}}],[\"中有对应的属性\",{\"1\":{\"666\":1}}],[\"中有出现过的响应式数据\",{\"1\":{\"630\":1}}],[\"中取出之前已创建好的\",{\"1\":{\"636\":1}}],[\"中运行\",{\"1\":{\"634\":1}}],[\"中完成\",{\"1\":{\"627\":1}}],[\"中实例化时\",{\"1\":{\"625\":1}}],[\"中实现集中式状态\",{\"1\":{\"406\":1}}],[\"中创建独属于\",{\"1\":{\"625\":1}}],[\"中把当前的\",{\"1\":{\"608\":1}}],[\"中就能得到当前正在读取数据的\",{\"1\":{\"605\":1}}],[\"中转\",{\"1\":{\"605\":1}}],[\"中触发依赖\",{\"1\":{\"605\":1}}],[\"中收集依赖\",{\"1\":{\"605\":1}}],[\"中等粒度依赖\",{\"1\":{\"605\":1}}],[\"中等粒度地找出哪些节点发生了更新\",{\"1\":{\"162\":1}}],[\"中调用一下渲染函数来重新渲染页面\",{\"1\":{\"604\":1}}],[\"中调用两个方法\",{\"1\":{\"330\":1}}],[\"中钩子对应关系如下\",{\"1\":{\"542\":1}}],[\"中操作数据\",{\"1\":{\"536\":1}}],[\"中是否已经存在这个\",{\"1\":{\"505\":1}}],[\"中多么频繁地修改数据\",{\"1\":{\"505\":1}}],[\"中多次更新数据页面只会更新一次\",{\"1\":{\"505\":1}}],[\"中执行\",{\"1\":{\"505\":1}}],[\"中所有的数值都是\",{\"1\":{\"1243\":1}}],[\"中所有的\",{\"1\":{\"481\":1}}],[\"中所有的属性\",{\"1\":{\"467\":1}}],[\"中场\",{\"1\":{\"480\":1}}],[\"中监听的数据变化时\",{\"1\":{\"480\":1}}],[\"中方法的原方法执行的状况下\",{\"1\":{\"620\":1}}],[\"中方法的特点\",{\"1\":{\"411\":1}}],[\"中方法\",{\"1\":{\"479\":2}}],[\"中数据\",{\"1\":{\"479\":1}}],[\"中写\",{\"1\":{\"474\":1}}],[\"中配置的函数\",{\"1\":{\"470\":2}}],[\"中要引起计算时依赖的数据发生改变\",{\"1\":{\"450\":1}}],[\"中包含了一些\",{\"1\":{\"442\":1}}],[\"中如何开启\",{\"1\":{\"432\":1}}],[\"中函数的调用\",{\"1\":{\"410\":1}}],[\"中存在与函数名所对应的属性\",{\"1\":{\"1429\":1}}],[\"中存储登录相关异步请求的方法\",{\"1\":{\"731\":1}}],[\"中存储的\",{\"1\":{\"323\":1}}],[\"中存放的是状态数据\",{\"1\":{\"144\":1}}],[\"中获取到了匹配\",{\"1\":{\"296\":1}}],[\"中全部需注册的原生事件遍历一遍\",{\"1\":{\"278\":1}}],[\"中全部的组件树会转换为\",{\"1\":{\"162\":1}}],[\"中没有\",{\"1\":{\"274\":1,\"1092\":1}}],[\"中野不存在\",{\"1\":{\"238\":1}}],[\"中用于在编译器和内存中保存变量\",{\"1\":{\"1396\":1}}],[\"中用于存储数据\",{\"1\":{\"443\":1}}],[\"中用于复用组件逻辑的一种高级技巧\",{\"1\":{\"232\":1}}],[\"中用于定义在执行\",{\"1\":{\"62\":1}}],[\"中添加父节点\",{\"1\":{\"218\":1}}],[\"中常见的副作用操作\",{\"1\":{\"184\":1}}],[\"中内容变了\",{\"1\":{\"161\":1,\"461\":1}}],[\"中内容没变\",{\"1\":{\"161\":1,\"461\":1}}],[\"中找到了与新虚拟\",{\"1\":{\"161\":1,\"461\":1}}],[\"中真正书写的样式名为\",{\"1\":{\"139\":1}}],[\"中显示\",{\"1\":{\"126\":1}}],[\"中使用组合式\",{\"1\":{\"584\":1}}],[\"中使用\",{\"1\":{\"107\":1,\"832\":1,\"1367\":1}}],[\"中的位置多\",{\"1\":{\"1376\":1}}],[\"中的位置\",{\"1\":{\"1376\":1}}],[\"中的最小值\",{\"1\":{\"1370\":1}}],[\"中的最大值\",{\"1\":{\"1370\":1}}],[\"中的格式\",{\"1\":{\"1274\":1}}],[\"中的表达式\",{\"1\":{\"1271\":1}}],[\"中的关键字或保留字\",{\"1\":{\"1240\":1}}],[\"中的注释以\",{\"1\":{\"1040\":1}}],[\"中的条件语句支持通过\",{\"1\":{\"1015\":1}}],[\"中的条件判断支持得更为彻底\",{\"1\":{\"1015\":1}}],[\"中的条件判断和\",{\"1\":{\"1015\":1}}],[\"中的代码\",{\"1\":{\"1015\":1}}],[\"中的代码会在每次组件实例被创建的时候执行\",{\"1\":{\"584\":1}}],[\"中的||\",{\"1\":{\"1015\":1}}],[\"中的混合和前两款\",{\"1\":{\"1013\":1}}],[\"中的变量声明\",{\"1\":{\"966\":1}}],[\"中的<pre>标签\",{\"1\":{\"898\":1}}],[\"中的<router\",{\"1\":{\"716\":1}}],[\"中的任何\",{\"1\":{\"753\":1}}],[\"中的视图组件\",{\"1\":{\"742\":1}}],[\"中的this\",{\"1\":{\"727\":1}}],[\"中的查询字符串\",{\"1\":{\"721\":1}}],[\"中的new\",{\"1\":{\"718\":1}}],[\"中的依赖\",{\"1\":{\"698\":1}}],[\"中的一切属性在虚拟\",{\"1\":{\"666\":1}}],[\"中的配置项\",{\"1\":{\"631\":1}}],[\"中的其他配置选项\",{\"1\":{\"628\":1}}],[\"中的其他对\",{\"1\":{\"595\":1}}],[\"中的逻辑更清楚易懂\",{\"1\":{\"543\":1}}],[\"中的属性\",{\"1\":{\"628\":1,\"636\":1}}],[\"中的属性或方法\",{\"1\":{\"534\":1}}],[\"中的属性值进行类型限制和必要性限制\",{\"1\":{\"149\":1}}],[\"中的数据绑定就是通过这个来实现的\",{\"1\":{\"1407\":1}}],[\"中的数据\",{\"1\":{\"467\":1,\"479\":1,\"695\":1}}],[\"中的数据发生改变\",{\"1\":{\"443\":1}}],[\"中的数据为计算属性\",{\"1\":{\"414\":1,\"415\":1}}],[\"中的数组元素循环生成\",{\"1\":{\"160\":1}}],[\"中的方法\",{\"1\":{\"411\":1,\"517\":1}}],[\"中的回调函数则是默认在异步队列中执行完毕后才会执行\",{\"1\":{\"703\":1}}],[\"中的回调\",{\"1\":{\"410\":1}}],[\"中的值会通过这个函数执行返回值重新为\",{\"1\":{\"339\":1}}],[\"中的元素\",{\"1\":{\"330\":1}}],[\"中的第一个子节点会作为父\",{\"1\":{\"272\":1}}],[\"中的节点首次挂载时执行\",{\"1\":{\"272\":1}}],[\"中的祖先\",{\"1\":{\"223\":1}}],[\"中的事件是通过事件委托方式处理的\",{\"1\":{\"158\":1}}],[\"中的事件冒泡机制\",{\"1\":{\"109\":1}}],[\"中的核心属性与方法\",{\"1\":{\"140\":1}}],[\"中的\",{\"1\":{\"103\":1,\"186\":1,\"209\":1,\"214\":1,\"215\":1,\"313\":1,\"323\":1,\"339\":1,\"350\":1,\"451\":1,\"543\":1,\"576\":1,\"578\":1,\"588\":1,\"595\":1,\"666\":1,\"701\":1,\"1015\":1,\"1131\":1,\"1262\":1,\"1282\":2}}],[\"中的所有字段作浅比较的情况\",{\"1\":{\"99\":1}}],[\"中修改\",{\"1\":{\"103\":1}}],[\"中通过对代理状态的劫持来实现按需标记更改\",{\"1\":{\"103\":1}}],[\"中对于\",{\"1\":{\"103\":1}}],[\"中展示名称\",{\"1\":{\"86\":1}}],[\"中\",{\"1\":{\"60\":1,\"147\":1,\"178\":1,\"197\":1,\"200\":1,\"222\":1,\"273\":1,\"278\":1,\"287\":1,\"323\":2,\"411\":1,\"429\":1,\"430\":1,\"534\":1,\"539\":1,\"540\":1,\"545\":1,\"566\":2,\"578\":1,\"605\":3,\"623\":3,\"626\":1,\"631\":1,\"648\":2,\"661\":1,\"692\":1,\"700\":1,\"732\":1,\"843\":1,\"847\":1,\"848\":1,\"863\":1,\"1013\":1,\"1015\":2,\"1231\":3,\"1301\":1,\"1440\":1}}],[\"跨浏览器兼容\",{\"1\":{\"1279\":1}}],[\"跨列\",{\"1\":{\"1050\":1}}],[\"跨列合并\",{\"1\":{\"1050\":1}}],[\"跨行\",{\"1\":{\"1050\":1}}],[\"跨行合并\",{\"1\":{\"1050\":1}}],[\"跨层级组件等都可以完成通信\",{\"1\":{\"518\":1}}],[\"跨站请求的\",{\"1\":{\"54\":1}}],[\"跨域资源共享标准新增了一组http首部字段\",{\"1\":{\"27\":1}}],[\"跨域资源共享\",{\"1\":{\"27\":1}}],[\"跨域\",{\"0\":{\"23\":1}}],[\"默认调用\",{\"1\":{\"1410\":1}}],[\"默认false\",{\"1\":{\"1407\":3}}],[\"默认undefined\",{\"1\":{\"1407\":1}}],[\"默认会按照\",{\"1\":{\"1364\":1}}],[\"默认会将\",{\"1\":{\"582\":1}}],[\"默认暴露\",{\"1\":{\"1190\":1}}],[\"默认行为\",{\"1\":{\"1151\":1}}],[\"默认2像素\",{\"1\":{\"1048\":1}}],[\"默认1像素\",{\"1\":{\"1048\":1}}],[\"默认大小是内容的大小\",{\"1\":{\"998\":1}}],[\"默认基准尺寸值\",{\"1\":{\"965\":1}}],[\"默认的\",{\"1\":{\"924\":1}}],[\"默认平铺\",{\"1\":{\"903\":1}}],[\"默认无装饰线\",{\"1\":{\"891\":1}}],[\"默认宽度为20个字符\",{\"1\":{\"1057\":1}}],[\"默认宽度为本身内容的宽度\",{\"1\":{\"877\":1}}],[\"默认宽度和父级一样宽\",{\"1\":{\"978\":1}}],[\"默认宽度\",{\"1\":{\"878\":1}}],[\"默认宽度是本身内容宽度\",{\"1\":{\"878\":1}}],[\"默认放到<head>标签中\",{\"1\":{\"866\":1}}],[\"默认以\",{\"1\":{\"793\":1}}],[\"默认路由\",{\"1\":{\"730\":1}}],[\"默认路由表\",{\"0\":{\"730\":1}}],[\"默认宏任务队列\",{\"1\":{\"700\":1}}],[\"默认直接返回实例的\",{\"1\":{\"636\":1}}],[\"默认情况下\",{\"1\":{\"575\":1,\"576\":1,\"836\":1,\"1410\":1}}],[\"默认插槽\",{\"1\":{\"503\":1,\"504\":1}}],[\"默认不会触发事件\",{\"1\":{\"1133\":1}}],[\"默认不执行\",{\"1\":{\"632\":1,\"635\":1}}],[\"默认不可以\",{\"1\":{\"451\":1}}],[\"默认不监视对象内部值的改变\",{\"1\":{\"451\":1}}],[\"默认是针对同步方法的\",{\"1\":{\"799\":1}}],[\"默认是\",{\"1\":{\"715\":1,\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"默认是被销毁掉的\",{\"1\":{\"425\":1}}],[\"默认是0\",{\"1\":{\"286\":1}}],[\"默认对该组件及其子组件进行更新\",{\"1\":{\"257\":1}}],[\"默认对上述的代码块字符串内容执行\",{\"1\":{\"249\":1}}],[\"默认props\",{\"1\":{\"230\":1}}],[\"默认属性\",{\"1\":{\"149\":1}}],[\"默认从\",{\"1\":{\"87\":1}}],[\"默认配置很可能不一样\",{\"1\":{\"75\":1}}],[\"默认没有启用\",{\"1\":{\"62\":1}}],[\"默认值为id\",{\"1\":{\"816\":1}}],[\"默认值\",{\"1\":{\"59\":1,\"498\":1,\"587\":1,\"885\":1,\"912\":1,\"977\":1}}],[\"默认\",{\"1\":{\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"712\":1,\"890\":1,\"894\":1,\"895\":1,\"896\":1,\"898\":1,\"924\":1,\"973\":1,\"996\":1,\"1332\":1,\"1411\":1}}],[\"默认为\",{\"1\":{\"49\":1,\"60\":1,\"511\":1,\"601\":2,\"811\":1,\"837\":1,\"1048\":1}}],[\"并等待垃圾回收\",{\"1\":{\"1425\":1}}],[\"并等待它们全部完成\",{\"1\":{\"771\":1}}],[\"并以新的字符串返回被提取的部分\",{\"1\":{\"1376\":1}}],[\"并集\",{\"1\":{\"1178\":1}}],[\"并集选择器喜欢竖着写\",{\"1\":{\"872\":1}}],[\"并集选择器可以选择多组标签\",{\"1\":{\"872\":1}}],[\"并集选择器\",{\"0\":{\"872\":1},\"1\":{\"869\":1,\"873\":1,\"1286\":1}}],[\"并可以作为属性名\",{\"1\":{\"1170\":1}}],[\"并可以通过该对象创建各种节点对象\",{\"1\":{\"1079\":1}}],[\"并列\",{\"1\":{\"1030\":1}}],[\"并预备播放\",{\"1\":{\"1021\":1}}],[\"并将其中的同步代码按照执行顺序加\",{\"1\":{\"1423\":1}}],[\"并将其样式应用于所有屏幕\",{\"1\":{\"964\":1}}],[\"并将新的数组返回\",{\"1\":{\"1361\":1}}],[\"并将被删除的元素作为返回值数组返回\",{\"1\":{\"1360\":1}}],[\"并将被删除的元素作为返回值返回\",{\"1\":{\"1356\":1,\"1358\":1}}],[\"并将参数\",{\"1\":{\"1013\":1}}],[\"并传递给执行函数相同的变量\",{\"1\":{\"835\":1}}],[\"并传入statenode\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"并行查询\",{\"0\":{\"831\":1}}],[\"并行运行多个\",{\"1\":{\"771\":1}}],[\"并提供了各种执行的生命周期用以修饰执行过程\",{\"1\":{\"833\":1}}],[\"并提供了\",{\"1\":{\"817\":1}}],[\"并提供凭据\",{\"1\":{\"51\":1,\"63\":1}}],[\"并加入了多种异步解决方案\",{\"1\":{\"817\":1}}],[\"并加入到执行队列\",{\"1\":{\"287\":1}}],[\"并默认支持redux\",{\"1\":{\"811\":1}}],[\"并发执行\",{\"1\":{\"765\":1}}],[\"并赋予响应式数据效果\",{\"1\":{\"701\":1}}],[\"并添加到一个叫做任务队列\",{\"1\":{\"1076\":1}}],[\"并添加以下内容\",{\"1\":{\"823\":1}}],[\"并添加专用\",{\"1\":{\"707\":1}}],[\"并添加\",{\"1\":{\"695\":1,\"707\":1}}],[\"并执行依赖收集\",{\"1\":{\"636\":1}}],[\"并执行this\",{\"1\":{\"604\":1}}],[\"并优化重构响应式原理中的\",{\"1\":{\"632\":1}}],[\"并把这个\",{\"1\":{\"605\":1}}],[\"并返回新的数组长度\",{\"1\":{\"1357\":1}}],[\"并返回数组的新长度\",{\"1\":{\"1355\":1}}],[\"并返回最后一个操作数的值\",{\"1\":{\"1265\":1}}],[\"并返回\",{\"1\":{\"1102\":2}}],[\"并返回值\",{\"1\":{\"608\":1}}],[\"并返回此对象\",{\"1\":{\"599\":1,\"1407\":1}}],[\"并返回该\",{\"1\":{\"192\":1}}],[\"并开启数据劫持\",{\"1\":{\"598\":1}}],[\"并未调用其他任何\",{\"1\":{\"596\":1}}],[\"并使用\",{\"1\":{\"593\":1}}],[\"并报错\",{\"1\":{\"591\":2}}],[\"并配置好\",{\"1\":{\"568\":1}}],[\"并配置name属性\",{\"1\":{\"508\":1}}],[\"并对其依赖项跟踪和更新触发进行显式控制\",{\"1\":{\"557\":1}}],[\"并不会修改\",{\"1\":{\"1312\":1}}],[\"并不会获取孙子层级的元素\",{\"1\":{\"1287\":1}}],[\"并不会触发挂载和卸载钩子\",{\"1\":{\"434\":1}}],[\"并不适用\",{\"1\":{\"235\":1}}],[\"并判断有没有返回值\",{\"1\":{\"395\":1}}],[\"并破坏\",{\"1\":{\"365\":1}}],[\"并标记更新副作用\",{\"1\":{\"323\":1}}],[\"并直接返回\",{\"1\":{\"323\":1}}],[\"并清除\",{\"1\":{\"323\":1}}],[\"并结合对应的\",{\"1\":{\"278\":1}}],[\"并且改变函数内部\",{\"1\":{\"1451\":1}}],[\"并且把它压入执行栈的顶部\",{\"1\":{\"1425\":1}}],[\"并且都在同一个全局作用域中\",{\"1\":{\"1419\":1}}],[\"并且不会交换位置\",{\"1\":{\"1376\":1}}],[\"并且该值不与其它任何值相等\",{\"1\":{\"1170\":1}}],[\"并且该守卫没有\",{\"1\":{\"437\":1}}],[\"并且生成相应历史记录\",{\"1\":{\"1065\":1}}],[\"并且使用<li>标签来定义列表项\",{\"1\":{\"1053\":1}}],[\"并且可以压住其他盒子\",{\"1\":{\"987\":1}}],[\"并且压住其他盒子\",{\"1\":{\"987\":1}}],[\"并且对于防止较早的浏览器应用所选样式很有用\",{\"1\":{\"964\":1}}],[\"并且对象不能直接被改变\",{\"1\":{\"743\":1}}],[\"并且数据可用\",{\"1\":{\"829\":1}}],[\"并且路由表中的每一个\",{\"1\":{\"740\":1}}],[\"并且必须要用<routes>包裹<route>\",{\"1\":{\"712\":1}}],[\"并且新旧\",{\"1\":{\"702\":1}}],[\"并且有\",{\"1\":{\"695\":1}}],[\"并且newvnode中的elm属性从父到子均挂载了匹配的dom对象\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"并且截取范围不为空值\",{\"1\":{\"662\":1}}],[\"并且能够返回结束之前路过的文字\",{\"1\":{\"646\":1,\"655\":1}}],[\"并且在当前组件上新建一个\",{\"1\":{\"636\":1}}],[\"并且在遍历对象内部属性创建响应式数据时\",{\"1\":{\"621\":1}}],[\"并且vm\",{\"1\":{\"635\":1}}],[\"并且会把\",{\"1\":{\"841\":1}}],[\"并且会同时修改父组件的数据\",{\"1\":{\"512\":1}}],[\"并且会做过滤\",{\"1\":{\"505\":1}}],[\"并且会配合组件一起使用\",{\"1\":{\"443\":1}}],[\"并且\",{\"1\":{\"430\":1}}],[\"并且时间片没有过期\",{\"1\":{\"396\":1}}],[\"并且需要放弃执行\",{\"1\":{\"395\":1}}],[\"并且给lastplacedindex赋值\",{\"1\":{\"361\":1}}],[\"并且最后会有一个向上冒泡的方法\",{\"1\":{\"273\":1}}],[\"并且这个步骤是同步不可中断的\",{\"1\":{\"257\":1}}],[\"并完成快速地新老更新队列拼接\",{\"1\":{\"271\":1}}],[\"并只针对于该组件以及受该组件\",{\"1\":{\"257\":1}}],[\"并渲染\",{\"1\":{\"242\":1}}],[\"并渲染到页面中\",{\"1\":{\"96\":1}}],[\"并能渲染备用\",{\"1\":{\"241\":1}}],[\"并\",{\"1\":{\"222\":1}}],[\"并在使用后立刻销毁实例\",{\"1\":{\"1418\":1}}],[\"并在\",{\"1\":{\"212\":1}}],[\"并进行分析\",{\"1\":{\"1428\":1}}],[\"并进行交互\",{\"1\":{\"208\":1}}],[\"并进行状态数据的读写操作\",{\"1\":{\"179\":1}}],[\"并没有改变原本的数据\",{\"1\":{\"466\":2}}],[\"并没有真正达到组件复用的行为\",{\"1\":{\"228\":1}}],[\"并没有采用\",{\"1\":{\"162\":1}}],[\"并没有冲渲染的需要\",{\"1\":{\"91\":1}}],[\"并通过\",{\"1\":{\"550\":1}}],[\"并通过它的两个\",{\"1\":{\"388\":1}}],[\"并通过该实例调用到原型上的\",{\"1\":{\"134\":1}}],[\"并通过state\",{\"1\":{\"103\":1}}],[\"并解析为真实\",{\"1\":{\"134\":1}}],[\"并设置到列表上\",{\"1\":{\"96\":2}}],[\"并非单一\",{\"1\":{\"793\":1}}],[\"并非函数递归\",{\"1\":{\"674\":1}}],[\"并非它的子组件\",{\"1\":{\"242\":1}}],[\"并非\",{\"1\":{\"92\":1}}],[\"并应用一个有效的响应\",{\"1\":{\"50\":1}}],[\"基准尺寸值\",{\"1\":{\"965\":1}}],[\"基线对齐\",{\"1\":{\"924\":1}}],[\"基本包装类型\",{\"0\":{\"1415\":1}}],[\"基本数据类型存放于栈内存\",{\"1\":{\"1396\":1}}],[\"基本数据类型都是单一的值\",{\"1\":{\"1338\":1}}],[\"基本兼容了现在主流的浏览器\",{\"1\":{\"1279\":1}}],[\"基本一致\",{\"1\":{\"1183\":1}}],[\"基本都将这个视口分辨率设置为\",{\"1\":{\"947\":1}}],[\"基本采取简写形式\",{\"1\":{\"938\":1}}],[\"基本用法\",{\"0\":{\"794\":1}}],[\"基本类型\",{\"1\":{\"609\":1,\"616\":1}}],[\"基本类型不再往下执行\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"基本类型只使用\",{\"1\":{\"537\":1}}],[\"基本类型的数据\",{\"1\":{\"536\":1}}],[\"基本相同\",{\"1\":{\"339\":1,\"834\":1}}],[\"基本使用\",{\"0\":{\"118\":1,\"424\":1,\"639\":1,\"1009\":1,\"1280\":1},\"1\":{\"246\":1}}],[\"基本操作\",{\"0\":{\"9\":1}}],[\"基础输出语句\",{\"0\":{\"1237\":1}}],[\"基础语法\",{\"0\":{\"1234\":1}}],[\"基础结构标签快捷输入键\",{\"1\":{\"1031\":1}}],[\"基础选择器包括\",{\"1\":{\"860\":1}}],[\"基础选择器由单个选择器组成\",{\"1\":{\"860\":1}}],[\"基础选择器\",{\"0\":{\"860\":1,\"1286\":1},\"1\":{\"864\":1}}],[\"基础api与扩展\",{\"0\":{\"496\":1}}],[\"基础\",{\"0\":{\"119\":1,\"674\":1},\"1\":{\"522\":1}}],[\"基础状态生成一个可编辑的\",{\"1\":{\"103\":1}}],[\"基础验证应当用于连接代理\",{\"1\":{\"63\":1}}],[\"基础验证\",{\"1\":{\"51\":1}}],[\"基于打包器的方式启动必须优先抓取并构建你的整个应用\",{\"1\":{\"530\":1}}],[\"基于vue的ui组件库\",{\"1\":{\"404\":1}}],[\"基于当前\",{\"1\":{\"323\":1}}],[\"基于老fiber和新属性创建新的fiber\",{\"1\":{\"272\":1}}],[\"基于\",{\"1\":{\"93\":1,\"215\":1}}],[\"时可以任意设置属性名\",{\"1\":{\"1407\":1}}],[\"时可以开启深度监听\",{\"1\":{\"627\":1}}],[\"时就会执行\",{\"1\":{\"1015\":1}}],[\"时需要使用\",{\"1\":{\"1013\":1}}],[\"时才为\",{\"1\":{\"829\":1}}],[\"时才调用\",{\"1\":{\"632\":1}}],[\"时被执行\",{\"1\":{\"823\":1}}],[\"时创建\",{\"1\":{\"633\":1,\"634\":1}}],[\"时调用\",{\"1\":{\"627\":1}}],[\"时执行\",{\"1\":{\"608\":1}}],[\"时传递一个泛型参数以覆盖默认推断\",{\"1\":{\"586\":1}}],[\"时根据数据的具体结构\",{\"1\":{\"451\":1}}],[\"时间\",{\"1\":{\"1019\":1}}],[\"时间到了\",{\"1\":{\"843\":1}}],[\"时间复杂度o\",{\"1\":{\"692\":1}}],[\"时间复杂度至少为\",{\"1\":{\"676\":1}}],[\"时间和空间的开销都非常高\",{\"1\":{\"676\":1}}],[\"时间为\",{\"1\":{\"505\":1}}],[\"时间片逻辑\",{\"1\":{\"396\":1}}],[\"时间片到期\",{\"1\":{\"395\":1}}],[\"时间最短的在队列头部\",{\"1\":{\"395\":1}}],[\"时间切片\",{\"1\":{\"393\":1}}],[\"时间调度与优先级\",{\"0\":{\"393\":1}}],[\"时为\",{\"1\":{\"366\":1}}],[\"时已完成链接\",{\"1\":{\"323\":1}}],[\"时结束\",{\"1\":{\"272\":1}}],[\"时使用\",{\"1\":{\"212\":1}}],[\"时使用的自定义代理\",{\"1\":{\"62\":1}}],[\"时候写空数组做了封装\",{\"1\":{\"203\":1}}],[\"时候可以更新\",{\"1\":{\"202\":1}}],[\"时不创建定时器\",{\"1\":{\"201\":1}}],[\"时自定义暴露给父组件的实例值或\",{\"1\":{\"191\":1}}],[\"时会执行一次\",{\"1\":{\"186\":1}}],[\"时会被nginx转发到http\",{\"1\":{\"28\":1}}],[\"时触发\",{\"1\":{\"167\":1,\"823\":1}}],[\"时\",{\"1\":{\"47\":1,\"123\":1,\"212\":1,\"242\":1,\"260\":1,\"273\":1,\"505\":1,\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"618\":1,\"626\":1,\"628\":1,\"634\":1,\"635\":2,\"636\":1,\"648\":1,\"651\":1,\"700\":2,\"702\":1,\"765\":1,\"840\":1,\"964\":1,\"1014\":1,\"1091\":1,\"1171\":5,\"1243\":1,\"1366\":1,\"1442\":1}}],[\"97\",{\"1\":{\"1381\":1}}],[\"90\",{\"1\":{\"1268\":1}}],[\"900\",{\"1\":{\"431\":1}}],[\"960\",{\"1\":{\"952\":2}}],[\"980px\",{\"1\":{\"947\":1}}],[\"9898\",{\"1\":{\"777\":1}}],[\"99\",{\"1\":{\"610\":1}}],[\"9\",{\"0\":{\"47\":1,\"114\":1,\"518\":1,\"770\":1,\"1040\":1,\"1166\":1,\"1363\":1},\"1\":{\"323\":1,\"474\":1,\"601\":2,\"909\":1,\"952\":1,\"1078\":1,\"1178\":3,\"1221\":1,\"1268\":1,\"1272\":1,\"1273\":1,\"1376\":1,\"1382\":4}}],[\"qq\",{\"1\":{\"943\":1,\"1215\":2}}],[\"q\",{\"1\":{\"685\":4,\"1016\":1}}],[\"queries\",{\"1\":{\"831\":1,\"837\":1}}],[\"query原理图3\",{\"1\":{\"848\":1}}],[\"query原理图2\",{\"1\":{\"845\":1}}],[\"query原理图1\",{\"1\":{\"845\":1}}],[\"queryhash\",{\"1\":{\"843\":1,\"848\":1}}],[\"querycache\",{\"1\":{\"843\":2}}],[\"queryclientprovider提供的client\",{\"1\":{\"827\":1}}],[\"queryclientprovider>\",{\"1\":{\"826\":1}}],[\"queryclientprovider\",{\"1\":{\"826\":1}}],[\"queryclient\",{\"1\":{\"826\":4,\"827\":3,\"836\":5,\"837\":2,\"843\":1,\"848\":1}}],[\"queryobserver<any\",{\"1\":{\"842\":1,\"843\":1}}],[\"queryobserver\",{\"1\":{\"842\":1}}],[\"queryoptions\",{\"1\":{\"840\":1}}],[\"querystate\",{\"1\":{\"840\":2}}],[\"querystatus\",{\"1\":{\"840\":1}}],[\"queryselectorall\",{\"1\":{\"1092\":1}}],[\"queryselector\",{\"1\":{\"22\":1,\"26\":2,\"72\":2,\"653\":1,\"695\":1,\"1092\":3,\"1106\":1,\"1229\":1}}],[\"queryfncontext\",{\"1\":{\"841\":1}}],[\"queryfn\",{\"1\":{\"828\":1,\"831\":1,\"841\":2}}],[\"querykey\",{\"1\":{\"828\":1,\"830\":5,\"831\":1,\"845\":1,\"847\":5}}],[\"query因此出现了\",{\"1\":{\"825\":1}}],[\"query是\",{\"1\":{\"824\":1}}],[\"query\",{\"0\":{\"10\":1,\"429\":1,\"824\":1},\"1\":{\"26\":1,\"427\":1,\"429\":4,\"431\":1,\"826\":2,\"827\":5,\"830\":3,\"836\":1,\"837\":1,\"838\":2,\"839\":2,\"840\":7,\"841\":6,\"842\":15,\"843\":22,\"847\":6,\"848\":4}}],[\"queue\",{\"1\":{\"271\":2,\"272\":5,\"306\":7,\"315\":17,\"316\":8,\"323\":6,\"338\":25,\"339\":2,\"373\":25,\"700\":1}}],[\"qs\",{\"1\":{\"46\":2}}],[\"序列化的函数\",{\"1\":{\"46\":1}}],[\"前两个字符为ab\",{\"1\":{\"1382\":1}}],[\"前两轮遍历已经对头部\",{\"1\":{\"358\":1}}],[\"前两轮遍历\",{\"0\":{\"355\":1}}],[\"前边的去后边\",{\"1\":{\"1363\":1}}],[\"前缀加上\",{\"1\":{\"1381\":1}}],[\"前缀\",{\"1\":{\"1103\":1,\"1381\":2}}],[\"前一个任务结束\",{\"1\":{\"1075\":1}}],[\"前提\",{\"1\":{\"973\":1}}],[\"前后顺序无关\",{\"1\":{\"905\":1}}],[\"前后还会有\",{\"1\":{\"703\":1}}],[\"前面\",{\"1\":{\"1364\":1}}],[\"前面加双反斜杠\",{\"1\":{\"1381\":1}}],[\"前面加\",{\"1\":{\"1332\":1}}],[\"前面带了\",{\"1\":{\"1224\":1}}],[\"前面删除\",{\"1\":{\"682\":1}}],[\"前面新增\",{\"1\":{\"682\":1}}],[\"前指针\",{\"1\":{\"676\":1}}],[\"前言\",{\"0\":{\"594\":1,\"623\":1,\"630\":1,\"660\":1}}],[\"前进后退步数\",{\"1\":{\"719\":1}}],[\"前进或后退取决于go中的参数\",{\"1\":{\"432\":1}}],[\"前进\",{\"1\":{\"432\":1}}],[\"前端人员开发代码\",{\"1\":{\"1025\":1}}],[\"前端工程化之后\",{\"1\":{\"966\":1}}],[\"前端开发规范手册\",{\"1\":{\"862\":1}}],[\"前端路由\",{\"1\":{\"423\":1}}],[\"前端三剑客\",{\"0\":{\"77\":1}}],[\"前\",{\"1\":{\"43\":1,\"162\":2}}],[\"在静态方法中指向子类\",{\"1\":{\"1434\":1}}],[\"在静态方法之中指向父类\",{\"1\":{\"1434\":1}}],[\"在普通方法中调用父类方法\",{\"1\":{\"1434\":1}}],[\"在普通方法之中指向父类的原型对象\",{\"1\":{\"1434\":1}}],[\"在普通整型数字基础上加上小写字母\",{\"1\":{\"1230\":1}}],[\"在全局环境下\",{\"1\":{\"1423\":1}}],[\"在全局环境中\",{\"1\":{\"1423\":1}}],[\"在全局作用域中无法访问到函数作用域的变量\",{\"1\":{\"1350\":1}}],[\"在全局作用域中有一个全局对象\",{\"1\":{\"1349\":1}}],[\"在读取字符串\",{\"1\":{\"1415\":1}}],[\"在读取和设定值的时候触发\",{\"1\":{\"1407\":1}}],[\"在对象内属性嵌套层级过多时\",{\"1\":{\"1407\":2}}],[\"在对象中可以保存多个不同数据类型的属性\",{\"1\":{\"1338\":1}}],[\"在循环内部判\",{\"1\":{\"1403\":1}}],[\"在大括号外加上圆括号\",{\"1\":{\"1398\":1}}],[\"在左括号的后面加上一个问号和冒号\",{\"1\":{\"1392\":1}}],[\"在较长的正则表达式中\",{\"1\":{\"1392\":1}}],[\"在较为简单的示例情况下\",{\"1\":{\"644\":1}}],[\"在下面的示例中将颠倒相邻字母和数字的位置\",{\"1\":{\"1391\":1}}],[\"在下面代码中\",{\"1\":{\"1390\":1,\"1391\":1}}],[\"在多行检测中\",{\"1\":{\"1386\":2}}],[\"在多个表达式分组之间加入选择操作符\",{\"1\":{\"1383\":1}}],[\"在多个\",{\"1\":{\"770\":1}}],[\"在执行中还是匹配了带有\",{\"1\":{\"1385\":1}}],[\"在重复类量词后面添加问号\",{\"1\":{\"1385\":1}}],[\"在满足条件的前提下\",{\"1\":{\"1385\":1}}],[\"在条件允许的前提下\",{\"1\":{\"1385\":1}}],[\"在中括号内不要有空格\",{\"1\":{\"1382\":1}}],[\"在方括号中可以包含多个字符\",{\"1\":{\"1382\":1}}],[\"在正则表达式对象的\",{\"1\":{\"1391\":1}}],[\"在正则表达式语法中\",{\"1\":{\"1382\":1,\"1384\":1}}],[\"在正式返回正确的\",{\"1\":{\"740\":1}}],[\"在字符模式中\",{\"1\":{\"1391\":1}}],[\"在字符范围内可以混用各种字符模式\",{\"1\":{\"1382\":1}}],[\"在字符\",{\"1\":{\"1381\":1}}],[\"在字符串中\",{\"1\":{\"1381\":1}}],[\"在转换为字符模式时\",{\"1\":{\"1381\":1}}],[\"在需要时可以执行这些功能\",{\"1\":{\"1342\":1}}],[\"在任何的\",{\"1\":{\"1339\":1}}],[\"在任何后代组件中接收想要添加在这个组件上的数据或方法\",{\"1\":{\"517\":1}}],[\"在动画完成时执行的函数\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"在代码中可使用\",{\"1\":{\"1283\":1}}],[\"在代码执行时\",{\"1\":{\"1119\":1}}],[\"在以前\",{\"1\":{\"1231\":1}}],[\"在访问子属性之前\",{\"1\":{\"1228\":1}}],[\"在小括号内的字符串表示为表达式分组\",{\"1\":{\"1390\":1}}],[\"在小括号内\",{\"1\":{\"1215\":1}}],[\"在该对象上面调用\",{\"1\":{\"1171\":1}}],[\"在拖动元素时\",{\"1\":{\"1142\":1}}],[\"在拖动目标上触发事件\",{\"1\":{\"1142\":1}}],[\"在匿名函数中调用\",{\"1\":{\"1131\":1}}],[\"在开发中大部分情况冒泡都是有用的\",{\"1\":{\"1125\":1}}],[\"在开始手写\",{\"1\":{\"660\":1}}],[\"在事件对象中封装了当前事件相关的一切信息\",{\"1\":{\"1117\":1}}],[\"在事件处理器内部捕获错误\",{\"1\":{\"245\":1}}],[\"在元素中切换类名\",{\"1\":{\"1102\":1}}],[\"在元素中添加一个或多个类名\",{\"1\":{\"1098\":1}}],[\"在指定的子节点前面插入新的子节点\",{\"1\":{\"1094\":1}}],[\"在指向\",{\"1\":{\"429\":1,\"430\":1}}],[\"在设置时\",{\"1\":{\"1091\":1}}],[\"在设置对象的内容时包含的\",{\"1\":{\"1091\":1}}],[\"在设置\",{\"1\":{\"1091\":1}}],[\"在<option>中定义\",{\"1\":{\"1057\":1}}],[\"在网页中的各种网页元素\",{\"1\":{\"1043\":1}}],[\"在网站上动态渲染任意\",{\"1\":{\"474\":1}}],[\"在合适的地方给一个最为合理的标签\",{\"1\":{\"1034\":1}}],[\"在合适的时候给元素添加样式类名\",{\"1\":{\"507\":1}}],[\"在因特网上根据一定的规则\",{\"1\":{\"1025\":1}}],[\"在已知设计稿宽度\",{\"1\":{\"966\":1}}],[\"在标准\",{\"1\":{\"953\":1}}],[\"在标签class属性中写多个类名\",{\"1\":{\"862\":1}}],[\"在标签中通过\",{\"1\":{\"520\":1}}],[\"在长单词或\",{\"1\":{\"899\":1}}],[\"在一段\",{\"1\":{\"1422\":1}}],[\"在一定条件下\",{\"1\":{\"1415\":1}}],[\"在一行上\",{\"1\":{\"878\":1}}],[\"在一个拖动过程中\",{\"1\":{\"1142\":1}}],[\"在一个\",{\"1\":{\"505\":1}}],[\"在使用定位布局时\",{\"1\":{\"996\":1}}],[\"在使用\",{\"1\":{\"842\":1}}],[\"在使用别名方法时\",{\"1\":{\"30\":1}}],[\"在触发执行函数之前触发\",{\"1\":{\"835\":1}}],[\"在后台更新\",{\"1\":{\"825\":1}}],[\"在models下创建index\",{\"1\":{\"823\":1}}],[\"在model文件夹下创建\",{\"1\":{\"823\":1}}],[\"在app\",{\"1\":{\"823\":1}}],[\"在主入口文件index\",{\"1\":{\"822\":1,\"823\":1}}],[\"在项目的\",{\"1\":{\"821\":1}}],[\"在类组件中使用\",{\"0\":{\"801\":1}}],[\"在外部\",{\"1\":{\"732\":1,\"740\":1}}],[\"在外部声明一个数组\",{\"1\":{\"661\":1}}],[\"在路由渲染的时候会先执行内部逻辑\",{\"1\":{\"738\":1}}],[\"在路由入口处开启\",{\"1\":{\"732\":1}}],[\"在路由配置中不声明\",{\"1\":{\"430\":1}}],[\"在浏览器中直接打开这个路由组件\",{\"1\":{\"725\":1}}],[\"在浏览器渲染变更时阻塞执行\",{\"1\":{\"365\":1}}],[\"在浏览器渲染变更完成后非阻塞执行\",{\"1\":{\"365\":1}}],[\"在new\",{\"1\":{\"703\":1}}],[\"在新旧\",{\"1\":{\"702\":1}}],[\"在新旧节点均存在children时\",{\"1\":{\"692\":1}}],[\"在只包含运行的时候版本中并不存在该阶段\",{\"1\":{\"701\":1}}],[\"在双端比较方法中\",{\"1\":{\"692\":1}}],[\"在精细化比较函数\",{\"1\":{\"692\":1}}],[\"在patch阶段中有两种情况\",{\"1\":{\"692\":1}}],[\"在不同的生命周期或patch阶段\",{\"1\":{\"692\":1}}],[\"在不影响这\",{\"1\":{\"620\":1}}],[\"在index主入口文件\",{\"1\":{\"823\":1}}],[\"在index\",{\"1\":{\"675\":1,\"822\":1}}],[\"在initcomputed做类型兼容性判断\",{\"1\":{\"636\":1}}],[\"在更改前它们是同一个\",{\"1\":{\"672\":1}}],[\"在更新显示时\",{\"1\":{\"161\":1,\"461\":1}}],[\"在更新过程中被执行两次\",{\"1\":{\"156\":1}}],[\"在编译时会将\",{\"1\":{\"660\":1}}],[\"在遇到下一个\",{\"1\":{\"648\":1}}],[\"在遇到匹配的\",{\"1\":{\"648\":1}}],[\"在源码中找到\",{\"1\":{\"644\":1}}],[\"在页面的任意部分都可以访问得到\",{\"1\":{\"1349\":1}}],[\"在页面关闭时销毁\",{\"1\":{\"1349\":1}}],[\"在页面初始化之时\",{\"1\":{\"675\":1}}],[\"在页面中完成渲染\",{\"1\":{\"663\":1}}],[\"在页面中使用\",{\"1\":{\"450\":1}}],[\"在页面渲染呈现\",{\"1\":{\"644\":1}}],[\"在依赖值不更新时\",{\"1\":{\"636\":1}}],[\"在将当前\",{\"1\":{\"636\":1}}],[\"在definecomputed函数中\",{\"1\":{\"636\":1}}],[\"在watcher实例中开启依赖收集\",{\"1\":{\"635\":1}}],[\"在watcher中收集依赖\",{\"1\":{\"634\":1}}],[\"在当前场景中\",{\"1\":{\"631\":1,\"633\":1}}],[\"在createwatcher函数内对\",{\"1\":{\"628\":1}}],[\"在深入响应式原理中\",{\"1\":{\"623\":1}}],[\"在响应式声明函数definereactive中也为每个闭包函数创建一个\",{\"1\":{\"621\":1}}],[\"在收集依赖\",{\"1\":{\"608\":1}}],[\"在实例上声明一个响应式变化的\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"在预构建中强制排除的依赖项\",{\"1\":{\"577\":1}}],[\"在模板中均可以直接使用\",{\"1\":{\"534\":1}}],[\"在模板中绑定事件时传递好参数\",{\"1\":{\"417\":1}}],[\"在子组件中通过\",{\"1\":{\"520\":1}}],[\"在哪个组件都可以访问\",{\"1\":{\"519\":1}}],[\"在哪里都可以访问\",{\"1\":{\"519\":1}}],[\"在传给孙组件\",{\"1\":{\"515\":1}}],[\"在传递给\",{\"1\":{\"43\":1}}],[\"在插入\",{\"1\":{\"507\":1}}],[\"在函数环境下的\",{\"1\":{\"1423\":1}}],[\"在函数作用域也有提前声明特性\",{\"1\":{\"1350\":1}}],[\"在函数中要访问全局变量可以使用\",{\"1\":{\"1350\":1}}],[\"在函数组件中使用\",{\"0\":{\"805\":1}}],[\"在函数组件主体内\",{\"1\":{\"365\":1}}],[\"在函数内\",{\"1\":{\"1350\":1}}],[\"在函数内异步操作即可\",{\"1\":{\"755\":1}}],[\"在函数内部进行计算\",{\"1\":{\"451\":1}}],[\"在router配置项中对目标路由的meta属性对象中添加isauth的布尔值\",{\"1\":{\"436\":1}}],[\"在react\",{\"1\":{\"313\":1}}],[\"在react17以前的老式babel转换写法\",{\"1\":{\"248\":1}}],[\"在父组件中给子组件绑定自定义事件\",{\"1\":{\"514\":1}}],[\"在父组件子组件添加自定义属性\",{\"1\":{\"510\":1}}],[\"在父组件和子组件之间添加一个\",{\"1\":{\"91\":1}}],[\"在父路由内部子路由之间相互切换\",{\"1\":{\"434\":1}}],[\"在此之前有\",{\"1\":{\"1328\":1}}],[\"在此触发更新\",{\"1\":{\"395\":1}}],[\"在此可以执行任何带副作用操作\",{\"1\":{\"185\":1}}],[\"在fiber\",{\"1\":{\"393\":1}}],[\"在初始化过程中\",{\"1\":{\"700\":1}}],[\"在初始化最后\",{\"1\":{\"632\":1}}],[\"在初始化\",{\"1\":{\"339\":1,\"623\":1}}],[\"在原生组件初次挂载的时候\",{\"1\":{\"327\":1}}],[\"在调度计划中\",{\"1\":{\"323\":1}}],[\"在派发函数\",{\"1\":{\"323\":1}}],[\"在上面例子中\",{\"1\":{\"1391\":1}}],[\"在上面示例的正则表达式中\",{\"1\":{\"1391\":1}}],[\"在上面示例中\",{\"1\":{\"1385\":1,\"1388\":1,\"1389\":1}}],[\"在上面需要获取\",{\"1\":{\"299\":1}}],[\"在上面的源码中\",{\"1\":{\"388\":1}}],[\"在上面的\",{\"1\":{\"197\":1}}],[\"在回调函数执行完成\",{\"1\":{\"294\":1}}],[\"在未能获取到下一级子\",{\"1\":{\"273\":1}}],[\"在最后的提交阶段插入此节点\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"在分辨出首次挂载或更新的情况后\",{\"1\":{\"272\":1}}],[\"在src\",{\"1\":{\"249\":1}}],[\"在卸载时\",{\"1\":{\"234\":1}}],[\"在侦听器内部\",{\"1\":{\"234\":1}}],[\"在这些方法中\",{\"1\":{\"1391\":1}}],[\"在这些钩子中编写的任何代码都应该直接在\",{\"1\":{\"585\":1}}],[\"在这个模式中\",{\"1\":{\"1391\":1}}],[\"在这个正则表达式中\",{\"1\":{\"1382\":1}}],[\"在这个映射中\",{\"1\":{\"1103\":1}}],[\"在这个类组件中提供复用的状态逻辑代码\",{\"1\":{\"86\":1}}],[\"在这里需要指定为\",{\"1\":{\"868\":1}}],[\"在这里我们直接用这个\",{\"1\":{\"262\":1}}],[\"在这里我们只讨论元素纵向滚动\",{\"1\":{\"96\":1}}],[\"在这之前我们已经了解到\",{\"1\":{\"273\":1}}],[\"在这张组件树图例中\",{\"1\":{\"97\":1}}],[\"在某页面内指定一个或多个滚动容器元素\",{\"1\":{\"96\":1}}],[\"在组件被创建之前\",{\"1\":{\"584\":1}}],[\"在组件内配置项书写\",{\"1\":{\"438\":1}}],[\"在组件仅进行简单操作时\",{\"1\":{\"411\":1}}],[\"在组件中使用\",{\"1\":{\"410\":1}}],[\"在组件中引入\",{\"1\":{\"212\":1}}],[\"在组件标签内部\",{\"1\":{\"230\":1}}],[\"在组件标签内部声明的\",{\"1\":{\"87\":1}}],[\"在组件外部就能向组件内部指定的位置写入任何\",{\"1\":{\"229\":1}}],[\"在组件的\",{\"1\":{\"87\":1}}],[\"在\",{\"1\":{\"84\":1,\"107\":1,\"139\":1,\"153\":1,\"215\":1,\"231\":1,\"240\":1,\"257\":1,\"263\":1,\"270\":1,\"273\":1,\"296\":1,\"323\":1,\"330\":1,\"411\":1,\"450\":1,\"451\":1,\"467\":1,\"474\":1,\"475\":1,\"535\":1,\"536\":1,\"566\":2,\"590\":1,\"591\":2,\"593\":1,\"605\":4,\"620\":1,\"621\":2,\"625\":1,\"628\":3,\"633\":1,\"634\":2,\"636\":2,\"648\":1,\"696\":1,\"700\":1,\"702\":1,\"703\":1,\"733\":2,\"750\":1,\"832\":1,\"843\":2,\"847\":1,\"868\":1,\"966\":1,\"1006\":1,\"1011\":1,\"1012\":1,\"1013\":1,\"1059\":1,\"1103\":1,\"1119\":1,\"1231\":2,\"1362\":1,\"1367\":1,\"1380\":1,\"1381\":1,\"1391\":1,\"1396\":1,\"1407\":2,\"1415\":1,\"1423\":1,\"1424\":1,\"1429\":1,\"1436\":1,\"1440\":1,\"1448\":1,\"1449\":1,\"1450\":1}}],[\"在发送请求之前做些什么\",{\"1\":{\"66\":1}}],[\"在请求或响应被\",{\"1\":{\"66\":1}}],[\"在没有设置\",{\"1\":{\"47\":1}}],[\"对任何一个的操作都会相互的影响\",{\"1\":{\"1396\":1}}],[\"对表达式分组的引用\",{\"1\":{\"1391\":1}}],[\"对表达式进行迭代形式如下\",{\"1\":{\"1016\":1}}],[\"对基本数据类型的值去调用属性和方法时\",{\"1\":{\"1371\":1}}],[\"对数进行下舍入\",{\"1\":{\"1370\":1}}],[\"对数进行上舍入\",{\"1\":{\"1370\":1}}],[\"对数组的处理是重写了数组原型上的\",{\"1\":{\"620\":1}}],[\"对数组的变更方法进行了包裹\",{\"1\":{\"548\":1}}],[\"对非连续数组\",{\"1\":{\"1352\":1}}],[\"对事件\",{\"1\":{\"1279\":1}}],[\"对参数进行读写\",{\"1\":{\"1180\":1}}],[\"对使用者的要求较低\",{\"1\":{\"1003\":1}}],[\"对设备来讲\",{\"1\":{\"949\":1}}],[\"对齐格式\",{\"1\":{\"939\":1}}],[\"对齐文本\",{\"0\":{\"890\":1},\"1\":{\"888\":1}}],[\"对背景图像实现平铺\",{\"1\":{\"904\":1}}],[\"对ids进行排序\",{\"1\":{\"816\":1}}],[\"对一份数据直接进行修改操作\",{\"1\":{\"793\":1}}],[\"对同步方法无效\",{\"1\":{\"763\":1}}],[\"对视图组件执行\",{\"1\":{\"753\":1}}],[\"对登录状态判断来进行拦截\",{\"1\":{\"733\":1}}],[\"对子节点的递推转化主要采用堆栈后进先出的特性\",{\"1\":{\"702\":1}}],[\"对插值语法\",{\"1\":{\"701\":1}}],[\"对computed和watch初始化侦听器\",{\"1\":{\"700\":1}}],[\"对不起\",{\"1\":{\"672\":1}}],[\"对不同类型的\",{\"1\":{\"273\":1}}],[\"对其\",{\"1\":{\"636\":1}}],[\"对每个操作数求值\",{\"1\":{\"1265\":1}}],[\"对每个属性都实现object\",{\"1\":{\"620\":1}}],[\"对每一个属性都开启监听\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"对存储的数据进行更新\",{\"1\":{\"607\":1,\"609\":1,\"616\":1}}],[\"对标签中的文本值做大小写转换\",{\"1\":{\"894\":1}}],[\"对标原生\",{\"1\":{\"722\":1,\"723\":1}}],[\"对标vue2\",{\"1\":{\"609\":1,\"616\":1}}],[\"对标\",{\"1\":{\"607\":1}}],[\"对标类组件\",{\"1\":{\"203\":1}}],[\"对val变量开启observe类型判断与监听\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"对obj作for\",{\"1\":{\"600\":1}}],[\"对obj\",{\"1\":{\"600\":1}}],[\"对需要数据劫持的对象初始化\",{\"1\":{\"598\":1}}],[\"对用户来说是不可见的\",{\"1\":{\"593\":1}}],[\"对值所具有的结构进行类型检查\",{\"1\":{\"580\":1}}],[\"对这些\",{\"1\":{\"561\":1}}],[\"对这个普通对象的所有操作\",{\"1\":{\"556\":1}}],[\"对源对象的属性进行操作\",{\"1\":{\"549\":1}}],[\"对属性的读取\",{\"1\":{\"548\":1}}],[\"对要显示的数据进行特定格式化后\",{\"1\":{\"466\":1}}],[\"对要显示的数据进行特定格式化后再显示\",{\"1\":{\"466\":1}}],[\"对比新旧节点oldvnode和newvnode\",{\"1\":{\"692\":1}}],[\"对比\",{\"0\":{\"550\":1},\"1\":{\"450\":1}}],[\"对路由进行权限控制\",{\"1\":{\"435\":1}}],[\"对话的方法\",{\"1\":{\"416\":1,\"417\":1}}],[\"对原生的\",{\"1\":{\"330\":1}}],[\"对新\",{\"1\":{\"323\":1}}],[\"对监听函数\",{\"1\":{\"287\":1}}],[\"对根节点\",{\"1\":{\"277\":1}}],[\"对于采用大括号表示的语句\",{\"1\":{\"1398\":1}}],[\"对于正则表达式\",{\"1\":{\"1385\":1}}],[\"对于自结束标签\",{\"1\":{\"1085\":1}}],[\"对于嵌套或\",{\"1\":{\"799\":1}}],[\"对于其返回值\",{\"1\":{\"739\":1}}],[\"对于父节点发生变化的场景\",{\"1\":{\"672\":1}}],[\"对于数组和对象的元素修改无影响\",{\"1\":{\"1159\":1}}],[\"对于数组方法\",{\"1\":{\"621\":1}}],[\"对于数组仍无法正确处理\",{\"1\":{\"603\":1}}],[\"对于一个\",{\"1\":{\"439\":1}}],[\"对于需要完成更新的原生标签组件\",{\"1\":{\"323\":1}}],[\"对于根节点\",{\"1\":{\"274\":1}}],[\"对于\",{\"1\":{\"272\":1,\"1277\":2}}],[\"对于当前的简单\",{\"1\":{\"272\":1}}],[\"对于树形结构的遍历\",{\"1\":{\"266\":1}}],[\"对虚拟\",{\"1\":{\"272\":1}}],[\"对应多个\",{\"1\":{\"1054\":1}}],[\"对应三种状态\",{\"1\":{\"786\":1}}],[\"对应路径\",{\"1\":{\"712\":3}}],[\"对应\",{\"1\":{\"313\":1,\"418\":1,\"467\":1,\"847\":1}}],[\"对应的属性也不会发生冲突\",{\"1\":{\"1170\":1}}],[\"对应的还有\",{\"1\":{\"1126\":1}}],[\"对应的组件就会显示\",{\"1\":{\"423\":1}}],[\"对应的fiber\",{\"1\":{\"327\":1}}],[\"对应的\",{\"1\":{\"296\":1,\"410\":1,\"411\":1}}],[\"对应的不同组件执行不同情况的\",{\"1\":{\"273\":1}}],[\"对应的数据相对于可滚动区域最底部的偏移位置\",{\"1\":{\"96\":1}}],[\"对应的数据在整个列表中的偏移位置\",{\"1\":{\"96\":1}}],[\"对应真实dom\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"对应真实的dom节点\",{\"1\":{\"270\":1,\"272\":1}}],[\"对目标\",{\"1\":{\"200\":1}}],[\"对变量重新赋值\",{\"1\":{\"195\":1}}],[\"对外暴露数据\",{\"1\":{\"87\":1}}],[\"对请求数据进行初始化转化\",{\"1\":{\"68\":1}}],[\"对请求方法\",{\"1\":{\"66\":1}}],[\"对请求错误做些什么\",{\"1\":{\"66\":1}}],[\"对响应结果进行转换处理\",{\"1\":{\"68\":1}}],[\"对响应数据进行修改限制\",{\"1\":{\"66\":1}}],[\"对响应数据做点什么\",{\"1\":{\"66\":1}}],[\"对响应错误做点什么\",{\"1\":{\"66\":1}}],[\"对\",{\"1\":{\"42\":1,\"43\":1,\"67\":1,\"149\":1,\"235\":1,\"350\":1,\"406\":1,\"479\":1,\"578\":1,\"637\":1,\"812\":1}}],[\"对象有一个属性\",{\"1\":{\"1439\":1}}],[\"对象原型的意义在于为对象成员查找机制提供方向\",{\"1\":{\"1442\":1}}],[\"对象原型的意义在于为对象的查找机制提供一个方向\",{\"1\":{\"1439\":1}}],[\"对象原型和原型对象\",{\"1\":{\"1439\":1}}],[\"对象原型\",{\"0\":{\"1439\":1}}],[\"对象原形上的属性其不会检测\",{\"1\":{\"1402\":1}}],[\"对象就是全局执行上下文的变量对象\",{\"1\":{\"1423\":1}}],[\"对象就可以使用\",{\"1\":{\"1283\":1}}],[\"对象是\",{\"1\":{\"1415\":1}}],[\"对象是一种复合的数据类型\",{\"1\":{\"1338\":1}}],[\"对象时\",{\"1\":{\"1410\":1}}],[\"对象时额外声明了\",{\"1\":{\"339\":1}}],[\"对象之上\",{\"1\":{\"1402\":1}}],[\"对象字面量表示\",{\"1\":{\"1397\":1}}],[\"对象字面值的属性名可以加引号也可以不加\",{\"1\":{\"1341\":1}}],[\"对象属性模型的相关方法\",{\"1\":{\"1408\":1}}],[\"对象属性\",{\"0\":{\"1369\":1}}],[\"对象属性保存\",{\"1\":{\"1349\":1}}],[\"对象以四位数字返回年份\",{\"1\":{\"1367\":1}}],[\"对象表示一个时间\",{\"1\":{\"1367\":1}}],[\"对象方法调用\",{\"1\":{\"1446\":1}}],[\"对象方法\",{\"0\":{\"1370\":1},\"1\":{\"1445\":1}}],[\"对象方法保存\",{\"1\":{\"1349\":1}}],[\"对象方法扩展\",{\"0\":{\"1208\":1}}],[\"对象拷贝\",{\"0\":{\"1332\":1,\"1459\":1}}],[\"对象可以相互转换\",{\"1\":{\"1284\":1}}],[\"对象包装后产生对象\",{\"1\":{\"1284\":1}}],[\"对象本质\",{\"1\":{\"1284\":1}}],[\"对象本身的标签也包含进去了\",{\"1\":{\"1091\":1}}],[\"对象获取的元素就是\",{\"1\":{\"1284\":1}}],[\"对象和\",{\"0\":{\"1284\":1},\"1\":{\"1284\":1}}],[\"对象都成功\",{\"1\":{\"1226\":1}}],[\"对象都会返回一个\",{\"1\":{\"213\":1}}],[\"对象合并\",{\"1\":{\"1184\":1}}],[\"对象扩展\",{\"0\":{\"1182\":1}}],[\"对象状态由回调函数的执行结果来决定\",{\"1\":{\"1177\":1}}],[\"对象进行\",{\"1\":{\"1171\":1}}],[\"对象来实现\",{\"1\":{\"1131\":1}}],[\"对象改为事件对象\",{\"1\":{\"1131\":1}}],[\"对象已经加载完毕\",{\"1\":{\"1119\":1}}],[\"对象下创建\",{\"1\":{\"1094\":1}}],[\"对象调用\",{\"1\":{\"1085\":1}}],[\"对象作为\",{\"1\":{\"1079\":1}}],[\"对象自己保存自己的定时器标识\",{\"1\":{\"1073\":1}}],[\"对象等一切可被序列化的值\",{\"1\":{\"847\":1}}],[\"对象再\",{\"1\":{\"739\":1}}],[\"对象渲染为虚拟\",{\"1\":{\"674\":1}}],[\"对象描述\",{\"1\":{\"666\":1}}],[\"对象路径解析函数\",{\"1\":{\"657\":1}}],[\"对象目标路径\",{\"1\":{\"621\":1}}],[\"对象逐层递归实例化\",{\"1\":{\"621\":1}}],[\"对象内部属性变化无法监测\",{\"1\":{\"610\":1}}],[\"对象不存在\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"对象传入\",{\"1\":{\"593\":1}}],[\"对象仅有一个\",{\"1\":{\"586\":1}}],[\"对象只有包含接口中定义的所有属性和方法时才能匹配接口\",{\"1\":{\"580\":1}}],[\"对象类型\",{\"1\":{\"548\":1}}],[\"对象类型的数据\",{\"1\":{\"536\":1}}],[\"对象数组\",{\"1\":{\"516\":1}}],[\"对象中有\",{\"1\":{\"1407\":1}}],[\"对象中大部分属性已经不能帮助识别浏览器了\",{\"1\":{\"1064\":1}}],[\"对象中的\",{\"1\":{\"632\":1}}],[\"对象中的属性\",{\"1\":{\"534\":1}}],[\"对象中\",{\"1\":{\"470\":1,\"744\":1}}],[\"对象中定义计算属性\",{\"1\":{\"450\":1}}],[\"对象监听时\",{\"1\":{\"451\":1}}],[\"对象写法与\",{\"1\":{\"455\":1}}],[\"对象写法\",{\"1\":{\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"454\":1}}],[\"对象接受一个名为\",{\"1\":{\"216\":1}}],[\"对象最终都会被\",{\"1\":{\"120\":1}}],[\"对象上所有属性\",{\"1\":{\"74\":1}}],[\"对象返回月份\",{\"1\":{\"1367\":1}}],[\"对象返回一周中的某一天\",{\"1\":{\"1367\":1}}],[\"对象返回一个月中的某一天\",{\"1\":{\"1367\":1}}],[\"对象返回成功的时机取决于何时去调用方法实现\",{\"1\":{\"71\":1}}],[\"对象返回给\",{\"1\":{\"68\":1}}],[\"对象的属性方法\",{\"1\":{\"1423\":1}}],[\"对象的属性存在\",{\"1\":{\"1079\":1}}],[\"对象的原始值\",{\"1\":{\"1370\":1}}],[\"对象的毫秒\",{\"1\":{\"1367\":1}}],[\"对象的秒数\",{\"1\":{\"1367\":1}}],[\"对象的分钟\",{\"1\":{\"1367\":1}}],[\"对象的小时\",{\"1\":{\"1367\":1}}],[\"对象的每一个键值对的键\",{\"1\":{\"1274\":1}}],[\"对象的结果由\",{\"1\":{\"1205\":1}}],[\"对象的解构\",{\"1\":{\"1160\":1}}],[\"对象的文本\",{\"1\":{\"1091\":1}}],[\"对象的$watch\",{\"1\":{\"451\":1}}],[\"对象的标识符\",{\"1\":{\"161\":1,\"461\":1}}],[\"对象的\",{\"1\":{\"71\":1,\"313\":1,\"843\":1,\"1171\":1}}],[\"对象\",{\"0\":{\"675\":1,\"1060\":1,\"1284\":1,\"1338\":1},\"1\":{\"22\":1,\"35\":1,\"45\":1,\"65\":1,\"68\":1,\"71\":4,\"96\":2,\"103\":1,\"120\":1,\"122\":1,\"126\":1,\"159\":2,\"192\":1,\"212\":2,\"249\":1,\"313\":1,\"323\":2,\"460\":1,\"474\":1,\"516\":1,\"536\":2,\"537\":1,\"553\":2,\"558\":1,\"586\":1,\"601\":2,\"602\":1,\"603\":2,\"604\":1,\"609\":1,\"610\":1,\"617\":1,\"620\":1,\"636\":3,\"663\":1,\"675\":2,\"692\":1,\"743\":1,\"764\":1,\"807\":1,\"840\":1,\"841\":1,\"842\":2,\"843\":2,\"1077\":1,\"1097\":1,\"1129\":2,\"1177\":1,\"1205\":3,\"1206\":1,\"1229\":2,\"1231\":1,\"1241\":1,\"1247\":1,\"1275\":3,\"1284\":3,\"1319\":3,\"1341\":1,\"1350\":1,\"1367\":1,\"1408\":1,\"1410\":1,\"1413\":2,\"1415\":1,\"1416\":1,\"1423\":2,\"1424\":1,\"1449\":1}}],[\"或表示动画时长的毫秒数值\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"或宽\",{\"1\":{\"1124\":1}}],[\"或获取\",{\"1\":{\"1091\":1}}],[\"或定义列表\",{\"1\":{\"1054\":1}}],[\"或域名访问\",{\"1\":{\"945\":1}}],[\"或直接写\",{\"1\":{\"911\":1}}],[\"或显示自定义字符串\",{\"1\":{\"897\":1}}],[\"或返回resolve该路径的promise对象\",{\"1\":{\"739\":1}}],[\"或刷新页面\",{\"1\":{\"725\":1}}],[\"或数组\",{\"1\":{\"537\":1}}],[\"或挂载成功后的触发事件中\",{\"1\":{\"497\":1}}],[\"或组件实例对象\",{\"1\":{\"452\":2,\"470\":1}}],[\"或简写为\",{\"1\":{\"446\":1,\"447\":1}}],[\"或两个\",{\"1\":{\"242\":1}}],[\"或函数组件\",{\"1\":{\"238\":1}}],[\"或项目开发中对封装组件保留内部可操作方法\",{\"1\":{\"191\":1}}],[\"或父组件\",{\"1\":{\"167\":1,\"171\":1}}],[\"或者在自己函数调用的下级函数中调用自己\",{\"1\":{\"1458\":1}}],[\"或者在用户点击播放按钮前显示的图像\",{\"1\":{\"1021\":1}}],[\"或者希望提高匹配速度来说\",{\"1\":{\"1392\":1}}],[\"或者重复出现任意多次\",{\"1\":{\"1384\":1}}],[\"或者是\",{\"1\":{\"1150\":1}}],[\"或者是已经冻结对象\",{\"1\":{\"627\":1}}],[\"或者一些装饰性的小图片或者超大背景图\",{\"1\":{\"903\":1}}],[\"或者追加到旧节点的子节点头部\",{\"1\":{\"676\":1}}],[\"或者修改一个对象的现有属性\",{\"1\":{\"599\":1,\"1407\":1}}],[\"或者类型定义\",{\"1\":{\"581\":1}}],[\"或者\",{\"1\":{\"558\":1,\"887\":2,\"889\":1,\"932\":1,\"966\":1,\"1015\":1,\"1228\":1,\"1231\":2,\"1376\":1}}],[\"或者当前任务不合法\",{\"1\":{\"395\":1}}],[\"或者组件存在\",{\"1\":{\"272\":1}}],[\"或者更新队列里有内容\",{\"1\":{\"272\":1}}],[\"或者简称为\",{\"1\":{\"184\":1}}],[\"或者不需要存在于页面中\",{\"1\":{\"165\":1}}],[\"或者新对象赋值\",{\"1\":{\"103\":1}}],[\"或者设置为\",{\"1\":{\"59\":1}}],[\"或者点击右上角搜索按钮可以获得更好的阅读体验\",{\"1\":{\"0\":1}}],[\"或\",{\"1\":{\"42\":2,\"45\":1,\"59\":2,\"66\":1,\"103\":1,\"126\":1,\"139\":1,\"242\":2,\"257\":1,\"274\":1,\"323\":1,\"354\":1,\"422\":1,\"451\":1,\"466\":1,\"470\":1,\"475\":2,\"500\":1,\"583\":1,\"647\":5,\"654\":2,\"682\":1,\"937\":1,\"985\":1,\"1025\":1,\"1102\":1,\"1264\":1}}],[\"通俗易懂\",{\"1\":{\"985\":1}}],[\"通称行内式引入\",{\"1\":{\"867\":1}}],[\"通配符选择器\",{\"0\":{\"864\":1},\"1\":{\"864\":1}}],[\"通知\",{\"1\":{\"628\":1}}],[\"通知监听更新依赖\",{\"1\":{\"621\":1}}],[\"通知更新\",{\"1\":{\"609\":1,\"615\":1,\"635\":1,\"700\":1}}],[\"通知组件\",{\"1\":{\"605\":1}}],[\"通信\",{\"0\":{\"519\":1}}],[\"通用的导入方式\",{\"1\":{\"1191\":1}}],[\"通用语法\",{\"1\":{\"1106\":1}}],[\"通用\",{\"0\":{\"132\":1}}],[\"通用型方法\",{\"0\":{\"21\":1}}],[\"通用型\",{\"1\":{\"17\":1}}],[\"通常的网站以\",{\"1\":{\"1025\":1}}],[\"通常是一个变量\",{\"1\":{\"1269\":1}}],[\"通常是从盘符开始的路径\",{\"1\":{\"1045\":1}}],[\"通常是\",{\"1\":{\"1025\":1}}],[\"通常是将段落的首行缩进\",{\"1\":{\"892\":1}}],[\"通常使用二倍图\",{\"1\":{\"953\":1}}],[\"通常用来解决如下问题\",{\"1\":{\"900\":1}}],[\"通常用于集体声明\",{\"1\":{\"872\":1}}],[\"通常用于组件库组件向外暴露可用方法\",{\"1\":{\"191\":1}}],[\"通常情况下\",{\"1\":{\"836\":1,\"957\":1}}],[\"通常在修改\",{\"1\":{\"103\":1}}],[\"通常包含协议+基础域名\",{\"1\":{\"41\":1}}],[\"通过递归调用\",{\"1\":{\"1461\":1}}],[\"通过继承的属性新建一个属性\",{\"1\":{\"1433\":1}}],[\"通过描述对象\",{\"1\":{\"1408\":2}}],[\"通过颠倒\",{\"1\":{\"1391\":1}}],[\"通过前缀符号$与正则表达式中表达式分组的编号来引用这些临时属性\",{\"1\":{\"1391\":1}}],[\"通过上面示例可以看到\",{\"1\":{\"1391\":1}}],[\"通过上述两种语法获取的样式都是只读的\",{\"1\":{\"1106\":1}}],[\"通过引用前面表达式分组匹配的文本\",{\"1\":{\"1391\":1}}],[\"通过分组可以在一个完整的字符模式中定义一个或多个表达式分组\",{\"1\":{\"1390\":1}}],[\"通过这个方法也可以为元素绑定响应函数\",{\"1\":{\"1130\":1}}],[\"通过祖先元素来处理事件\",{\"1\":{\"1127\":1}}],[\"通过元素\",{\"1\":{\"1092\":1}}],[\"通过元素节点获取文本节点\",{\"1\":{\"1084\":1}}],[\"通过标签名获取一组元素节点对象\",{\"1\":{\"1085\":1,\"1092\":1}}],[\"通过标签的\",{\"1\":{\"1034\":1}}],[\"通过启动\",{\"1\":{\"1071\":1}}],[\"通过它可以获取地址栏信息\",{\"1\":{\"1065\":1}}],[\"通过该对象我们可以在整个文档访问内查找节点对象\",{\"1\":{\"1079\":1}}],[\"通过该对象可以识别不同浏览器\",{\"1\":{\"1064\":1}}],[\"通过该实例调用原型上的\",{\"1\":{\"165\":1}}],[\"通过<textarea>标签可以轻松地创建多行文本输入框\",{\"1\":{\"1057\":1}}],[\"通过在\",{\"1\":{\"965\":1}}],[\"通过盒子的宽度设置成百分比来根据屏幕的宽度进行伸缩\",{\"1\":{\"960\":1}}],[\"通过判断屏幕宽度来改变样式\",{\"1\":{\"958\":1}}],[\"通过判断设备\",{\"1\":{\"957\":1}}],[\"通过判断老\",{\"1\":{\"323\":1}}],[\"通过手机访问服务器\",{\"1\":{\"945\":1}}],[\"通过一些技巧\",{\"1\":{\"920\":1}}],[\"通过一个对象代理对另一个对象中属性的操作\",{\"1\":{\"468\":1}}],[\"通过一个值为函数的\",{\"1\":{\"87\":1}}],[\"通过背景属性\",{\"1\":{\"901\":1}}],[\"通过不同的方式组合而成的\",{\"1\":{\"869\":1}}],[\"通过不断执行\",{\"1\":{\"287\":1}}],[\"通过此种方式\",{\"1\":{\"866\":1}}],[\"通过调用\",{\"1\":{\"849\":1}}],[\"通过调用watcher的update函数\",{\"1\":{\"633\":1,\"634\":1}}],[\"通过设置\",{\"1\":{\"837\":1}}],[\"通过或默认查询实例会将缓存的数据视为过时\",{\"1\":{\"836\":1}}],[\"通过属性直接操作\",{\"1\":{\"753\":1}}],[\"通过者再正确渲染组件\",{\"1\":{\"740\":1}}],[\"通过const\",{\"1\":{\"720\":1}}],[\"通过customref去实现自定义\",{\"1\":{\"557\":1}}],[\"通过渲染函数\",{\"1\":{\"702\":1}}],[\"通过对开始标签\",{\"1\":{\"663\":1}}],[\"通过对象递归逐层实例化\",{\"1\":{\"620\":1}}],[\"通过使用特殊字符序列$1\",{\"1\":{\"1391\":1}}],[\"通过使用\",{\"1\":{\"550\":1,\"1228\":1}}],[\"通过重写更新数组的一系列方法实现拦截\",{\"1\":{\"548\":1}}],[\"通过代理对象操作源对象内部数据进行操作\",{\"1\":{\"537\":1}}],[\"通过控制\",{\"1\":{\"474\":1}}],[\"通过通过\",{\"1\":{\"451\":1}}],[\"通过路由规则\",{\"1\":{\"438\":2}}],[\"通过名字跳转\",{\"1\":{\"427\":1}}],[\"通过切换\",{\"1\":{\"425\":1}}],[\"通过object\",{\"1\":{\"339\":1,\"548\":1,\"550\":1}}],[\"通过renderwithhooks中对全局对象reactcurrentdispatcher\",{\"1\":{\"309\":1}}],[\"通过react\",{\"1\":{\"111\":1}}],[\"通过提供像\",{\"1\":{\"229\":1}}],[\"通过函数提供\",{\"1\":{\"1201\":1}}],[\"通过函数调用继续返回函数的方式\",{\"1\":{\"159\":1}}],[\"通过函数对象的\",{\"1\":{\"143\":1}}],[\"通过event\",{\"1\":{\"158\":1}}],[\"通过更新组件的\",{\"1\":{\"142\":1}}],[\"通过闭包对象\",{\"1\":{\"116\":1}}],[\"通过state\",{\"1\":{\"103\":1}}],[\"通过\",{\"1\":{\"68\":1,\"71\":1,\"86\":1,\"158\":1,\"257\":1,\"263\":1,\"272\":1,\"274\":1,\"410\":1,\"500\":1,\"505\":1,\"515\":1,\"549\":2,\"626\":1,\"649\":1,\"827\":1,\"829\":1,\"836\":1,\"842\":1,\"843\":1,\"920\":1,\"1085\":4,\"1092\":2,\"1105\":2,\"1388\":1,\"1389\":1,\"1438\":1}}],[\"之所以把字符串放到对象章节\",{\"1\":{\"1372\":1}}],[\"之间运行一个\",{\"1\":{\"770\":1}}],[\"之间需要采用双指针与双层循环\",{\"1\":{\"676\":1}}],[\"之间\",{\"1\":{\"676\":1,\"1307\":1}}],[\"之间收集到的\",{\"1\":{\"647\":1,\"654\":1}}],[\"之间的随机数公式\",{\"1\":{\"1370\":1}}],[\"之间的随机数\",{\"1\":{\"1370\":1}}],[\"之间的交互是通过事件实现的\",{\"1\":{\"1117\":1}}],[\"之间的联系\",{\"1\":{\"753\":1}}],[\"之间的tokens整合起来\",{\"1\":{\"656\":1}}],[\"之间的待嵌套包裹的数组\",{\"1\":{\"648\":1}}],[\"之间的耦合度\",{\"1\":{\"636\":1}}],[\"之间的关系\",{\"1\":{\"623\":1}}],[\"之间的双向响应\",{\"1\":{\"595\":1}}],[\"之间的映射\",{\"1\":{\"585\":1}}],[\"之外的字符串分割开并返回分割字符串\",{\"1\":{\"646\":1}}],[\"之一的\",{\"1\":{\"628\":1,\"636\":1}}],[\"之前存放的数据全部清除\",{\"1\":{\"1312\":1}}],[\"之前存在的问题\",{\"1\":{\"259\":1}}],[\"之前的各种扩展\",{\"1\":{\"811\":1}}],[\"之前的状态prestate\",{\"1\":{\"749\":1}}],[\"之前的\",{\"1\":{\"705\":1}}],[\"之前的新fiber\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"之前又遇到\",{\"1\":{\"648\":1}}],[\"之前\",{\"1\":{\"648\":1,\"680\":1,\"681\":2,\"682\":1,\"1228\":1}}],[\"之前执行一次\",{\"1\":{\"535\":1}}],[\"之前是\",{\"1\":{\"2\":1}}],[\"之后执行的语句\",{\"1\":{\"1277\":2}}],[\"之后设置盒子的位置\",{\"1\":{\"980\":1}}],[\"之后内部子元素采取浮动排列左右位置\",{\"1\":{\"979\":1,\"980\":1}}],[\"之后会到达\",{\"1\":{\"748\":1}}],[\"之后也直接插入到旧前指针\",{\"1\":{\"681\":1}}],[\"之后就移动头指针\",{\"1\":{\"677\":1}}],[\"之后当依赖项的\",{\"1\":{\"593\":1}}],[\"之后控制台打印结果\",{\"1\":{\"301\":1}}],[\"之后\",{\"1\":{\"274\":1,\"277\":1,\"294\":1,\"505\":1,\"675\":1,\"676\":1,\"703\":1}}],[\"之后不变\",{\"1\":{\"196\":1}}],[\"之后发生了什么\",{\"1\":{\"134\":1}}],[\"之类\",{\"1\":{\"32\":1}}],[\"这说明\",{\"1\":{\"1424\":1}}],[\"这三个原生对象可以把原始类型的值变成\",{\"1\":{\"1415\":1}}],[\"这可以通过使用特殊转义序列\",{\"1\":{\"1391\":1}}],[\"这块空间有数据类型\",{\"1\":{\"1239\":1}}],[\"这意味着所有的小写字母均会被转换为大写\",{\"1\":{\"886\":1}}],[\"这意味着与普通的\",{\"1\":{\"584\":1}}],[\"这也是\",{\"1\":{\"814\":1}}],[\"这也就是\",{\"1\":{\"593\":1}}],[\"这表示\",{\"1\":{\"747\":1}}],[\"这部分正确的路由表最后会挂载至\",{\"1\":{\"740\":1}}],[\"这部分放到\",{\"1\":{\"618\":1}}],[\"这还是没考虑节点\",{\"1\":{\"676\":1}}],[\"这就利用了栈的先进后出的特点\",{\"1\":{\"648\":1}}],[\"这就是我们学习\",{\"1\":{\"639\":1}}],[\"这就导致了当项目中的内容或节点数量极其庞大时\",{\"1\":{\"257\":1}}],[\"这时\",{\"1\":{\"837\":1,\"1418\":1}}],[\"这时如果某个\",{\"1\":{\"650\":1}}],[\"这时由于\",{\"1\":{\"635\":1}}],[\"这时会新增第\",{\"1\":{\"162\":1}}],[\"这一最强大的\",{\"1\":{\"1005\":1}}],[\"这一段代码就在\",{\"1\":{\"634\":1}}],[\"这一段都没有讲清楚\",{\"1\":{\"634\":1}}],[\"这一步会将之前已注册的合成事件名进行原生事件名转化\",{\"1\":{\"277\":1}}],[\"这一步称为事件注册\",{\"1\":{\"277\":1}}],[\"这一步发生在\",{\"1\":{\"274\":2}}],[\"这不仅有学习成本\",{\"1\":{\"564\":1}}],[\"这实际上是让浏览器接管了打包程序的部分工作\",{\"1\":{\"530\":1}}],[\"这会引起堆栈溢出异常\",{\"1\":{\"365\":1}}],[\"这是严格模式\",{\"1\":{\"1453\":1}}],[\"这是浏览器的默认行为\",{\"1\":{\"1147\":1}}],[\"这是一种全新的使用方式\",{\"1\":{\"920\":1}}],[\"这是一个\",{\"1\":{\"632\":1,\"635\":1}}],[\"这是一个开销较大的操作\",{\"1\":{\"626\":1}}],[\"这是与标准的promise\",{\"1\":{\"771\":1}}],[\"这是个\",{\"1\":{\"626\":1}}],[\"这是注入的方法\",{\"1\":{\"517\":1}}],[\"这是默认数据\",{\"1\":{\"510\":1}}],[\"这是因为\",{\"1\":{\"505\":1,\"1126\":1}}],[\"这是因为父组件\",{\"1\":{\"91\":1}}],[\"这是第一个newfiber\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"这其中就包含事件冒泡\",{\"1\":{\"223\":1}}],[\"这里就是\",{\"1\":{\"966\":1}}],[\"这里可以理解为\",{\"1\":{\"813\":1}}],[\"这里可以直接获取dom\",{\"1\":{\"237\":1}}],[\"这里直接对\",{\"1\":{\"812\":1}}],[\"这里是轻量级的fragment\",{\"1\":{\"695\":1}}],[\"这里是官网的响应式原理原文\",{\"1\":{\"593\":1}}],[\"这里的\",{\"1\":{\"601\":1,\"626\":1}}],[\"这里只列\",{\"1\":{\"600\":1}}],[\"这里需要注意的是不同浏览器在控制台打印数据对象时对\",{\"1\":{\"593\":1}}],[\"这里需要判断\",{\"1\":{\"272\":1}}],[\"这里指在\",{\"1\":{\"365\":1}}],[\"这里引入一下打印日志函数\",{\"1\":{\"360\":1}}],[\"这里列举前两轮遍历的一种理想情况\",{\"1\":{\"355\":1}}],[\"这里列举一些与常见的\",{\"1\":{\"198\":1}}],[\"这里用到的关键函数就是createeventlistenerwrapperwithpriority\",{\"1\":{\"287\":1}}],[\"这里暂时只实现\",{\"1\":{\"273\":1}}],[\"这里我们默认参数为\",{\"1\":{\"674\":1}}],[\"这里我们新定义了一个\",{\"1\":{\"651\":1}}],[\"这里我们新建一个\",{\"1\":{\"648\":1}}],[\"这里我们称其为\",{\"1\":{\"272\":1}}],[\"这里我们借助\",{\"1\":{\"248\":1}}],[\"这里如果父\",{\"1\":{\"272\":1}}],[\"这里单向循环链表正式发挥作用\",{\"1\":{\"272\":1}}],[\"这里由于我们处在开发环境\",{\"1\":{\"249\":1}}],[\"这里主要应用场景是参数快速变化时候的发送请求的节流处理\",{\"1\":{\"204\":1}}],[\"这里为了防止每次写\",{\"1\":{\"203\":1}}],[\"这两个属性可以获取元素的可见宽度和高度\",{\"1\":{\"1111\":1}}],[\"这两个请求是并行的\",{\"1\":{\"771\":1}}],[\"这两个生命周期方法中的任意一个\",{\"1\":{\"242\":1}}],[\"这两类\",{\"1\":{\"196\":1}}],[\"这两种写法隔离都会失效\",{\"1\":{\"139\":1}}],[\"这些原型上的属性又是原型对象的自有属性\",{\"1\":{\"1402\":1}}],[\"这些字符被称为普通字符\",{\"1\":{\"1381\":1}}],[\"这些元素将会自动插入到开始位置索引前\",{\"1\":{\"1360\":1}}],[\"这些元素会自动添加到数组末尾\",{\"1\":{\"1355\":1}}],[\"这些元素开头的可以继承\",{\"1\":{\"931\":1}}],[\"这些内建对象的方法\",{\"1\":{\"1339\":1}}],[\"这些属性\",{\"1\":{\"1231\":1}}],[\"这些属性都是只读的\",{\"1\":{\"1111\":1}}],[\"这些属性都是不带\",{\"1\":{\"1111\":1}}],[\"这些属性都不必在配置中指定\",{\"1\":{\"30\":1}}],[\"这些bom对象在浏览器中都是作为window对象的属性保存的\",{\"1\":{\"1069\":1}}],[\"这些对象都属于\",{\"1\":{\"1061\":1}}],[\"这些规则最终会通过解析器\",{\"1\":{\"1004\":1}}],[\"这些多色图标在\",{\"1\":{\"918\":1}}],[\"这些标签都可以调用这个公共的类\",{\"1\":{\"862\":1}}],[\"这些都属于单节点\",{\"1\":{\"342\":1}}],[\"这些名字\",{\"1\":{\"229\":1}}],[\"这些值可以在全生命周期中随时调用\",{\"1\":{\"214\":1}}],[\"这些\",{\"1\":{\"162\":1,\"593\":1}}],[\"这种类型可以覆盖\",{\"1\":{\"1416\":1}}],[\"这种函数叫做立即执行函数\",{\"1\":{\"1346\":1}}],[\"这种样式不合法\",{\"1\":{\"1105\":1}}],[\"这种任务叫做异步任务\",{\"1\":{\"1076\":1}}],[\"这种用法其实是做了一个\",{\"1\":{\"920\":1}}],[\"这种文字类块级元素也不能放其他块级元素\",{\"1\":{\"876\":1}}],[\"这种情况下\",{\"1\":{\"355\":1}}],[\"这种情况下会在完成阶段把所有子阶段全部添加到自己身上\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"这种情况其实跟\",{\"1\":{\"350\":1}}],[\"这种组件可以捕获并打印发生在其子组件树任何位置的\",{\"1\":{\"241\":1}}],[\"这种依赖方式使组件更换更加容易\",{\"1\":{\"234\":1}}],[\"这种状态管理库\",{\"1\":{\"117\":1}}],[\"这种办法慎用\",{\"1\":{\"113\":1}}],[\"这个隐含参数就是\",{\"1\":{\"1446\":1}}],[\"这个对象称为函数执行的上下文对象\",{\"1\":{\"1446\":1}}],[\"这个对象就是我们所谓的原型对象\",{\"1\":{\"1438\":1}}],[\"这个对象是\",{\"1\":{\"1084\":1}}],[\"这个执行上下文儿中的变量对象就被激活\",{\"1\":{\"1423\":1}}],[\"这个过程\",{\"1\":{\"1423\":1}}],[\"这个过程中\",{\"1\":{\"644\":1}}],[\"这个点\",{\"1\":{\"1413\":1}}],[\"这个字符串将会成为数组中元素的连接符\",{\"1\":{\"1362\":1}}],[\"这个元素会把下一次所有的鼠标事件捕获到自身上\",{\"1\":{\"1141\":1}}],[\"这个属性对应着一个对象\",{\"1\":{\"1438\":1}}],[\"这个属性没有意义\",{\"1\":{\"1085\":1}}],[\"这个属性可以带一些参数\",{\"1\":{\"747\":1}}],[\"这个函数由我们创建但不由我们调用\",{\"1\":{\"1276\":1}}],[\"这个函数将会在动画执行完毕之后执行\",{\"1\":{\"1072\":1}}],[\"这个函数必须接收3个参数\",{\"1\":{\"674\":1,\"686\":1}}],[\"这个代码时不执行不显示到页面中的\",{\"1\":{\"1040\":1}}],[\"这个大图片也称为\",{\"1\":{\"916\":1}}],[\"这个是作用域插槽\",{\"1\":{\"520\":1}}],[\"这个是具名插槽\",{\"1\":{\"520\":1}}],[\"这个是\",{\"1\":{\"511\":1}}],[\"这个管道有两个端口\",{\"1\":{\"388\":1}}],[\"这个newfiber就是大儿子\",{\"1\":{\"361\":1}}],[\"这个索引的判断来进行增加\",{\"1\":{\"358\":1}}],[\"这个提交副作用函数中\",{\"1\":{\"330\":1}}],[\"这个方法的主要作用是融合\",{\"1\":{\"293\":1}}],[\"这个方法主要利用了原生\",{\"1\":{\"109\":1}}],[\"这个地方结束\",{\"1\":{\"272\":1}}],[\"这个链表的数据类型就是\",{\"1\":{\"268\":1}}],[\"这个\",{\"1\":{\"262\":1,\"746\":1,\"747\":1,\"841\":1}}],[\"这个技巧对于高阶组件非常有用\",{\"1\":{\"239\":1}}],[\"这个应用就是一个组件化的应用\",{\"1\":{\"131\":1}}],[\"这个应用就是一个模块化的应用\",{\"1\":{\"130\":1}}],[\"这个案例实际上通过巧妙的render\",{\"1\":{\"92\":1}}],[\"这几种方式不是\",{\"1\":{\"84\":1}}],[\"这几个请求方法\",{\"1\":{\"42\":1}}],[\"这将会设置一个\",{\"1\":{\"63\":1}}],[\"这将设置一个\",{\"1\":{\"51\":1}}],[\"这样不用分别为每一个对象添加\",{\"1\":{\"1438\":1}}],[\"这样表明后面的点表示调用对象属性\",{\"1\":{\"1413\":1}}],[\"这样一起使用会冲突\",{\"1\":{\"1333\":1}}],[\"这样一来\",{\"1\":{\"110\":1}}],[\"这样的变量名看上去就像骆驼峰一样此起彼伏\",{\"1\":{\"1240\":1}}],[\"这样的有多个点符号的值\",{\"1\":{\"650\":1}}],[\"这样当事件被触发时\",{\"1\":{\"1130\":1}}],[\"这样所导致的问题\",{\"1\":{\"1075\":1}}],[\"这样将关闭标识对应定时器\",{\"1\":{\"1063\":1}}],[\"这样通过闭包\",{\"1\":{\"608\":1}}],[\"这样孙组件通过emit触发parent组件中的监听函数\",{\"1\":{\"515\":1}}],[\"这样在\",{\"1\":{\"452\":1}}],[\"这样\",{\"1\":{\"229\":1,\"297\":1,\"452\":1}}],[\"这样逻辑上虽然可行\",{\"1\":{\"162\":1}}],[\"这样就会造成页面的渲染不连贯\",{\"1\":{\"1075\":1}}],[\"这样就算异步了\",{\"1\":{\"505\":1}}],[\"这样就不存在跨域问题\",{\"1\":{\"28\":1}}],[\"这样就避免了跨域问题\",{\"1\":{\"28\":1}}],[\"这样用户就只需要在80端口上进行交互就可以了\",{\"1\":{\"28\":1}}],[\"为函数开启严格模式\",{\"1\":{\"1453\":1}}],[\"为脚本开启严格模式\",{\"1\":{\"1453\":1}}],[\"为未来新版本\",{\"1\":{\"1452\":1}}],[\"为止\",{\"1\":{\"1442\":1}}],[\"为每一个对象都添加了一个方法\",{\"1\":{\"1436\":1}}],[\"为每个\",{\"1\":{\"621\":1}}],[\"为每个数据定义了\",{\"1\":{\"608\":1}}],[\"为小数\",{\"1\":{\"1376\":1}}],[\"为负值\",{\"1\":{\"1376\":1}}],[\"为底的\",{\"1\":{\"1369\":2}}],[\"为假\",{\"1\":{\"1271\":2}}],[\"为真\",{\"1\":{\"1271\":1}}],[\"为便于记忆\",{\"1\":{\"1231\":1}}],[\"为需要增加的字符串\",{\"1\":{\"1202\":2}}],[\"为引入模块的默认变量\",{\"1\":{\"1191\":1}}],[\"为对象\",{\"1\":{\"1177\":2}}],[\"为不同数据结构提供统一的访问机制\",{\"1\":{\"1172\":1}}],[\"为完整路径\",{\"1\":{\"1065\":1}}],[\"为窗口参数\",{\"1\":{\"1063\":1}}],[\"为子窗口句柄\",{\"1\":{\"1063\":1}}],[\"为子窗口页面地址\",{\"1\":{\"1063\":1}}],[\"为子组件\",{\"1\":{\"588\":1}}],[\"为在新窗口中打开方式\",{\"1\":{\"1042\":1}}],[\"为默认值\",{\"1\":{\"1042\":1}}],[\"为什么需要\",{\"1\":{\"1028\":1}}],[\"为什么需要定位\",{\"0\":{\"987\":1}}],[\"为什么需要清除浮动\",{\"0\":{\"982\":1}}],[\"为什么要用组件\",{\"1\":{\"129\":1}}],[\"为什么要拆成模块\",{\"1\":{\"128\":1}}],[\"为什么要有\",{\"0\":{\"89\":1}}],[\"为父元素添加\",{\"1\":{\"971\":1}}],[\"为父元素定义上内边距\",{\"1\":{\"971\":1}}],[\"为父元素定义上边框\",{\"1\":{\"971\":1}}],[\"为父组件\",{\"1\":{\"588\":1}}],[\"为基准进行宽高比例计算\",{\"1\":{\"966\":1}}],[\"为基础的项目esm启动方式\",{\"1\":{\"530\":1}}],[\"为基础的项目bundle启动方式\",{\"1\":{\"530\":1}}],[\"为标准设计稿\",{\"1\":{\"966\":1}}],[\"为标有特定\",{\"1\":{\"863\":1}}],[\"为准\",{\"1\":{\"966\":1,\"1062\":1}}],[\"为页面中某一类标签指定统一的\",{\"1\":{\"861\":1}}],[\"为动态字符串的\",{\"1\":{\"721\":1}}],[\"为插值语法追加\",{\"1\":{\"695\":1}}],[\"为后续模板引擎的发展提供了崭新思路\",{\"1\":{\"639\":1}}],[\"为当前\",{\"1\":{\"636\":1}}],[\"为当前的hook对象挂载初始值\",{\"1\":{\"306\":1}}],[\"为计算属性创建内部watcher\",{\"1\":{\"631\":1}}],[\"为数组中每个元素创建watcher\",{\"1\":{\"624\":1}}],[\"为原型\",{\"1\":{\"603\":1}}],[\"为复杂数据类型\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"为闭包变量创建实例对象\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"为侵入式数据变化\",{\"1\":{\"596\":1}}],[\"为非侵入式数据变化\",{\"1\":{\"596\":1}}],[\"为依赖注入\",{\"1\":{\"517\":1}}],[\"为路径\",{\"1\":{\"422\":1}}],[\"为passive\",{\"1\":{\"372\":1,\"382\":1}}],[\"为的是区分数据流和副作用流\",{\"1\":{\"366\":1}}],[\"为已创建的\",{\"1\":{\"323\":1}}],[\"为例讲解模板引擎的使用和源码实现\",{\"1\":{\"638\":1}}],[\"为例分析一下这么做的原因\",{\"1\":{\"635\":1}}],[\"为例\",{\"1\":{\"226\":1,\"323\":1}}],[\"为常用钩子函数\",{\"1\":{\"167\":2}}],[\"为了快速方便地操作\",{\"1\":{\"1279\":1}}],[\"为了解决这个问题\",{\"1\":{\"1076\":1}}],[\"为了更好表示表格语义\",{\"1\":{\"1049\":1}}],[\"为了更好的兼容性\",{\"1\":{\"158\":1}}],[\"为了约束浮动元素位置\",{\"1\":{\"979\":1}}],[\"为了防止混乱\",{\"1\":{\"964\":1}}],[\"为了使网站在移动端有最理想的浏览和阅读宽度而设定\",{\"1\":{\"949\":1}}],[\"为了实现该效果\",{\"1\":{\"927\":1}}],[\"为了实现对复杂类型的精确侦听\",{\"1\":{\"610\":1}}],[\"为了便于理解\",{\"1\":{\"676\":1}}],[\"为了便于理解此处开辟了双堆栈数组\",{\"1\":{\"661\":1}}],[\"为了保证\",{\"1\":{\"636\":1}}],[\"为了确保标准一致\",{\"1\":{\"1233\":1}}],[\"为了确保生效\",{\"1\":{\"873\":1}}],[\"为了确保预请求的\",{\"1\":{\"843\":1}}],[\"为了确保definereactive和数组重写方法中可以正确调用对应的目标对象\",{\"1\":{\"621\":1}}],[\"为了确保复杂对象可以被正确侦听\",{\"1\":{\"610\":1,\"617\":1}}],[\"为了彻底弄懂\",{\"1\":{\"593\":1}}],[\"为了能清楚看到\",{\"1\":{\"272\":1}}],[\"为了让元素可拖动\",{\"1\":{\"1142\":1}}],[\"为了让\",{\"1\":{\"239\":1}}],[\"为了操作其内部的\",{\"1\":{\"236\":1}}],[\"为了绕过这一问题\",{\"1\":{\"231\":1}}],[\"为了避免歧义\",{\"1\":{\"1383\":1}}],[\"为了避免某些属性对\",{\"1\":{\"1014\":1}}],[\"为了避免页面刷新后丢失\",{\"1\":{\"430\":1}}],[\"为了避免这种重复逻辑带来的冗余代码\",{\"1\":{\"234\":1}}],[\"为了避免\",{\"1\":{\"139\":1}}],[\"为组件实例对象\",{\"1\":{\"143\":1}}],[\"为避免内存泄露并保证安全性\",{\"1\":{\"103\":1}}],[\"为我们提供了全新的无须使用解构即可触发\",{\"1\":{\"103\":1}}],[\"为\",{\"1\":{\"71\":1,\"139\":1,\"143\":1,\"201\":1,\"214\":1,\"237\":1,\"270\":1,\"272\":2,\"627\":2,\"628\":1,\"632\":3,\"633\":2,\"649\":2,\"650\":1,\"696\":1,\"837\":1,\"848\":2,\"1029\":1,\"1413\":2}}],[\"为所有支持的请求方法提供了别名\",{\"1\":{\"30\":1}}],[\"为方便起见\",{\"1\":{\"30\":1}}],[\"为开头\",{\"1\":{\"28\":1}}],[\"攻击\",{\"1\":{\"29\":1,\"474\":1}}],[\"自行创建对象\",{\"1\":{\"1341\":1}}],[\"自行选择\",{\"1\":{\"583\":1}}],[\"自增和自减\",{\"0\":{\"1258\":1}}],[\"自己独占一行\",{\"1\":{\"876\":1}}],[\"自命名\",{\"1\":{\"862\":1}}],[\"自带下划线\",{\"1\":{\"891\":1}}],[\"自带\",{\"1\":{\"702\":1}}],[\"自执行函数调用与错误捕获函数\",{\"1\":{\"628\":1}}],[\"自执行错误捕获函数\",{\"1\":{\"625\":1}}],[\"自然会执行\",{\"1\":{\"505\":1}}],[\"自身拥有的枚举或不可枚举属性名称字符串\",{\"1\":{\"1405\":1}}],[\"自身属性\",{\"1\":{\"1000\":1}}],[\"自身的\",{\"1\":{\"754\":1}}],[\"自身没有\",{\"1\":{\"635\":1}}],[\"自身可以监视对象内部值的改变\",{\"1\":{\"451\":1}}],[\"自身特点的编码技巧\",{\"1\":{\"84\":1}}],[\"自动调用\",{\"1\":{\"1411\":1}}],[\"自动触发事件\",{\"0\":{\"1330\":1}}],[\"自动生成\",{\"1\":{\"1034\":1}}],[\"自动重命名配对的\",{\"1\":{\"1031\":1}}],[\"自动居中对齐\",{\"1\":{\"1020\":1}}],[\"自动响应\",{\"1\":{\"790\":1}}],[\"自动执行编译\",{\"1\":{\"701\":1}}],[\"自动执行\",{\"1\":{\"250\":1}}],[\"自动转换为数值\",{\"1\":{\"1414\":1}}],[\"自动转换为字符串\",{\"1\":{\"1414\":1}}],[\"自动转换为布尔值\",{\"1\":{\"1414\":1}}],[\"自动转换规则\",{\"1\":{\"1414\":1}}],[\"自动转换\",{\"0\":{\"1414\":1},\"1\":{\"29\":1}}],[\"自定义对象\",{\"0\":{\"1341\":1}}],[\"自定义属性\",{\"1\":{\"1312\":1}}],[\"自定义动画\",{\"0\":{\"1308\":1}}],[\"自定义列表常用语对属于或名词进行解释和描述\",{\"1\":{\"1054\":1}}],[\"自定义列表\",{\"0\":{\"1054\":1},\"1\":{\"1051\":1}}],[\"自定义的\",{\"1\":{\"739\":1}}],[\"自定义验证\",{\"1\":{\"587\":1}}],[\"自定义一个myref\",{\"1\":{\"557\":1}}],[\"自定义指令写为对象形式\",{\"1\":{\"475\":1}}],[\"自定义指令\",{\"0\":{\"475\":1}}],[\"自定义键名\",{\"1\":{\"472\":1}}],[\"自定义\",{\"0\":{\"198\":1,\"543\":1},\"1\":{\"198\":1,\"199\":1,\"543\":1,\"862\":1}}],[\"自定义请求头信息\",{\"1\":{\"12\":1}}],[\"自上而下的数据通信\",{\"1\":{\"148\":1}}],[\"就调用该类型的转换函数\",{\"1\":{\"1414\":1}}],[\"就报错\",{\"1\":{\"1413\":2}}],[\"就被解释为\",{\"1\":{\"1381\":2}}],[\"就被视为具有\",{\"1\":{\"1275\":1}}],[\"就被视作不活跃的状态\",{\"1\":{\"842\":1}}],[\"就应该在前面添加\",{\"1\":{\"1381\":1}}],[\"就为\",{\"1\":{\"1245\":1}}],[\"就像\",{\"1\":{\"1012\":1}}],[\"就像vue中的slot一样\",{\"1\":{\"228\":1}}],[\"就不要写\",{\"1\":{\"1341\":1}}],[\"就不能在该标签内编写代码了\",{\"1\":{\"1235\":1}}],[\"就不会撑大盒子\",{\"1\":{\"973\":1}}],[\"就不再变化了\",{\"1\":{\"634\":1}}],[\"就近原则\",{\"1\":{\"930\":1}}],[\"就算项目里有多色图标也会自动去色\",{\"1\":{\"918\":1}}],[\"就默认四条边都是实线边框\",{\"1\":{\"909\":1}}],[\"就判断\",{\"1\":{\"756\":1}}],[\"就返回一个该页的path路径\",{\"1\":{\"739\":1}}],[\"就需要使用注释标签\",{\"1\":{\"1040\":1}}],[\"就需要一个函数来解析其属性路径\",{\"1\":{\"650\":1}}],[\"就需要分别在\",{\"1\":{\"545\":1}}],[\"就直接把\",{\"1\":{\"649\":1}}],[\"就把栈顶的\",{\"1\":{\"648\":1}}],[\"就把新的\",{\"1\":{\"648\":1}}],[\"就把当前\",{\"1\":{\"648\":1}}],[\"就把直至遇到配套的\",{\"1\":{\"648\":1}}],[\"就把哪个\",{\"1\":{\"605\":1}}],[\"就让指针后移多少位\",{\"1\":{\"646\":1,\"655\":1}}],[\"就跳过\",{\"1\":{\"626\":1}}],[\"就通过\",{\"1\":{\"608\":1}}],[\"就说明\",{\"1\":{\"608\":1}}],[\"就监视哪个属性\",{\"1\":{\"541\":1}}],[\"就使用微任务\",{\"1\":{\"505\":1}}],[\"就变成了绑定了\",{\"1\":{\"339\":1}}],[\"就已经成功储存到所有基于事件捕获和事件冒泡的两套回调函数的数组了\",{\"1\":{\"294\":1}}],[\"就向上\",{\"1\":{\"274\":1}}],[\"就是新创建的那个对象\",{\"1\":{\"1446\":1}}],[\"就是谁\",{\"1\":{\"1446\":1}}],[\"就是调用方法的那个对象\",{\"1\":{\"1446\":1}}],[\"就是每进入一个执行上\",{\"1\":{\"1423\":1}}],[\"就是数据\",{\"1\":{\"1239\":1}}],[\"就是执行对应的回调函数\",{\"1\":{\"1076\":1}}],[\"就是执行副作用\",{\"1\":{\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"就是直接声明\",{\"1\":{\"1013\":1}}],[\"就是百分比布局\",{\"1\":{\"960\":1}}],[\"就是把\",{\"1\":{\"968\":1}}],[\"就是把多个小背景图片整合到一张大图片中\",{\"1\":{\"916\":1}}],[\"就是把你设置的回调放在\",{\"1\":{\"505\":1}}],[\"就是等待\",{\"1\":{\"843\":1}}],[\"就是识别\",{\"1\":{\"695\":1}}],[\"就是传入的\",{\"1\":{\"626\":1}}],[\"就是设置一个回调\",{\"1\":{\"505\":1}}],[\"就是一个\",{\"1\":{\"365\":1}}],[\"就是一个设置了基础\",{\"1\":{\"332\":1}}],[\"就是创建真实dom节点\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"就是基于\",{\"1\":{\"198\":1}}],[\"就是自定义的\",{\"1\":{\"178\":1}}],[\"就是\",{\"1\":{\"178\":1,\"257\":1,\"323\":1,\"626\":1,\"657\":1,\"666\":1,\"966\":3,\"1231\":1,\"1244\":1,\"1376\":2,\"1446\":1}}],[\"就是有\",{\"1\":{\"29\":1}}],[\"就可以使每个对象都具有属性和方法\",{\"1\":{\"1438\":1}}],[\"就可以使用这种方式表示\",{\"1\":{\"1382\":1}}],[\"就可以用\",{\"1\":{\"1275\":1}}],[\"就可以完成遍历操作\",{\"1\":{\"1172\":1}}],[\"就可以把\",{\"1\":{\"1062\":1}}],[\"就可以把root的current指向新fiber树\",{\"1\":{\"274\":1,\"317\":1,\"360\":1,\"374\":1,\"384\":1,\"396\":1}}],[\"就可以让文字和图片垂直居中对齐了\",{\"1\":{\"924\":1}}],[\"就可以了\",{\"1\":{\"824\":1}}],[\"就可以着手去根据传入的模板字符串生成一个\",{\"1\":{\"647\":1}}],[\"就可以收集依赖\",{\"1\":{\"608\":1}}],[\"就可以通过\",{\"1\":{\"515\":2}}],[\"就可以接收从另一个端口传过来的数据\",{\"1\":{\"388\":1}}],[\"就可以称之为高阶函数\",{\"1\":{\"159\":2}}],[\"就可能引发严重的性能问题\",{\"1\":{\"91\":1}}],[\"就去渲染对应的组件\",{\"1\":{\"123\":1}}],[\"就会将参数值自动转换为数值\",{\"1\":{\"1414\":1}}],[\"就会将非字符串的值自动转为字符串\",{\"1\":{\"1414\":1}}],[\"就会将非布尔值的参数自动\",{\"1\":{\"1414\":1}}],[\"就会触发这个事件\",{\"1\":{\"1062\":1}}],[\"就会有优先级产生\",{\"1\":{\"932\":1}}],[\"就会修改路径\",{\"1\":{\"715\":1}}],[\"就会对依赖的数据求值\",{\"1\":{\"608\":1}}],[\"就会检查现在还剩多少时间\",{\"1\":{\"264\":1}}],[\"就会导致掉帧卡顿\",{\"1\":{\"259\":1}}],[\"就会通过\",{\"1\":{\"103\":1}}],[\"就会被nginx转发到后端接口服务器上\",{\"1\":{\"28\":1}}],[\"只算\",{\"1\":{\"1324\":1}}],[\"只写\",{\"0\":{\"1294\":1}}],[\"只写一个参数\",{\"1\":{\"954\":1}}],[\"只让浮动在父盒子内部影响\",{\"1\":{\"984\":1}}],[\"只不过属性名没有\",{\"1\":{\"1103\":1}}],[\"只不过\",{\"1\":{\"1015\":1}}],[\"只不过元素看上去很小\",{\"1\":{\"947\":1}}],[\"只不过被合并成了一个\",{\"1\":{\"365\":1}}],[\"只需要修改\",{\"1\":{\"919\":1}}],[\"只需要在浏览器请求源码时进行转换并按需提供源码\",{\"1\":{\"530\":1}}],[\"只指定一个数值\",{\"1\":{\"905\":1}}],[\"只指定了一个方位名词\",{\"1\":{\"905\":1}}],[\"只指定名称props\",{\"1\":{\"498\":1}}],[\"只在允许的断字点换行\",{\"1\":{\"899\":1}}],[\"只在一行内显示\",{\"1\":{\"898\":1}}],[\"只在组件被首次引入的时候执行一次不同\",{\"1\":{\"584\":1}}],[\"只选亲儿子\",{\"1\":{\"873\":1}}],[\"只关注内容的语义\",{\"1\":{\"853\":1}}],[\"只关注于视图\",{\"1\":{\"80\":1}}],[\"只获取最新的action结果\",{\"1\":{\"788\":1}}],[\"只负责\",{\"1\":{\"752\":1}}],[\"只读属性不能修改\",{\"1\":{\"1110\":1}}],[\"只读\",{\"1\":{\"744\":1}}],[\"只判断参数有\",{\"1\":{\"674\":1}}],[\"只进行同层比较\",{\"1\":{\"672\":1}}],[\"只更新与这个数据有关的\",{\"1\":{\"604\":1}}],[\"只是变量对象是全局\",{\"1\":{\"1423\":1}}],[\"只是变量名前面使用\",{\"1\":{\"1011\":1}}],[\"只是\",{\"1\":{\"564\":1}}],[\"只处理基本数据类型的响应式\",{\"1\":{\"554\":1}}],[\"只处理对象最外层属性的响应式\",{\"1\":{\"554\":1}}],[\"只对指定类进行操作\",{\"1\":{\"1301\":1}}],[\"只对\",{\"1\":{\"739\":1}}],[\"只对比动态数据\",{\"1\":{\"524\":1}}],[\"只对同级元素进行比较\",{\"1\":{\"354\":1}}],[\"只注册一个\",{\"1\":{\"505\":1}}],[\"只注册click事件\",{\"1\":{\"281\":1}}],[\"只会检查对象的自有属性\",{\"1\":{\"1402\":1}}],[\"只会到最末端\",{\"1\":{\"1376\":1}}],[\"只会经过自身盒子触发\",{\"1\":{\"1126\":1}}],[\"只会压住它下面标准流的盒子\",{\"1\":{\"998\":1}}],[\"只会有相同的输出\",{\"1\":{\"748\":1}}],[\"只会做页面的局部更新\",{\"1\":{\"421\":1}}],[\"只会执行最后一个调度任务\",{\"1\":{\"339\":1}}],[\"只会针对数据有变化的部分进行深拷贝\",{\"1\":{\"103\":1}}],[\"只监听执行一次\",{\"1\":{\"286\":1}}],[\"只有这样才能够达到匹配目的\",{\"1\":{\"1391\":1}}],[\"只有开启定位的盒子\",{\"1\":{\"996\":1}}],[\"只有对当前元素添加简单样式的时候考虑使用\",{\"1\":{\"867\":1}}],[\"只有等\",{\"1\":{\"765\":1}}],[\"只有是同一个虚拟节点\",{\"1\":{\"672\":1}}],[\"只有this\",{\"1\":{\"628\":1}}],[\"只有object和array才有\",{\"1\":{\"627\":1}}],[\"只有watch的配置项才会声明this\",{\"1\":{\"626\":1}}],[\"只有页面上使用的变量需要依赖\",{\"1\":{\"626\":1}}],[\"只有eventone事件\",{\"1\":{\"515\":1}}],[\"只有\",{\"1\":{\"471\":1,\"605\":1,\"632\":1,\"829\":1,\"1106\":1,\"1231\":1}}],[\"只有含有hookhaseffect的passive才执行\",{\"1\":{\"373\":1}}],[\"只有根fiber或根组件节点才能作为父fiber\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"只有childa\",{\"1\":{\"218\":1}}],[\"只有当组件所处的树中没有匹配到\",{\"1\":{\"212\":1}}],[\"只有当\",{\"1\":{\"197\":1}}],[\"只有依赖项更新时回调函数才会更新\",{\"1\":{\"196\":1}}],[\"只有一个子节点那么这个子节点就是\",{\"1\":{\"272\":1}}],[\"只有一个根标签\",{\"1\":{\"123\":1}}],[\"只有一次log\",{\"1\":{\"194\":1}}],[\"只能是array\",{\"1\":{\"1443\":1}}],[\"只能定义在它的原型对象\",{\"1\":{\"1417\":1}}],[\"只能跳出一层\",{\"1\":{\"1277\":1}}],[\"只能通过构造函数访问\",{\"1\":{\"1437\":1}}],[\"只能通过实例化的对象访问\",{\"1\":{\"1437\":1}}],[\"只能通过\",{\"1\":{\"1115\":1}}],[\"只能通过返回新的\",{\"1\":{\"746\":1}}],[\"只能得到行内样式表中的样式值\",{\"1\":{\"1108\":1}}],[\"只能操作浏览器向前\",{\"1\":{\"1067\":1}}],[\"只能写一次\",{\"1\":{\"1062\":1}}],[\"只能使用平台里单色的图标\",{\"1\":{\"918\":1}}],[\"只能选择作为某元素的最近一级子元素\",{\"1\":{\"871\":1}}],[\"只能选择全部的当前标签\",{\"1\":{\"861\":1}}],[\"只能调用一次\",{\"1\":{\"863\":1}}],[\"只能被别人操作自己不进行操作\",{\"1\":{\"747\":1}}],[\"只能生效于普通对象\",{\"1\":{\"620\":1}}],[\"只能用于表单类元素\",{\"1\":{\"447\":1}}],[\"只能用在子类的构造函数中\",{\"1\":{\"1434\":1}}],[\"只能用在\",{\"1\":{\"42\":1}}],[\"只能单纯操作\",{\"1\":{\"411\":1}}],[\"只能在半角空格或连字符处换行\",{\"1\":{\"900\":1}}],[\"只能在使用react\",{\"1\":{\"238\":1}}],[\"只能在\",{\"1\":{\"178\":1,\"1094\":1}}],[\"只能在函数最外层调用\",{\"1\":{\"178\":1}}],[\"只用单个类来定义样式最佳\",{\"1\":{\"139\":1}}],[\"只要能让\",{\"1\":{\"1413\":1}}],[\"只要窗口大小发生像素变化\",{\"1\":{\"1062\":1}}],[\"只要请求在\",{\"1\":{\"829\":1}}],[\"只要<navigate>组件被渲染\",{\"1\":{\"715\":1}}],[\"只要在\",{\"1\":{\"604\":1}}],[\"只要递归结构中存在复杂类型就一定会创建新的实例对象\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"只要用了\",{\"1\":{\"125\":1}}],[\"只要以\",{\"1\":{\"28\":1}}],[\"只适用于\",{\"1\":{\"47\":1}}],[\"只支持\",{\"1\":{\"26\":1}}],[\"当以构造函数形式调用时\",{\"1\":{\"1446\":1}}],[\"当以方法的形式调用时\",{\"1\":{\"1446\":1}}],[\"当以函数形式调用时\",{\"1\":{\"1446\":1}}],[\"当访问一个对象的属性\",{\"1\":{\"1442\":1}}],[\"当访问该属性时\",{\"1\":{\"601\":1}}],[\"当我们访问对象的一个属性或方法时\",{\"1\":{\"1438\":1}}],[\"当我们在渲染中使用它时\",{\"1\":{\"231\":1}}],[\"当这个执行环境中的代码\",{\"1\":{\"1423\":1}}],[\"当函数调用的前一瞬间\",{\"1\":{\"1428\":1}}],[\"当函数\",{\"1\":{\"1410\":1}}],[\"当对象被表示为文本值时或者当以期望字符串的方式引用\",{\"1\":{\"1410\":1}}],[\"当对象的\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"当正则表达式成功地匹配目标字符串后\",{\"1\":{\"1390\":1}}],[\"当start或者end为负值时\",{\"1\":{\"1376\":1}}],[\"当父元素内部的子元素满足触发条件时再触发\",{\"1\":{\"1328\":1}}],[\"当父子组件通信\",{\"1\":{\"197\":1}}],[\"当变量超过了\",{\"1\":{\"1243\":1}}],[\"当数值运算超过最大安全整型数值后\",{\"1\":{\"1230\":1}}],[\"当数据发生变化\",{\"1\":{\"743\":1}}],[\"当数据发生变化时\",{\"1\":{\"605\":1}}],[\"当数据变化后\",{\"1\":{\"505\":1}}],[\"当数据源发生变化时\",{\"1\":{\"234\":1}}],[\"当执行\",{\"1\":{\"1171\":4}}],[\"当被鼠标拖动的对象离开其容器范围内时触发此事件\",{\"1\":{\"1142\":1}}],[\"当被鼠标拖动的对象进入其容器范围内时触发此事件\",{\"1\":{\"1142\":1}}],[\"当某被拖动的对象在另一对象容器范围内拖动时触发此事件\",{\"1\":{\"1142\":1}}],[\"当鼠标松开时\",{\"1\":{\"1138\":1}}],[\"当鼠标移动时被拖拽元素跟随鼠标移动\",{\"1\":{\"1138\":1}}],[\"当鼠标移动到元素上时就会触发\",{\"1\":{\"1126\":1}}],[\"当鼠标在被拖拽元素上按下时\",{\"1\":{\"1138\":1}}],[\"当后代元素上的事件触发时\",{\"1\":{\"1125\":1}}],[\"当滚动条向下滚动时\",{\"1\":{\"1124\":1}}],[\"当响应函数执行时\",{\"1\":{\"1120\":1}}],[\"当事件被触发时\",{\"1\":{\"1118\":1,\"1155\":1}}],[\"当事件的响应函数被触发时\",{\"1\":{\"1117\":1}}],[\"当满足\",{\"1\":{\"1115\":2}}],[\"当作字符原样输出\",{\"1\":{\"1090\":1}}],[\"当主线程开始执行异步任务\",{\"1\":{\"1076\":1}}],[\"当触发时就调用的处理函数\",{\"1\":{\"1062\":1}}],[\"当文档内容完全加载完成会触发该事件\",{\"1\":{\"1062\":1}}],[\"当用户输入内容较多的情况下\",{\"1\":{\"1057\":1}}],[\"当用户发送localhost\",{\"1\":{\"28\":1}}],[\"当点击<label>标签内的文本时\",{\"1\":{\"1057\":1}}],[\"当为标签应用\",{\"1\":{\"1042\":1}}],[\"当地日期时间\",{\"1\":{\"1019\":1}}],[\"当下边\",{\"1\":{\"1015\":2}}],[\"当导航栏字数不一样多使用\",{\"1\":{\"969\":1}}],[\"当样式比较繁多的时候\",{\"1\":{\"964\":1}}],[\"当每个查询规则都为真时则该条媒体查询为真\",{\"1\":{\"964\":1}}],[\"当每秒绘制的帧数\",{\"1\":{\"260\":1}}],[\"当不使用\",{\"1\":{\"964\":1}}],[\"当你重置浏览器大小的过程中\",{\"1\":{\"964\":1}}],[\"当你把一个普通的\",{\"1\":{\"593\":1}}],[\"当同一个元素指定多个选择器\",{\"1\":{\"932\":1}}],[\"当标签发生嵌套时\",{\"1\":{\"870\":1}}],[\"当初始化\",{\"1\":{\"840\":1}}],[\"当进入\",{\"1\":{\"823\":1}}],[\"当一个脚本第一次执行的时候\",{\"1\":{\"1423\":1}}],[\"当一个\",{\"1\":{\"781\":1}}],[\"当调用\",{\"1\":{\"765\":1}}],[\"当redux状态变化时\",{\"1\":{\"749\":1}}],[\"当<route>产生嵌套时\",{\"1\":{\"716\":1}}],[\"当情况\",{\"1\":{\"676\":2}}],[\"当其他对象使用\",{\"1\":{\"1171\":1}}],[\"当其中任意一种判断通过就不再进行后续判断了\",{\"1\":{\"676\":1}}],[\"当其内部依赖项发生变化时\",{\"1\":{\"195\":1}}],[\"当遇见\",{\"1\":{\"656\":1}}],[\"当循环是双重的\",{\"1\":{\"644\":1}}],[\"当模板字符串中有循环存在时\",{\"1\":{\"644\":1}}],[\"当走到这里时\",{\"1\":{\"632\":1,\"635\":1}}],[\"当且仅当组件实例上绑定的\",{\"1\":{\"632\":1}}],[\"当且仅当全局的dep\",{\"1\":{\"609\":1,\"615\":1,\"635\":1}}],[\"当且仅当依赖的数据发生变化时\",{\"1\":{\"607\":1}}],[\"当收到数据变化的消息时执行该方法\",{\"1\":{\"607\":1,\"609\":1,\"616\":1}}],[\"当属性值被修改时\",{\"1\":{\"601\":1}}],[\"当属性变化时\",{\"1\":{\"451\":1}}],[\"当使用文件系统路径的别名时\",{\"1\":{\"572\":1}}],[\"当渲染具有不可变数据源的大列表时\",{\"1\":{\"556\":1}}],[\"当冷启动开发服务器时\",{\"1\":{\"530\":1}}],[\"当页面上的元素被重新渲染之后\",{\"1\":{\"505\":1}}],[\"当页面中触发事件的时候\",{\"1\":{\"282\":1}}],[\"当组件使用混入对象时\",{\"1\":{\"499\":1}}],[\"当组件没有捕获到来自于祖先组件的\",{\"1\":{\"212\":1}}],[\"当条件不成立时\",{\"1\":{\"458\":1}}],[\"当依赖的数据发生改变时会被再次调用\",{\"1\":{\"450\":1}}],[\"当依赖项不变时\",{\"1\":{\"195\":1}}],[\"当浏览器的路径改变时\",{\"1\":{\"423\":1}}],[\"当dom执行变更之后\",{\"1\":{\"374\":1,\"384\":1,\"396\":1}}],[\"当要删除一个节点的时候\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"当容器\",{\"1\":{\"288\":1}}],[\"当子节点不存在副作用时说明无需更新\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"当兄弟节点为空的时候执行while循环往上返回\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"当抛出错误后\",{\"1\":{\"242\":1}}],[\"当光标在屏幕上移动时\",{\"1\":{\"227\":1}}],[\"当它准备好时\",{\"1\":{\"208\":1}}],[\"当\",{\"1\":{\"208\":1,\"213\":1,\"237\":1,\"272\":1,\"480\":1,\"627\":1,\"628\":1,\"634\":1,\"650\":1,\"712\":1,\"815\":1,\"842\":1,\"909\":1}}],[\"当然了\",{\"1\":{\"272\":1}}],[\"当然\",{\"1\":{\"197\":1,\"703\":1}}],[\"当状态中的数据发生变化时\",{\"1\":{\"161\":1,\"461\":1}}],[\"当应用中的功能都是多组件的方式来编写的\",{\"1\":{\"486\":1}}],[\"当应用中的\",{\"1\":{\"486\":1}}],[\"当应用是以多组件的方式实现\",{\"1\":{\"131\":1}}],[\"当应用的\",{\"1\":{\"130\":1}}],[\"当项目庞大且前面的方法都不能很好满足需求时\",{\"1\":{\"117\":1}}],[\"当两个组件在\",{\"1\":{\"112\":1}}],[\"当在属性值中使用\",{\"1\":{\"1014\":1}}],[\"当在\",{\"1\":{\"103\":1}}],[\"当前函数的执行上下文出栈\",{\"1\":{\"1425\":1}}],[\"当前函数执行完成后\",{\"1\":{\"1425\":1}}],[\"当前上下文的变量对象或者活动对象\",{\"1\":{\"1423\":1}}],[\"当前正在遍历的元素索引\",{\"1\":{\"1276\":1}}],[\"当前正在遍历的元素\",{\"1\":{\"1276\":1}}],[\"当前测试新版本火狐也支持\",{\"1\":{\"1146\":1}}],[\"当前元素相对于其定位父元素的垂直偏移量\",{\"1\":{\"1108\":1}}],[\"当前元素相对于其定位父元素的水平偏移量\",{\"1\":{\"1108\":1}}],[\"当前节点的后一个兄弟节点\",{\"1\":{\"1088\":1}}],[\"当前节点的前一个兄弟节点\",{\"1\":{\"1088\":1}}],[\"当前节点的父节点\",{\"1\":{\"1088\":1}}],[\"当前页面的完整路径\",{\"1\":{\"1065\":1}}],[\"当前页面采取的是\",{\"1\":{\"1032\":1}}],[\"当前浏览器的地址栏信息\",{\"1\":{\"1065\":1}}],[\"当前浏览器的信息\",{\"1\":{\"1064\":1}}],[\"当前项即为默认选中项\",{\"1\":{\"1057\":1}}],[\"当前阶段少\",{\"1\":{\"999\":1}}],[\"当前阶段代码只实现新旧节点不同时的暴力替换\",{\"1\":{\"675\":1}}],[\"当前标签设置样式可控\",{\"1\":{\"867\":1}}],[\"当前标签才会输出到页面\",{\"1\":{\"474\":2}}],[\"当前路由自定义meta字段\",{\"1\":{\"739\":1}}],[\"当前路由路径\",{\"1\":{\"739\":1}}],[\"当前新版名称\",{\"1\":{\"1145\":1}}],[\"当前新旧节点为同一节点时\",{\"1\":{\"676\":1}}],[\"当前新增的dep实例中没有当前dep\",{\"1\":{\"635\":1}}],[\"当前是否在引号内\",{\"1\":{\"662\":1}}],[\"当前场景必定为true\",{\"1\":{\"631\":1,\"633\":1}}],[\"当前组件实例\",{\"1\":{\"636\":1}}],[\"当前组件\",{\"1\":{\"628\":1}}],[\"当前组件及其下属子组件全部\",{\"1\":{\"162\":1}}],[\"当前实例对象\",{\"1\":{\"621\":1}}],[\"当前任务\",{\"1\":{\"395\":1}}],[\"当前没有加入异步调度的源码\",{\"1\":{\"339\":1}}],[\"当前完成的fiber真实dom节点\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"当前fiber的父fiber\",{\"1\":{\"271\":1,\"316\":1}}],[\"当前fiber\",{\"1\":{\"271\":1,\"316\":1}}],[\"当前的事件源\",{\"1\":{\"295\":1}}],[\"当前的鼠标位置是\",{\"1\":{\"227\":1,\"228\":1}}],[\"当前的\",{\"1\":{\"192\":1,\"721\":1,\"748\":1}}],[\"当前\",{\"1\":{\"35\":1}}],[\"当前服务的域名\",{\"1\":{\"28\":1}}],[\"当界面请求接口数据时\",{\"1\":{\"28\":1}}],[\"^0123456789\",{\"1\":{\"1382\":1}}],[\"^abc\",{\"1\":{\"1382\":1}}],[\"^<\",{\"1\":{\"661\":3,\"662\":2}}],[\"^\",{\"1\":{\"28\":1,\"495\":1,\"661\":2,\"662\":2,\"1215\":1,\"1382\":1,\"1386\":2}}],[\"添加的成员\",{\"1\":{\"1437\":1}}],[\"添加一个回调函数\",{\"1\":{\"1364\":1}}],[\"添加一个更改侦听器\",{\"1\":{\"234\":1}}],[\"添加元素\",{\"0\":{\"1321\":1}}],[\"添加类\",{\"0\":{\"1298\":1}}],[\"添加分组名\",{\"1\":{\"1215\":1}}],[\"添加自定义属性之后\",{\"1\":{\"1103\":1}}],[\"添加许多无意义的标签\",{\"1\":{\"985\":1}}],[\"添加浮动后\",{\"1\":{\"978\":1}}],[\"添加浮动之后具有行内块元素相似的特性\",{\"1\":{\"978\":1}}],[\"添加了内边距\",{\"1\":{\"969\":1}}],[\"添加devtools\",{\"1\":{\"826\":1}}],[\"添加2\",{\"1\":{\"823\":1}}],[\"添加当前\",{\"1\":{\"628\":1}}],[\"添加\",{\"1\":{\"627\":1,\"800\":1,\"1119\":1,\"1312\":1}}],[\"添加watcher依赖到指定的dep实例\",{\"1\":{\"609\":1,\"615\":1,\"635\":1}}],[\"添加到\",{\"1\":{\"584\":1,\"608\":1,\"842\":1}}],[\"添加effect链表\",{\"1\":{\"373\":1}}],[\"添加hookhaseffect\",{\"1\":{\"373\":1}}],[\"添加订阅\",{\"1\":{\"365\":1}}],[\"添加新节点后需要调用\",{\"1\":{\"392\":1}}],[\"添加新节点\",{\"1\":{\"343\":1}}],[\"添加事件监听器\",{\"1\":{\"277\":1}}],[\"添加至current根fiber的更新队列\",{\"1\":{\"271\":1,\"272\":1}}],[\"添加响应拦截器\",{\"1\":{\"66\":1}}],[\"添加请求拦截器\",{\"1\":{\"66\":1}}],[\"添加访问目录为\",{\"1\":{\"28\":1}}],[\"添加时间戳\",{\"1\":{\"14\":1}}],[\"ridge\",{\"1\":{\"909\":2}}],[\"rights\",{\"1\":{\"731\":9}}],[\"right\",{\"1\":{\"392\":6,\"472\":1,\"731\":1,\"826\":1,\"890\":1,\"969\":1,\"970\":1,\"977\":1,\"984\":1,\"990\":1,\"995\":1,\"1015\":1,\"1048\":1}}],[\"rightindex\",{\"1\":{\"392\":8}}],[\"rgba\",{\"1\":{\"908\":2}}],[\"rgb\",{\"1\":{\"889\":3,\"908\":1}}],[\"rx\",{\"1\":{\"790\":1}}],[\"rxjs\",{\"1\":{\"780\":2,\"784\":2,\"788\":6,\"790\":1}}],[\"ruby\",{\"1\":{\"1005\":1,\"1006\":1}}],[\"rule\",{\"1\":{\"590\":1}}],[\"rules\",{\"1\":{\"578\":2,\"591\":1}}],[\"runinaction\",{\"1\":{\"799\":2}}],[\"run函数只能在store创建好之后调用\",{\"1\":{\"760\":1,\"773\":1}}],[\"run\",{\"1\":{\"493\":1,\"527\":1,\"529\":1,\"570\":1,\"626\":2,\"760\":1,\"762\":1,\"773\":1}}],[\"runtime通过在vite\",{\"1\":{\"249\":1}}],[\"runtime\",{\"0\":{\"251\":1},\"1\":{\"248\":4,\"249\":4}}],[\"runtime中的函数只能由编译器转换使用\",{\"1\":{\"248\":1}}],[\"runtime和react\",{\"1\":{\"248\":1}}],[\"rc\",{\"1\":{\"578\":1}}],[\"radius\",{\"0\":{\"911\":1},\"1\":{\"911\":1,\"935\":5,\"1000\":1}}],[\"radio\",{\"0\":{\"464\":1},\"1\":{\"1057\":3}}],[\"race\",{\"0\":{\"770\":1},\"1\":{\"770\":5}}],[\"randomkey\",{\"1\":{\"289\":3}}],[\"random\",{\"1\":{\"286\":1,\"289\":1,\"1370\":2}}],[\"round\",{\"1\":{\"1370\":2}}],[\"routs\",{\"1\":{\"732\":4}}],[\"rout\",{\"1\":{\"732\":2}}],[\"route>\",{\"1\":{\"712\":2}}],[\"route\",{\"1\":{\"431\":3,\"709\":1,\"731\":4,\"737\":2,\"822\":2}}],[\"routes>\",{\"1\":{\"709\":1,\"712\":1}}],[\"routes\",{\"1\":{\"424\":1,\"426\":1,\"427\":1,\"430\":1,\"437\":1,\"439\":1,\"709\":2,\"730\":2,\"731\":10,\"732\":4,\"734\":2,\"735\":2,\"737\":2,\"739\":3,\"740\":2,\"822\":2}}],[\"routerredux\",{\"1\":{\"822\":2,\"823\":2}}],[\"routerconfig\",{\"1\":{\"822\":2}}],[\"router>\",{\"1\":{\"803\":1,\"822\":1}}],[\"router格式规范的路由表\",{\"1\":{\"740\":1}}],[\"routerguard\",{\"1\":{\"740\":1}}],[\"router路由表格式的数据\",{\"1\":{\"737\":1}}],[\"router提供便捷的\",{\"1\":{\"733\":1}}],[\"routersfilter\",{\"1\":{\"731\":1,\"732\":1}}],[\"router\",{\"0\":{\"822\":1},\"1\":{\"404\":1,\"424\":9,\"425\":1,\"426\":1,\"427\":3,\"429\":2,\"430\":2,\"431\":1,\"432\":2,\"433\":1,\"436\":2,\"437\":1,\"522\":1,\"707\":5,\"709\":3,\"710\":1,\"713\":1,\"715\":1,\"716\":1,\"719\":1,\"721\":1,\"728\":1,\"730\":3,\"732\":2,\"735\":3,\"737\":1,\"738\":1,\"740\":3,\"819\":2,\"820\":1,\"822\":8,\"823\":4}}],[\"rows=\",{\"1\":{\"1057\":1}}],[\"rowspan=\",{\"1\":{\"1050\":1}}],[\"role\",{\"1\":{\"731\":2}}],[\"rollupoptions\",{\"1\":{\"575\":1}}],[\"robots\",{\"1\":{\"138\":1}}],[\"rootstate\",{\"1\":{\"815\":4,\"816\":2}}],[\"rootsaga\",{\"1\":{\"773\":2,\"777\":1}}],[\"rootepic\",{\"0\":{\"788\":1},\"1\":{\"785\":2,\"788\":1}}],[\"rootreducer\",{\"0\":{\"787\":1},\"1\":{\"760\":2,\"773\":2,\"785\":2,\"787\":1}}],[\"rootwithpendingpassiveeffects\",{\"1\":{\"374\":4,\"384\":1,\"396\":4}}],[\"rootdoeshavepassiveeffect\",{\"1\":{\"374\":5,\"384\":4,\"396\":5}}],[\"root在捕获或者说冒泡阶段处理事件的时候执行此函数\",{\"1\":{\"288\":1}}],[\"rootcontainerelement\",{\"1\":{\"286\":5}}],[\"roothaseffect\",{\"1\":{\"274\":2,\"317\":2,\"360\":2,\"374\":2,\"384\":2,\"396\":2}}],[\"root节点首次创建时走这里\",{\"1\":{\"272\":1,\"318\":1}}],[\"root\",{\"1\":{\"112\":1,\"269\":9,\"270\":7,\"271\":15,\"272\":19,\"274\":17,\"284\":3,\"286\":2,\"288\":1,\"292\":1,\"301\":3,\"305\":3,\"315\":2,\"317\":19,\"326\":8,\"329\":3,\"333\":3,\"338\":4,\"344\":3,\"349\":13,\"351\":3,\"353\":3,\"356\":3,\"359\":3,\"360\":19,\"367\":3,\"373\":4,\"374\":24,\"375\":17,\"377\":3,\"384\":6,\"385\":19,\"396\":28,\"443\":1,\"578\":1,\"735\":1,\"760\":1,\"773\":1,\"785\":2,\"803\":1,\"810\":3,\"820\":1,\"823\":1,\"963\":1}}],[\"r\",{\"1\":{\"28\":1,\"1016\":1,\"1381\":6,\"1382\":12,\"1383\":2,\"1384\":18,\"1385\":4,\"1386\":6,\"1388\":2,\"1389\":2,\"1390\":2,\"1391\":12,\"1392\":2}}],[\"rename\",{\"1\":{\"1031\":1}}],[\"rendertemplate\",{\"0\":{\"657\":1},\"1\":{\"649\":2,\"651\":6,\"653\":3,\"657\":2}}],[\"rendertriggered\",{\"1\":{\"585\":1}}],[\"rendertracked\",{\"1\":{\"585\":1}}],[\"renderthecat\",{\"1\":{\"231\":2}}],[\"renderthecat`始终\",{\"1\":{\"231\":1}}],[\"renderrootconcurrent\",{\"1\":{\"396\":2}}],[\"renderrootsync\",{\"1\":{\"272\":2,\"274\":2,\"317\":2,\"360\":2,\"374\":2,\"396\":2}}],[\"renderwithhooks\",{\"1\":{\"306\":1,\"315\":1,\"318\":3,\"323\":2,\"338\":1,\"373\":1}}],[\"render=\",{\"1\":{\"225\":1,\"229\":1,\"231\":1}}],[\"render\",{\"0\":{\"87\":1,\"224\":1,\"229\":1,\"702\":1},\"1\":{\"84\":1,\"87\":2,\"89\":1,\"98\":1,\"99\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":2,\"113\":1,\"114\":1,\"126\":1,\"134\":4,\"143\":1,\"145\":1,\"150\":2,\"153\":1,\"155\":1,\"156\":3,\"160\":1,\"165\":4,\"167\":4,\"171\":4,\"172\":4,\"173\":1,\"186\":2,\"212\":1,\"214\":1,\"217\":2,\"218\":2,\"219\":1,\"222\":1,\"224\":1,\"229\":6,\"231\":4,\"234\":1,\"235\":1,\"239\":2,\"242\":1,\"245\":1,\"270\":1,\"271\":3,\"272\":1,\"301\":1,\"305\":1,\"329\":1,\"333\":1,\"344\":1,\"351\":1,\"353\":1,\"356\":1,\"359\":1,\"367\":1,\"377\":1,\"407\":1,\"424\":1,\"518\":1,\"620\":1,\"623\":1,\"636\":1,\"639\":1,\"640\":1,\"641\":1,\"653\":2,\"696\":1,\"698\":1,\"702\":1,\"735\":1,\"749\":1,\"760\":1,\"773\":1,\"774\":1,\"785\":1,\"789\":1,\"803\":1,\"804\":1,\"810\":1,\"823\":2}}],[\"rem\",{\"0\":{\"962\":1,\"963\":1,\"965\":1},\"1\":{\"962\":1,\"963\":3,\"965\":3,\"966\":8}}],[\"removeclass\",{\"1\":{\"1299\":1}}],[\"removechangelistener\",{\"1\":{\"234\":1}}],[\"removechild\",{\"1\":{\"112\":1,\"347\":2,\"349\":2,\"375\":2,\"385\":2,\"683\":1,\"691\":1,\"1094\":1}}],[\"removeobserver\",{\"1\":{\"842\":2,\"843\":2}}],[\"removeone\",{\"1\":{\"816\":1}}],[\"removetodo\",{\"1\":{\"816\":1}}],[\"removesub移除调当前watcher\",{\"1\":{\"635\":1}}],[\"removesub\",{\"1\":{\"626\":1,\"635\":2}}],[\"remove\",{\"0\":{\"1101\":1},\"1\":{\"626\":1,\"635\":2,\"636\":1,\"842\":1,\"843\":2,\"1094\":1,\"1101\":1,\"1322\":1}}],[\"removelist\",{\"1\":{\"150\":1}}],[\"removeeventlistener\",{\"1\":{\"114\":1,\"115\":2}}],[\"relatedtarget\",{\"1\":{\"1152\":1}}],[\"relative\",{\"0\":{\"992\":1},\"1\":{\"989\":1,\"992\":1,\"995\":3,\"999\":1,\"1225\":1}}],[\"release\",{\"1\":{\"1141\":1}}],[\"reload\",{\"1\":{\"1065\":1}}],[\"rel\",{\"1\":{\"868\":1}}],[\"rel=\",{\"1\":{\"868\":1,\"964\":1}}],[\"returen\",{\"1\":{\"1148\":1}}],[\"returns\",{\"1\":{\"306\":1,\"315\":1,\"327\":1,\"338\":1,\"373\":1,\"625\":1}}],[\"returnvalue\",{\"1\":{\"293\":1}}],[\"returnfiber\",{\"1\":{\"272\":11,\"273\":2,\"317\":2,\"319\":20,\"348\":20,\"349\":4,\"352\":24,\"357\":32,\"360\":2,\"361\":42,\"374\":2,\"375\":4,\"385\":4,\"396\":2}}],[\"return\",{\"1\":{\"22\":1,\"42\":1,\"43\":1,\"46\":1,\"59\":1,\"66\":4,\"69\":4,\"70\":10,\"72\":5,\"98\":4,\"99\":1,\"100\":1,\"106\":1,\"107\":2,\"108\":1,\"109\":2,\"110\":1,\"111\":3,\"112\":3,\"113\":1,\"114\":1,\"116\":2,\"139\":1,\"145\":1,\"149\":1,\"150\":3,\"155\":1,\"160\":1,\"182\":1,\"185\":1,\"189\":1,\"191\":1,\"192\":3,\"194\":2,\"197\":2,\"199\":1,\"201\":1,\"202\":2,\"204\":2,\"207\":2,\"208\":1,\"214\":1,\"217\":3,\"218\":1,\"219\":1,\"220\":1,\"222\":1,\"227\":1,\"228\":2,\"229\":3,\"230\":1,\"231\":2,\"234\":3,\"236\":1,\"239\":4,\"240\":3,\"242\":3,\"245\":2,\"252\":4,\"269\":3,\"270\":4,\"271\":9,\"272\":31,\"273\":9,\"274\":11,\"284\":1,\"286\":2,\"287\":1,\"288\":2,\"289\":2,\"290\":3,\"291\":3,\"293\":4,\"295\":2,\"296\":1,\"297\":1,\"298\":3,\"299\":3,\"301\":1,\"305\":3,\"306\":3,\"309\":2,\"315\":5,\"316\":8,\"317\":2,\"318\":10,\"319\":20,\"320\":4,\"321\":1,\"322\":1,\"325\":4,\"326\":9,\"327\":4,\"328\":1,\"329\":3,\"333\":1,\"336\":3,\"338\":9,\"344\":1,\"346\":1,\"348\":20,\"349\":10,\"351\":1,\"352\":22,\"353\":1,\"356\":1,\"357\":29,\"359\":1,\"360\":10,\"361\":40,\"367\":4,\"370\":4,\"373\":17,\"374\":10,\"375\":10,\"377\":4,\"380\":5,\"383\":2,\"385\":10,\"392\":6,\"395\":6,\"396\":10,\"407\":1,\"412\":1,\"418\":1,\"431\":1,\"448\":1,\"451\":1,\"468\":1,\"475\":1,\"487\":1,\"500\":1,\"504\":1,\"511\":2,\"512\":1,\"513\":2,\"514\":2,\"515\":2,\"516\":2,\"517\":4,\"518\":2,\"519\":3,\"520\":2,\"521\":2,\"534\":4,\"539\":2,\"543\":1,\"549\":3,\"557\":4,\"560\":2,\"601\":3,\"602\":6,\"603\":1,\"604\":5,\"607\":3,\"608\":2,\"609\":8,\"610\":3,\"613\":2,\"614\":1,\"616\":3,\"618\":2,\"625\":4,\"626\":3,\"627\":2,\"632\":1,\"633\":2,\"634\":5,\"635\":5,\"644\":2,\"646\":2,\"647\":1,\"648\":2,\"649\":1,\"650\":3,\"651\":2,\"654\":1,\"655\":2,\"656\":1,\"657\":5,\"661\":1,\"662\":3,\"674\":3,\"675\":1,\"683\":2,\"686\":3,\"689\":1,\"690\":1,\"691\":1,\"694\":1,\"695\":2,\"709\":1,\"713\":1,\"714\":1,\"715\":1,\"721\":1,\"728\":1,\"730\":2,\"731\":8,\"732\":1,\"735\":1,\"737\":2,\"738\":2,\"739\":3,\"740\":1,\"749\":4,\"755\":4,\"756\":7,\"774\":3,\"775\":4,\"776\":7,\"777\":1,\"787\":4,\"788\":2,\"789\":1,\"804\":1,\"806\":1,\"808\":1,\"813\":1,\"814\":1,\"815\":6,\"816\":1,\"820\":1,\"822\":1,\"823\":7,\"826\":1,\"827\":3,\"830\":1,\"831\":1,\"840\":4,\"1106\":1,\"1124\":1,\"1140\":1,\"1147\":1,\"1163\":1,\"1173\":2,\"1181\":1,\"1207\":1,\"1224\":2,\"1331\":1,\"1345\":2,\"1405\":1,\"1407\":3,\"1433\":3,\"1458\":9,\"1461\":1}}],[\"retrydelay\",{\"1\":{\"839\":1}}],[\"retry\",{\"1\":{\"839\":1}}],[\"retryer\",{\"1\":{\"839\":2,\"840\":2,\"841\":2}}],[\"regexp\",{\"1\":{\"695\":1,\"1381\":3,\"1391\":5}}],[\"reg\",{\"1\":{\"695\":2,\"1215\":4,\"1216\":2,\"1217\":3}}],[\"registrationname\",{\"1\":{\"282\":5,\"291\":3,\"299\":2}}],[\"registerdirectevent\",{\"1\":{\"282\":3}}],[\"registersimpleevent\",{\"1\":{\"281\":2}}],[\"registersimpleevents\",{\"1\":{\"280\":2,\"281\":1,\"292\":2}}],[\"registertwophaseevent\",{\"1\":{\"281\":2,\"282\":1}}],[\"registerevents\",{\"1\":{\"279\":1,\"280\":1,\"292\":1}}],[\"reverse\",{\"0\":{\"1363\":1},\"1\":{\"603\":2,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"620\":1}}],[\"revoke\",{\"1\":{\"103\":1}}],[\"revocable创建了可撤销的代理对象\",{\"1\":{\"103\":1}}],[\"repos\",{\"1\":{\"771\":2}}],[\"reportwebvitals\",{\"1\":{\"138\":1}}],[\"replace=\",{\"1\":{\"715\":1,\"737\":1,\"738\":1}}],[\"replacechild\",{\"1\":{\"675\":1,\"683\":1,\"688\":1,\"1094\":1}}],[\"replace\",{\"1\":{\"432\":6,\"715\":1,\"719\":1,\"725\":2,\"738\":1,\"1065\":1,\"1171\":2,\"1383\":1,\"1391\":3}}],[\"repeat\",{\"0\":{\"904\":1},\"1\":{\"273\":1,\"318\":1,\"320\":1,\"325\":1,\"904\":5,\"908\":5,\"909\":2,\"1202\":1}}],[\"reuse\",{\"1\":{\"270\":1,\"272\":1}}],[\"re\",{\"1\":{\"270\":1,\"272\":1,\"382\":1}}],[\"requirejs\",{\"1\":{\"1188\":1}}],[\"required\",{\"1\":{\"498\":1,\"1019\":1}}],[\"require\",{\"1\":{\"248\":3,\"822\":1,\"823\":5}}],[\"requesthostcallback\",{\"1\":{\"395\":2}}],[\"requestidlecallback中通过\",{\"1\":{\"393\":1}}],[\"requestidlecallback流程\",{\"1\":{\"262\":1}}],[\"requestidlecallback\",{\"0\":{\"262\":1},\"1\":{\"262\":5,\"263\":1,\"272\":2,\"388\":3,\"393\":1,\"395\":1}}],[\"requestanimationframe\",{\"1\":{\"242\":1}}],[\"request原型方法\",{\"1\":{\"69\":1}}],[\"requested\",{\"1\":{\"44\":1}}],[\"request\",{\"0\":{\"35\":1},\"1\":{\"19\":1,\"26\":3,\"30\":1,\"66\":1,\"67\":2,\"68\":1,\"69\":3,\"70\":6,\"71\":1,\"72\":3,\"74\":1,\"75\":1,\"775\":1,\"776\":1,\"777\":2}}],[\"recommended\",{\"1\":{\"578\":4}}],[\"reconcilesingletextnode\",{\"1\":{\"319\":2,\"348\":2,\"352\":2,\"357\":2,\"361\":2}}],[\"reconcilesingleelement\",{\"1\":{\"272\":2,\"319\":2,\"323\":1,\"348\":2,\"350\":1,\"352\":2,\"357\":2,\"361\":2}}],[\"reconcilechildrenarray\",{\"1\":{\"319\":2,\"348\":2,\"352\":2,\"357\":2,\"361\":2}}],[\"reconcilechildren\",{\"1\":{\"272\":4,\"318\":5,\"323\":2}}],[\"reconcilechildfibers\",{\"1\":{\"272\":7,\"318\":2,\"319\":3,\"348\":3,\"352\":3,\"357\":3,\"361\":3}}],[\"reconcilerchildrenarray\",{\"1\":{\"272\":2}}],[\"reconciler\",{\"1\":{\"249\":4,\"269\":1,\"271\":3,\"272\":4,\"273\":2,\"306\":1,\"315\":1,\"316\":2,\"317\":2,\"318\":3,\"319\":2,\"320\":3,\"325\":3,\"326\":3,\"338\":1,\"345\":1,\"346\":1,\"348\":1,\"349\":3,\"352\":2,\"357\":2,\"360\":3,\"361\":2,\"371\":1,\"372\":1,\"373\":1,\"374\":3,\"375\":3,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":3,\"396\":3}}],[\"recursivelytraverselayouteffects\",{\"1\":{\"385\":3}}],[\"recursivelytraversepassivemounteffects\",{\"1\":{\"375\":3,\"385\":3}}],[\"recursivelytraversepassiveunmounteffects\",{\"1\":{\"375\":3,\"385\":3}}],[\"recursivelytraversedeletioneffects\",{\"1\":{\"349\":2,\"375\":2,\"385\":2}}],[\"recursivelytraversemutationeffects\",{\"1\":{\"274\":2,\"326\":5,\"349\":5,\"375\":5,\"385\":3}}],[\"reclaim\",{\"1\":{\"270\":1,\"272\":1}}],[\"received\",{\"1\":{\"108\":1}}],[\"recipe\",{\"1\":{\"103\":1}}],[\"refetchonwindowfocus\",{\"1\":{\"837\":3}}],[\"referenceerror\",{\"1\":{\"1350\":1}}],[\"reference\",{\"1\":{\"536\":1,\"549\":2}}],[\"ref<boolean>\",{\"1\":{\"588\":1}}],[\"ref<string\",{\"1\":{\"586\":2}}],[\"ref<string>\",{\"1\":{\"586\":1}}],[\"reflect\",{\"1\":{\"549\":7,\"550\":1,\"1168\":1}}],[\"ref并将其赋值给\",{\"1\":{\"237\":1}}],[\"ref\",{\"0\":{\"188\":1,\"497\":1,\"513\":1,\"536\":1,\"550\":1,\"586\":1},\"1\":{\"107\":1,\"152\":1,\"153\":2,\"154\":3,\"156\":1,\"188\":1,\"191\":3,\"196\":1,\"199\":3,\"202\":3,\"236\":2,\"237\":14,\"238\":4,\"239\":3,\"240\":4,\"252\":8,\"513\":2,\"525\":1,\"536\":2,\"537\":1,\"550\":4,\"553\":2,\"557\":3,\"558\":1,\"560\":2,\"586\":5,\"588\":2,\"728\":2}}],[\"ref=\",{\"1\":{\"107\":1,\"154\":3,\"155\":1,\"189\":1,\"191\":2,\"237\":3,\"497\":2,\"513\":1,\"728\":1,\"749\":1}}],[\"refs不会被传递\",{\"1\":{\"235\":1}}],[\"refs\",{\"0\":{\"151\":1,\"236\":1,\"239\":1},\"1\":{\"107\":1,\"153\":1,\"235\":1,\"239\":1}}],[\"reduce\",{\"1\":{\"634\":1,\"635\":1,\"650\":1,\"657\":1}}],[\"reducers文件\",{\"0\":{\"776\":1}}],[\"reducers\",{\"0\":{\"812\":1},\"1\":{\"743\":1,\"749\":2,\"750\":3,\"753\":1,\"754\":1,\"755\":1,\"760\":1,\"773\":1,\"785\":1,\"812\":4,\"816\":1,\"820\":1,\"823\":2}}],[\"reducer\",{\"0\":{\"303\":1,\"748\":1,\"750\":1},\"1\":{\"305\":2,\"306\":1,\"309\":2,\"315\":4,\"323\":1,\"329\":2,\"331\":1,\"332\":1,\"336\":4,\"338\":4,\"366\":1,\"370\":4,\"373\":4,\"380\":4,\"744\":1,\"746\":1,\"748\":3,\"750\":1,\"753\":1,\"781\":1,\"811\":3,\"812\":3,\"816\":3,\"840\":7}}],[\"redux<\",{\"1\":{\"823\":1}}],[\"redux写法相同\",{\"1\":{\"823\":1}}],[\"reduxjs\",{\"1\":{\"809\":1,\"811\":1,\"812\":1,\"816\":1}}],[\"redux异步中间件\",{\"0\":{\"754\":1}}],[\"redux的案例\",{\"1\":{\"753\":1}}],[\"redux跟vuex风格类似\",{\"1\":{\"753\":1}}],[\"redux是为了简化\",{\"1\":{\"753\":1}}],[\"redux流程\",{\"1\":{\"753\":1}}],[\"redux简化了\",{\"1\":{\"751\":1}}],[\"redux工作流\",{\"1\":{\"745\":1}}],[\"redux\",{\"0\":{\"117\":1,\"741\":1,\"743\":1,\"744\":1,\"745\":1,\"751\":1,\"753\":1,\"755\":1,\"756\":1,\"757\":1,\"780\":1,\"793\":1,\"809\":1,\"825\":1},\"1\":{\"105\":1,\"117\":2,\"303\":1,\"731\":2,\"732\":1,\"741\":1,\"743\":1,\"746\":2,\"749\":2,\"750\":1,\"751\":2,\"752\":1,\"753\":3,\"754\":2,\"755\":2,\"756\":3,\"757\":1,\"758\":1,\"759\":1,\"760\":4,\"762\":1,\"770\":1,\"771\":1,\"773\":4,\"774\":1,\"776\":1,\"777\":4,\"778\":1,\"779\":3,\"780\":2,\"784\":1,\"785\":3,\"788\":1,\"789\":2,\"790\":1,\"793\":1,\"809\":7,\"810\":1,\"811\":1,\"812\":1,\"813\":1,\"814\":1,\"817\":5,\"818\":2,\"819\":4,\"820\":1,\"825\":1,\"840\":1,\"850\":3}}],[\"red\",{\"1\":{\"139\":1,\"248\":4,\"253\":1,\"269\":1,\"271\":1,\"272\":1,\"301\":1,\"329\":1,\"333\":1,\"475\":1,\"560\":2,\"864\":4,\"867\":1,\"902\":1,\"1010\":1,\"1011\":4,\"1013\":3,\"1015\":2,\"1016\":3,\"1291\":2,\"1295\":1}}],[\"redirect\",{\"1\":{\"28\":1,\"737\":3,\"739\":1}}],[\"rerender\",{\"0\":{\"97\":1},\"1\":{\"92\":2,\"97\":1,\"98\":1,\"162\":3,\"197\":1,\"231\":1,\"235\":1}}],[\"ready\",{\"1\":{\"1282\":1}}],[\"readystate\",{\"1\":{\"9\":2,\"69\":1,\"72\":1,\"1207\":1}}],[\"readfilesync\",{\"1\":{\"574\":2}}],[\"readonly\",{\"0\":{\"555\":1},\"1\":{\"555\":1,\"558\":2,\"578\":1,\"1019\":1}}],[\"reactquery\",{\"1\":{\"850\":1}}],[\"reactquerydevtools\",{\"1\":{\"826\":1}}],[\"react生态\",{\"0\":{\"850\":1}}],[\"reactions\",{\"0\":{\"797\":1},\"1\":{\"797\":1}}],[\"reactive\",{\"0\":{\"537\":1,\"550\":1},\"1\":{\"525\":1,\"536\":1,\"537\":2,\"543\":2,\"550\":4,\"558\":2,\"621\":2,\"628\":1,\"631\":1,\"634\":1,\"635\":1,\"636\":1}}],[\"reactnative\",{\"1\":{\"707\":1}}],[\"reactname\",{\"1\":{\"281\":3,\"290\":3,\"292\":3,\"293\":4,\"298\":3}}],[\"reactrouterv6\",{\"1\":{\"705\":1}}],[\"reactrouter\",{\"0\":{\"705\":1},\"1\":{\"850\":1}}],[\"react源码分析\",{\"0\":{\"398\":1}}],[\"react也会放弃控制权\",{\"1\":{\"395\":1}}],[\"react每一帧向浏览器申请5ms用于自己任务执行\",{\"1\":{\"395\":1}}],[\"reacthookeffecttags\",{\"0\":{\"371\":1,\"381\":1},\"1\":{\"371\":1,\"373\":1,\"375\":1,\"381\":1,\"383\":1,\"385\":1}}],[\"reacthooks\",{\"0\":{\"309\":1,\"336\":1,\"370\":1,\"380\":1},\"1\":{\"308\":1,\"309\":1,\"335\":1,\"336\":1,\"369\":1,\"370\":1,\"379\":1,\"380\":1}}],[\"reactcurrentdispatcher\",{\"0\":{\"310\":1},\"1\":{\"306\":3,\"309\":3,\"310\":3,\"311\":3,\"313\":3,\"315\":3,\"323\":1,\"336\":3,\"338\":3,\"370\":3,\"373\":3,\"380\":3}}],[\"reactchildfiber\",{\"0\":{\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1},\"1\":{\"272\":1,\"318\":1,\"319\":1,\"350\":1,\"352\":1,\"353\":1,\"357\":2,\"361\":1}}],[\"reactsharedinternals\",{\"0\":{\"311\":1,\"312\":1},\"1\":{\"306\":3,\"308\":3,\"311\":3,\"312\":3,\"315\":3,\"335\":3,\"338\":3,\"369\":3,\"373\":3,\"379\":3}}],[\"reactsymbols\",{\"1\":{\"252\":1,\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"react时间类型\",{\"1\":{\"293\":1}}],[\"react的属性名\",{\"1\":{\"293\":1}}],[\"react的渲染分渲染\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"reacteventtype\",{\"1\":{\"293\":3}}],[\"reacteventname\",{\"1\":{\"290\":2,\"298\":2}}],[\"reactelement\",{\"1\":{\"252\":2}}],[\"reactprops$\",{\"1\":{\"289\":1}}],[\"reactlistening`\",{\"1\":{\"286\":1}}],[\"react事件名\",{\"1\":{\"282\":1}}],[\"reactworktagsmap\",{\"1\":{\"272\":3}}],[\"reactworktags\",{\"1\":{\"270\":1,\"271\":1,\"272\":6,\"273\":1,\"316\":1,\"318\":1,\"319\":1,\"320\":1,\"325\":1,\"326\":1,\"348\":1,\"349\":1,\"352\":1,\"357\":1,\"360\":1,\"361\":1,\"374\":1,\"375\":1,\"385\":1,\"396\":1}}],[\"reactfiberhooks\",{\"0\":{\"306\":1,\"315\":1,\"338\":1,\"373\":1,\"383\":1},\"1\":{\"306\":1,\"315\":1,\"318\":1,\"332\":1,\"338\":1,\"373\":1,\"383\":1}}],[\"reactfiber$\",{\"1\":{\"289\":1}}],[\"reactfiberbeginwork\",{\"0\":{\"318\":1},\"1\":{\"272\":1,\"317\":1,\"318\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"reactfiberworkloop\",{\"0\":{\"317\":1,\"360\":1,\"374\":1,\"384\":1,\"396\":1},\"1\":{\"272\":1,\"315\":1,\"317\":1,\"338\":1,\"360\":1,\"373\":1,\"374\":1,\"384\":1,\"396\":1}}],[\"reactfibercommitwork\",{\"0\":{\"326\":1,\"349\":1,\"375\":1,\"385\":1},\"1\":{\"317\":1,\"326\":1,\"349\":1,\"360\":1,\"374\":1,\"375\":1,\"384\":1,\"385\":1,\"396\":1}}],[\"reactfibercompletework\",{\"0\":{\"320\":1,\"325\":1},\"1\":{\"272\":1,\"317\":1,\"320\":1,\"325\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"reactfiberconcurrentupdates\",{\"0\":{\"316\":1},\"1\":{\"315\":1,\"316\":1,\"317\":1,\"338\":1,\"360\":1,\"373\":1,\"374\":1,\"396\":1}}],[\"reactfiberconcurrentupdate\",{\"1\":{\"271\":1,\"272\":1}}],[\"reactfiberclassupdatequeue\",{\"1\":{\"271\":2,\"272\":2,\"318\":1}}],[\"reactfiberflags\",{\"0\":{\"345\":1,\"372\":1,\"382\":1},\"1\":{\"270\":1,\"272\":2,\"273\":1,\"317\":1,\"319\":1,\"320\":1,\"325\":1,\"326\":1,\"345\":1,\"348\":1,\"349\":1,\"352\":1,\"357\":1,\"360\":1,\"361\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"382\":1,\"383\":1,\"385\":1,\"396\":1}}],[\"reactfiber\",{\"0\":{\"346\":1},\"1\":{\"270\":1,\"271\":1,\"272\":2,\"317\":1,\"319\":1,\"346\":1,\"348\":1,\"352\":1,\"357\":1,\"360\":1,\"361\":1,\"374\":1,\"396\":1}}],[\"reactfiberroot\",{\"1\":{\"269\":2,\"271\":1,\"272\":1}}],[\"reactfiberreconciler\",{\"1\":{\"269\":2,\"271\":1}}],[\"react元素\",{\"1\":{\"252\":1}}],[\"react文件夹下手写实现jsx\",{\"1\":{\"249\":1}}],[\"react18\",{\"1\":{\"249\":1}}],[\"react18新jsx转换写法\",{\"1\":{\"248\":1}}],[\"react16\",{\"1\":{\"244\":1,\"259\":1,\"263\":1}}],[\"react新生命周期流程图\",{\"1\":{\"170\":1}}],[\"react旧生命周期流程图\",{\"1\":{\"166\":1}}],[\"react禁止对state的直接修改\",{\"1\":{\"145\":1,\"155\":1,\"160\":1}}],[\"reactdomeventlistener\",{\"0\":{\"288\":1}}],[\"reactdomcomponenttree\",{\"0\":{\"289\":1},\"1\":{\"288\":1,\"291\":1,\"327\":1}}],[\"reactdomcomponent\",{\"0\":{\"322\":1,\"328\":1},\"1\":{\"273\":1,\"321\":1,\"322\":1,\"327\":1,\"328\":1}}],[\"reactdomhostconfig\",{\"0\":{\"297\":1,\"321\":1,\"327\":1,\"347\":1},\"1\":{\"272\":1,\"273\":1,\"318\":1,\"320\":1,\"321\":1,\"325\":1,\"326\":1,\"327\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"reactdomroot\",{\"0\":{\"284\":1},\"1\":{\"269\":3,\"271\":3,\"284\":1}}],[\"reactdom\",{\"1\":{\"126\":1,\"134\":1,\"167\":1,\"171\":1,\"222\":2,\"735\":2,\"760\":2,\"773\":2,\"785\":2,\"803\":1}}],[\"react\",{\"0\":{\"121\":1,\"136\":1,\"212\":1,\"246\":1,\"257\":1,\"307\":1,\"308\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1,\"751\":1,\"753\":1,\"824\":1},\"1\":{\"79\":1,\"81\":1,\"84\":1,\"85\":2,\"89\":1,\"93\":1,\"98\":1,\"99\":1,\"100\":1,\"103\":2,\"106\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":1,\"111\":3,\"112\":3,\"113\":2,\"114\":2,\"119\":4,\"120\":5,\"121\":1,\"123\":1,\"125\":1,\"127\":1,\"134\":2,\"136\":3,\"137\":4,\"140\":1,\"145\":1,\"149\":4,\"150\":4,\"154\":1,\"155\":1,\"158\":2,\"160\":1,\"161\":2,\"162\":5,\"163\":1,\"165\":1,\"174\":1,\"176\":1,\"177\":1,\"178\":1,\"180\":1,\"182\":2,\"184\":2,\"190\":1,\"192\":2,\"197\":1,\"199\":1,\"201\":1,\"206\":2,\"207\":9,\"208\":6,\"212\":1,\"213\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":2,\"222\":1,\"223\":3,\"224\":1,\"231\":1,\"232\":2,\"237\":2,\"239\":2,\"240\":3,\"241\":1,\"242\":1,\"244\":1,\"245\":1,\"246\":1,\"248\":10,\"249\":18,\"251\":1,\"252\":2,\"255\":1,\"257\":4,\"259\":2,\"262\":1,\"263\":1,\"264\":1,\"265\":1,\"266\":2,\"269\":2,\"271\":4,\"272\":10,\"273\":7,\"275\":1,\"277\":2,\"278\":1,\"281\":1,\"287\":1,\"291\":1,\"292\":1,\"293\":1,\"296\":1,\"301\":1,\"302\":1,\"303\":1,\"305\":4,\"306\":1,\"307\":2,\"308\":2,\"309\":1,\"310\":1,\"311\":1,\"312\":3,\"315\":1,\"316\":2,\"317\":2,\"318\":4,\"319\":5,\"320\":4,\"321\":1,\"322\":4,\"325\":4,\"326\":4,\"327\":3,\"328\":4,\"329\":4,\"331\":1,\"332\":1,\"333\":4,\"334\":2,\"335\":2,\"336\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"344\":4,\"345\":1,\"346\":1,\"348\":4,\"349\":4,\"351\":4,\"352\":5,\"353\":4,\"354\":1,\"356\":4,\"357\":6,\"359\":4,\"360\":3,\"361\":7,\"363\":2,\"365\":2,\"367\":7,\"368\":2,\"369\":2,\"370\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":3,\"375\":4,\"377\":7,\"378\":2,\"379\":2,\"380\":1,\"381\":1,\"382\":2,\"383\":1,\"384\":1,\"385\":4,\"386\":1,\"388\":1,\"392\":1,\"396\":3,\"397\":1,\"403\":1,\"596\":1,\"707\":5,\"709\":3,\"710\":1,\"713\":1,\"715\":3,\"719\":1,\"721\":3,\"728\":1,\"729\":1,\"730\":3,\"732\":3,\"733\":1,\"735\":6,\"737\":5,\"738\":1,\"740\":1,\"742\":1,\"749\":2,\"751\":2,\"753\":3,\"760\":4,\"773\":4,\"774\":3,\"785\":4,\"789\":5,\"800\":1,\"803\":2,\"804\":1,\"807\":4,\"808\":4,\"809\":1,\"810\":4,\"813\":1,\"817\":1,\"819\":2,\"822\":2,\"823\":4,\"824\":2,\"825\":1,\"826\":2,\"827\":2,\"830\":1,\"836\":1,\"837\":1,\"838\":1,\"843\":2,\"845\":2,\"847\":1,\"848\":2,\"849\":2}}],[\"reactjsxelement\",{\"0\":{\"252\":1},\"1\":{\"251\":1}}],[\"reactjsx\",{\"1\":{\"249\":1}}],[\"reactjs\",{\"1\":{\"79\":1}}],[\"reason\",{\"1\":{\"71\":3,\"1177\":3,\"1229\":2}}],[\"rejected\",{\"1\":{\"59\":1,\"70\":4,\"814\":1}}],[\"reject\",{\"1\":{\"59\":1,\"66\":2,\"69\":2,\"70\":5,\"72\":3,\"756\":1,\"1176\":2,\"1177\":1,\"1205\":1,\"1206\":1,\"1207\":2}}],[\"rewrite\",{\"1\":{\"28\":1}}],[\"reset\",{\"1\":{\"1057\":1}}],[\"reserved\",{\"1\":{\"252\":2}}],[\"res=yield\",{\"1\":{\"823\":1}}],[\"res真正需要的vm\",{\"1\":{\"635\":1}}],[\"res的\",{\"1\":{\"635\":5}}],[\"res的变化仅在第一次初始化的时候引起了vm\",{\"1\":{\"634\":1}}],[\"res变化之后\",{\"1\":{\"634\":1}}],[\"rest\",{\"0\":{\"1165\":1,\"1214\":1},\"1\":{\"239\":1,\"382\":1,\"631\":1,\"661\":12,\"662\":3,\"1165\":2}}],[\"resizeobserver\",{\"1\":{\"202\":4}}],[\"resize\",{\"1\":{\"202\":1,\"1076\":1}}],[\"resolve方法\",{\"1\":{\"727\":1}}],[\"resolvedprops\",{\"1\":{\"318\":2}}],[\"resolvedispatcher\",{\"1\":{\"309\":2,\"336\":3,\"370\":4,\"380\":5}}],[\"resolvepromise\",{\"1\":{\"71\":4,\"72\":3}}],[\"resolve\",{\"0\":{\"572\":1},\"1\":{\"59\":2,\"69\":3,\"70\":3,\"71\":2,\"72\":4,\"249\":6,\"572\":3,\"739\":1,\"764\":2,\"765\":2,\"777\":4,\"1176\":2,\"1177\":1,\"1205\":1,\"1206\":2,\"1207\":2}}],[\"resource\",{\"1\":{\"27\":1,\"404\":1}}],[\"responseencoding\",{\"0\":{\"53\":1}}],[\"responsetype\",{\"0\":{\"52\":1},\"1\":{\"13\":1}}],[\"response\",{\"1\":{\"9\":2,\"12\":1,\"19\":4,\"21\":6,\"22\":5,\"26\":4,\"27\":3,\"66\":4,\"69\":5,\"70\":6,\"72\":6,\"814\":2,\"1207\":1}}],[\"res\",{\"1\":{\"9\":2,\"634\":4,\"635\":4,\"640\":2,\"641\":3,\"731\":7,\"738\":4,\"823\":2,\"1174\":1}}],[\"results\",{\"1\":{\"788\":2}}],[\"resultingfirstchild\",{\"1\":{\"272\":3,\"319\":3,\"348\":3,\"352\":3,\"357\":5,\"361\":6}}],[\"result\",{\"1\":{\"9\":2,\"69\":2,\"248\":4,\"274\":1,\"603\":2,\"604\":2,\"609\":2,\"610\":2,\"614\":2,\"662\":4,\"755\":2,\"756\":6,\"778\":1,\"1178\":8,\"1206\":2,\"1207\":2,\"1221\":4}}],[\"首字母大写\",{\"1\":{\"1431\":1,\"1436\":1}}],[\"首列\",{\"1\":{\"1048\":1}}],[\"首次挂载执行一个整体\",{\"1\":{\"274\":1}}],[\"首次渲染还是不会生效\",{\"1\":{\"272\":1}}],[\"首次渲染时为null\",{\"1\":{\"272\":1}}],[\"首次渲染执行根节点同步渲染\",{\"1\":{\"272\":1}}],[\"首先查找这个对象自身有没有该属性\",{\"1\":{\"1442\":1}}],[\"首先创建全局的执行上下文\",{\"1\":{\"1425\":1}}],[\"首先是使得\",{\"1\":{\"1416\":1}}],[\"首先是一个基于\",{\"1\":{\"819\":1}}],[\"首先设置表达式\",{\"1\":{\"1269\":1}}],[\"首先会查找局部定义的变量\",{\"1\":{\"1012\":1}}],[\"首先不是判断四种命中\",{\"1\":{\"683\":1,\"691\":1}}],[\"首先判断\",{\"1\":{\"661\":1}}],[\"首先执行\",{\"1\":{\"323\":1}}],[\"首先将\",{\"1\":{\"277\":1}}],[\"首先在工作单元函数中更新\",{\"1\":{\"273\":1}}],[\"首先派发更新计划\",{\"1\":{\"272\":1}}],[\"首先\",{\"1\":{\"257\":1,\"630\":1,\"694\":1}}],[\"首先我们知道\",{\"1\":{\"531\":1}}],[\"首先我们可以看看它们是否是兄弟组件\",{\"1\":{\"110\":1}}],[\"首先我们用nginx作为代理服务器和用户交互\",{\"1\":{\"28\":1}}],[\"首页<\",{\"1\":{\"1043\":1}}],[\"首页\",{\"0\":{\"0\":1},\"1\":{\"739\":1}}],[\"实参可以是任意数据类型\",{\"1\":{\"1344\":1}}],[\"实心方块\",{\"1\":{\"1052\":1}}],[\"实心圆\",{\"1\":{\"1052\":1}}],[\"实质上为语义标签\",{\"1\":{\"1020\":1}}],[\"实时响应式适配方案实现\",{\"0\":{\"966\":1}}],[\"实时更新列表数据\",{\"1\":{\"234\":1}}],[\"实线边框\",{\"1\":{\"909\":1}}],[\"实例成员就是构造函数内部通过\",{\"1\":{\"1437\":1}}],[\"实例成员和静态成员\",{\"0\":{\"1437\":1}}],[\"实例后面加小括号\",{\"1\":{\"1431\":1}}],[\"实例方法\",{\"0\":{\"1409\":1,\"1417\":1}}],[\"实例一一对应\",{\"1\":{\"847\":1}}],[\"实例包含\",{\"1\":{\"847\":1}}],[\"实例收入其中\",{\"1\":{\"700\":1}}],[\"实例收集完成之后\",{\"1\":{\"636\":1}}],[\"实例只要不去更新\",{\"1\":{\"636\":1}}],[\"实例无需更新\",{\"1\":{\"636\":1}}],[\"实例通知相关的\",{\"1\":{\"636\":1}}],[\"实例也需要存储在\",{\"1\":{\"636\":1}}],[\"实例密切关联的\",{\"1\":{\"636\":1}}],[\"实例更新判断\",{\"1\":{\"636\":1}}],[\"实例更新\",{\"1\":{\"636\":1}}],[\"实例需要转存vm\",{\"1\":{\"635\":1}}],[\"实例需要订阅\",{\"1\":{\"608\":1}}],[\"实例自身无需创建\",{\"1\":{\"635\":1}}],[\"实例用来收发依赖\",{\"1\":{\"635\":1}}],[\"实例初始化或调用\",{\"1\":{\"632\":1}}],[\"实例初始化时\",{\"1\":{\"628\":1,\"636\":1}}],[\"实例会对当前的\",{\"1\":{\"628\":1}}],[\"实例调用\",{\"1\":{\"628\":1,\"632\":1}}],[\"实例受\",{\"1\":{\"628\":1}}],[\"实例属于\",{\"1\":{\"628\":1}}],[\"实例并传入\",{\"1\":{\"628\":1}}],[\"实例执行依赖更新时\",{\"1\":{\"625\":1}}],[\"实例可以正确存储目标对象的\",{\"1\":{\"621\":1}}],[\"实例赋给\",{\"1\":{\"621\":1}}],[\"实例在运行\",{\"1\":{\"621\":1}}],[\"实例内部发出\",{\"1\":{\"847\":1}}],[\"实例内部实际上需要创建一个\",{\"1\":{\"635\":1}}],[\"实例内部储存的\",{\"1\":{\"621\":1}}],[\"实例内\",{\"1\":{\"621\":1}}],[\"实例创建层层嵌套的\",{\"1\":{\"621\":1}}],[\"实例创建完毕接管容器后\",{\"1\":{\"474\":1}}],[\"实例储存在\",{\"1\":{\"621\":1}}],[\"实例化对象并赋值\",{\"1\":{\"1433\":1}}],[\"实例化这个类\",{\"1\":{\"1274\":1}}],[\"实例化一个扫描器\",{\"1\":{\"647\":1,\"654\":1}}],[\"实例化之后进行一次判断\",{\"1\":{\"625\":1}}],[\"实例化\",{\"1\":{\"608\":1,\"632\":1}}],[\"实例化完毕\",{\"1\":{\"608\":1}}],[\"实例化时会执行\",{\"1\":{\"608\":1}}],[\"实例的值是否更新\",{\"1\":{\"636\":1}}],[\"实例的this\",{\"1\":{\"635\":1}}],[\"实例的依赖更新方法\",{\"1\":{\"621\":1}}],[\"实例的依赖收集方法\",{\"1\":{\"621\":1}}],[\"实例的通知更新方法来执行\",{\"1\":{\"621\":1}}],[\"实例的通知更新方法\",{\"1\":{\"621\":1}}],[\"实例的\",{\"1\":{\"608\":2,\"632\":1,\"634\":1,\"841\":2}}],[\"实例作为\",{\"1\":{\"593\":1}}],[\"实例添加方法\",{\"1\":{\"500\":1}}],[\"实例\",{\"1\":{\"443\":1,\"467\":1,\"482\":1,\"534\":1,\"561\":1,\"593\":1,\"621\":4,\"628\":3,\"631\":1,\"634\":2,\"635\":4,\"636\":3,\"827\":1,\"841\":1,\"847\":2,\"1103\":1}}],[\"实例为一对一关系\",{\"1\":{\"443\":1}}],[\"实例为哪个容器服务\",{\"1\":{\"443\":1}}],[\"实例对象创建方法\",{\"0\":{\"1397\":1}}],[\"实例对象\",{\"1\":{\"443\":1,\"467\":1,\"625\":1,\"692\":1,\"1446\":1}}],[\"实例对象的\",{\"1\":{\"214\":1}}],[\"实例中的\",{\"1\":{\"1407\":1}}],[\"实例中书写了有效的生命周期钩子\",{\"1\":{\"703\":1}}],[\"实例中完成依赖的\",{\"1\":{\"636\":1}}],[\"实例中\",{\"1\":{\"424\":1,\"621\":3,\"636\":1}}],[\"实例函数进行了特殊处理\",{\"1\":{\"287\":1}}],[\"实例和设置\",{\"1\":{\"273\":1}}],[\"实现全部对象内容拷贝\",{\"1\":{\"1461\":1}}],[\"实现成组匹配字符串\",{\"1\":{\"1391\":1}}],[\"实现应该由以下三个部分构成\",{\"1\":{\"1233\":1}}],[\"实现用户信息的收集和传递\",{\"1\":{\"1056\":1}}],[\"实现方法如下\",{\"1\":{\"1391\":1}}],[\"实现方法\",{\"1\":{\"880\":1,\"1392\":1}}],[\"实现方式\",{\"1\":{\"603\":1}}],[\"实现中止网络请求\",{\"1\":{\"841\":1}}],[\"实现中止网络请求利用了\",{\"1\":{\"841\":1}}],[\"实现时光旅行\",{\"1\":{\"743\":1}}],[\"实现属性值的更新\",{\"1\":{\"692\":1}}],[\"实现思路\",{\"1\":{\"648\":1,\"736\":1}}],[\"实现扫描器类\",{\"0\":{\"646\":1}}],[\"实现了对范式化结构的存储的一系列标准操作\",{\"1\":{\"816\":1}}],[\"实现了整合\",{\"1\":{\"812\":1}}],[\"实现了数据缓存\",{\"1\":{\"636\":1}}],[\"实现了祖孙组件之间的通信\",{\"1\":{\"209\":1}}],[\"实现的\",{\"1\":{\"631\":1,\"843\":1}}],[\"实现的方法重新实现\",{\"1\":{\"393\":1}}],[\"实现精准的数据的实时侦听\",{\"1\":{\"621\":1}}],[\"实现变量的响应式处理\",{\"1\":{\"620\":1}}],[\"实现依赖收集后\",{\"1\":{\"608\":1}}],[\"实现代码前先总结一下现阶段情况与下阶段目标\",{\"1\":{\"608\":1}}],[\"实现订阅\",{\"0\":{\"605\":1}}],[\"实现多层级复杂类型的递归响应式数据劫持\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"实现多次接收参数\",{\"1\":{\"159\":1}}],[\"实现完整的数据劫持\",{\"0\":{\"598\":1}}],[\"实现接口时类中要保护接口中的所有属性\",{\"1\":{\"580\":1}}],[\"实现跨层级组件\",{\"1\":{\"560\":1}}],[\"实现跨层级祖孙组件通信\",{\"1\":{\"560\":1}}],[\"实现响应式\",{\"1\":{\"524\":1,\"550\":2}}],[\"实现相比\",{\"1\":{\"450\":1}}],[\"实现切换\",{\"1\":{\"424\":1}}],[\"实现以上\",{\"1\":{\"268\":1}}],[\"实现控制反转\",{\"1\":{\"229\":1}}],[\"实现一个过渡效果\",{\"1\":{\"208\":1}}],[\"实现其他功能的\",{\"1\":{\"198\":1}}],[\"实现动态组件\",{\"1\":{\"132\":1}}],[\"实现静态组件\",{\"1\":{\"132\":1}}],[\"实现\",{\"0\":{\"602\":1,\"648\":1},\"1\":{\"103\":2,\"249\":1,\"505\":1,\"537\":1,\"683\":1,\"700\":1,\"728\":1,\"779\":1,\"790\":1,\"831\":1,\"1154\":1}}],[\"实现原理\",{\"1\":{\"103\":1,\"505\":1,\"548\":1,\"549\":1}}],[\"实现状态逻辑复用\",{\"1\":{\"87\":1}}],[\"实现组件状态逻辑复用的\",{\"1\":{\"86\":1}}],[\"实现局部更新\",{\"1\":{\"3\":1}}],[\"实际应用中基本不会使用基本数据类型对象\",{\"1\":{\"1371\":1}}],[\"实际使用时\",{\"1\":{\"1052\":1}}],[\"实际文档显示与语言定义之间非强制关系\",{\"1\":{\"1033\":1}}],[\"实际内容\",{\"1\":{\"968\":1}}],[\"实际大小\",{\"1\":{\"965\":1,\"966\":1}}],[\"实际工作中\",{\"1\":{\"984\":1}}],[\"实际工作中按照团队约定来写字体\",{\"1\":{\"887\":1}}],[\"实际工作中都需要给链接单独指定样式\",{\"1\":{\"873\":1}}],[\"实际开发常见于\",{\"1\":{\"903\":1}}],[\"实际开发中不可以使用这个属性\",{\"1\":{\"1439\":1}}],[\"实际开发中很少使用构造函数来创建函数对象\",{\"1\":{\"1343\":1}}],[\"实际开发中用\",{\"1\":{\"1057\":1}}],[\"实际开发中\",{\"1\":{\"884\":1,\"975\":1}}],[\"实际开发的写法\",{\"1\":{\"873\":1}}],[\"实际开发都是外部样式表\",{\"1\":{\"868\":1}}],[\"实际开发更推荐使用vite\",{\"1\":{\"491\":1}}],[\"实际的\",{\"1\":{\"663\":1}}],[\"实际的作用是\",{\"1\":{\"197\":1}}],[\"实际源码可优化压缩至单数组\",{\"1\":{\"661\":1}}],[\"实际上是\",{\"1\":{\"1415\":1}}],[\"实际上是让当前的watcher实例去收集调用它的dep实例\",{\"1\":{\"635\":1}}],[\"实际上使用的是ast\",{\"1\":{\"695\":1}}],[\"实际上在这里判断出当前dep\",{\"1\":{\"635\":1}}],[\"实际上还是在watcher实例中执行收集\",{\"1\":{\"635\":1}}],[\"实际上现在已经能实现\",{\"1\":{\"634\":1}}],[\"实际上算是监听收集\",{\"1\":{\"621\":1}}],[\"实际上\",{\"1\":{\"294\":1,\"296\":1,\"339\":1,\"602\":1,\"627\":1}}],[\"实际上会变成import\",{\"1\":{\"249\":1}}],[\"实际效果是将mouse内的\",{\"1\":{\"229\":1}}],[\"实际会从当前触发更新的节点开始向上对其所有的父节点打上有子节点需要更新的标记\",{\"1\":{\"162\":1}}],[\"实际就是父组件通过\",{\"1\":{\"107\":1}}],[\"实际就是把web项目和后端接口项目放到一个域中\",{\"1\":{\"28\":1}}],[\"实际项目中常用web服务器\",{\"1\":{\"28\":1}}],[\"用+连接一个字符串或者是数字的时候\",{\"1\":{\"1410\":1}}],[\"用原生\",{\"1\":{\"1284\":1}}],[\"用程序表示\",{\"1\":{\"1268\":1}}],[\"用的较少\",{\"1\":{\"1068\":1}}],[\"用我们页面元素的大小\",{\"1\":{\"966\":1}}],[\"用省略号\",{\"1\":{\"927\":1}}],[\"用法类似\",{\"1\":{\"1092\":1}}],[\"用法\",{\"1\":{\"864\":1,\"1286\":1,\"1287\":1,\"1289\":1,\"1290\":1,\"1324\":1,\"1402\":1,\"1407\":2}}],[\"用法特殊\",{\"1\":{\"472\":1}}],[\"用传进来之前的值+action中的值\",{\"1\":{\"749\":1}}],[\"用一个单独的常量状态树\",{\"1\":{\"743\":1}}],[\"用以存储需要更新的订阅信息\",{\"1\":{\"608\":1}}],[\"用以劫持数据\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"用到数据的组件都是依赖\",{\"1\":{\"605\":1}}],[\"用对象接收\",{\"1\":{\"510\":1}}],[\"用数组接收\",{\"1\":{\"510\":1}}],[\"用当前时间减去开始的时间就是过去的时间\",{\"1\":{\"395\":1}}],[\"用新数组和老数组进行对比\",{\"1\":{\"373\":1}}],[\"用老的子fiber链表和新的虚拟dom进行比较的过程\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"用户完成元素拖动后触发\",{\"1\":{\"1142\":1}}],[\"用户开始拖动元素时触发\",{\"1\":{\"1142\":1}}],[\"用户的屏幕信息\",{\"1\":{\"1068\":1}}],[\"用户可在其中输入文本\",{\"1\":{\"1057\":1}}],[\"用户是否可以缩放\",{\"1\":{\"950\":1}}],[\"用户短暂离开再返回应用页时\",{\"1\":{\"837\":1}}],[\"用户访问\",{\"1\":{\"742\":1}}],[\"用户名或密码错误\",{\"1\":{\"731\":1}}],[\"用户名已存在\",{\"1\":{\"26\":1}}],[\"用户登录成功\",{\"1\":{\"729\":1}}],[\"用户自己传入的watch\",{\"1\":{\"626\":1}}],[\"用户输入的就是\",{\"1\":{\"463\":1}}],[\"用户会感觉到卡顿\",{\"1\":{\"260\":1}}],[\"用\",{\"1\":{\"161\":2,\"201\":1,\"461\":2,\"524\":1,\"650\":1,\"657\":1,\"666\":1,\"937\":1,\"964\":1,\"1273\":1,\"1284\":1}}],[\"用来指定切换效果\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"用来对每个元素进行处理\",{\"1\":{\"1195\":1}}],[\"用来封装异步操作并可以获取其成功或失败的结果\",{\"1\":{\"1175\":1}}],[\"用来解决命名冲突的问题\",{\"1\":{\"1168\":1}}],[\"用来代替\",{\"1\":{\"1165\":1}}],[\"用来为指定元素绑定响应函数\",{\"1\":{\"1131\":1}}],[\"用来保存定时器标识\",{\"1\":{\"1072\":1}}],[\"用来完成对浏览器的操作\",{\"1\":{\"1059\":1}}],[\"用来限制在一个块元素显示的文本的行数\",{\"1\":{\"927\":1}}],[\"用来选择后代元素\",{\"1\":{\"873\":1}}],[\"用来调用异步函数\",{\"1\":{\"764\":1}}],[\"用来包裹不在<route>内的其他组件如<header>\",{\"1\":{\"728\":1}}],[\"用来包含虚拟\",{\"1\":{\"126\":1}}],[\"用来作为\",{\"1\":{\"644\":1}}],[\"用来存储每个计算属性的\",{\"1\":{\"631\":1}}],[\"用来定义基本类型数据\",{\"1\":{\"550\":1}}],[\"用来实现局部\",{\"1\":{\"486\":1}}],[\"用来实现局部功能效果的代码和资源的集合\",{\"1\":{\"129\":1}}],[\"用来帮助程序员快速创建一个\",{\"1\":{\"136\":1}}],[\"用来简化创建虚拟\",{\"1\":{\"121\":1}}],[\"用之前的标记判断子属性部分的数据是否有被修改过\",{\"1\":{\"103\":1}}],[\"用于表示该对象\",{\"1\":{\"1446\":1}}],[\"用于大数值运算\",{\"1\":{\"1230\":1}}],[\"用于创建\",{\"1\":{\"1210\":1}}],[\"用于创建浮动框\",{\"1\":{\"977\":1}}],[\"用于找出第一个符合条件的数组成员的位置\",{\"1\":{\"1196\":1}}],[\"用于找出第一个符合条件的数组成员\",{\"1\":{\"1196\":1}}],[\"用于启动和停止定时器\",{\"1\":{\"1071\":1}}],[\"用于增加用户体验\",{\"1\":{\"1057\":1}}],[\"用于通过javascript启动脚本\",{\"1\":{\"1057\":1}}],[\"用于定义表单域\",{\"1\":{\"1056\":1}}],[\"用于定义当前文档显示的语言\",{\"1\":{\"1033\":1}}],[\"用于制定图像文件的路径和文件名\",{\"1\":{\"1044\":1}}],[\"用于某段文本强制换行显示\",{\"1\":{\"1036\":1}}],[\"用于对网页元素进行整理和分类\",{\"1\":{\"1028\":1,\"1058\":1}}],[\"用于指定链接页面的打开方式\",{\"1\":{\"1042\":1}}],[\"用于指定链接目标的\",{\"1\":{\"1042\":1}}],[\"用于指定一个元素在文档中的定位方式\",{\"1\":{\"989\":1}}],[\"用于指定当前\",{\"1\":{\"443\":1}}],[\"用于解决早期\",{\"1\":{\"947\":1}}],[\"用于解析标签体内容\",{\"1\":{\"443\":1}}],[\"用于设置一个元素的垂直对齐方式\",{\"1\":{\"924\":1}}],[\"用于设置元素内文本内容的水平对齐方式\",{\"1\":{\"890\":1}}],[\"用于处理元素内的空白\",{\"1\":{\"898\":1}}],[\"用于处理客户端提交的请求\",{\"1\":{\"423\":1}}],[\"用于回滚乐观更新\",{\"1\":{\"835\":1}}],[\"用于在执行异步函数之后做下一步操作\",{\"1\":{\"833\":1}}],[\"用于更优雅地管理异步\",{\"1\":{\"779\":1}}],[\"用于更新函数组件\",{\"1\":{\"323\":1}}],[\"用于获取函数实参\",{\"1\":{\"1165\":1}}],[\"用于获取\",{\"1\":{\"767\":1}}],[\"用于控制跳转模式\",{\"1\":{\"715\":1}}],[\"用于控制请求头中的host值\",{\"1\":{\"495\":1}}],[\"用于扫描模板字符串\",{\"1\":{\"647\":1,\"654\":1}}],[\"用于读取响应式对象对应的普通对象\",{\"1\":{\"556\":1}}],[\"用于遍历\",{\"1\":{\"505\":1}}],[\"用于异步执行\",{\"1\":{\"505\":1}}],[\"用于父组件给子组件传递数据\",{\"1\":{\"498\":1}}],[\"用于支持websocket\",{\"1\":{\"495\":1}}],[\"用于优化性能\",{\"1\":{\"474\":1}}],[\"用于展示列表数据\",{\"1\":{\"460\":1}}],[\"用于展示页面内容\",{\"1\":{\"423\":1}}],[\"用于捕获路由组件的激活状态\",{\"1\":{\"434\":1}}],[\"用于\",{\"1\":{\"187\":1}}],[\"用于给节点打标识\",{\"1\":{\"497\":1}}],[\"用于给\",{\"1\":{\"138\":1}}],[\"用于动态构建用户界面的\",{\"1\":{\"80\":1}}],[\"用于传回客户端\",{\"1\":{\"26\":1}}],[\"用作文档中插图的图像\",{\"1\":{\"1020\":1}}],[\"用作\",{\"1\":{\"54\":1,\"747\":1}}],[\"最近一级\",{\"1\":{\"1290\":1}}],[\"最前面添加\",{\"1\":{\"1215\":1}}],[\"最先触发祖先元素事件\",{\"1\":{\"1132\":1}}],[\"最左侧单元格为目标单元格\",{\"1\":{\"1050\":1}}],[\"最上侧单元格为目标单元格\",{\"1\":{\"1050\":1}}],[\"最早也是最成熟的\",{\"1\":{\"1005\":1}}],[\"最早由\",{\"1\":{\"24\":1}}],[\"最合适\",{\"1\":{\"969\":1}}],[\"最常用的一个节点\",{\"1\":{\"1082\":1}}],[\"最常用的字符编码\",{\"1\":{\"1034\":1}}],[\"最常用\",{\"1\":{\"889\":1}}],[\"最常见的字体\",{\"1\":{\"882\":1}}],[\"最常见的组件间传递信息方法\",{\"1\":{\"106\":1}}],[\"最多重复次数不限\",{\"1\":{\"1384\":1}}],[\"最多\",{\"1\":{\"868\":1,\"1384\":1}}],[\"最关键的特点是\",{\"1\":{\"692\":1}}],[\"最复杂的情况\",{\"1\":{\"683\":1,\"690\":1}}],[\"最复杂的正是多节点的\",{\"1\":{\"354\":1}}],[\"最重要的属性是\",{\"1\":{\"672\":1}}],[\"最简结构\",{\"0\":{\"820\":1}}],[\"最简单的\",{\"1\":{\"511\":1}}],[\"最简洁的写法\",{\"1\":{\"219\":1}}],[\"最新版本用\",{\"1\":{\"1328\":1}}],[\"最新版本也已经标记\",{\"1\":{\"809\":1}}],[\"最新的版本是\",{\"1\":{\"492\":1}}],[\"最新方案\",{\"0\":{\"88\":1}}],[\"最好设置鼠标移入\",{\"1\":{\"1138\":1}}],[\"最好是基本类型\",{\"1\":{\"536\":1}}],[\"最好写成箭头函数\",{\"1\":{\"452\":1}}],[\"最好写成普通函数\",{\"1\":{\"452\":1}}],[\"最好使用每条数据的唯一标识作为\",{\"1\":{\"161\":1,\"461\":1}}],[\"最小精度\",{\"1\":{\"1181\":1}}],[\"最小宽度\",{\"1\":{\"960\":1}}],[\"最小允许的缩放比例\",{\"1\":{\"950\":1}}],[\"最小缩放比\",{\"1\":{\"950\":1}}],[\"最小量更新算法\",{\"1\":{\"702\":1}}],[\"最小量更新原理解析\",{\"1\":{\"664\":1}}],[\"最小堆方法\",{\"1\":{\"392\":1}}],[\"最小堆是一种经过排序的完全二叉树\",{\"1\":{\"391\":1}}],[\"最小堆机制\",{\"0\":{\"391\":1}}],[\"最小堆\",{\"0\":{\"389\":1},\"1\":{\"391\":1}}],[\"最小化页面重绘\",{\"1\":{\"82\":1}}],[\"最大的区别在于第二个参数是你需要截取字符串的长度\",{\"1\":{\"1376\":1}}],[\"最大宽度\",{\"1\":{\"960\":1}}],[\"最大允许的缩放比例\",{\"1\":{\"950\":1}}],[\"最大缩放比\",{\"1\":{\"950\":1}}],[\"最大价值\",{\"1\":{\"854\":1}}],[\"最大化地降低了\",{\"1\":{\"341\":1}}],[\"最大特色是作用于本地\",{\"1\":{\"139\":1}}],[\"最外部元素在渲染时不会向\",{\"1\":{\"218\":1}}],[\"最外部类名需使用类选择器\",{\"1\":{\"139\":1}}],[\"最长阶段\",{\"1\":{\"165\":1}}],[\"最后匹配的是字符串\",{\"1\":{\"1389\":1}}],[\"最后匹配的字符串\",{\"1\":{\"1388\":1}}],[\"最后使用字符串的\",{\"1\":{\"1383\":1}}],[\"最后触发祖先元素事件\",{\"1\":{\"1132\":1}}],[\"最后再统一导入样式文件\",{\"1\":{\"966\":1}}],[\"最后的公式\",{\"1\":{\"966\":1}}],[\"最后引入守卫函数\",{\"0\":{\"740\":1}}],[\"最后转换为ast\",{\"1\":{\"702\":1}}],[\"最后让编译好的\",{\"1\":{\"701\":1}}],[\"最后实际生成的结果是ast抽象语法树\",{\"1\":{\"695\":1}}],[\"最后实现了数据的响应式变化与监听回调\",{\"1\":{\"623\":1}}],[\"最后在\",{\"1\":{\"675\":1}}],[\"最后反映到真实\",{\"1\":{\"671\":1}}],[\"最后根据\",{\"1\":{\"663\":1}}],[\"最后推出的项就是堆叠完整的ast结构\",{\"1\":{\"661\":1}}],[\"最后一项永远是全局作用域\",{\"1\":{\"1423\":1}}],[\"最后一个参数是\",{\"1\":{\"908\":1}}],[\"最后一个更新next指向第一个更新\",{\"1\":{\"271\":1,\"272\":1}}],[\"最后一层一层弹出\",{\"1\":{\"658\":1}}],[\"最后结合数据挂载到\",{\"1\":{\"644\":1}}],[\"最后将dirty置为false\",{\"1\":{\"632\":1,\"635\":1}}],[\"最后调用组件\",{\"1\":{\"628\":1}}],[\"最后返回\",{\"1\":{\"661\":1}}],[\"最后返回实例原型的$watch方法调用\",{\"1\":{\"625\":1}}],[\"最后返回一个长度为\",{\"1\":{\"313\":1}}],[\"最后清空\",{\"1\":{\"621\":1}}],[\"最后获取目标值储存到\",{\"1\":{\"621\":1}}],[\"最后如果回调函数存在再执行回调\",{\"1\":{\"607\":1}}],[\"最后浏览器只需执行最少的代码\",{\"1\":{\"524\":1}}],[\"最后\",{\"1\":{\"505\":1,\"636\":1,\"651\":1,\"661\":2}}],[\"最后都出现在\",{\"1\":{\"467\":1}}],[\"最后进入第三轮遍历前\",{\"1\":{\"358\":1}}],[\"最后为新\",{\"1\":{\"323\":1}}],[\"最后回归到\",{\"1\":{\"323\":1}}],[\"最后统一处理的函数编码形式\",{\"1\":{\"159\":1}}],[\"最后才是\",{\"1\":{\"117\":1}}],[\"最后必须加上\",{\"1\":{\"26\":1}}],[\"最终只显示\",{\"1\":{\"900\":1}}],[\"最终选择元素\",{\"1\":{\"871\":1}}],[\"最终会调用\",{\"1\":{\"840\":1}}],[\"最终会在\",{\"1\":{\"470\":1}}],[\"最终数据进入成功的\",{\"1\":{\"788\":1}}],[\"最终的结果\",{\"1\":{\"756\":1}}],[\"最终容器组件\",{\"1\":{\"753\":1}}],[\"最终总结\",{\"1\":{\"732\":1,\"740\":1,\"864\":1}}],[\"最终循环结束\",{\"1\":{\"682\":1}}],[\"最终所有创建的子节点会逆序挂载上父节点vnode\",{\"1\":{\"675\":1,\"689\":1}}],[\"最终生成结构层次分明的\",{\"1\":{\"663\":1}}],[\"最终生成正确的\",{\"1\":{\"658\":1}}],[\"最终解析为\",{\"1\":{\"658\":1}}],[\"最终想要生成的\",{\"1\":{\"647\":1}}],[\"最终实现效果是将\",{\"1\":{\"620\":1}}],[\"最终完整源码\",{\"0\":{\"611\":1,\"652\":1,\"684\":1}}],[\"最终完成页面更新\",{\"1\":{\"480\":1}}],[\"最终输出为格式规范的虚拟节点\",{\"1\":{\"692\":1}}],[\"最终输出结果\",{\"0\":{\"301\":1},\"1\":{\"661\":1}}],[\"最终输出虚拟\",{\"1\":{\"249\":1}}],[\"最终将注册事件名称添加到\",{\"1\":{\"278\":1}}],[\"最终结果\",{\"1\":{\"271\":1,\"272\":1}}],[\"最终执行最小量的重渲染组件就只会有\",{\"1\":{\"97\":1}}],[\"最终返回的是一个包含了\",{\"1\":{\"812\":1}}],[\"最终返回\",{\"1\":{\"66\":1,\"1376\":1}}],[\"61\",{\"1\":{\"1381\":1}}],[\"67\",{\"1\":{\"1376\":2}}],[\"678\",{\"1\":{\"1281\":3}}],[\"693\",{\"1\":{\"1369\":1}}],[\"65\",{\"1\":{\"1178\":3}}],[\"640px\",{\"1\":{\"960\":1,\"1016\":1}}],[\"640\",{\"1\":{\"952\":2}}],[\"640x1136\",{\"1\":{\"944\":1}}],[\"640x960\",{\"1\":{\"944\":1}}],[\"66px\",{\"1\":{\"966\":1}}],[\"667px\",{\"1\":{\"1016\":1}}],[\"667\",{\"1\":{\"952\":1}}],[\"666\",{\"1\":{\"427\":1,\"429\":1,\"430\":2,\"799\":1,\"960\":1}}],[\"66\",{\"1\":{\"260\":1,\"966\":1}}],[\"6ms\",{\"1\":{\"259\":1}}],[\"600px\",{\"1\":{\"1016\":1}}],[\"600\",{\"1\":{\"952\":1}}],[\"60\",{\"1\":{\"260\":4}}],[\"60hz\",{\"1\":{\"259\":1}}],[\"6060\",{\"1\":{\"9\":1,\"17\":1,\"19\":1,\"20\":1,\"22\":1,\"26\":2}}],[\"6\",{\"0\":{\"37\":1,\"44\":1,\"111\":1,\"515\":1,\"767\":1,\"1037\":1,\"1163\":1,\"1192\":1,\"1229\":1,\"1276\":1,\"1360\":1},\"1\":{\"26\":1,\"259\":1,\"323\":1,\"329\":1,\"474\":1,\"570\":1,\"601\":2,\"610\":1,\"661\":3,\"662\":1,\"818\":1,\"937\":1,\"952\":2,\"1016\":2,\"1035\":1,\"1066\":1,\"1155\":1,\"1173\":1,\"1178\":4,\"1181\":1,\"1221\":1,\"1260\":1,\"1269\":1,\"1272\":1,\"1273\":1,\"1279\":1,\"1376\":1,\"1384\":1,\"1385\":1}}],[\"`123456abcrth126`\",{\"1\":{\"1216\":1}}],[\"`775244743\",{\"1\":{\"1215\":2}}],[\"`abc`\",{\"1\":{\"1161\":1}}],[\"`load`\",{\"1\":{\"823\":1}}],[\"`logprops\",{\"1\":{\"240\":1}}],[\"`剩余任务\",{\"1\":{\"797\":1}}],[\"`sand\",{\"1\":{\"731\":1}}],[\"`views\",{\"1\":{\"730\":1}}],[\"``\",{\"1\":{\"701\":1}}],[\"`<div>\",{\"1\":{\"644\":1,\"661\":1}}],[\"`callback\",{\"1\":{\"625\":1}}],[\"`current`\",{\"1\":{\"189\":1}}],[\"`watcher\",{\"1\":{\"609\":1}}],[\"`object\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"`on$\",{\"1\":{\"281\":1}}],[\"`后当前数组必定包含\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"`你试图改变$\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"`你试图改变obj的$\",{\"1\":{\"601\":1,\"602\":1}}],[\"`你试图访问$\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"`你试图访问obj的$\",{\"1\":{\"601\":1,\"602\":1}}],[\"`provide\",{\"1\":{\"560\":1}}],[\"`inject`\",{\"1\":{\"560\":1}}],[\"`this\",{\"1\":{\"231\":1}}],[\"`domnode`\",{\"1\":{\"222\":2}}],[\"`$\",{\"1\":{\"26\":1,\"272\":2,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1,\"1433\":1}}],[\"`\",{\"1\":{\"26\":2,\"240\":1,\"248\":4,\"272\":8,\"281\":1,\"286\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1,\"609\":1,\"610\":6,\"625\":1,\"640\":2,\"641\":2,\"653\":2,\"661\":1,\"730\":1,\"731\":1,\"797\":1,\"823\":2,\"1217\":2,\"1433\":1}}],[\"`handle\",{\"1\":{\"26\":1}}],[\"m1\",{\"1\":{\"1189\":2,\"1191\":3}}],[\"m8\",{\"1\":{\"952\":1}}],[\"ms\",{\"1\":{\"764\":2,\"765\":2,\"777\":4,\"935\":2}}],[\"msg=\",{\"1\":{\"510\":1}}],[\"msg\",{\"1\":{\"26\":6,\"149\":1,\"412\":1,\"510\":4,\"540\":1,\"587\":2,\"1460\":2,\"1461\":2}}],[\"mvc\",{\"1\":{\"742\":1}}],[\"mvvm模型\",{\"1\":{\"467\":1}}],[\"mvvm\",{\"0\":{\"467\":1,\"595\":1},\"1\":{\"402\":1}}],[\"mxn\",{\"1\":{\"676\":1}}],[\"mjs\",{\"1\":{\"640\":1,\"641\":1}}],[\"mdn\",{\"1\":{\"549\":1}}],[\"mmm\",{\"1\":{\"412\":1}}],[\"muted\",{\"1\":{\"1021\":2}}],[\"mutate\",{\"1\":{\"827\":2}}],[\"mutationfn\",{\"1\":{\"833\":1,\"835\":1}}],[\"mutations\",{\"0\":{\"411\":1},\"1\":{\"407\":2,\"411\":3,\"417\":1,\"418\":2,\"519\":1}}],[\"mutation\",{\"1\":{\"274\":1,\"410\":1,\"411\":2}}],[\"mutationmask\",{\"1\":{\"274\":3,\"317\":3,\"323\":1,\"326\":2,\"345\":1,\"349\":2,\"360\":3,\"374\":3,\"375\":2,\"382\":1,\"384\":2,\"385\":2,\"396\":3}}],[\"multiple\",{\"1\":{\"1019\":1}}],[\"multipledomdiff\",{\"1\":{\"363\":1}}],[\"multiplediff\",{\"1\":{\"341\":1}}],[\"mustache流程二览\",{\"1\":{\"658\":1}}],[\"mustache核心思想\",{\"1\":{\"644\":1}}],[\"mustache布尔值\",{\"1\":{\"643\":1}}],[\"mustache不循环\",{\"1\":{\"642\":1}}],[\"mustache使用\",{\"1\":{\"640\":1}}],[\"mustache\",{\"0\":{\"639\":1,\"644\":1,\"645\":1},\"1\":{\"637\":1,\"638\":1,\"639\":7,\"640\":4,\"641\":4,\"644\":3,\"645\":1,\"658\":3}}],[\"must\",{\"1\":{\"590\":1}}],[\"m\",{\"1\":{\"114\":2,\"467\":1,\"602\":3,\"609\":1,\"610\":3,\"621\":1,\"626\":1,\"634\":1,\"635\":1,\"676\":2,\"957\":1,\"1016\":1,\"1385\":3}}],[\"mylastname\",{\"1\":{\"1240\":1}}],[\"myfirstname\",{\"1\":{\"1240\":1}}],[\"myfunction\",{\"1\":{\"240\":2,\"1349\":1,\"1350\":1}}],[\"myfunc\",{\"1\":{\"107\":2}}],[\"myobject\",{\"1\":{\"1171\":4}}],[\"myvnode1\",{\"1\":{\"668\":2,\"669\":3}}],[\"mytokens\",{\"1\":{\"644\":3}}],[\"mybutton\",{\"1\":{\"561\":1}}],[\"myslice\",{\"1\":{\"500\":1}}],[\"myschool\",{\"1\":{\"488\":1}}],[\"my\",{\"1\":{\"488\":1,\"570\":3,\"1405\":3,\"1433\":1}}],[\"mycontext\",{\"1\":{\"212\":4,\"214\":1,\"215\":2}}],[\"mycomponent\",{\"1\":{\"207\":2,\"208\":1,\"240\":1,\"245\":1}}],[\"myref\",{\"1\":{\"154\":2,\"557\":2}}],[\"myevent\",{\"1\":{\"114\":3}}],[\"mobile\",{\"1\":{\"957\":1}}],[\"mobx流程\",{\"1\":{\"792\":1}}],[\"mobx\",{\"0\":{\"791\":1},\"1\":{\"792\":1,\"793\":2,\"795\":1,\"796\":1,\"797\":1,\"798\":1,\"800\":1,\"802\":1,\"803\":1,\"804\":1,\"806\":1,\"808\":1,\"850\":1}}],[\"moz\",{\"1\":{\"918\":1,\"935\":2}}],[\"mozilla\",{\"1\":{\"549\":2,\"1057\":1}}],[\"mood\",{\"1\":{\"644\":2,\"653\":1}}],[\"monitor\",{\"1\":{\"634\":4,\"635\":4}}],[\"more\",{\"1\":{\"382\":1}}],[\"most\",{\"1\":{\"270\":1,\"272\":1}}],[\"mouseout\",{\"1\":{\"1328\":2}}],[\"mouseover\",{\"1\":{\"1126\":2,\"1328\":2}}],[\"mouseleave\",{\"1\":{\"1126\":1,\"1305\":1}}],[\"mouseenter\",{\"0\":{\"1126\":1},\"1\":{\"1126\":4,\"1305\":1}}],[\"mouseeventinterface\",{\"1\":{\"293\":2}}],[\"mouse函数\",{\"1\":{\"230\":1}}],[\"mouse>\",{\"1\":{\"230\":1}}],[\"mouse=\",{\"1\":{\"229\":1,\"231\":1}}],[\"mouse只负责提供props\",{\"1\":{\"229\":1}}],[\"mouse\",{\"1\":{\"228\":1,\"229\":4,\"230\":4,\"231\":3}}],[\"mousetracker\",{\"1\":{\"227\":1,\"228\":1,\"229\":1,\"231\":1}}],[\"mounted=======>onmounted\",{\"1\":{\"542\":1}}],[\"mounted\",{\"1\":{\"434\":1,\"479\":1,\"482\":1,\"497\":2,\"510\":1,\"513\":1,\"514\":1,\"515\":4,\"516\":2,\"517\":3,\"518\":1,\"521\":2,\"585\":1}}],[\"mounteffectimpl\",{\"1\":{\"373\":2,\"383\":1}}],[\"mounteffect\",{\"1\":{\"373\":2,\"383\":1}}],[\"mountlayouteffect\",{\"1\":{\"383\":2}}],[\"mountstate\",{\"1\":{\"332\":1,\"338\":2,\"339\":2,\"373\":2,\"383\":1}}],[\"mountindeterminatecomponent\",{\"1\":{\"318\":2}}],[\"mountworkinprogresshook\",{\"1\":{\"306\":2,\"315\":2,\"338\":3,\"373\":4}}],[\"mountreducerresult\",{\"1\":{\"313\":1}}],[\"mountreducer\",{\"0\":{\"304\":1,\"313\":1},\"1\":{\"303\":1,\"304\":1,\"306\":2,\"313\":2,\"315\":2,\"323\":1,\"338\":2,\"339\":1,\"373\":2,\"383\":1}}],[\"mountchildfibers\",{\"1\":{\"272\":4,\"318\":2,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"mount\",{\"1\":{\"112\":4}}],[\"model为\",{\"1\":{\"823\":1}}],[\"model文件\",{\"1\":{\"823\":1}}],[\"models\",{\"1\":{\"823\":4}}],[\"models下的文件\",{\"1\":{\"823\":2}}],[\"model名称\",{\"1\":{\"823\":1}}],[\"model指令需要注意双向绑定实现\",{\"1\":{\"695\":1}}],[\"model绑定的属性值\",{\"1\":{\"588\":1}}],[\"modelvalue\",{\"1\":{\"588\":7}}],[\"model实现\",{\"1\":{\"511\":1}}],[\"model→view\",{\"1\":{\"480\":1}}],[\"model=\",{\"1\":{\"447\":1,\"448\":1,\"511\":1,\"557\":1,\"588\":1}}],[\"model\",{\"0\":{\"511\":1,\"588\":1,\"823\":1},\"1\":{\"447\":2,\"463\":1,\"464\":1,\"465\":3,\"467\":1,\"474\":1,\"511\":3,\"588\":1,\"595\":3,\"695\":1,\"820\":2,\"823\":6,\"1059\":1,\"1077\":1,\"1233\":2}}],[\"mode\",{\"1\":{\"439\":1}}],[\"mod\",{\"1\":{\"150\":1}}],[\"modulename\",{\"1\":{\"730\":2}}],[\"modules\",{\"1\":{\"249\":1,\"418\":1,\"519\":1,\"576\":1,\"591\":1}}],[\"module\",{\"0\":{\"418\":1},\"1\":{\"139\":3,\"418\":2,\"495\":2,\"578\":3,\"591\":1,\"730\":1,\"1189\":2,\"1229\":1}}],[\"modal\",{\"1\":{\"112\":1}}],[\"modified\",{\"1\":{\"103\":1}}],[\"min\",{\"1\":{\"960\":2,\"964\":1,\"1016\":1,\"1370\":1}}],[\"minimum\",{\"1\":{\"950\":2,\"960\":1}}],[\"mini\",{\"1\":{\"255\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":2,\"386\":1,\"397\":1,\"952\":1}}],[\"middle\",{\"1\":{\"924\":4}}],[\"middleware\",{\"1\":{\"770\":1,\"771\":1,\"811\":1}}],[\"microsoft\",{\"1\":{\"882\":1}}],[\"mixin\",{\"1\":{\"499\":6,\"500\":1,\"543\":1,\"561\":2,\"1004\":1,\"1013\":5,\"1015\":1,\"1017\":1}}],[\"mixins\",{\"0\":{\"85\":1},\"1\":{\"84\":1,\"85\":3,\"89\":1,\"499\":2,\"1013\":6}}],[\"mi\",{\"1\":{\"255\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":2,\"386\":1,\"397\":1,\"621\":1,\"628\":1,\"636\":1,\"658\":1,\"663\":1,\"692\":1}}],[\"misaka\",{\"1\":{\"106\":1,\"108\":1,\"114\":2}}],[\"media=\",{\"1\":{\"964\":1}}],[\"mediatype\",{\"1\":{\"964\":4}}],[\"media\",{\"1\":{\"964\":9,\"1016\":1}}],[\"melxy1997\",{\"1\":{\"790\":1}}],[\"menu\",{\"1\":{\"731\":7}}],[\"menus\",{\"1\":{\"731\":6}}],[\"metakey\",{\"1\":{\"1152\":1}}],[\"meta字段名作为属性传给了每个对应路由组件\",{\"1\":{\"739\":1}}],[\"meta=\",{\"1\":{\"737\":2}}],[\"meta\",{\"0\":{\"950\":1},\"1\":{\"436\":3,\"437\":1,\"472\":1,\"737\":8,\"738\":4,\"739\":9,\"949\":2,\"1152\":1}}],[\"method=\",{\"1\":{\"1056\":1}}],[\"methodname\",{\"1\":{\"603\":4,\"604\":4,\"609\":4,\"610\":4,\"614\":4}}],[\"methodsneedchange\",{\"1\":{\"603\":2,\"604\":2,\"609\":2,\"610\":2,\"614\":2}}],[\"methods函数\",{\"1\":{\"489\":2}}],[\"methods\",{\"0\":{\"107\":1},\"1\":{\"105\":1,\"416\":1,\"417\":1,\"450\":5,\"470\":3,\"475\":1,\"479\":2,\"481\":1,\"497\":1,\"499\":1,\"511\":2,\"512\":1,\"513\":1,\"514\":2,\"515\":1,\"516\":2,\"517\":2,\"518\":1,\"520\":1,\"521\":1,\"534\":1,\"545\":1}}],[\"method\",{\"0\":{\"40\":1},\"1\":{\"21\":1,\"22\":1,\"27\":1,\"30\":1,\"32\":1,\"68\":1,\"69\":2,\"70\":1,\"72\":2,\"1056\":1}}],[\"me<\",{\"1\":{\"108\":1,\"112\":1,\"182\":1,\"237\":1,\"245\":1}}],[\"memory\",{\"1\":{\"270\":1,\"272\":1}}],[\"memofn\",{\"1\":{\"197\":4}}],[\"memoizedstate\",{\"1\":{\"270\":1,\"272\":7,\"306\":5,\"313\":1,\"315\":12,\"318\":2,\"323\":5,\"338\":14,\"339\":1,\"346\":1,\"373\":19}}],[\"memoizedsum\",{\"1\":{\"194\":4}}],[\"memoizedprops\",{\"1\":{\"270\":1,\"272\":4,\"273\":1,\"317\":1,\"320\":1,\"323\":2,\"325\":1,\"326\":2,\"346\":1,\"349\":2,\"360\":3,\"374\":3,\"375\":2,\"385\":2,\"396\":3}}],[\"memoizedcallback\",{\"1\":{\"197\":1}}],[\"memo\",{\"0\":{\"100\":1},\"1\":{\"100\":2,\"172\":1}}],[\"memo转为\",{\"1\":{\"91\":1}}],[\"mergeconfig\",{\"1\":{\"68\":1}}],[\"messageport\",{\"1\":{\"388\":1}}],[\"messagechannel\",{\"0\":{\"388\":1},\"1\":{\"388\":7,\"395\":1,\"397\":1}}],[\"message\",{\"1\":{\"67\":2,\"71\":1,\"426\":3,\"427\":2,\"429\":3,\"430\":4,\"731\":2,\"774\":2,\"776\":4,\"786\":2,\"787\":1,\"788\":1}}],[\"man\",{\"1\":{\"1436\":3}}],[\"manifest\",{\"1\":{\"138\":1}}],[\"margin\",{\"0\":{\"970\":1},\"1\":{\"960\":1,\"968\":1,\"970\":5,\"971\":4,\"972\":1,\"994\":1,\"1000\":1,\"1013\":2,\"1015\":3,\"1324\":1}}],[\"markup\",{\"1\":{\"1026\":1}}],[\"markupdate\",{\"1\":{\"320\":2,\"325\":2}}],[\"markupdatelanefromfibertoroot\",{\"1\":{\"271\":4,\"272\":2,\"316\":1}}],[\"markdown\",{\"1\":{\"1017\":1}}],[\"markraw\",{\"0\":{\"556\":1},\"1\":{\"556\":1}}],[\"markchange\",{\"1\":{\"103\":1}}],[\"make\",{\"1\":{\"631\":1}}],[\"mask\",{\"1\":{\"567\":1}}],[\"master\",{\"1\":{\"255\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":2,\"386\":1,\"397\":1,\"621\":1,\"628\":1,\"636\":1}}],[\"male\",{\"1\":{\"468\":1,\"1160\":1,\"1214\":1}}],[\"matchall\",{\"0\":{\"1227\":1}}],[\"match参考属性\",{\"1\":{\"723\":1}}],[\"match\",{\"1\":{\"661\":3,\"662\":3,\"723\":2,\"738\":1,\"1171\":2,\"1381\":3,\"1382\":2,\"1384\":9,\"1385\":2,\"1386\":3,\"1388\":1,\"1389\":1,\"1391\":4}}],[\"matchedfiber\",{\"1\":{\"361\":4}}],[\"math\",{\"0\":{\"1368\":1},\"1\":{\"286\":1,\"289\":1,\"395\":1,\"1181\":3,\"1194\":1,\"1339\":1,\"1368\":1,\"1370\":3,\"1451\":1}}],[\"map经常错位\",{\"1\":{\"779\":1}}],[\"mapdispatchtoprops=\",{\"1\":{\"823\":1}}],[\"mapdispatchtoprops\",{\"1\":{\"753\":2,\"774\":1,\"789\":2,\"823\":3}}],[\"mapmutations\",{\"0\":{\"417\":1},\"1\":{\"417\":4,\"418\":2}}],[\"mapactions\",{\"0\":{\"416\":1},\"1\":{\"416\":3,\"417\":1,\"418\":2}}],[\"mapgetters\",{\"0\":{\"415\":1},\"1\":{\"415\":3,\"418\":2,\"519\":2}}],[\"mapstatetoprops=\",{\"1\":{\"823\":1}}],[\"mapstatetoprops\",{\"1\":{\"753\":2,\"774\":2,\"789\":2,\"822\":1,\"823\":3}}],[\"mapstate\",{\"0\":{\"414\":1},\"1\":{\"414\":3,\"418\":2,\"519\":2}}],[\"mapremainingchildren\",{\"1\":{\"361\":2}}],[\"map\",{\"0\":{\"413\":1,\"1179\":1,\"1200\":1},\"1\":{\"124\":1,\"150\":1,\"159\":2,\"160\":1,\"220\":1,\"272\":1,\"278\":1,\"281\":1,\"358\":1,\"361\":1,\"662\":1,\"683\":1,\"691\":1,\"692\":1,\"731\":1,\"788\":6,\"789\":1,\"797\":1,\"823\":1,\"827\":1,\"831\":1,\"843\":1,\"848\":1,\"1172\":1,\"1195\":1,\"1196\":1,\"1200\":2,\"1210\":1,\"1221\":1,\"1275\":1}}],[\"maxlength\",{\"1\":{\"1057\":2}}],[\"maximum\",{\"1\":{\"950\":2,\"960\":1}}],[\"maxsigned31bitint\",{\"1\":{\"395\":2}}],[\"max\",{\"1\":{\"395\":2,\"960\":2,\"964\":3,\"1230\":3,\"1243\":1,\"1370\":1}}],[\"maxredirects\",{\"0\":{\"60\":1}}],[\"maxcontentlength\",{\"0\":{\"58\":1}}],[\"maintest\",{\"1\":{\"1207\":2}}],[\"mainfun\",{\"1\":{\"1206\":2}}],[\"mainname\",{\"1\":{\"499\":1}}],[\"main\",{\"0\":{\"253\":1,\"305\":1,\"329\":1,\"333\":1,\"344\":1,\"351\":1,\"356\":1,\"359\":1,\"367\":1,\"377\":1},\"1\":{\"28\":1,\"269\":1,\"271\":1,\"272\":1,\"301\":1,\"305\":1,\"333\":1,\"344\":1,\"351\":1,\"356\":1,\"359\":1,\"367\":1,\"377\":1,\"407\":1,\"424\":1,\"499\":2}}],[\"返回由指定的\",{\"1\":{\"1450\":1}}],[\"返回指定对象的原始值\",{\"1\":{\"1410\":1}}],[\"返回指定的属性值\",{\"1\":{\"1094\":1}}],[\"返回字符串\",{\"1\":{\"1391\":1}}],[\"返回字符串中指定位置的字符\",{\"1\":{\"1373\":1}}],[\"返回true\",{\"1\":{\"1391\":1}}],[\"返回类似\",{\"1\":{\"1390\":1}}],[\"返回类型值操作\",{\"1\":{\"754\":1}}],[\"返回单个元素数组\",{\"1\":{\"1385\":1}}],[\"返回为\",{\"1\":{\"1376\":1}}],[\"返回为空\",{\"1\":{\"1376\":2}}],[\"返回角的正切\",{\"1\":{\"1370\":1}}],[\"返回从\",{\"1\":{\"1370\":1}}],[\"返回圆周率\",{\"1\":{\"1369\":1}}],[\"返回以\",{\"1\":{\"1369\":2}}],[\"返回算术常量\",{\"1\":{\"1369\":1}}],[\"返回被选元素相对于文档的偏移坐标\",{\"1\":{\"1325\":1}}],[\"返回属性值\",{\"0\":{\"1294\":1}}],[\"返回1\",{\"1\":{\"1265\":1}}],[\"返回2\",{\"1\":{\"1265\":2}}],[\"返回右侧值\",{\"1\":{\"1264\":1}}],[\"返回第3个表达式分组匹配的字符c\",{\"1\":{\"1391\":1}}],[\"返回第2个表达式分组匹配的字符b\",{\"1\":{\"1391\":1}}],[\"返回第1个表达式分组匹配的字符a\",{\"1\":{\"1391\":1}}],[\"返回第一个值\",{\"1\":{\"1259\":2}}],[\"返回第二个值\",{\"1\":{\"1259\":2}}],[\"返回运算结果\",{\"1\":{\"1253\":1}}],[\"返回符合匹配结果的全局数组\",{\"1\":{\"1227\":1}}],[\"返回对象本身\",{\"1\":{\"1411\":1}}],[\"返回对象\",{\"1\":{\"1218\":1}}],[\"返回该数组的字符串形式\",{\"1\":{\"1413\":1}}],[\"返回该对象的源代码\",{\"1\":{\"1370\":1}}],[\"返回该对象的默认遍历器\",{\"1\":{\"1171\":1}}],[\"返回该对象对应的原始类型值\",{\"1\":{\"1171\":1}}],[\"返回该方法的返回值\",{\"1\":{\"1171\":5}}],[\"返回按键字符或字符串\",{\"1\":{\"1153\":1}}],[\"返回定义键码值编码\",{\"1\":{\"1153\":1}}],[\"返回与事件的目标节点相关的节点\",{\"1\":{\"1152\":1}}],[\"返回当事件触发时\",{\"1\":{\"1152\":9}}],[\"返回当前的导航类型\",{\"1\":{\"725\":1}}],[\"返回当前匹配信息\",{\"1\":{\"723\":1}}],[\"返回当前匹配路由的\",{\"1\":{\"720\":1}}],[\"返回触发时此事件的元素\",{\"1\":{\"1127\":1}}],[\"返回自身实际的宽度\",{\"1\":{\"1116\":1}}],[\"返回自身包括\",{\"1\":{\"1116\":2}}],[\"返回数组\",{\"1\":{\"1382\":2,\"1386\":3,\"1388\":1,\"1389\":1,\"1391\":3}}],[\"返回数的平方根\",{\"1\":{\"1370\":1}}],[\"返回数的正弦\",{\"1\":{\"1370\":1}}],[\"返回数的自然对数\",{\"1\":{\"1370\":1}}],[\"返回数的余弦值\",{\"1\":{\"1370\":1}}],[\"返回数的反正弦值\",{\"1\":{\"1370\":1}}],[\"返回数的反余弦值\",{\"1\":{\"1370\":1}}],[\"返回数的绝对值\",{\"1\":{\"1370\":1}}],[\"返回数值不带单位\",{\"1\":{\"1116\":3}}],[\"返回数字\",{\"1\":{\"1110\":1}}],[\"返回都是一个数字\",{\"1\":{\"1111\":1}}],[\"返回元素上边框\",{\"1\":{\"1110\":1}}],[\"返回元素中索引值对应的类名\",{\"1\":{\"1100\":1}}],[\"返回布尔值\",{\"1\":{\"1099\":1,\"1196\":1,\"1199\":1,\"1202\":2}}],[\"返回浏览器历史列表中的\",{\"1\":{\"1067\":1}}],[\"返回新串\",{\"1\":{\"1202\":1}}],[\"返回新流observable\",{\"1\":{\"788\":1}}],[\"返回新的状态\",{\"1\":{\"840\":1}}],[\"返回新的状态值\",{\"1\":{\"182\":1}}],[\"返回新的\",{\"1\":{\"759\":1}}],[\"返回初始化数据\",{\"1\":{\"749\":1}}],[\"返回出去\",{\"1\":{\"749\":1}}],[\"返回dom对象\",{\"1\":{\"675\":1,\"689\":1}}],[\"返回实例的原型方法\",{\"1\":{\"625\":1}}],[\"返回原api的原返回值\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"返回响应数据\",{\"1\":{\"423\":1}}],[\"返回响应数据或报错\",{\"1\":{\"69\":1}}],[\"返回最终路由表\",{\"1\":{\"731\":1}}],[\"返回最终结果\",{\"1\":{\"69\":1}}],[\"返回最新的\",{\"1\":{\"323\":1}}],[\"返回给当前后台节点\",{\"1\":{\"272\":1}}],[\"返回根节点的statenode\",{\"1\":{\"271\":1,\"316\":1}}],[\"返回根节点\",{\"1\":{\"271\":1,\"272\":1}}],[\"返回父节点标识完成父节点遍历\",{\"1\":{\"265\":1}}],[\"返回另一个组件\",{\"1\":{\"234\":1}}],[\"返回值就是函数的返回值\",{\"1\":{\"1448\":1,\"1449\":1}}],[\"返回值是函数的引用\",{\"1\":{\"1440\":1}}],[\"返回值可以是任意数据类型\",{\"1\":{\"1345\":1}}],[\"返回值不是\",{\"1\":{\"1205\":1}}],[\"返回值接\",{\"1\":{\"1177\":1}}],[\"返回值为\",{\"1\":{\"1229\":1}}],[\"返回值为对象的成功的值\",{\"1\":{\"1177\":1}}],[\"返回值为新组件\",{\"1\":{\"233\":1}}],[\"返回值对象注册为渲染\",{\"1\":{\"620\":1}}],[\"返回值会在组件卸载前执行\",{\"1\":{\"186\":1}}],[\"返回值\",{\"0\":{\"1345\":1},\"1\":{\"181\":1,\"830\":1,\"1063\":1,\"1345\":1,\"1374\":1}}],[\"返回值均为\",{\"1\":{\"22\":1}}],[\"返回的是成功的\",{\"1\":{\"1206\":1}}],[\"返回的是回调函数\",{\"1\":{\"196\":1}}],[\"返回的结果是\",{\"1\":{\"1205\":1}}],[\"返回的结果是失败的\",{\"1\":{\"1205\":1}}],[\"返回的结果是成功\",{\"1\":{\"1205\":1}}],[\"返回的值\",{\"1\":{\"1177\":2}}],[\"返回的数值都不带单位\",{\"1\":{\"1108\":1}}],[\"返回的都是一个全新的vuecomponent\",{\"1\":{\"489\":1}}],[\"返回的第一个新儿子\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"返回的虚拟\",{\"1\":{\"134\":1,\"165\":1}}],[\"返回的函数\",{\"1\":{\"74\":1}}],[\"返回增强后的组件\",{\"1\":{\"86\":1}}],[\"返回到\",{\"1\":{\"71\":1}}],[\"返回带响应数据的promise或失败值的promise\",{\"1\":{\"69\":1}}],[\"返回\",{\"1\":{\"59\":1,\"68\":1,\"71\":1,\"159\":1,\"1243\":3,\"1250\":1,\"1259\":1,\"1367\":5,\"1369\":4,\"1370\":6,\"1402\":1,\"1413\":1,\"1456\":1}}],[\"返回一个类型字符串\",{\"1\":{\"1413\":1}}],[\"返回一个类数组对象\",{\"1\":{\"1085\":1}}],[\"返回一个表示该对象的字符串\",{\"1\":{\"1410\":1}}],[\"返回一个数组\",{\"1\":{\"1405\":1}}],[\"返回一个新字符串\",{\"1\":{\"1202\":1}}],[\"返回一个新的对象\",{\"1\":{\"1408\":1}}],[\"返回一个新的\",{\"1\":{\"748\":1}}],[\"返回一个包含两个值的数组\",{\"1\":{\"721\":1}}],[\"返回一个包含取消监听方法的对象\",{\"1\":{\"116\":1}}],[\"返回一个经过封装的高阶\",{\"1\":{\"636\":1}}],[\"返回一个代理对象\",{\"1\":{\"537\":1}}],[\"返回一个函数用来实现编程式路由导航\",{\"1\":{\"719\":1}}],[\"返回一个函数\",{\"1\":{\"534\":1}}],[\"返回一个\",{\"1\":{\"50\":1,\"224\":1,\"764\":1}}],[\"返回结果的形式是函数调用\",{\"1\":{\"26\":1}}],[\"​string​​\",{\"1\":{\"1376\":1}}],[\"​1\",{\"1\":{\"924\":1}}],[\"​子组件\",{\"1\":{\"511\":1}}],[\"​export\",{\"1\":{\"510\":1}}],[\"​trim\",{\"1\":{\"465\":1}}],[\"​\",{\"1\":{\"26\":2,\"75\":5,\"410\":1,\"439\":3,\"457\":4,\"465\":1,\"489\":2,\"511\":1,\"512\":2,\"513\":1,\"514\":1,\"515\":2,\"917\":3,\"1030\":1,\"1036\":1,\"1038\":1,\"1091\":1,\"1105\":1,\"1106\":2,\"1341\":2,\"1343\":1}}],[\"​jsonp\",{\"1\":{\"26\":1}}],[\"如表所示\",{\"1\":{\"1384\":1}}],[\"如字符串的头部或尾部\",{\"1\":{\"1386\":1}}],[\"如字符串\",{\"1\":{\"1381\":1}}],[\"如所有的字母\",{\"1\":{\"1381\":1}}],[\"如树形菜单\",{\"1\":{\"1279\":1}}],[\"如需要跳出\",{\"1\":{\"1276\":1}}],[\"如<img\",{\"1\":{\"1045\":3}}],[\"如文本\",{\"1\":{\"1043\":1}}],[\"如noprogress这种组件\",{\"1\":{\"737\":1}}],[\"如b\",{\"1\":{\"607\":1,\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"如obj\",{\"1\":{\"607\":1,\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"如下带有过滤的\",{\"1\":{\"815\":1}}],[\"如下\",{\"1\":{\"578\":1,\"647\":1}}],[\"如何定义是同一个虚拟节点\",{\"1\":{\"672\":1}}],[\"如何使用\",{\"1\":{\"412\":1}}],[\"如何调用\",{\"1\":{\"411\":1}}],[\"如何触发\",{\"1\":{\"410\":1}}],[\"如何获取当前最近的\",{\"1\":{\"296\":1}}],[\"如何解决\",{\"1\":{\"143\":1}}],[\"如何解决跨域\",{\"0\":{\"25\":1}}],[\"如动画和输入响应\",{\"1\":{\"262\":1}}],[\"如有错误则会抛出\",{\"1\":{\"245\":1}}],[\"如只返回响应体数据\",{\"1\":{\"66\":1}}],[\"如果还没有就查找原型对象的原型\",{\"1\":{\"1442\":1}}],[\"如果还要继续传给子组件内部的其他组件\",{\"1\":{\"515\":1}}],[\"如果原型中没有则去原型的原型中寻找\",{\"1\":{\"1438\":1}}],[\"如果原有样式中写了\",{\"1\":{\"1105\":1}}],[\"如果找到则直接使用\",{\"1\":{\"1438\":1}}],[\"如果存\",{\"1\":{\"1423\":1}}],[\"如果存在\",{\"1\":{\"1423\":1}}],[\"如果存在匹配\",{\"1\":{\"1269\":1}}],[\"如果存在异步的判断处理\",{\"1\":{\"739\":1}}],[\"如果存在新旧\",{\"1\":{\"702\":1}}],[\"如果存在兄弟节点\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"如果语法正确\",{\"1\":{\"1420\":1}}],[\"如果语句块之间只有一行代码\",{\"1\":{\"1268\":1}}],[\"如果返回原始类型的值\",{\"1\":{\"1413\":2}}],[\"如果返回一个\",{\"1\":{\"1364\":1}}],[\"如果返回一个小于\",{\"1\":{\"1364\":1}}],[\"如果返回一个大于\",{\"1\":{\"1364\":1}}],[\"如果对象没有原始值\",{\"1\":{\"1411\":1}}],[\"如果继承的属性是可遍历的\",{\"1\":{\"1403\":1}}],[\"如果包含就返回\",{\"1\":{\"1401\":1}}],[\"如果分组仅仅是为了方便操作\",{\"1\":{\"1392\":1}}],[\"如果匹配包含字符\",{\"1\":{\"1384\":1}}],[\"如果匹配所有单词\",{\"1\":{\"1384\":1}}],[\"如果匹配第\",{\"1\":{\"1384\":2}}],[\"如果仅匹配单词\",{\"1\":{\"1384\":1}}],[\"如果多个字符的编码顺序是连续的\",{\"1\":{\"1382\":1}}],[\"如果多个盒子都设置了浮动\",{\"1\":{\"978\":1}}],[\"如果超过最末端就到最末端结束\",{\"1\":{\"1376\":2}}],[\"如果省略了该参数\",{\"1\":{\"1376\":1}}],[\"如果省略该参数\",{\"1\":{\"1376\":1}}],[\"如果转换结果为\",{\"1\":{\"1376\":2}}],[\"如果最终start的位置在end的右边\",{\"1\":{\"1376\":1}}],[\"如果最后引号紧贴标签没有空格比如\",{\"1\":{\"662\":1}}],[\"如果字符串中含有其内容\",{\"1\":{\"1375\":1}}],[\"如果直接使用构造函数创建\",{\"1\":{\"1367\":1}}],[\"如果直接调用\",{\"1\":{\"845\":1}}],[\"如果数组中含有该元素\",{\"1\":{\"1365\":1}}],[\"如果数组中检测到有一个元素不满足\",{\"1\":{\"1201\":1}}],[\"如果传递一个负值\",{\"1\":{\"1359\":1}}],[\"如果传入的\",{\"1\":{\"650\":2,\"657\":2}}],[\"如果读取不存在的索引\",{\"1\":{\"1352\":1}}],[\"如果变量在函数内没有声明\",{\"1\":{\"1350\":1}}],[\"如果全局作用域仍未找到\",{\"1\":{\"1350\":1}}],[\"如果实参的数量少于形参的数量\",{\"1\":{\"1344\":1}}],[\"如果处理程序相同\",{\"1\":{\"1328\":1}}],[\"如果只写一个函数\",{\"1\":{\"1305\":1}}],[\"如果只是传递数据\",{\"1\":{\"515\":1}}],[\"如果循环有多层\",{\"1\":{\"1277\":1}}],[\"如果循环结束还有未完成的任务\",{\"1\":{\"395\":1}}],[\"如果今天不是星期六或星期日\",{\"1\":{\"1269\":1}}],[\"如果左侧为\",{\"1\":{\"1264\":1}}],[\"如果首字符不是数字\",{\"1\":{\"1250\":1}}],[\"如果所有元素都满足条件\",{\"1\":{\"1201\":1}}],[\"如果浏览器的高\",{\"1\":{\"1124\":1}}],[\"如果将要匹配的字符恰好在字符编码表中特定区域内\",{\"1\":{\"1382\":1}}],[\"如果将\",{\"1\":{\"1119\":1}}],[\"如果要引用前面表达式分组的匹配模式\",{\"1\":{\"1391\":1}}],[\"如果要使用一些特殊的名字\",{\"1\":{\"1341\":1}}],[\"如果要修改必须通过\",{\"1\":{\"1106\":1}}],[\"如果要执行的话\",{\"1\":{\"373\":2}}],[\"如果获取的样式没有设置\",{\"1\":{\"1106\":1}}],[\"如果该区间不存在\",{\"1\":{\"1376\":1}}],[\"如果该参数是负数\",{\"1\":{\"1376\":1}}],[\"如果该属性存在\",{\"1\":{\"1171\":4}}],[\"如果该类名不存在则会在元素中添加类名\",{\"1\":{\"1102\":1}}],[\"如果该元素没有直接选中\",{\"1\":{\"932\":1}}],[\"如果索引值在区间范围外返回\",{\"1\":{\"1100\":1}}],[\"如果从右向左移\",{\"1\":{\"1072\":1}}],[\"如果从左向右移\",{\"1\":{\"1072\":1}}],[\"如果参数\",{\"1\":{\"1376\":1}}],[\"如果参数无效\",{\"1\":{\"1063\":1}}],[\"如果参数标识有效\",{\"1\":{\"1063\":1}}],[\"如果当时没有确定链接目标时\",{\"1\":{\"1043\":1}}],[\"如果当前执行的是一个方法\",{\"1\":{\"1423\":1}}],[\"如果当前上下文的\",{\"1\":{\"1423\":2}}],[\"如果当前元素没有设置该样式\",{\"1\":{\"1106\":1}}],[\"如果当前任务执行完了\",{\"1\":{\"395\":1}}],[\"如果当前\",{\"1\":{\"274\":1,\"843\":1}}],[\"如果当前的节点没有弟弟\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"如果出现不正确会向外抛出一个语法错误\",{\"1\":{\"1420\":1}}],[\"如果出现该属性\",{\"1\":{\"1021\":4}}],[\"如果出现在以逗号分隔的查询列表中\",{\"1\":{\"964\":1}}],[\"如果元素自由在某个盒子内移动就用定位布局\",{\"1\":{\"1002\":1}}],[\"如果属性值相同\",{\"1\":{\"996\":1}}],[\"如果祖先元素有定位\",{\"1\":{\"993\":1}}],[\"如果行内元素有了浮动\",{\"1\":{\"978\":1}}],[\"如果盒子模型我们改为\",{\"1\":{\"973\":1}}],[\"如果盒子本身没有指定\",{\"1\":{\"969\":1}}],[\"如果保证盒子跟效果图大小保持一致\",{\"1\":{\"969\":1}}],[\"如果列表中的任何查询为\",{\"1\":{\"964\":1}}],[\"如果使用该属性\",{\"1\":{\"1019\":1}}],[\"如果使用\",{\"1\":{\"964\":2,\"1021\":1,\"1062\":1}}],[\"如果使用的是usestate\",{\"1\":{\"333\":1}}],[\"如果点击元素\",{\"1\":{\"940\":1}}],[\"如果想作用于多个字符\",{\"1\":{\"1384\":1}}],[\"如果想要在生成的标签内部写内容可以用\",{\"1\":{\"937\":1}}],[\"如果想中止与\",{\"1\":{\"841\":1}}],[\"如果生成的\",{\"1\":{\"937\":1}}],[\"如果生成带有类名或者\",{\"1\":{\"937\":1}}],[\"如果某一位数值相同\",{\"1\":{\"932\":1}}],[\"如果某个任务执行时间过长\",{\"1\":{\"261\":1}}],[\"如果某个容器元素\",{\"1\":{\"96\":1}}],[\"如果测量的时候包含了边框\",{\"1\":{\"909\":1}}],[\"如果类型是加\",{\"1\":{\"749\":1}}],[\"如果其路径与当前\",{\"1\":{\"712\":1}}],[\"如果构建虚拟\",{\"1\":{\"702\":1}}],[\"如果微任务队列空出则进入微任务队列\",{\"1\":{\"700\":1}}],[\"如果用户传入挂载元素\",{\"1\":{\"695\":1}}],[\"如果用户传入的配置有\",{\"1\":{\"623\":1}}],[\"如果undefined\",{\"1\":{\"683\":1,\"691\":1}}],[\"如果非undefined\",{\"1\":{\"683\":1,\"691\":1}}],[\"如果没命中就表示四种情况都没有命中\",{\"1\":{\"680\":1}}],[\"如果没命中就接着比较下一种情况\",{\"1\":{\"677\":1,\"678\":1,\"679\":1}}],[\"如果没有就查找它的原型\",{\"1\":{\"1442\":1}}],[\"如果没有则在原型对象中寻找\",{\"1\":{\"1438\":1}}],[\"如果没有返回\",{\"1\":{\"1365\":1,\"1375\":1}}],[\"如果没有定位父级\",{\"1\":{\"1325\":1}}],[\"如果没有找到匹配字符串则返回\",{\"1\":{\"1366\":1}}],[\"如果没有找到返回\",{\"1\":{\"1196\":2}}],[\"如果没有找到\",{\"1\":{\"1012\":1}}],[\"如果没有祖先元素或者祖先元素没有定位\",{\"1\":{\"993\":1}}],[\"如果没有\",{\"1\":{\"601\":2}}],[\"如果没有改变则直接退出\",{\"1\":{\"339\":1}}],[\"如果没有弟弟\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"如果没有下一个弟弟\",{\"1\":{\"265\":1}}],[\"如果没有第一个儿子\",{\"1\":{\"265\":1}}],[\"如果没有时间就将控制权让出去\",{\"1\":{\"264\":1}}],[\"如果没有变化则禁止更新\",{\"1\":{\"172\":1}}],[\"如果命中\",{\"1\":{\"677\":1,\"678\":1,\"680\":1}}],[\"如果都没有命中判断通过\",{\"1\":{\"676\":1}}],[\"如果新后指针>新前指针\",{\"1\":{\"676\":1}}],[\"如果旧后指针>旧前指针\",{\"1\":{\"676\":1}}],[\"如果仍采用之前单纯的新旧\",{\"1\":{\"676\":1}}],[\"如果上次请求还未返回\",{\"1\":{\"763\":1}}],[\"如果上述判断都未通过\",{\"1\":{\"661\":1}}],[\"如果上面通过调用执行器函数的参数函数\",{\"1\":{\"71\":1}}],[\"如果内容不为空就把文本内容赋给当前内容堆栈栈顶对象的\",{\"1\":{\"661\":1}}],[\"如果弹栈后的内容堆栈为\",{\"1\":{\"661\":1}}],[\"如果弹栈后的内容堆栈长度不为\",{\"1\":{\"661\":1}}],[\"如果栈顶不存在即长度为0\",{\"1\":{\"656\":1}}],[\"如果无需更新则直接返回实例的\",{\"1\":{\"636\":1}}],[\"如果按照上面的代码执行\",{\"1\":{\"634\":1}}],[\"如果依赖的数据发生了变化\",{\"1\":{\"633\":1,\"634\":1}}],[\"如果computed中某个key不需要缓存\",{\"1\":{\"633\":1}}],[\"如果exporfn是函数\",{\"1\":{\"626\":1}}],[\"如果我们自己重新定义\",{\"1\":{\"1410\":1}}],[\"如果我们没有重新定义\",{\"1\":{\"1410\":1}}],[\"如果我们想中止\",{\"1\":{\"841\":1}}],[\"如果我们在\",{\"1\":{\"608\":1}}],[\"如果我们需要实现一个同样跟随鼠标移动做其他功能的组件时\",{\"1\":{\"228\":1}}],[\"如果指定第二个参数\",{\"1\":{\"1366\":1}}],[\"如果指定的类名已存在\",{\"1\":{\"1098\":1}}],[\"如果指定的是\",{\"1\":{\"185\":1}}],[\"如果指定了\",{\"1\":{\"575\":1}}],[\"如果两者配置重名\",{\"1\":{\"534\":1}}],[\"如果为复杂类型\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"如果为\",{\"1\":{\"474\":2,\"625\":1,\"628\":1}}],[\"如果为true\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1,\"628\":1}}],[\"如果需要设置不同操作\",{\"1\":{\"1319\":1}}],[\"如果需要读取元素节点属性\",{\"1\":{\"1085\":1}}],[\"如果需要在\",{\"1\":{\"1040\":1}}],[\"如果需要在代码中手动创建元素\",{\"1\":{\"248\":1}}],[\"如果需要链式调用对象内部\",{\"1\":{\"650\":1}}],[\"如果需要频繁切换\",{\"1\":{\"458\":1}}],[\"如果计算属性要被修改\",{\"1\":{\"450\":1}}],[\"如果此任务已经完成\",{\"1\":{\"395\":1}}],[\"如果此任务的过期时间大于当前时间\",{\"1\":{\"395\":1}}],[\"如果此节点是一个将要插入的新节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"如果流逝或经过的时间小于5ms\",{\"1\":{\"395\":1}}],[\"如果5ms内没有完成\",{\"1\":{\"395\":1}}],[\"如果一直按着某个按键不松手\",{\"1\":{\"1151\":1}}],[\"如果一样说明依赖项相同不需要执行\",{\"1\":{\"373\":1}}],[\"如果一个变量是数组你可以使用\",{\"1\":{\"1440\":1}}],[\"如果一个函数作为一个对象的属性保存\",{\"1\":{\"1347\":1}}],[\"如果一个函数符合下面\",{\"1\":{\"159\":1}}],[\"如果一个属性之后没有其他的属性\",{\"1\":{\"1341\":1}}],[\"如果一个fiber的flags上有placement\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"如果一个错误边界无法渲染错误信息\",{\"1\":{\"242\":1}}],[\"如果一个\",{\"1\":{\"242\":1}}],[\"如果函数组件里使用了useeffect\",{\"1\":{\"372\":1,\"382\":1}}],[\"如果老fiber的索引比lastplacedindex要小\",{\"1\":{\"361\":1}}],[\"如果老fiber有值\",{\"1\":{\"357\":1,\"361\":1}}],[\"如果更新副作用存在\",{\"1\":{\"330\":1}}],[\"如果成立则执行原生组件更新\",{\"1\":{\"323\":1}}],[\"如果相同则基于老\",{\"1\":{\"323\":1}}],[\"如果node不是真实dom节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"如果弟弟不是原生节点or文本节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"如果第一个儿子不是原生节点\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"如果第二个参数传入空数组\",{\"1\":{\"186\":1}}],[\"如果子组件内要修改的话推荐使用\",{\"1\":{\"510\":1}}],[\"如果子组件的渲染开销比较大\",{\"1\":{\"91\":1}}],[\"如果子节点是原生节点或文本节点\",{\"1\":{\"273\":1,\"320\":1,\"325\":1}}],[\"如果是负数\",{\"1\":{\"1376\":2}}],[\"如果是复合属性则需要采取驼峰命名法\",{\"1\":{\"1308\":1}}],[\"如果是复合属性需要采用驼峰命名法书写\",{\"1\":{\"1296\":1}}],[\"如果是移动设备打开\",{\"1\":{\"957\":1}}],[\"如果是初次挂载\",{\"1\":{\"702\":1}}],[\"如果是则这个\",{\"1\":{\"647\":1,\"654\":1}}],[\"如果是则直接启动优化\",{\"1\":{\"272\":1,\"318\":1}}],[\"如果是函数\",{\"1\":{\"631\":1}}],[\"如果是\",{\"1\":{\"625\":1,\"756\":1,\"1263\":2,\"1402\":1}}],[\"如果是对象\",{\"1\":{\"625\":1}}],[\"如果是数组\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"如果是的话就直接插入\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"如果是原生组件\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"如果父盒子本身有高度\",{\"1\":{\"983\":1}}],[\"如果父级宽度装不下这些浮动的盒子\",{\"1\":{\"978\":1}}],[\"如果父组件中写入了默认插槽\",{\"1\":{\"504\":1}}],[\"如果父fiber初次挂载\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"如果父\",{\"1\":{\"272\":1}}],[\"如果有就直接使用\",{\"1\":{\"1350\":1}}],[\"如果有的事件只想触发一次\",{\"1\":{\"1329\":1}}],[\"如果有则返回\",{\"1\":{\"1290\":1}}],[\"如果有重复引入的变量名字\",{\"1\":{\"1191\":1}}],[\"如果有多个\",{\"1\":{\"1062\":1}}],[\"如果有样式\",{\"1\":{\"940\":1}}],[\"如果有兄弟关系的标签\",{\"1\":{\"937\":1}}],[\"如果有父子级关系的标签\",{\"1\":{\"937\":1}}],[\"如果有需求建议使用\",{\"1\":{\"918\":1}}],[\"如果有定位的盒子\",{\"1\":{\"914\":1}}],[\"如果有空格隔开的多个单词组成的字体\",{\"1\":{\"882\":1}}],[\"如果有一个对象数据\",{\"1\":{\"554\":2}}],[\"如果有上面的重命名就是这样\",{\"1\":{\"511\":1}}],[\"如果有下一个要构建的fiber\",{\"1\":{\"396\":1}}],[\"如果有要执行的监听函数\",{\"1\":{\"292\":1}}],[\"如果有弟弟\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"如果有弟弟遍历弟弟\",{\"1\":{\"265\":1}}],[\"如果有更新\",{\"1\":{\"272\":1}}],[\"如果有叔叔遍历叔叔\",{\"1\":{\"265\":1}}],[\"如果有第一个儿子\",{\"1\":{\"265\":1}}],[\"如果你命名了渲染函数\",{\"1\":{\"240\":1}}],[\"如果在方括号内添加脱字符^前缀\",{\"1\":{\"1382\":1}}],[\"如果在子组件上\",{\"1\":{\"513\":1}}],[\"如果在普通的\",{\"1\":{\"513\":1}}],[\"如果在\",{\"1\":{\"184\":1,\"231\":1,\"1438\":1}}],[\"如果连同满足额外的第\",{\"1\":{\"162\":1}}],[\"如果以上的条件都为否\",{\"1\":{\"162\":1}}],[\"如果确定只是简单展示数据\",{\"1\":{\"161\":1,\"461\":1}}],[\"如果不指定连接符\",{\"1\":{\"1362\":1}}],[\"如果不跟任何值则返回\",{\"1\":{\"1345\":1}}],[\"如果不希望发生\",{\"1\":{\"1147\":1}}],[\"如果不希望发生事件冒泡可以通过事件来取消冒泡\",{\"1\":{\"1125\":1}}],[\"如果不希望这个行为发生\",{\"1\":{\"1140\":1}}],[\"如果不给宽度或者高度\",{\"1\":{\"998\":1}}],[\"如果不满足这个条件则返回\",{\"1\":{\"964\":1}}],[\"如果不及时释放其对应的内存\",{\"1\":{\"843\":1}}],[\"如果不提供\",{\"1\":{\"816\":1}}],[\"如果不是则判断是否\",{\"1\":{\"756\":1}}],[\"如果不是array和object\",{\"1\":{\"627\":1}}],[\"如果不是的话\",{\"1\":{\"110\":1}}],[\"如果不需要跟踪副作用\",{\"1\":{\"361\":1}}],[\"如果不存在对数据的逆序添加\",{\"1\":{\"161\":1,\"461\":1}}],[\"如果结构中还包含输入类的\",{\"1\":{\"161\":1,\"461\":1}}],[\"如果未被修改则直接使用原始状态中的引用\",{\"1\":{\"103\":1}}],[\"如果避开无需重渲染的组件\",{\"1\":{\"97\":1}}],[\"如果容器元素是\",{\"1\":{\"96\":1}}],[\"如果方法中声明了一个属性名\",{\"1\":{\"71\":1}}],[\"如果和\",{\"1\":{\"61\":1}}],[\"如果设置为\",{\"1\":{\"60\":1}}],[\"如果\",{\"1\":{\"59\":1,\"71\":1,\"98\":1,\"156\":2,\"354\":1,\"505\":2,\"602\":1,\"636\":2,\"703\":1,\"1043\":1,\"1075\":1,\"1105\":1,\"1129\":1,\"1151\":1,\"1202\":2,\"1221\":1,\"1228\":1,\"1376\":7,\"1413\":6}}],[\"如果请求花费了超过\",{\"1\":{\"48\":1}}],[\"如\",{\"1\":{\"26\":1,\"86\":1,\"167\":2,\"173\":1,\"323\":1,\"482\":1,\"578\":4,\"621\":2,\"626\":2,\"937\":1,\"966\":2,\"1076\":2,\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1,\"1391\":2}}],[\"w\",{\"1\":{\"1381\":2,\"1388\":3,\"1389\":3,\"1391\":9,\"1392\":1}}],[\"w3school\",{\"1\":{\"1057\":1}}],[\"w3c\",{\"1\":{\"985\":2,\"1028\":2,\"1132\":1}}],[\"w200\",{\"1\":{\"938\":1}}],[\"woff\",{\"1\":{\"918\":2}}],[\"wordreg\",{\"1\":{\"661\":3}}],[\"word\",{\"0\":{\"895\":1,\"899\":1,\"900\":1},\"1\":{\"647\":1,\"654\":1,\"661\":5,\"895\":2,\"899\":2,\"900\":7,\"1000\":1}}],[\"words\",{\"1\":{\"647\":11,\"654\":11}}],[\"worker\",{\"1\":{\"1231\":1}}],[\"workloopconcurrent\",{\"1\":{\"396\":3}}],[\"workloop\",{\"1\":{\"395\":2}}],[\"workloopsync\",{\"1\":{\"272\":2,\"317\":2,\"323\":1,\"360\":2,\"374\":2,\"396\":3}}],[\"work\",{\"1\":{\"274\":1}}],[\"workinprogresshook\",{\"1\":{\"306\":6,\"315\":12,\"338\":12,\"373\":12}}],[\"workinprogress在内存中顺序构建fiber树\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"workinprogress\",{\"1\":{\"272\":63,\"273\":21,\"306\":3,\"315\":3,\"317\":7,\"318\":39,\"320\":26,\"323\":5,\"325\":27,\"338\":3,\"360\":7,\"373\":5,\"374\":7,\"396\":9}}],[\"world\",{\"1\":{\"248\":2,\"301\":2,\"867\":1,\"1328\":1}}],[\"wheeldelta\",{\"1\":{\"1146\":2}}],[\"when\",{\"1\":{\"1015\":3,\"1016\":1}}],[\"whenever\",{\"1\":{\"787\":2}}],[\"whatever\",{\"1\":{\"830\":1}}],[\"white\",{\"0\":{\"898\":1},\"1\":{\"898\":1,\"900\":3,\"926\":1,\"1000\":1,\"1012\":5,\"1296\":1}}],[\"whisky=\",{\"1\":{\"789\":1}}],[\"whiskygrid\",{\"1\":{\"789\":4}}],[\"whisky\",{\"1\":{\"788\":6,\"789\":5}}],[\"whiskys\",{\"1\":{\"786\":3}}],[\"whiskey\",{\"1\":{\"788\":1}}],[\"whiskies=\",{\"1\":{\"789\":1}}],[\"whiskies<\",{\"1\":{\"789\":1}}],[\"whiskies\",{\"1\":{\"786\":8,\"787\":11,\"788\":9,\"789\":4}}],[\"while\",{\"0\":{\"1271\":1,\"1272\":1},\"1\":{\"70\":1,\"271\":1,\"272\":2,\"273\":4,\"274\":6,\"290\":1,\"298\":1,\"315\":1,\"316\":3,\"317\":2,\"319\":1,\"320\":3,\"325\":3,\"326\":6,\"338\":1,\"348\":1,\"349\":8,\"352\":2,\"357\":2,\"360\":3,\"361\":3,\"373\":1,\"374\":3,\"375\":12,\"385\":13,\"392\":2,\"395\":1,\"396\":4,\"626\":1,\"627\":2,\"635\":2,\"646\":1,\"647\":1,\"654\":1,\"655\":1,\"661\":1,\"683\":1,\"691\":1,\"695\":1,\"768\":1,\"770\":2,\"777\":1,\"1016\":2,\"1173\":1,\"1174\":1,\"1271\":2,\"1272\":4,\"1273\":1,\"1277\":2,\"1390\":1}}],[\"w+<\",{\"1\":{\"1391\":3}}],[\"w+>\",{\"1\":{\"1391\":6}}],[\"w+$\",{\"1\":{\"1386\":1}}],[\"w+|\",{\"1\":{\"1383\":1}}],[\"w+\",{\"1\":{\"738\":1,\"1386\":2,\"1390\":1,\"1391\":1}}],[\"wang\",{\"1\":{\"1214\":1}}],[\"want\",{\"1\":{\"787\":1}}],[\"walk\",{\"1\":{\"602\":2,\"603\":2,\"604\":3,\"609\":2,\"610\":2,\"617\":2}}],[\"warn\",{\"1\":{\"587\":1}}],[\"watchfetchuser\",{\"1\":{\"777\":2}}],[\"watchstartbackgroundtask\",{\"1\":{\"770\":1}}],[\"watchincrementasync\",{\"1\":{\"760\":1,\"762\":2,\"763\":1,\"768\":1,\"777\":4}}],[\"watch源码解析\",{\"0\":{\"622\":1}}],[\"watch的handler函数\",{\"1\":{\"609\":1,\"616\":1}}],[\"watcheffect配置的回调执行了\",{\"1\":{\"541\":1}}],[\"watcheffect所指定的回调中用到的数据只要发生变化\",{\"1\":{\"541\":1}}],[\"watcheffect\",{\"0\":{\"541\":1},\"1\":{\"525\":1,\"541\":4}}],[\"watcheffect作用相近\",{\"1\":{\"184\":1}}],[\"watcher实例中收集关联的dep依赖存储为this\",{\"1\":{\"635\":1}}],[\"watcher和dep之间相互耦合\",{\"1\":{\"635\":1}}],[\"watchers\",{\"1\":{\"626\":1,\"631\":3}}],[\"watcher添加dep\",{\"1\":{\"626\":1}}],[\"watcher标识符\",{\"1\":{\"626\":1}}],[\"watcher\",{\"0\":{\"607\":1,\"616\":1,\"626\":1,\"632\":1,\"634\":1,\"635\":1},\"1\":{\"505\":9,\"593\":2,\"605\":11,\"607\":3,\"608\":17,\"609\":7,\"610\":7,\"615\":1,\"616\":2,\"620\":2,\"621\":15,\"623\":6,\"625\":11,\"626\":3,\"627\":1,\"628\":14,\"630\":3,\"631\":5,\"632\":10,\"633\":5,\"634\":11,\"635\":18,\"636\":25,\"694\":1,\"695\":6,\"700\":6}}],[\"watch函数\",{\"1\":{\"489\":2}}],[\"watchobj\",{\"1\":{\"451\":2}}],[\"watch\",{\"0\":{\"451\":1,\"540\":1},\"1\":{\"184\":1,\"200\":1,\"451\":5,\"452\":4,\"525\":1,\"540\":7,\"541\":1,\"607\":1,\"618\":2,\"621\":2,\"623\":5,\"624\":3,\"625\":5,\"626\":5,\"627\":1,\"628\":12,\"634\":2,\"636\":1,\"694\":5,\"698\":1,\"700\":3,\"703\":1,\"704\":1}}],[\"wps\",{\"1\":{\"574\":4}}],[\"ws\",{\"1\":{\"495\":1}}],[\"write\",{\"1\":{\"1095\":1,\"1237\":1,\"1271\":1,\"1272\":2,\"1273\":1}}],[\"writable\",{\"1\":{\"600\":1,\"602\":1,\"604\":1,\"609\":1,\"612\":1,\"1407\":1}}],[\"wrapper\",{\"1\":{\"1415\":1}}],[\"wrappedcomponent\",{\"1\":{\"233\":1,\"234\":1,\"239\":1,\"240\":1}}],[\"wrap\",{\"0\":{\"899\":1},\"1\":{\"898\":1,\"899\":1,\"900\":3}}],[\"wrong\",{\"1\":{\"242\":1}}],[\"weight\",{\"0\":{\"884\":1},\"1\":{\"884\":1,\"887\":2,\"1013\":4,\"1224\":10}}],[\"weather\",{\"1\":{\"755\":2,\"756\":2}}],[\"welcome\",{\"1\":{\"427\":1}}],[\"we\",{\"1\":{\"270\":5,\"272\":5,\"787\":3}}],[\"went\",{\"1\":{\"242\":1}}],[\"web标准三大组成中的行为\",{\"1\":{\"1379\":1}}],[\"web标准三大组成中的结构\",{\"1\":{\"1058\":1}}],[\"web标准三大组成中的表现\",{\"1\":{\"933\":1}}],[\"web标准提出的最佳体验方案\",{\"1\":{\"1028\":1}}],[\"web标准是由\",{\"1\":{\"1028\":1}}],[\"webp\",{\"1\":{\"955\":2}}],[\"webpackrc文件添加\",{\"1\":{\"821\":1}}],[\"webpackchunkname\",{\"1\":{\"739\":3}}],[\"webpack\",{\"0\":{\"531\":1},\"1\":{\"93\":1,\"136\":1,\"493\":2,\"530\":2,\"531\":1,\"1192\":1}}],[\"webkit\",{\"1\":{\"918\":2,\"927\":6,\"935\":2,\"943\":1,\"1027\":2}}],[\"web\",{\"0\":{\"1028\":1},\"1\":{\"138\":1,\"421\":1,\"549\":2,\"841\":1,\"862\":1,\"945\":1,\"960\":1,\"1025\":1,\"1028\":3,\"1231\":2}}],[\"wildcard\",{\"1\":{\"574\":2}}],[\"will\",{\"1\":{\"307\":1,\"308\":1,\"312\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1,\"787\":1,\"831\":1}}],[\"willunmount\",{\"1\":{\"172\":2}}],[\"willmount\",{\"1\":{\"172\":2}}],[\"width=device\",{\"1\":{\"950\":1,\"960\":1}}],[\"width\",{\"1\":{\"543\":2,\"909\":6,\"918\":1,\"920\":1,\"938\":1,\"950\":3,\"960\":5,\"963\":1,\"964\":8,\"965\":4,\"966\":2,\"969\":1,\"970\":1,\"973\":3,\"1000\":1,\"1014\":1,\"1015\":10,\"1016\":4,\"1021\":1,\"1044\":2,\"1048\":1,\"1072\":1,\"1108\":3,\"1171\":2,\"1324\":2}}],[\"window\",{\"0\":{\"1061\":1},\"1\":{\"96\":2,\"113\":2,\"288\":1,\"583\":8,\"621\":1,\"653\":1,\"823\":1,\"1061\":1,\"1062\":6,\"1063\":1,\"1079\":1,\"1084\":1,\"1106\":2,\"1119\":1,\"1124\":4,\"1130\":1,\"1231\":2,\"1283\":1,\"1349\":3,\"1350\":1,\"1423\":3,\"1424\":1,\"1446\":5}}],[\"window和react\",{\"1\":{\"95\":1}}],[\"withextraargument\",{\"1\":{\"755\":1}}],[\"without\",{\"1\":{\"631\":1}}],[\"withdefaults\",{\"1\":{\"578\":1,\"587\":3,\"588\":1}}],[\"withsubscription\",{\"1\":{\"234\":4}}],[\"withrouter\",{\"0\":{\"728\":1},\"1\":{\"86\":1,\"728\":3}}],[\"withmouse\",{\"1\":{\"86\":1}}],[\"withcredentials\",{\"0\":{\"49\":1}}],[\"with\",{\"1\":{\"26\":1,\"44\":1,\"86\":1,\"392\":1,\"631\":1}}],[\"www\",{\"1\":{\"7\":1,\"12\":1,\"667\":3,\"668\":1,\"669\":1,\"1043\":1,\"1057\":1}}],[\"违背同源策略就是跨域\",{\"1\":{\"24\":1}}],[\"域名解析\",{\"1\":{\"1066\":1}}],[\"域名\",{\"1\":{\"24\":1}}],[\"函数自己调用自己本身\",{\"1\":{\"1458\":1}}],[\"函数运行时指定的\",{\"1\":{\"1449\":1}}],[\"函数运行时执行的\",{\"1\":{\"1448\":1,\"1450\":1}}],[\"函数进阶\",{\"0\":{\"1444\":1}}],[\"函数体写在对象内部\",{\"1\":{\"1436\":1}}],[\"函数体\",{\"1\":{\"1424\":1}}],[\"函数体内的\",{\"1\":{\"197\":1}}],[\"函数标示符\",{\"1\":{\"1423\":1}}],[\"函数环境\",{\"1\":{\"1422\":1}}],[\"函数声明\",{\"1\":{\"1424\":1}}],[\"函数声明创建属性\",{\"1\":{\"1423\":1}}],[\"函数声明同理\",{\"1\":{\"1350\":1}}],[\"函数声明提前和变量声明提升是在创建变量对象中进行的\",{\"1\":{\"1423\":1}}],[\"函数声明提前\",{\"1\":{\"1349\":1}}],[\"函数作用域中操作变量时\",{\"1\":{\"1350\":1}}],[\"函数作用域中可以访问到全局作用域变量\",{\"1\":{\"1350\":1}}],[\"函数作用域销毁\",{\"1\":{\"1350\":1}}],[\"函数作用域\",{\"0\":{\"1350\":1}}],[\"函数作为参数\",{\"1\":{\"67\":1}}],[\"函数内可调用\",{\"1\":{\"1349\":1}}],[\"函数定义完\",{\"1\":{\"1346\":1}}],[\"函数也是一个对象\",{\"1\":{\"1342\":1}}],[\"函数一致\",{\"1\":{\"1257\":1}}],[\"函数一样\",{\"1\":{\"366\":1}}],[\"函数名\",{\"1\":{\"1240\":1,\"1343\":1}}],[\"函数代码分割符\",{\"1\":{\"1174\":1}}],[\"函数参数默认值\",{\"0\":{\"1164\":1}}],[\"函数等功能\",{\"1\":{\"1004\":1}}],[\"函数供任意组件使用\",{\"1\":{\"817\":1}}],[\"函数创建记忆化的\",{\"1\":{\"815\":1}}],[\"函数类型执行异步中间件\",{\"1\":{\"754\":1}}],[\"函数类型或者\",{\"1\":{\"636\":1}}],[\"函数只支持同步方法\",{\"1\":{\"754\":1}}],[\"函数拆分\",{\"1\":{\"750\":1}}],[\"函数构建虚拟\",{\"1\":{\"698\":1}}],[\"函数递归生成完整的\",{\"1\":{\"675\":1}}],[\"函数生成\",{\"1\":{\"675\":1}}],[\"函数重载与参数判断\",{\"1\":{\"674\":1}}],[\"函数需要关注两点\",{\"1\":{\"674\":1}}],[\"函数需要提前声明\",{\"1\":{\"26\":1}}],[\"函数是基础\",{\"1\":{\"674\":1}}],[\"函数嵌套调用\",{\"1\":{\"674\":2}}],[\"函数嵌套\",{\"0\":{\"670\":1}}],[\"函数用来产生虚拟节点\",{\"1\":{\"667\":1}}],[\"函数已经支持纯净标签与文本内容的\",{\"1\":{\"662\":1}}],[\"函数来说\",{\"1\":{\"765\":1}}],[\"函数来处理\",{\"1\":{\"651\":1}}],[\"函数来做\",{\"1\":{\"648\":1}}],[\"函数会进行一次函数柯里化\",{\"1\":{\"636\":1}}],[\"函数会重复调用\",{\"1\":{\"475\":1}}],[\"函数混合的对象类型\",{\"1\":{\"636\":1}}],[\"函数和封装后的\",{\"1\":{\"632\":1}}],[\"函数和被包装组件之间的契约完全基于传递的\",{\"1\":{\"234\":1}}],[\"函数实现目标是为组件实例绑定\",{\"1\":{\"632\":1}}],[\"函数实现变量闭包\",{\"1\":{\"601\":1}}],[\"函数在内的对象\",{\"1\":{\"628\":1}}],[\"函数在生命周期方面\",{\"1\":{\"584\":1}}],[\"函数或者包含\",{\"1\":{\"628\":1}}],[\"函数或函数组件返回体中声明render\",{\"1\":{\"231\":1}}],[\"函数或函数组件返回体中创建render\",{\"1\":{\"231\":1}}],[\"函数时都需要判断this\",{\"1\":{\"626\":1}}],[\"函数带错误捕获以防止错误的回调执行\",{\"1\":{\"625\":1}}],[\"函数就会添加依赖自己的\",{\"1\":{\"608\":1}}],[\"函数就会执行\",{\"1\":{\"608\":1}}],[\"函数可以成为对象的属性\",{\"1\":{\"1347\":1}}],[\"函数可以封装一些功能\",{\"1\":{\"1342\":1}}],[\"函数可以被\",{\"1\":{\"584\":1}}],[\"函数可以动态引入组件\",{\"1\":{\"206\":1}}],[\"函数存放进\",{\"1\":{\"505\":1}}],[\"函数去响应修改\",{\"1\":{\"450\":1}}],[\"函数执行完毕以后\",{\"1\":{\"1350\":1}}],[\"函数执行完成后调用\",{\"1\":{\"103\":1}}],[\"函数执行的返回值决定\",{\"1\":{\"1205\":1}}],[\"函数执行时机\",{\"1\":{\"450\":1}}],[\"函数向上调整堆\",{\"1\":{\"392\":1}}],[\"函数向下调整堆\",{\"1\":{\"392\":1}}],[\"函数调用后返回的数组\",{\"1\":{\"674\":1}}],[\"函数调用\",{\"1\":{\"339\":1,\"675\":1}}],[\"函数调用至\",{\"1\":{\"323\":1}}],[\"函数由挂载函数变更为更新函数\",{\"1\":{\"323\":1}}],[\"函数组件\",{\"1\":{\"342\":1}}],[\"函数组件的定义\",{\"1\":{\"318\":1}}],[\"函数组件0\",{\"1\":{\"270\":1,\"272\":1}}],[\"函数里\",{\"1\":{\"274\":2}}],[\"函数功能与useeffect相同\",{\"1\":{\"187\":1}}],[\"函数式组件的\",{\"1\":{\"209\":1}}],[\"函数式组件中我们使用\",{\"1\":{\"199\":1}}],[\"函数式组件终于迎来了春天\",{\"1\":{\"174\":1}}],[\"函数式组件可传入\",{\"1\":{\"149\":1}}],[\"函数柯里化\",{\"1\":{\"159\":1}}],[\"函数中统一挂载\",{\"1\":{\"675\":1}}],[\"函数中出现异常\",{\"1\":{\"628\":1}}],[\"函数中返回值一样\",{\"1\":{\"586\":1}}],[\"函数中编写\",{\"1\":{\"585\":1}}],[\"函数中使用的\",{\"1\":{\"543\":1}}],[\"函数中使用<mycontext\",{\"1\":{\"212\":1}}],[\"函数中的值内容是相同的\",{\"1\":{\"451\":1}}],[\"函数中对这些\",{\"1\":{\"355\":1}}],[\"函数中调用\",{\"1\":{\"178\":1}}],[\"函数中\",{\"1\":{\"87\":1,\"153\":1,\"303\":1,\"634\":1,\"636\":1,\"790\":1,\"1206\":1}}],[\"函数的返回值为\",{\"1\":{\"1205\":1}}],[\"函数的递归会在\",{\"1\":{\"675\":1,\"689\":1}}],[\"函数的嵌套调用\",{\"1\":{\"674\":1}}],[\"函数的功能是让tokens数组变为dom字符串\",{\"1\":{\"657\":1}}],[\"函数的立即执行效果\",{\"1\":{\"628\":1}}],[\"函数的内容\",{\"1\":{\"584\":1}}],[\"函数的两种返回值\",{\"1\":{\"534\":1}}],[\"函数的性质\",{\"1\":{\"198\":1}}],[\"函数的情况下\",{\"1\":{\"87\":1}}],[\"函数的参数传入\",{\"1\":{\"764\":1}}],[\"函数的参数也是一个函数\",{\"1\":{\"71\":1}}],[\"函数的参数就是服务器给客户端返回的响应数据\",{\"1\":{\"26\":1}}],[\"函数接收一个\",{\"1\":{\"67\":1}}],[\"函数到\",{\"1\":{\"67\":1}}],[\"函数\",{\"0\":{\"22\":1,\"536\":1,\"537\":1,\"543\":1,\"650\":1,\"651\":1,\"674\":1,\"1205\":1,\"1342\":1},\"1\":{\"71\":1,\"74\":1,\"87\":1,\"103\":1,\"159\":2,\"178\":1,\"198\":1,\"332\":1,\"339\":2,\"396\":1,\"475\":1,\"534\":1,\"536\":1,\"537\":1,\"543\":1,\"546\":1,\"601\":1,\"627\":1,\"632\":1,\"635\":1,\"644\":1,\"649\":1,\"651\":2,\"692\":1,\"703\":2,\"788\":1,\"790\":1,\"840\":1,\"1129\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1349\":1,\"1410\":1,\"1413\":4,\"1414\":2}}],[\"u007a\",{\"1\":{\"1382\":1}}],[\"u004a\",{\"1\":{\"1382\":1}}],[\"u0041\",{\"1\":{\"1382\":1}}],[\"u0039\",{\"1\":{\"1382\":1}}],[\"u0030\",{\"1\":{\"1382\":1}}],[\"u00ff\",{\"1\":{\"1382\":2}}],[\"u0000\",{\"1\":{\"1382\":2}}],[\"u0061\",{\"1\":{\"1381\":5,\"1382\":1}}],[\"uxxxx\",{\"1\":{\"1381\":1}}],[\"ument\",{\"1\":{\"1124\":1}}],[\"umi\",{\"1\":{\"818\":1}}],[\"u>\",{\"1\":{\"1037\":1}}],[\"uc\",{\"1\":{\"943\":1}}],[\"u\",{\"1\":{\"877\":1,\"1262\":1,\"1381\":4}}],[\"ultra\",{\"1\":{\"952\":1}}],[\"ul\",{\"1\":{\"666\":1,\"670\":2,\"675\":1,\"676\":6,\"685\":3,\"876\":1,\"1016\":3,\"1052\":1,\"1094\":1,\"1287\":2,\"1290\":3,\"1328\":1,\"1329\":1}}],[\"ul>标签中输入其他标签或者文字的做法是不被允许的\",{\"1\":{\"1052\":1}}],[\"ul>li\",{\"1\":{\"937\":1,\"1287\":1,\"1290\":1,\"1456\":1}}],[\"ul>\",{\"1\":{\"150\":1,\"353\":2,\"356\":2,\"359\":2,\"504\":2,\"640\":1,\"641\":1,\"644\":1,\"653\":1,\"661\":1,\"666\":1,\"827\":1}}],[\"utils\",{\"1\":{\"731\":2,\"732\":2}}],[\"util\",{\"0\":{\"612\":1},\"1\":{\"602\":2,\"603\":2,\"604\":3,\"609\":3,\"610\":2,\"612\":1,\"614\":1,\"617\":1}}],[\"utf\",{\"1\":{\"53\":1,\"590\":1,\"1034\":2,\"1240\":1}}],[\"uppercase\",{\"1\":{\"894\":1}}],[\"updatroutes\",{\"1\":{\"731\":2}}],[\"updatusers\",{\"1\":{\"731\":2}}],[\"updatelist\",{\"1\":{\"823\":4}}],[\"updatelayouteffect\",{\"1\":{\"383\":2}}],[\"updatemenusaction\",{\"1\":{\"731\":1}}],[\"updateroutesaction\",{\"1\":{\"731\":2}}],[\"updatereducerresult\",{\"1\":{\"323\":1}}],[\"updatereducer\",{\"0\":{\"314\":1,\"323\":1},\"1\":{\"303\":1,\"306\":1,\"314\":1,\"315\":2,\"323\":5,\"338\":3,\"339\":2,\"373\":3,\"383\":1}}],[\"updatechildren\",{\"0\":{\"691\":1},\"1\":{\"664\":1,\"683\":4,\"684\":1,\"690\":3,\"691\":1}}],[\"updatecontainer\",{\"1\":{\"271\":5,\"272\":1}}],[\"updatevalue\",{\"1\":{\"511\":2}}],[\"updateeffectimpl\",{\"1\":{\"373\":2,\"383\":1}}],[\"updateeffect\",{\"1\":{\"373\":2,\"383\":4}}],[\"updateelement\",{\"1\":{\"355\":1,\"357\":2,\"361\":3}}],[\"updatetextnode\",{\"1\":{\"361\":2}}],[\"updates\",{\"1\":{\"813\":1}}],[\"updateslot\",{\"1\":{\"357\":2,\"361\":2}}],[\"updatestate\",{\"1\":{\"272\":3,\"332\":1,\"338\":2,\"339\":3,\"373\":2,\"383\":1}}],[\"updateproperties\",{\"1\":{\"327\":2,\"328\":1,\"330\":2}}],[\"updatepayload\",{\"1\":{\"320\":4,\"322\":13,\"323\":2,\"325\":4,\"326\":3,\"327\":2,\"328\":20,\"349\":3,\"375\":3,\"385\":3}}],[\"updatefrommap\",{\"1\":{\"361\":2}}],[\"updatefunctioncomponent\",{\"1\":{\"318\":2,\"323\":1}}],[\"updatefiberprops\",{\"1\":{\"273\":1,\"289\":1,\"297\":1,\"327\":3,\"330\":2}}],[\"updateworkinprogresshook\",{\"1\":{\"315\":2,\"338\":2,\"373\":3}}],[\"updatehostcomponent\",{\"1\":{\"272\":3,\"318\":2,\"320\":2,\"323\":1,\"325\":2}}],[\"updatehostroot\",{\"1\":{\"272\":3,\"318\":2}}],[\"update\",{\"1\":{\"271\":12,\"272\":22,\"273\":1,\"315\":10,\"316\":11,\"320\":2,\"323\":1,\"325\":2,\"326\":2,\"330\":1,\"338\":14,\"345\":2,\"349\":2,\"360\":2,\"373\":14,\"374\":2,\"375\":2,\"382\":4,\"383\":1,\"385\":4,\"396\":2,\"475\":3,\"505\":4,\"512\":1,\"587\":1,\"588\":3,\"607\":2,\"609\":2,\"615\":1,\"616\":1,\"626\":1,\"632\":2,\"635\":2,\"692\":1}}],[\"updatedomproperties\",{\"1\":{\"328\":2}}],[\"updated\",{\"1\":{\"270\":1,\"272\":1,\"480\":1,\"542\":1,\"585\":1,\"703\":2}}],[\"updatequeue中\",{\"1\":{\"373\":1}}],[\"updatequeueresult\",{\"1\":{\"271\":1}}],[\"updatequeue\",{\"0\":{\"271\":1},\"1\":{\"270\":1,\"271\":5,\"272\":9,\"320\":2,\"323\":2,\"325\":2,\"326\":2,\"330\":2,\"346\":1,\"349\":2,\"373\":3,\"375\":10,\"385\":10}}],[\"up\",{\"1\":{\"472\":1,\"1013\":2,\"1015\":1}}],[\"us\",{\"1\":{\"270\":1,\"272\":1}}],[\"use>\",{\"1\":{\"920\":1}}],[\"usequeries\",{\"1\":{\"831\":2}}],[\"usequery控制台输出\",{\"1\":{\"828\":1}}],[\"usequeryclient\",{\"1\":{\"827\":3}}],[\"usequery\",{\"0\":{\"828\":1},\"1\":{\"824\":1,\"827\":3,\"828\":1,\"830\":7,\"831\":3,\"832\":2,\"834\":1,\"845\":6,\"847\":2}}],[\"useoutlet\",{\"0\":{\"726\":1}}],[\"usenavigationtype\",{\"0\":{\"725\":1}}],[\"usenavigate\",{\"0\":{\"719\":1},\"1\":{\"708\":1,\"719\":2,\"728\":2,\"738\":2}}],[\"useselector\",{\"1\":{\"732\":2,\"813\":2,\"815\":3}}],[\"usesearchparams\",{\"0\":{\"721\":1},\"1\":{\"721\":2}}],[\"usestate就是一个内置了reducer的usereducer\",{\"1\":{\"338\":1,\"373\":1}}],[\"usestate\",{\"0\":{\"339\":1},\"1\":{\"100\":1,\"103\":2,\"112\":1,\"180\":1,\"182\":2,\"186\":1,\"192\":2,\"194\":2,\"197\":3,\"202\":1,\"204\":1,\"208\":1,\"227\":2,\"228\":2,\"229\":2,\"234\":1,\"332\":3,\"333\":1,\"334\":1,\"335\":2,\"336\":2,\"338\":2,\"339\":2,\"344\":1,\"351\":1,\"353\":1,\"356\":1,\"359\":1,\"367\":1,\"368\":1,\"369\":2,\"370\":2,\"373\":2,\"377\":1,\"378\":1,\"379\":2,\"380\":2,\"383\":2,\"715\":2,\"732\":2}}],[\"useparams\",{\"0\":{\"720\":1},\"1\":{\"708\":1,\"720\":1,\"721\":2,\"728\":2}}],[\"useprevious\",{\"0\":{\"199\":1},\"1\":{\"199\":1}}],[\"uselocation\",{\"0\":{\"722\":1},\"1\":{\"722\":1,\"728\":2,\"738\":2}}],[\"useless\",{\"1\":{\"631\":1}}],[\"uselayouteffect1\",{\"1\":{\"377\":2}}],[\"uselayouteffect\",{\"0\":{\"187\":1,\"376\":1},\"1\":{\"365\":2,\"376\":4,\"377\":1,\"378\":1,\"379\":2,\"380\":2,\"383\":2}}],[\"usefiber\",{\"1\":{\"319\":2,\"323\":1,\"348\":2,\"352\":2,\"357\":3,\"361\":4}}],[\"usedispatch\",{\"1\":{\"813\":2}}],[\"usedidupdateeffect\",{\"0\":{\"200\":1},\"1\":{\"200\":1}}],[\"used\",{\"1\":{\"382\":1}}],[\"usedebounce\",{\"0\":{\"204\":1},\"1\":{\"204\":1}}],[\"usemutation\",{\"0\":{\"833\":1},\"1\":{\"824\":1,\"827\":3,\"833\":2}}],[\"usematch需要传递url路径字符串\",{\"1\":{\"723\":1}}],[\"usematch\",{\"0\":{\"723\":1},\"1\":{\"723\":1}}],[\"usematch等\",{\"1\":{\"708\":1}}],[\"usemount\",{\"0\":{\"203\":1},\"1\":{\"203\":1}}],[\"usememo\",{\"0\":{\"101\":1,\"193\":1},\"1\":{\"193\":1,\"194\":1,\"195\":1,\"196\":1}}],[\"useinroutercontext\",{\"0\":{\"724\":1}}],[\"useinterval\",{\"0\":{\"201\":1},\"1\":{\"201\":1}}],[\"useimperativehandle\",{\"0\":{\"191\":1},\"1\":{\"191\":3}}],[\"usecontext\",{\"0\":{\"808\":1},\"1\":{\"192\":2,\"808\":1}}],[\"usecallback\",{\"0\":{\"102\":1,\"196\":1},\"1\":{\"196\":2,\"197\":4}}],[\"useeffect3\",{\"1\":{\"367\":2,\"377\":2}}],[\"useeffect2\",{\"1\":{\"367\":2,\"377\":2}}],[\"useeffect1\",{\"1\":{\"367\":2}}],[\"useeffect流程图\",{\"1\":{\"366\":1}}],[\"useeffect\",{\"0\":{\"366\":1},\"1\":{\"112\":2,\"185\":1,\"199\":2,\"200\":1,\"201\":3,\"202\":1,\"203\":2,\"204\":2,\"234\":1,\"365\":7,\"366\":1,\"367\":3,\"368\":1,\"369\":2,\"370\":2,\"373\":2,\"376\":4,\"377\":2,\"378\":1,\"379\":2,\"380\":2,\"383\":2,\"721\":2,\"732\":3,\"755\":1}}],[\"useragent\",{\"1\":{\"1064\":3}}],[\"userqueries\",{\"1\":{\"831\":1}}],[\"user3\",{\"1\":{\"816\":3}}],[\"user2\",{\"1\":{\"816\":3}}],[\"user1\",{\"1\":{\"816\":3}}],[\"userinfo\",{\"1\":{\"771\":1}}],[\"userid\",{\"1\":{\"583\":4,\"832\":3}}],[\"useroutes\",{\"0\":{\"718\":1},\"1\":{\"732\":4,\"735\":2,\"740\":2}}],[\"userdef中仅传入get\",{\"1\":{\"633\":1}}],[\"userdef\",{\"1\":{\"631\":5,\"633\":7}}],[\"user为\",{\"1\":{\"628\":1}}],[\"user=true\",{\"1\":{\"626\":1}}],[\"usersquery\",{\"1\":{\"831\":1}}],[\"usersagas\",{\"1\":{\"777\":3}}],[\"users\",{\"1\":{\"574\":2,\"712\":2,\"720\":1,\"731\":3,\"771\":1,\"777\":2,\"831\":3}}],[\"userblockingpriority\",{\"1\":{\"394\":1,\"395\":3}}],[\"useresolvedpath\",{\"0\":{\"727\":1}}],[\"useresizeobserver\",{\"0\":{\"202\":1},\"1\":{\"202\":1}}],[\"usereducer中为\",{\"1\":{\"313\":1}}],[\"usereducer这个方法\",{\"1\":{\"309\":1}}],[\"usereducer\",{\"1\":{\"303\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":2,\"309\":2,\"313\":2,\"315\":2,\"323\":3,\"329\":1,\"332\":3,\"334\":1,\"335\":2,\"336\":2,\"338\":2,\"339\":1,\"368\":1,\"369\":2,\"370\":2,\"373\":2,\"378\":1,\"379\":2,\"380\":2,\"383\":2}}],[\"useref\",{\"1\":{\"189\":1,\"191\":1,\"199\":3,\"200\":1,\"201\":3}}],[\"user\",{\"1\":{\"67\":4,\"395\":2,\"621\":1,\"623\":1,\"625\":5,\"626\":4,\"628\":7,\"636\":1,\"774\":7,\"775\":2,\"776\":5,\"777\":3,\"831\":4,\"832\":3,\"950\":2,\"960\":1,\"1407\":24}}],[\"username=admin\",{\"1\":{\"22\":1}}],[\"username\",{\"1\":{\"20\":1,\"21\":1,\"26\":3,\"731\":1,\"1164\":3}}],[\"use\",{\"1\":{\"66\":2,\"70\":5,\"270\":1,\"272\":1,\"307\":1,\"308\":1,\"312\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1,\"407\":1,\"424\":1,\"500\":1,\"519\":1,\"561\":2,\"591\":1,\"823\":1,\"1453\":3}}],[\"uid++\",{\"1\":{\"609\":2,\"615\":1,\"616\":1,\"632\":1,\"635\":2}}],[\"uid\",{\"1\":{\"609\":4,\"615\":2,\"616\":2,\"632\":1,\"635\":2}}],[\"ui渲染之前\",{\"1\":{\"384\":1,\"396\":1}}],[\"ui绘制之后\",{\"1\":{\"371\":1,\"381\":1}}],[\"ui绘制之前\",{\"1\":{\"371\":1,\"381\":1}}],[\"ui\",{\"0\":{\"752\":1},\"1\":{\"111\":1,\"208\":1,\"241\":1,\"242\":3,\"248\":1,\"365\":1,\"402\":1,\"404\":1,\"752\":3}}],[\"underline\",{\"1\":{\"891\":1}}],[\"undefined\",{\"0\":{\"1245\":1},\"1\":{\"59\":1,\"69\":1,\"70\":1,\"143\":1,\"153\":1,\"252\":2,\"322\":1,\"328\":1,\"373\":3,\"375\":1,\"385\":1,\"535\":1,\"601\":5,\"602\":2,\"604\":2,\"609\":2,\"618\":2,\"632\":1,\"633\":1,\"635\":1,\"662\":1,\"674\":6,\"675\":2,\"683\":8,\"686\":6,\"688\":1,\"689\":1,\"690\":1,\"691\":6,\"694\":1,\"739\":1,\"843\":1,\"1173\":1,\"1196\":1,\"1228\":5,\"1241\":1,\"1245\":1,\"1249\":3,\"1250\":1,\"1251\":1,\"1261\":1,\"1264\":2,\"1271\":1,\"1344\":1,\"1345\":2,\"1349\":1,\"1352\":1,\"1376\":15,\"1406\":1,\"1410\":1,\"1413\":2,\"1414\":1,\"1423\":1,\"1429\":2,\"1438\":1}}],[\"unknown\",{\"1\":{\"815\":2,\"827\":1}}],[\"uncompletedcount\",{\"1\":{\"796\":1,\"797\":1}}],[\"unwatchfn\",{\"1\":{\"625\":1}}],[\"unexpected\",{\"1\":{\"591\":1}}],[\"unmounted\",{\"1\":{\"542\":2,\"585\":1}}],[\"unmountcomponentatnode\",{\"1\":{\"167\":1,\"171\":1}}],[\"unit\",{\"1\":{\"1016\":2}}],[\"unitofwork\",{\"1\":{\"272\":6,\"273\":9,\"317\":9,\"360\":9,\"374\":9,\"396\":9}}],[\"unicode\",{\"0\":{\"918\":1,\"1262\":1},\"1\":{\"917\":2,\"918\":2,\"919\":5,\"1240\":1,\"1262\":2,\"1364\":2,\"1373\":1,\"1381\":4,\"1382\":1}}],[\"uninitializedfiber\",{\"1\":{\"270\":3,\"271\":4}}],[\"unused\",{\"1\":{\"270\":1,\"272\":1,\"578\":3}}],[\"unobserve\",{\"1\":{\"202\":1}}],[\"unset\",{\"1\":{\"1225\":1}}],[\"unscopables\",{\"1\":{\"1171\":1}}],[\"unscoped\",{\"1\":{\"1012\":4}}],[\"unsafe\",{\"1\":{\"169\":2}}],[\"unsubscribe\",{\"1\":{\"116\":1}}],[\"unshift\",{\"0\":{\"1357\":1},\"1\":{\"70\":2,\"603\":4,\"604\":3,\"609\":3,\"610\":3,\"614\":3,\"620\":1}}],[\"url地址\",{\"1\":{\"1056\":1}}],[\"url>\",{\"1\":{\"495\":1}}],[\"urlsearchparams\",{\"1\":{\"45\":1,\"47\":1}}],[\"urlencoded\",{\"1\":{\"12\":1}}],[\"urlencodeduser\",{\"1\":{\"7\":1}}],[\"url\",{\"0\":{\"39\":1,\"1066\":1,\"1081\":1},\"1\":{\"7\":1,\"10\":1,\"14\":2,\"17\":2,\"21\":1,\"26\":1,\"30\":8,\"32\":1,\"41\":1,\"45\":1,\"69\":2,\"70\":1,\"72\":2,\"430\":1,\"439\":1,\"712\":2,\"713\":1,\"721\":1,\"727\":1,\"755\":2,\"756\":4,\"788\":5,\"822\":1,\"868\":1,\"899\":2,\"903\":2,\"908\":1,\"918\":5,\"1019\":1,\"1021\":3,\"1042\":1,\"1063\":2,\"1065\":8,\"1067\":3,\"1081\":1,\"1207\":2}}],[\"vo\",{\"1\":{\"1423\":1}}],[\"volvo\",{\"1\":{\"1349\":1,\"1350\":1}}],[\"void\",{\"1\":{\"587\":2,\"840\":1,\"842\":2,\"843\":2}}],[\"vs\",{\"1\":{\"1031\":1}}],[\"vscode\",{\"1\":{\"936\":1,\"1034\":1}}],[\"vertical\",{\"0\":{\"924\":1},\"1\":{\"920\":1,\"924\":5,\"927\":1,\"1000\":1}}],[\"version\",{\"1\":{\"527\":1,\"1027\":1}}],[\"versions\",{\"1\":{\"270\":1,\"272\":1}}],[\"v6\",{\"1\":{\"712\":1,\"728\":1}}],[\"v5\",{\"1\":{\"705\":1,\"728\":1}}],[\"vnode输出结果\",{\"1\":{\"668\":1}}],[\"vnode\",{\"0\":{\"668\":1,\"687\":1},\"1\":{\"660\":1,\"663\":1,\"667\":1,\"674\":9,\"675\":16,\"683\":3,\"686\":5,\"687\":2,\"688\":3,\"689\":12,\"692\":4}}],[\"v3\",{\"1\":{\"528\":1}}],[\"vm为组件实例\",{\"1\":{\"631\":1}}],[\"vm实例的watch列表中移除\",{\"1\":{\"626\":1}}],[\"vm和vc均可使用\",{\"1\":{\"500\":1}}],[\"vm\",{\"1\":{\"450\":1,\"451\":1,\"452\":2,\"467\":3,\"470\":3,\"479\":2,\"481\":1,\"487\":1,\"624\":3,\"625\":8,\"626\":8,\"628\":2,\"631\":5,\"632\":2,\"634\":13,\"635\":18,\"636\":1,\"703\":1}}],[\"v\",{\"0\":{\"458\":2,\"511\":1,\"514\":1,\"588\":1},\"1\":{\"442\":1,\"444\":1,\"446\":1,\"447\":3,\"448\":1,\"457\":13,\"458\":2,\"460\":3,\"463\":1,\"464\":1,\"465\":3,\"467\":1,\"470\":1,\"473\":2,\"474\":22,\"475\":6,\"504\":3,\"507\":6,\"508\":1,\"511\":4,\"514\":1,\"515\":4,\"520\":2,\"525\":1,\"557\":1,\"562\":8,\"563\":2,\"567\":1,\"568\":2,\"588\":4,\"608\":1,\"662\":3,\"685\":2,\"695\":6,\"702\":1,\"912\":2,\"913\":2,\"1381\":1}}],[\"v8\",{\"1\":{\"395\":1}}],[\"v16\",{\"1\":{\"257\":1}}],[\"vue源码分析\",{\"0\":{\"704\":1}}],[\"vue初始化时\",{\"1\":{\"703\":1}}],[\"vue过渡动画\",{\"1\":{\"507\":1}}],[\"vue的实例对象简称vm\",{\"1\":{\"489\":1}}],[\"vuecomponent的实例对象\",{\"1\":{\"489\":1}}],[\"vuecomponent\",{\"1\":{\"489\":1,\"516\":2}}],[\"vuecomponent构造函数\",{\"0\":{\"489\":1}}],[\"vue会执行new\",{\"1\":{\"489\":1}}],[\"vue解析时会帮我们创建school组件的实例对象\",{\"1\":{\"489\":1}}],[\"vue3+ts+vite\",{\"0\":{\"569\":1},\"1\":{\"592\":1}}],[\"vue3生命周期\",{\"1\":{\"542\":1}}],[\"vue3\",{\"0\":{\"466\":1,\"549\":1,\"592\":1},\"1\":{\"523\":2,\"524\":2,\"534\":1,\"536\":1,\"542\":3,\"561\":1,\"562\":1,\"566\":1,\"578\":3,\"588\":1}}],[\"vuerouter\",{\"0\":{\"419\":1},\"1\":{\"424\":3,\"427\":1,\"430\":1,\"439\":1,\"718\":1}}],[\"vuexpersist\",{\"1\":{\"519\":1}}],[\"vuex根文件\",{\"1\":{\"407\":1}}],[\"vuex状态\",{\"1\":{\"406\":1}}],[\"vuex\",{\"0\":{\"405\":1,\"407\":1,\"519\":1},\"1\":{\"404\":1,\"407\":4,\"409\":1,\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"418\":1,\"430\":1,\"519\":10,\"522\":1,\"840\":1}}],[\"vue脚手架\",{\"1\":{\"404\":1}}],[\"vuejs\",{\"1\":{\"400\":2,\"492\":1,\"527\":1,\"528\":1}}],[\"vue\",{\"0\":{\"257\":1,\"527\":1,\"694\":1,\"1192\":1},\"1\":{\"161\":1,\"162\":1,\"200\":1,\"209\":1,\"257\":3,\"404\":3,\"406\":3,\"407\":5,\"424\":8,\"436\":1,\"443\":5,\"448\":1,\"451\":3,\"452\":2,\"454\":6,\"461\":2,\"466\":2,\"467\":4,\"470\":1,\"472\":2,\"473\":1,\"474\":1,\"475\":4,\"479\":2,\"482\":2,\"487\":3,\"489\":1,\"492\":2,\"493\":5,\"499\":3,\"500\":10,\"505\":4,\"509\":1,\"510\":2,\"511\":2,\"512\":1,\"513\":1,\"514\":1,\"515\":2,\"516\":1,\"517\":2,\"518\":5,\"519\":3,\"520\":1,\"521\":2,\"522\":1,\"527\":9,\"539\":1,\"543\":1,\"557\":1,\"560\":4,\"561\":11,\"568\":2,\"570\":5,\"571\":1,\"578\":15,\"586\":1,\"588\":7,\"593\":5,\"596\":1,\"625\":1,\"628\":2,\"636\":1,\"637\":2,\"639\":3,\"658\":1,\"660\":2,\"663\":1,\"664\":2,\"665\":1,\"672\":1,\"692\":1,\"694\":1,\"695\":6,\"697\":1,\"698\":1,\"701\":2,\"702\":3,\"716\":1,\"718\":1,\"729\":1,\"733\":1,\"1407\":3}}],[\"vue2的diff算法\",{\"1\":{\"692\":1}}],[\"vue2特性\",{\"1\":{\"609\":1,\"616\":1}}],[\"vue2响应式原理官网图例\",{\"1\":{\"593\":1}}],[\"vue2生命周期\",{\"1\":{\"477\":1}}],[\"vue2\",{\"0\":{\"522\":1,\"524\":1,\"548\":1},\"1\":{\"85\":1,\"523\":2,\"524\":1,\"534\":3,\"539\":1,\"540\":1,\"542\":2,\"543\":1,\"561\":1,\"562\":1,\"566\":1,\"588\":1,\"593\":1,\"603\":1,\"605\":1,\"609\":1,\"620\":2,\"621\":3,\"626\":1,\"628\":1,\"634\":2,\"636\":1,\"692\":1,\"727\":1}}],[\"vdom3\",{\"1\":{\"685\":2}}],[\"vdom2\",{\"1\":{\"675\":2,\"676\":3,\"685\":3}}],[\"vdom1\",{\"1\":{\"675\":3,\"676\":3,\"685\":3}}],[\"vdom\",{\"1\":{\"120\":1,\"162\":1,\"250\":2,\"692\":2}}],[\"variable\",{\"1\":{\"1423\":1}}],[\"variables\",{\"0\":{\"113\":1},\"1\":{\"105\":1,\"1017\":1}}],[\"variant\",{\"0\":{\"886\":1},\"1\":{\"886\":3,\"887\":1}}],[\"vars\",{\"1\":{\"578\":3}}],[\"var\",{\"1\":{\"107\":1,\"122\":1,\"388\":3,\"573\":1,\"583\":4,\"591\":5,\"602\":1,\"604\":1,\"609\":3,\"615\":1,\"616\":1,\"618\":1,\"626\":1,\"635\":1,\"1239\":2,\"1258\":4,\"1260\":4,\"1265\":4,\"1268\":2,\"1269\":2,\"1271\":1,\"1272\":1,\"1273\":1,\"1274\":1,\"1275\":1,\"1276\":1,\"1333\":1,\"1343\":1,\"1347\":1,\"1349\":4,\"1350\":2,\"1353\":2,\"1376\":15,\"1381\":10,\"1382\":14,\"1383\":2,\"1384\":19,\"1385\":6,\"1386\":7,\"1388\":3,\"1389\":3,\"1390\":2,\"1391\":17,\"1392\":3,\"1405\":3,\"1407\":4,\"1423\":1,\"1436\":1,\"1453\":1,\"1456\":1}}],[\"val是否是冻结对象\",{\"1\":{\"627\":1}}],[\"val是否是对象\",{\"1\":{\"627\":1}}],[\"val是否是数组\",{\"1\":{\"627\":1}}],[\"val=\",{\"1\":{\"515\":1}}],[\"val\",{\"0\":{\"1317\":1},\"1\":{\"234\":1,\"512\":7,\"517\":2,\"601\":4,\"602\":13,\"604\":7,\"608\":7,\"609\":9,\"610\":13,\"613\":7,\"627\":12,\"695\":7,\"756\":3,\"1317\":2,\"1405\":3,\"1407\":4}}],[\"validatestatus\",{\"0\":{\"59\":1},\"1\":{\"59\":1}}],[\"valueof\",{\"0\":{\"1410\":1},\"1\":{\"1370\":1,\"1410\":9,\"1411\":2,\"1413\":5,\"1417\":1}}],[\"value就稳定不变\",{\"1\":{\"636\":1}}],[\"value去读写数据\",{\"1\":{\"550\":1}}],[\"value组合都会通过props传给detail组件\",{\"1\":{\"431\":1}}],[\"value组合最终都通过props传给detail组件\",{\"1\":{\"431\":1}}],[\"values\",{\"0\":{\"1209\":1},\"1\":{\"382\":1,\"796\":1,\"797\":1}}],[\"value=\",{\"1\":{\"111\":1,\"192\":1,\"213\":1,\"217\":1,\"447\":1,\"511\":2,\"512\":1,\"520\":1,\"749\":4,\"1019\":5,\"1057\":3}}],[\"value\",{\"1\":{\"20\":4,\"26\":1,\"108\":1,\"123\":1,\"139\":1,\"142\":1,\"150\":2,\"182\":1,\"192\":3,\"199\":2,\"204\":4,\"213\":2,\"214\":1,\"215\":2,\"318\":3,\"407\":12,\"422\":2,\"423\":2,\"455\":1,\"463\":2,\"464\":2,\"465\":3,\"468\":3,\"475\":1,\"480\":1,\"500\":2,\"511\":11,\"512\":1,\"518\":2,\"520\":7,\"536\":2,\"539\":2,\"541\":1,\"549\":2,\"550\":2,\"553\":1,\"557\":3,\"586\":2,\"587\":1,\"588\":2,\"599\":2,\"600\":2,\"602\":13,\"603\":10,\"604\":17,\"607\":4,\"609\":29,\"610\":10,\"612\":2,\"614\":1,\"616\":12,\"617\":9,\"618\":5,\"625\":1,\"626\":8,\"628\":1,\"632\":8,\"633\":1,\"634\":3,\"635\":7,\"636\":5,\"650\":1,\"662\":4,\"695\":15,\"749\":11,\"814\":1,\"843\":1,\"848\":1,\"1016\":3,\"1044\":1,\"1057\":1,\"1173\":3,\"1177\":2,\"1197\":2,\"1198\":1,\"1199\":1,\"1224\":4,\"1229\":3,\"1243\":1,\"1312\":1,\"1317\":1,\"1405\":1,\"1407\":3,\"1433\":2}}],[\"video>\",{\"1\":{\"1021\":1}}],[\"video\",{\"0\":{\"1021\":1}}],[\"visual\",{\"0\":{\"948\":1}}],[\"visi\",{\"1\":{\"1225\":1}}],[\"visited\",{\"1\":{\"873\":3}}],[\"visitcount\",{\"1\":{\"634\":1,\"635\":1}}],[\"visibility\",{\"1\":{\"914\":5,\"985\":1,\"1000\":1}}],[\"visibilityfilters\",{\"1\":{\"815\":6}}],[\"visibilityfilter\",{\"1\":{\"815\":4}}],[\"visible\",{\"1\":{\"578\":1,\"588\":1,\"914\":2}}],[\"viewport\",{\"0\":{\"947\":1,\"948\":1,\"949\":1},\"1\":{\"950\":3,\"953\":1,\"960\":1}}],[\"views\",{\"1\":{\"734\":3,\"739\":3}}],[\"viewmodel\",{\"1\":{\"467\":1}}],[\"view\",{\"1\":{\"467\":1,\"595\":3,\"742\":3,\"748\":1,\"749\":1,\"753\":2,\"755\":1,\"823\":1}}],[\"view>\",{\"1\":{\"424\":1,\"433\":1,\"716\":1}}],[\"view><\",{\"1\":{\"424\":1,\"433\":1,\"716\":1}}],[\"vite其实并不能完全替代webpack\",{\"1\":{\"531\":1}}],[\"vite是一个基于开发环境下的构建工具\",{\"1\":{\"531\":1}}],[\"vitejs\",{\"1\":{\"249\":2,\"528\":1}}],[\"vite\",{\"0\":{\"528\":1,\"571\":1,\"590\":1},\"1\":{\"249\":2,\"528\":2,\"529\":1,\"530\":4,\"531\":1,\"570\":2,\"572\":1,\"573\":2,\"574\":2,\"575\":2,\"576\":1,\"590\":1,\"702\":1}}],[\"vitals\",{\"1\":{\"138\":1}}],[\"virtualdom\",{\"1\":{\"126\":1}}],[\"virtualized两个热门库\",{\"1\":{\"95\":1}}],[\"vip\",{\"1\":{\"20\":2,\"21\":1}}],[\"707\",{\"1\":{\"1369\":1}}],[\"700\",{\"1\":{\"887\":1,\"1013\":3}}],[\"718\",{\"1\":{\"1369\":1}}],[\"7169515109172609032\",{\"1\":{\"849\":1}}],[\"720px\",{\"1\":{\"1016\":1}}],[\"720x1280\",{\"1\":{\"944\":1}}],[\"7专有\",{\"1\":{\"985\":1}}],[\"750px\",{\"1\":{\"966\":2,\"1016\":2}}],[\"750\",{\"1\":{\"965\":1,\"966\":5}}],[\"750x1334\",{\"1\":{\"944\":1}}],[\"768px\",{\"1\":{\"1016\":1}}],[\"768\",{\"1\":{\"952\":1}}],[\"736\",{\"1\":{\"952\":1}}],[\"731\",{\"1\":{\"952\":1}}],[\"7种方法里有3种方法\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"7+\",{\"1\":{\"570\":1}}],[\"7\",{\"0\":{\"45\":1,\"112\":1,\"516\":1,\"768\":1,\"1038\":1,\"1164\":1,\"1230\":1,\"1277\":1,\"1361\":1},\"1\":{\"20\":2,\"323\":1,\"474\":1,\"603\":1,\"610\":2,\"620\":2,\"621\":1,\"937\":1,\"952\":6,\"1016\":2,\"1066\":1,\"1178\":3,\"1181\":1,\"1221\":1,\"1258\":1,\"1272\":1,\"1273\":1,\"1382\":1}}],[\"客户端支持防御\",{\"1\":{\"29\":1}}],[\"客户端\",{\"0\":{\"20\":1},\"1\":{\"26\":2}}],[\"服务器返回响应结果\",{\"1\":{\"1066\":1}}],[\"服务器\",{\"1\":{\"945\":1}}],[\"服务器收到一个请求时\",{\"1\":{\"423\":1}}],[\"服务\",{\"1\":{\"574\":2}}],[\"服务已启动\",{\"1\":{\"19\":1}}],[\"服务端状态有以下几点比较复杂\",{\"1\":{\"825\":1}}],[\"服务端渲染项目会采用\",{\"1\":{\"701\":1}}],[\"服务端渲染的元素节点构建\",{\"1\":{\"696\":1}}],[\"服务端渲染\",{\"1\":{\"242\":1}}],[\"服务端设置\",{\"1\":{\"27\":1}}],[\"服务端需要识别并提取该回调函数的字符串值\",{\"1\":{\"26\":1}}],[\"服务端\",{\"0\":{\"19\":1},\"1\":{\"26\":2}}],[\"服务端响应\",{\"0\":{\"13\":1}}],[\"服务端返回了所有的结果\",{\"1\":{\"9\":1}}],[\"欢迎\",{\"1\":{\"19\":1,\"26\":1}}],[\"允许给函数参数赋值初始值\",{\"1\":{\"1164\":1}}],[\"允许多选\",{\"1\":{\"1019\":1}}],[\"允许通过\",{\"1\":{\"1016\":1}}],[\"允许的四则运算方式\",{\"1\":{\"966\":1}}],[\"允许负值\",{\"1\":{\"912\":2,\"913\":2}}],[\"允许在大括号里面\",{\"1\":{\"1162\":1}}],[\"允许在单词内换行\",{\"1\":{\"900\":1}}],[\"允许在向服务器发送前\",{\"1\":{\"42\":1}}],[\"允许你根据需要中止一个或多个\",{\"1\":{\"841\":1}}],[\"允许你根据用户事件来更新部分页面内容\",{\"1\":{\"4\":1}}],[\"允许\",{\"1\":{\"578\":1}}],[\"允许我们创建一个新的消息通道\",{\"1\":{\"388\":1}}],[\"允许使用负值\",{\"1\":{\"896\":1,\"924\":1}}],[\"允许使用\",{\"1\":{\"214\":1}}],[\"允许为下载处理进度事件\",{\"1\":{\"57\":1}}],[\"允许为上传处理进度事件\",{\"1\":{\"56\":1}}],[\"允许自定义处理请求\",{\"1\":{\"50\":1}}],[\"允许修改响应数据\",{\"1\":{\"43\":1}}],[\"允许服务器声明哪些源站通过浏览器有权限访问哪些资源\",{\"1\":{\"27\":1}}],[\"允许跨域\",{\"1\":{\"19\":1}}],[\"ec\",{\"1\":{\"1423\":1}}],[\"ecmascript\",{\"1\":{\"1233\":3}}],[\"ecmaversion\",{\"1\":{\"578\":1}}],[\"efg\",{\"1\":{\"1383\":1}}],[\"effects\",{\"0\":{\"770\":1,\"771\":1},\"1\":{\"758\":2,\"770\":1,\"771\":2,\"777\":3,\"779\":1,\"820\":1,\"823\":2}}],[\"effect单向环链\",{\"1\":{\"373\":1}}],[\"effect的标签\",{\"1\":{\"373\":1}}],[\"effectflags\",{\"1\":{\"373\":1}}],[\"effecthook\",{\"1\":{\"365\":2,\"366\":2}}],[\"effect\",{\"0\":{\"183\":1,\"364\":1},\"1\":{\"184\":1,\"187\":1,\"365\":2,\"366\":1,\"373\":9,\"375\":13,\"376\":1,\"385\":13,\"386\":1,\"769\":1,\"770\":2,\"771\":2}}],[\"eq\",{\"1\":{\"1289\":2,\"1290\":3}}],[\"equal\",{\"1\":{\"1181\":2}}],[\"epsilon\",{\"1\":{\"1181\":2}}],[\"epicmiddleware\",{\"1\":{\"785\":2}}],[\"epics\",{\"1\":{\"785\":1,\"790\":2}}],[\"epic\",{\"0\":{\"781\":1},\"1\":{\"781\":2,\"788\":1}}],[\"edge\",{\"1\":{\"1027\":1}}],[\"eot\",{\"1\":{\"918\":2}}],[\"eos\",{\"1\":{\"646\":2,\"647\":1,\"654\":1,\"655\":2}}],[\"emcascript\",{\"1\":{\"1452\":1}}],[\"empty\",{\"1\":{\"1322\":1}}],[\"em>或者<i><\",{\"1\":{\"1037\":1}}],[\"emmet\",{\"0\":{\"936\":1},\"1\":{\"936\":1}}],[\"embedded\",{\"1\":{\"918\":1}}],[\"em\",{\"1\":{\"877\":1,\"892\":1,\"963\":3}}],[\"email\",{\"1\":{\"832\":1,\"1019\":1}}],[\"emits\",{\"1\":{\"563\":2}}],[\"emit\",{\"0\":{\"587\":1},\"1\":{\"535\":1,\"587\":2,\"588\":2}}],[\"each\",{\"1\":{\"1319\":3}}],[\"easing\",{\"1\":{\"1303\":4,\"1304\":4,\"1307\":6,\"1308\":2}}],[\"eason\",{\"1\":{\"823\":1}}],[\"eagerstate\",{\"1\":{\"315\":1,\"338\":6,\"373\":6}}],[\"even\",{\"1\":{\"1289\":2}}],[\"evening\",{\"1\":{\"788\":1}}],[\"eventone\",{\"1\":{\"515\":4}}],[\"eventone=\",{\"1\":{\"515\":1}}],[\"eventhandler\",{\"1\":{\"515\":2}}],[\"eventually\",{\"1\":{\"395\":1}}],[\"eventlistenersmodule\",{\"1\":{\"668\":2,\"669\":2}}],[\"eventlistener\",{\"1\":{\"286\":1}}],[\"eventname\",{\"1\":{\"281\":4}}],[\"eventregistry\",{\"0\":{\"282\":1},\"1\":{\"281\":1,\"286\":1}}],[\"eventstr\",{\"1\":{\"1131\":1}}],[\"eventsystemresult\",{\"1\":{\"301\":1}}],[\"eventsystemflags\",{\"0\":{\"285\":1},\"1\":{\"286\":6,\"288\":8,\"290\":6,\"292\":4,\"295\":5,\"297\":2}}],[\"events\",{\"1\":{\"281\":1,\"292\":1,\"302\":1,\"1328\":2,\"1331\":1}}],[\"eventid\",{\"1\":{\"150\":3}}],[\"eventtype\",{\"1\":{\"116\":11,\"286\":4}}],[\"eventbus\",{\"0\":{\"518\":1},\"1\":{\"115\":2,\"116\":1,\"518\":1}}],[\"event\",{\"0\":{\"109\":1},\"1\":{\"105\":1,\"115\":6,\"227\":3,\"228\":3,\"229\":3,\"292\":2,\"293\":10,\"295\":13,\"388\":4,\"471\":3,\"511\":1,\"512\":2,\"692\":1,\"1125\":1,\"1127\":1,\"1146\":2,\"1148\":2,\"1155\":1,\"1331\":3}}],[\"every\",{\"0\":{\"1201\":1},\"1\":{\"1196\":1,\"1201\":1}}],[\"ever\",{\"1\":{\"270\":1,\"272\":1}}],[\"evaluate不会再次调用\",{\"1\":{\"632\":1,\"635\":1}}],[\"evaluate\",{\"1\":{\"632\":2,\"633\":1,\"634\":1,\"635\":1}}],[\"eval\",{\"1\":{\"249\":1,\"1422\":1}}],[\"eeeeee\",{\"1\":{\"192\":1,\"217\":1}}],[\"es11\",{\"0\":{\"1223\":1}}],[\"es10\",{\"0\":{\"1219\":1}}],[\"es9\",{\"0\":{\"1213\":1}}],[\"es8\",{\"0\":{\"1203\":1}}],[\"es7\",{\"0\":{\"1193\":1}}],[\"es\",{\"1\":{\"821\":1,\"1240\":1,\"1339\":2}}],[\"essential\",{\"1\":{\"578\":2}}],[\"esm\",{\"1\":{\"530\":2}}],[\"es5获取实参\",{\"1\":{\"1165\":1}}],[\"es5\",{\"1\":{\"487\":1,\"593\":1}}],[\"esc\",{\"1\":{\"472\":1}}],[\"eslintrc\",{\"1\":{\"578\":1,\"591\":1}}],[\"eslint\",{\"0\":{\"578\":1,\"591\":1},\"1\":{\"136\":1,\"578\":13}}],[\"es6获取实参\",{\"1\":{\"1165\":1}}],[\"es6+\",{\"0\":{\"1156\":1},\"1\":{\"1379\":1}}],[\"es6\",{\"0\":{\"1157\":1},\"1\":{\"103\":1,\"136\":1,\"487\":1,\"537\":1,\"638\":2,\"1162\":1,\"1175\":1,\"1178\":1,\"1229\":1,\"1275\":1,\"1435\":1}}],[\"e\",{\"1\":{\"114\":2,\"359\":2,\"511\":4,\"513\":2,\"514\":4,\"578\":1,\"587\":2,\"588\":1,\"634\":3,\"635\":3,\"685\":6,\"695\":2,\"777\":1,\"1016\":1,\"1129\":2,\"1181\":1,\"1206\":2,\"1207\":2,\"1369\":4,\"1370\":2,\"1382\":1}}],[\"ellipsis\",{\"1\":{\"897\":1,\"926\":1,\"927\":1}}],[\"elmtomove\",{\"1\":{\"683\":3,\"691\":3}}],[\"elm\",{\"1\":{\"674\":2,\"675\":5,\"683\":17,\"687\":2,\"688\":1,\"689\":4,\"690\":7,\"691\":9,\"692\":1}}],[\"elements\",{\"1\":{\"735\":2,\"740\":2}}],[\"element暂用字符串表示\",{\"1\":{\"731\":1}}],[\"element属性用于定义当前路径对应组件\",{\"1\":{\"712\":1}}],[\"element=\",{\"1\":{\"709\":4,\"712\":5,\"737\":1}}],[\"elementtype\",{\"1\":{\"319\":2,\"348\":2,\"352\":2,\"357\":4,\"361\":4}}],[\"element变成真实dom插入到container容器中\",{\"1\":{\"271\":1,\"272\":1}}],[\"element\",{\"0\":{\"1082\":1},\"1\":{\"252\":2,\"253\":2,\"269\":1,\"271\":5,\"272\":17,\"301\":2,\"305\":2,\"318\":2,\"319\":8,\"329\":2,\"333\":2,\"344\":2,\"348\":8,\"351\":2,\"352\":8,\"353\":2,\"356\":2,\"357\":13,\"359\":2,\"361\":14,\"367\":2,\"377\":2,\"404\":1,\"475\":1,\"730\":6,\"731\":3,\"732\":2,\"734\":3,\"736\":1,\"737\":3,\"738\":6,\"739\":1,\"740\":2,\"1095\":1,\"1116\":3,\"1319\":2,\"1321\":3,\"1322\":3,\"1327\":1,\"1328\":1,\"1330\":3,\"1331\":1}}],[\"ele\",{\"1\":{\"122\":1}}],[\"el\",{\"1\":{\"112\":5,\"443\":2,\"454\":3,\"475\":4,\"487\":2,\"561\":2,\"694\":1,\"695\":6,\"696\":1}}],[\"else=\",{\"1\":{\"457\":1}}],[\"else\",{\"1\":{\"67\":1,\"69\":1,\"72\":1,\"200\":1,\"271\":1,\"272\":7,\"273\":5,\"274\":3,\"286\":1,\"293\":2,\"295\":1,\"306\":2,\"315\":5,\"316\":1,\"317\":1,\"318\":1,\"319\":4,\"320\":2,\"322\":7,\"325\":2,\"326\":3,\"328\":9,\"338\":5,\"348\":4,\"349\":3,\"352\":5,\"357\":6,\"360\":1,\"361\":11,\"373\":7,\"374\":1,\"375\":3,\"385\":3,\"392\":4,\"395\":2,\"396\":1,\"436\":3,\"437\":2,\"457\":4,\"474\":1,\"602\":1,\"603\":1,\"604\":2,\"609\":2,\"610\":1,\"617\":1,\"618\":1,\"624\":1,\"626\":1,\"627\":1,\"633\":1,\"647\":2,\"654\":2,\"661\":5,\"662\":1,\"674\":3,\"675\":2,\"683\":12,\"686\":3,\"688\":1,\"689\":1,\"690\":2,\"691\":9,\"695\":3,\"731\":2,\"738\":1,\"749\":1,\"830\":1,\"842\":1,\"843\":2,\"1015\":7,\"1207\":1,\"1268\":2,\"1461\":2}}],[\"enum\",{\"1\":{\"1452\":1}}],[\"enumerable\",{\"1\":{\"600\":1,\"601\":1,\"602\":4,\"604\":3,\"608\":1,\"609\":3,\"610\":1,\"612\":2,\"613\":1,\"633\":1,\"1403\":1,\"1405\":1,\"1407\":1}}],[\"en\",{\"1\":{\"1033\":1}}],[\"enabled\",{\"1\":{\"832\":2,\"840\":1}}],[\"enhancers\",{\"1\":{\"811\":1}}],[\"enhancedcomponent\",{\"1\":{\"233\":1}}],[\"env\",{\"1\":{\"578\":1,\"826\":2,\"1192\":1}}],[\"ent\",{\"1\":{\"1124\":1}}],[\"entitystate<todopayload>\",{\"1\":{\"816\":3}}],[\"entitystate\",{\"1\":{\"816\":1}}],[\"entities\",{\"1\":{\"816\":2}}],[\"enter\",{\"1\":{\"472\":1,\"507\":3,\"562\":4}}],[\"entry\",{\"1\":{\"202\":2,\"609\":1,\"634\":1}}],[\"entries\",{\"0\":{\"1210\":1},\"1\":{\"202\":2,\"1218\":1}}],[\"enqueueconcurrenthookupdate\",{\"1\":{\"315\":2,\"316\":1,\"338\":3,\"373\":3}}],[\"enqueueupdate\",{\"1\":{\"271\":3,\"272\":3,\"316\":2}}],[\"ensurerootisscheduled\",{\"1\":{\"272\":2,\"317\":2,\"360\":2,\"374\":2,\"396\":2}}],[\"endswith\",{\"1\":{\"1202\":1}}],[\"end>home<\",{\"1\":{\"714\":1}}],[\"endreg\",{\"1\":{\"661\":3}}],[\"end\",{\"1\":{\"103\":1,\"646\":1,\"655\":1,\"723\":1,\"732\":2,\"1376\":4}}],[\"endoffset\",{\"1\":{\"96\":1}}],[\"endindex\",{\"1\":{\"96\":2,\"316\":2}}],[\"encoding\",{\"1\":{\"8\":1}}],[\"exec\",{\"1\":{\"1215\":2,\"1216\":1,\"1217\":1,\"1390\":1}}],[\"execution\",{\"1\":{\"1422\":2,\"1423\":2}}],[\"execute\",{\"1\":{\"831\":1}}],[\"executedispatch\",{\"1\":{\"295\":3}}],[\"executor\",{\"1\":{\"67\":3,\"72\":2}}],[\"exact\",{\"1\":{\"822\":2}}],[\"example\",{\"1\":{\"182\":1,\"823\":2}}],[\"exchange\",{\"1\":{\"635\":2}}],[\"exclude\",{\"0\":{\"577\":1},\"1\":{\"249\":1}}],[\"exit\",{\"1\":{\"392\":2}}],[\"existingchild\",{\"1\":{\"361\":9}}],[\"existingchildren\",{\"1\":{\"361\":11}}],[\"existing\",{\"1\":{\"319\":3,\"348\":3,\"352\":3,\"357\":6,\"361\":9}}],[\"exist\",{\"1\":{\"26\":1}}],[\"extension\",{\"1\":{\"760\":1,\"773\":1}}],[\"extend生成的\",{\"1\":{\"489\":1}}],[\"extend\",{\"1\":{\"487\":1,\"489\":1,\"1332\":2,\"1335\":1,\"1336\":1}}],[\"extends\",{\"1\":{\"98\":1,\"99\":1,\"106\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":1,\"111\":2,\"113\":2,\"114\":2,\"145\":1,\"150\":2,\"155\":1,\"160\":1,\"214\":1,\"217\":2,\"219\":1,\"231\":1,\"239\":3,\"240\":1,\"242\":1,\"245\":1,\"578\":1,\"749\":1,\"774\":1,\"789\":1,\"804\":1,\"823\":2,\"1180\":1,\"1433\":1}}],[\"external\",{\"1\":{\"591\":1}}],[\"extract\",{\"1\":{\"1016\":1}}],[\"extractevents\",{\"1\":{\"290\":3,\"292\":2,\"294\":1,\"295\":1,\"300\":1}}],[\"extrababelplugins\",{\"1\":{\"821\":1}}],[\"extrareducers\",{\"1\":{\"814\":1}}],[\"extraargument\",{\"1\":{\"755\":2}}],[\"extra\",{\"1\":{\"270\":2,\"272\":2,\"570\":1}}],[\"expr\",{\"1\":{\"1290\":2}}],[\"expression\",{\"1\":{\"607\":8,\"609\":7,\"616\":7,\"625\":1,\"632\":6,\"635\":6}}],[\"express\",{\"0\":{\"19\":1}}],[\"explorer\",{\"1\":{\"1019\":1}}],[\"exp\",{\"1\":{\"695\":9,\"1370\":1}}],[\"exporfn\",{\"1\":{\"625\":5,\"626\":6}}],[\"exports\",{\"1\":{\"495\":2,\"578\":2}}],[\"export\",{\"1\":{\"100\":1,\"112\":1,\"115\":1,\"145\":1,\"150\":2,\"155\":1,\"160\":1,\"192\":1,\"197\":1,\"201\":1,\"204\":1,\"217\":1,\"239\":1,\"249\":1,\"251\":1,\"252\":1,\"269\":3,\"270\":4,\"271\":8,\"272\":20,\"273\":7,\"274\":1,\"280\":1,\"281\":2,\"282\":3,\"284\":1,\"285\":1,\"286\":4,\"288\":3,\"289\":4,\"290\":2,\"291\":1,\"292\":1,\"293\":1,\"297\":2,\"298\":1,\"299\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"315\":1,\"316\":3,\"317\":1,\"318\":2,\"319\":2,\"320\":1,\"321\":1,\"322\":2,\"325\":1,\"326\":1,\"327\":9,\"328\":3,\"334\":1,\"335\":1,\"336\":2,\"337\":1,\"338\":1,\"345\":5,\"346\":1,\"347\":1,\"348\":2,\"349\":1,\"352\":2,\"357\":2,\"360\":1,\"361\":2,\"368\":1,\"369\":1,\"370\":3,\"371\":3,\"372\":1,\"373\":1,\"374\":1,\"375\":3,\"378\":1,\"379\":1,\"380\":4,\"381\":3,\"382\":8,\"385\":4,\"392\":3,\"394\":6,\"395\":3,\"396\":1,\"407\":1,\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"424\":1,\"427\":1,\"430\":1,\"434\":1,\"438\":1,\"439\":1,\"451\":1,\"475\":1,\"497\":2,\"499\":2,\"500\":1,\"504\":1,\"508\":1,\"511\":4,\"512\":2,\"513\":2,\"514\":2,\"515\":6,\"516\":2,\"517\":3,\"518\":2,\"519\":2,\"520\":2,\"521\":2,\"534\":1,\"539\":1,\"543\":1,\"557\":1,\"560\":3,\"563\":1,\"583\":3,\"584\":1,\"590\":1,\"591\":1,\"602\":3,\"603\":2,\"604\":4,\"607\":1,\"609\":9,\"610\":3,\"612\":1,\"613\":1,\"614\":1,\"615\":3,\"616\":1,\"617\":1,\"618\":1,\"626\":1,\"627\":1,\"632\":1,\"633\":1,\"634\":2,\"635\":4,\"646\":1,\"647\":1,\"648\":2,\"649\":1,\"650\":1,\"651\":2,\"654\":1,\"655\":1,\"656\":1,\"657\":1,\"661\":1,\"662\":1,\"674\":2,\"675\":2,\"683\":3,\"686\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1,\"691\":1,\"694\":1,\"695\":1,\"709\":1,\"715\":1,\"721\":1,\"728\":1,\"730\":1,\"731\":8,\"732\":1,\"734\":1,\"735\":1,\"737\":1,\"738\":1,\"739\":1,\"740\":1,\"749\":3,\"755\":1,\"756\":1,\"768\":1,\"774\":1,\"775\":7,\"776\":3,\"777\":4,\"786\":6,\"787\":1,\"788\":1,\"789\":2,\"802\":1,\"806\":1,\"807\":1,\"811\":1,\"812\":4,\"813\":1,\"814\":2,\"816\":4,\"822\":1,\"823\":5,\"826\":1,\"827\":1,\"840\":1,\"1189\":1,\"1190\":5,\"1452\":1}}],[\"expirationtime\",{\"1\":{\"395\":4}}],[\"err\",{\"1\":{\"17\":2,\"755\":2}}],[\"errorcaptured\",{\"1\":{\"585\":1}}],[\"errorinfo\",{\"1\":{\"242\":2}}],[\"errorboundary>\",{\"1\":{\"242\":1}}],[\"errorboundary\",{\"1\":{\"242\":1}}],[\"error\",{\"1\":{\"17\":1,\"66\":4,\"69\":3,\"70\":8,\"72\":4,\"242\":3,\"245\":5,\"578\":2,\"661\":2,\"674\":3,\"686\":3,\"731\":1,\"755\":2,\"756\":8,\"787\":5,\"788\":2,\"789\":4,\"815\":2,\"829\":2,\"830\":2,\"840\":5,\"1013\":5,\"1076\":1,\"1206\":1}}],[\"$3\",{\"1\":{\"1391\":2}}],[\"$2$1\",{\"1\":{\"1391\":1}}],[\"$2\",{\"1\":{\"1391\":5}}],[\"$是\",{\"1\":{\"1283\":2}}],[\"$组成\",{\"1\":{\"1240\":1}}],[\"$text\",{\"1\":{\"1078\":1}}],[\"$i\",{\"1\":{\"1016\":9}}],[\"$width\",{\"1\":{\"1015\":2}}],[\"$watch方法最后判断配置选项中的\",{\"1\":{\"628\":1}}],[\"$watch\",{\"1\":{\"625\":4}}],[\"$dir\",{\"1\":{\"1015\":5}}],[\"$bg\",{\"1\":{\"1012\":2}}],[\"$bus\",{\"1\":{\"407\":1,\"424\":1,\"518\":4}}],[\"$color\",{\"1\":{\"1012\":4,\"1015\":5}}],[\"$children\",{\"0\":{\"516\":1},\"1\":{\"516\":3}}],[\"$fragment\",{\"1\":{\"695\":3}}],[\"$vue\",{\"1\":{\"695\":6}}],[\"$options\",{\"1\":{\"694\":2}}],[\"$on\",{\"1\":{\"518\":1}}],[\"$slots\",{\"1\":{\"535\":1}}],[\"$store\",{\"1\":{\"410\":1,\"411\":1,\"412\":1,\"418\":4,\"519\":1}}],[\"$parent\",{\"0\":{\"516\":1},\"1\":{\"516\":3}}],[\"$listeners\",{\"0\":{\"515\":1},\"1\":{\"515\":6}}],[\"$attrs\",{\"0\":{\"515\":1},\"1\":{\"515\":6,\"535\":1}}],[\"$el\",{\"1\":{\"695\":4}}],[\"$emit\",{\"0\":{\"514\":1},\"1\":{\"510\":1,\"511\":3,\"512\":1,\"514\":2,\"515\":2,\"518\":1,\"535\":1}}],[\"$event\",{\"1\":{\"470\":1}}],[\"$nexttick\",{\"1\":{\"505\":1}}],[\"$red\",{\"1\":{\"1011\":2}}],[\"$refs\",{\"1\":{\"497\":3,\"505\":2,\"513\":1}}],[\"$root\",{\"0\":{\"521\":1},\"1\":{\"521\":3}}],[\"$router\",{\"1\":{\"432\":5,\"727\":1}}],[\"$router的两个api\",{\"1\":{\"432\":1}}],[\"$route\",{\"1\":{\"429\":2,\"430\":2}}],[\"$mount挂载元素\",{\"1\":{\"698\":1}}],[\"$mount\",{\"1\":{\"407\":1,\"424\":1,\"448\":1,\"518\":1}}],[\"$$typeof\",{\"1\":{\"252\":1,\"272\":2,\"319\":2,\"348\":2,\"352\":2,\"357\":3,\"361\":4}}],[\"$1\",{\"1\":{\"28\":1,\"695\":1,\"1391\":4}}],[\"$\",{\"0\":{\"1283\":1},\"1\":{\"17\":2,\"26\":6,\"28\":1,\"240\":1,\"272\":4,\"625\":1,\"662\":2,\"730\":1,\"797\":1,\"1161\":1,\"1282\":2,\"1283\":1,\"1284\":3,\"1286\":7,\"1287\":2,\"1289\":5,\"1290\":8,\"1291\":1,\"1294\":1,\"1295\":1,\"1296\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1319\":4,\"1320\":1,\"1325\":1,\"1327\":1,\"1328\":4,\"1329\":3,\"1330\":2,\"1332\":1,\"1333\":2,\"1335\":1,\"1336\":2,\"1386\":1}}],[\"的索引号\",{\"1\":{\"1456\":1}}],[\"的局部变量\",{\"1\":{\"1456\":1}}],[\"的局限性\",{\"0\":{\"853\":1}}],[\"的未来版本中可能定义的一些语法\",{\"1\":{\"1452\":1}}],[\"的后代\",{\"1\":{\"1436\":1}}],[\"的后缀\",{\"1\":{\"26\":1}}],[\"的具体指向以后会提到\",{\"1\":{\"1424\":1}}],[\"的顺序加载<\",{\"1\":{\"1419\":1}}],[\"的顺序依次判断\",{\"1\":{\"676\":1}}],[\"的属性\",{\"1\":{\"1403\":1}}],[\"的序列的字符串\",{\"1\":{\"1384\":3}}],[\"的逻辑与运算\",{\"1\":{\"1383\":1}}],[\"的开始位置到结尾的字串\",{\"1\":{\"1376\":1}}],[\"的开头是不是特殊字符\",{\"1\":{\"647\":1,\"654\":1}}],[\"的包装类指\",{\"1\":{\"1371\":1}}],[\"的指数\",{\"1\":{\"1370\":1}}],[\"的指向才是\",{\"1\":{\"452\":2}}],[\"的角度\",{\"1\":{\"1370\":1}}],[\"的平方根\",{\"1\":{\"1369\":1}}],[\"的平方根的倒数\",{\"1\":{\"1369\":1}}],[\"的对数\",{\"1\":{\"1369\":2}}],[\"的对象\",{\"1\":{\"534\":1,\"812\":1}}],[\"的对象元素中\",{\"1\":{\"437\":1}}],[\"的对象写法跳转到\",{\"1\":{\"430\":1}}],[\"的对象写法\",{\"1\":{\"430\":1}}],[\"的自然对数\",{\"1\":{\"1369\":2}}],[\"的自定义属性来代替\",{\"1\":{\"139\":1}}],[\"的顶级对象\",{\"1\":{\"1283\":1}}],[\"的含义要更大一些\",{\"1\":{\"1233\":1}}],[\"的二维数组\",{\"1\":{\"1218\":1}}],[\"的字符串\",{\"1\":{\"1376\":1,\"1384\":3}}],[\"的字符串长度\",{\"1\":{\"1202\":1}}],[\"的字符串解析出对象内部的属性值\",{\"1\":{\"626\":1}}],[\"的长度大于\",{\"1\":{\"1202\":1}}],[\"的增删改的相关操作\",{\"1\":{\"1094\":1}}],[\"的文本都是文本节点\",{\"1\":{\"1084\":1}}],[\"的文件\",{\"1\":{\"582\":1}}],[\"的处理机制中\",{\"1\":{\"1076\":1}}],[\"的设计者将这种耗时很长的任务先挂起\",{\"1\":{\"1076\":1}}],[\"的协议\",{\"1\":{\"1065\":1}}],[\"的路径部分\",{\"1\":{\"1065\":1}}],[\"的主机名\",{\"1\":{\"1065\":1}}],[\"的主要作用是接收\",{\"1\":{\"692\":1}}],[\"的主要作用就是循环\",{\"1\":{\"330\":1}}],[\"的主要应用场景是\",{\"1\":{\"112\":1}}],[\"的端口号\",{\"1\":{\"1065\":2}}],[\"的格式\",{\"1\":{\"1044\":1}}],[\"的格式化并不同\",{\"1\":{\"593\":1}}],[\"的发展前景更广阔\",{\"1\":{\"1028\":1}}],[\"的分支\",{\"1\":{\"1027\":1}}],[\"的分别做处理\",{\"1\":{\"648\":1}}],[\"的标题进行组合\",{\"1\":{\"1020\":1}}],[\"的条件判断写法较\",{\"1\":{\"1015\":1}}],[\"的计算语法相同\",{\"1\":{\"1014\":1}}],[\"的预处理框架\",{\"1\":{\"1007\":1}}],[\"的影响较大\",{\"1\":{\"1006\":1}}],[\"的缩进方式省去大括号和分号\",{\"1\":{\"1005\":1}}],[\"的超集\",{\"1\":{\"1004\":1}}],[\"的结合\",{\"1\":{\"995\":1}}],[\"的结构形式为\",{\"1\":{\"816\":1}}],[\"的前提下\",{\"1\":{\"966\":1}}],[\"的大小\",{\"1\":{\"966\":1}}],[\"的优点就是可以通过修改\",{\"1\":{\"963\":1}}],[\"的优势\",{\"0\":{\"544\":1,\"546\":1},\"1\":{\"543\":1}}],[\"的清晰度对比没有差距\",{\"1\":{\"955\":1}}],[\"的碎片化也加剧了\",{\"1\":{\"944\":1}}],[\"的性能一般\",{\"1\":{\"920\":1}}],[\"的集合\",{\"1\":{\"920\":1}}],[\"的样式\",{\"1\":{\"918\":1}}],[\"的样式文件\",{\"1\":{\"868\":1}}],[\"的引用\",{\"1\":{\"1093\":1}}],[\"的引用方式\",{\"1\":{\"918\":1}}],[\"的引入方式\",{\"0\":{\"865\":1}}],[\"的引入会使复用性变差\",{\"1\":{\"210\":1}}],[\"的引入\",{\"1\":{\"174\":1}}],[\"的频度偏小\",{\"1\":{\"909\":1}}],[\"的表单元素\",{\"1\":{\"873\":1}}],[\"的内存就会变成僵尸内存\",{\"1\":{\"843\":1}}],[\"的垃圾回收是通过\",{\"1\":{\"843\":1}}],[\"的观察者\",{\"1\":{\"842\":1}}],[\"的网络请求\",{\"1\":{\"841\":1}}],[\"的网络请求底层通过\",{\"1\":{\"839\":1}}],[\"的状态即为\",{\"1\":{\"840\":1}}],[\"的状态会发生变化\",{\"1\":{\"840\":1}}],[\"的底层核心类\",{\"1\":{\"838\":1}}],[\"的请求\",{\"1\":{\"827\":1}}],[\"的库\",{\"1\":{\"812\":1}}],[\"的异步是通过回调函数实现的\",{\"1\":{\"1076\":1}}],[\"的异步方法往往会出现错误和陷阱\",{\"1\":{\"799\":1}}],[\"的异步操作管理\",{\"1\":{\"780\":1}}],[\"的改变触发执⾏\",{\"1\":{\"797\":1}}],[\"的流式传递\",{\"1\":{\"790\":1}}],[\"的最终执行流向\",{\"1\":{\"787\":1}}],[\"的最大重定向数目\",{\"1\":{\"60\":1}}],[\"的因果关系\",{\"1\":{\"781\":1}}],[\"的source\",{\"1\":{\"779\":1}}],[\"的机制\",{\"1\":{\"779\":1}}],[\"的简单纯粹\",{\"1\":{\"779\":1}}],[\"的简写和完整写法\",{\"1\":{\"625\":1}}],[\"的中间件\",{\"1\":{\"779\":1}}],[\"的行为类似\",{\"1\":{\"770\":1}}],[\"的呈现\",{\"1\":{\"752\":1}}],[\"的书写流程\",{\"1\":{\"751\":1}}],[\"的唯一方法\",{\"1\":{\"748\":1}}],[\"的应用架构利用单向数据流组合\",{\"1\":{\"742\":1}}],[\"的动态添加路由原理都一样\",{\"1\":{\"729\":1}}],[\"的子节点\",{\"1\":{\"702\":1}}],[\"的子组件\",{\"1\":{\"92\":1,\"97\":1}}],[\"的步骤\",{\"1\":{\"695\":1}}],[\"的创建\",{\"0\":{\"694\":1}}],[\"的创建与\",{\"1\":{\"273\":1}}],[\"的尾部\",{\"1\":{\"676\":1}}],[\"的头部尾部都存在往中间不断缩进的指针\",{\"1\":{\"702\":1}}],[\"的头部\",{\"1\":{\"676\":1}}],[\"的层次结构\",{\"1\":{\"666\":1}}],[\"的源头\",{\"1\":{\"660\":1}}],[\"的源码进行解析\",{\"1\":{\"623\":1}}],[\"的源码不难看出\",{\"1\":{\"623\":1}}],[\"的源码\",{\"1\":{\"250\":1}}],[\"的产物\",{\"1\":{\"660\":1}}],[\"的第\",{\"1\":{\"650\":1}}],[\"的第三个元素\",{\"1\":{\"648\":2}}],[\"的第一项的值来做不同的处理\",{\"1\":{\"649\":1}}],[\"的第一项为\",{\"1\":{\"648\":1,\"651\":1}}],[\"的第一个元素相应的为\",{\"1\":{\"647\":1,\"654\":1}}],[\"的第一个参数是\",{\"1\":{\"500\":1}}],[\"的每一个\",{\"1\":{\"648\":1}}],[\"的概念\",{\"1\":{\"644\":1}}],[\"的爱好是\",{\"1\":{\"641\":1,\"653\":1}}],[\"的基准是相对于\",{\"1\":{\"963\":1}}],[\"的基本信息<\",{\"1\":{\"640\":1,\"641\":1,\"644\":1,\"653\":1}}],[\"的基础库中包含\",{\"1\":{\"125\":1}}],[\"的基础结构\",{\"1\":{\"41\":1}}],[\"的语法\",{\"1\":{\"1006\":1}}],[\"的语法糖\",{\"1\":{\"799\":1}}],[\"的语法也被\",{\"1\":{\"639\":1}}],[\"的语法扩展\",{\"1\":{\"248\":1}}],[\"的意思\",{\"1\":{\"639\":1}}],[\"的反正切值\",{\"1\":{\"1370\":1}}],[\"的反引号法\",{\"1\":{\"638\":1}}],[\"的反向代理实现跨域\",{\"1\":{\"28\":1}}],[\"的模板渲染方法才能有更深刻的认知\",{\"1\":{\"637\":1}}],[\"的模板和数据绑定技术\",{\"1\":{\"403\":1}}],[\"的调整如下\",{\"1\":{\"635\":1}}],[\"的调用顺序\",{\"1\":{\"272\":1}}],[\"的调用\",{\"1\":{\"272\":1,\"636\":1}}],[\"的栈数组\",{\"1\":{\"635\":1}}],[\"的栈地址都指向同一个对象\",{\"1\":{\"451\":1}}],[\"的关键方法\",{\"1\":{\"628\":1}}],[\"的关系\",{\"0\":{\"74\":1}}],[\"的原型对象\",{\"1\":{\"1442\":1}}],[\"的原型没有原型\",{\"1\":{\"1438\":1}}],[\"的原型\",{\"1\":{\"1438\":1}}],[\"的原型方法\",{\"1\":{\"1402\":1}}],[\"的原型方法$watch\",{\"1\":{\"628\":1}}],[\"的原型方法$watch方法\",{\"1\":{\"628\":1}}],[\"的原因\",{\"1\":{\"639\":1}}],[\"的原理\",{\"0\":{\"161\":1}}],[\"的监听器\",{\"1\":{\"625\":1}}],[\"的理解\",{\"1\":{\"623\":1}}],[\"的效果\",{\"1\":{\"623\":1,\"995\":1}}],[\"的联动处理依靠全局唯一变量\",{\"1\":{\"621\":1}}],[\"的响应式变化\",{\"1\":{\"700\":1}}],[\"的响应式数据效果\",{\"1\":{\"623\":1}}],[\"的响应式对象初始化时\",{\"1\":{\"620\":1,\"621\":1}}],[\"的响应式原理由数据劫持系统和订阅\",{\"1\":{\"620\":1}}],[\"的依赖收集器\",{\"1\":{\"700\":1}}],[\"的依赖收集\",{\"1\":{\"628\":1}}],[\"的依赖收集储存\",{\"1\":{\"621\":1}}],[\"的依赖收集与更新回调\",{\"1\":{\"610\":1}}],[\"的依赖发生变化时触发\",{\"1\":{\"608\":1}}],[\"的依赖值变化的特性\",{\"1\":{\"204\":1}}],[\"的剩余代码\",{\"1\":{\"604\":3}}],[\"的特性\",{\"1\":{\"593\":1}}],[\"的特性仍然不变\",{\"1\":{\"223\":1}}],[\"的方式\",{\"1\":{\"1443\":1}}],[\"的方式只能设置参数类型\",{\"1\":{\"587\":1}}],[\"的方法\",{\"1\":{\"273\":1,\"411\":1}}],[\"的类型做判断\",{\"1\":{\"625\":1}}],[\"的类型\",{\"1\":{\"586\":1,\"754\":1}}],[\"的编译与\",{\"1\":{\"663\":1}}],[\"的编译时语法糖\",{\"1\":{\"584\":1}}],[\"的编写\",{\"1\":{\"128\":1,\"485\":1}}],[\"的入口\",{\"1\":{\"584\":1}}],[\"的变量\",{\"1\":{\"578\":1,\"1224\":1}}],[\"的变化\",{\"1\":{\"213\":1}}],[\"的假设\",{\"1\":{\"564\":1}}],[\"的生命周期选项和组合式\",{\"1\":{\"585\":1}}],[\"的生命周期钩子\",{\"1\":{\"542\":1}}],[\"的生命周期图示\",{\"1\":{\"542\":1}}],[\"的参数\",{\"1\":{\"535\":1}}],[\"的配置项来理解\",{\"1\":{\"628\":1,\"636\":1}}],[\"的配置\",{\"1\":{\"534\":1,\"590\":1}}],[\"的配置对象\",{\"1\":{\"32\":1,\"418\":1}}],[\"的解决方案\",{\"1\":{\"531\":1}}],[\"的解构\",{\"1\":{\"103\":1}}],[\"的修饰符\",{\"1\":{\"525\":1,\"563\":1}}],[\"的提升\",{\"0\":{\"524\":1}}],[\"的回调实现数据影响视图\",{\"1\":{\"695\":1}}],[\"的回调\",{\"1\":{\"608\":1}}],[\"的回调数组中只存在唯一一个\",{\"1\":{\"505\":1}}],[\"的回调函数执行会推入到执行队列\",{\"1\":{\"700\":1}}],[\"的回调函数\",{\"1\":{\"103\":1,\"608\":1,\"625\":1,\"628\":1}}],[\"的元素\",{\"1\":{\"1286\":2,\"1289\":1}}],[\"的元素字体变红切换\",{\"1\":{\"475\":1}}],[\"的元素进行\",{\"1\":{\"68\":1}}],[\"的双向绑定\",{\"1\":{\"468\":1,\"512\":1}}],[\"的初始值是数组\",{\"1\":{\"465\":1}}],[\"的初始值是非数组\",{\"1\":{\"465\":1}}],[\"的所有词\",{\"1\":{\"1384\":1}}],[\"的所有构建版本中\",{\"1\":{\"701\":1}}],[\"的所有子节点不会解析\",{\"1\":{\"458\":1}}],[\"的所有顶点\",{\"1\":{\"266\":1}}],[\"的组件化和虚拟\",{\"1\":{\"403\":1}}],[\"的组合\",{\"1\":{\"142\":1,\"186\":1}}],[\"的代码块加载完毕之后\",{\"1\":{\"1420\":1}}],[\"的代码示例\",{\"1\":{\"388\":1}}],[\"的代码才能运行\",{\"1\":{\"125\":1}}],[\"的浏览器兼容性比较差\",{\"1\":{\"388\":1}}],[\"的副作用函数中操作\",{\"1\":{\"365\":1}}],[\"的纯函数式世界通往命令式世界的逃生通道\",{\"1\":{\"365\":1}}],[\"的函数即可\",{\"1\":{\"830\":1}}],[\"的函数以及\",{\"1\":{\"828\":1}}],[\"的函数\",{\"1\":{\"416\":1,\"417\":1,\"628\":1,\"636\":1,\"721\":1,\"835\":1}}],[\"的函数会在组件渲染到屏幕之后执行\",{\"1\":{\"365\":1}}],[\"的函数组件中调用\",{\"1\":{\"178\":1}}],[\"的一致性\",{\"1\":{\"365\":1}}],[\"的范畴\",{\"1\":{\"342\":1}}],[\"的核心设计之一就是基于虚拟\",{\"1\":{\"341\":1}}],[\"的使用是通过传递\",{\"1\":{\"588\":1}}],[\"的使用\",{\"1\":{\"339\":1}}],[\"的执行环境\",{\"1\":{\"1423\":1}}],[\"的执行原理是\",{\"1\":{\"621\":1}}],[\"的执行流程与\",{\"1\":{\"339\":1}}],[\"的执行器参数必须是一个函数\",{\"1\":{\"71\":1}}],[\"的已有的\",{\"1\":{\"323\":1}}],[\"的过程叫做隐式迭代\",{\"1\":{\"1288\":1}}],[\"的过程与\",{\"1\":{\"339\":1}}],[\"的过程\",{\"1\":{\"323\":2}}],[\"的控制台输出结果\",{\"1\":{\"313\":1,\"323\":1}}],[\"的缓存值和派发函数\",{\"1\":{\"313\":1}}],[\"的数字\",{\"1\":{\"950\":3}}],[\"的数据动态绑定就是通过这个方法实现的\",{\"1\":{\"1407\":1}}],[\"的数据获取库\",{\"1\":{\"824\":1}}],[\"的数据流方案\",{\"1\":{\"819\":1}}],[\"的数据变化表现为脏读\",{\"1\":{\"700\":1}}],[\"的数据变化语法为\",{\"1\":{\"596\":2}}],[\"的数据更新原理\",{\"1\":{\"593\":1}}],[\"的数据\",{\"1\":{\"517\":1,\"519\":1,\"721\":1,\"825\":1}}],[\"的数据状态管理功能\",{\"1\":{\"303\":1}}],[\"的数组\",{\"1\":{\"313\":1,\"323\":2,\"648\":1,\"816\":1,\"1225\":1,\"1226\":1,\"1353\":2}}],[\"的节点和\",{\"1\":{\"296\":1}}],[\"的形式绑定响应函数\",{\"1\":{\"1129\":1}}],[\"的形式出现\",{\"1\":{\"855\":1}}],[\"的形式触发\",{\"1\":{\"277\":1}}],[\"的形式去写\",{\"1\":{\"123\":1}}],[\"的完整的可插入式合成事件系统\",{\"1\":{\"277\":1}}],[\"的转移\",{\"0\":{\"561\":1}}],[\"的转化正式完成\",{\"1\":{\"274\":1}}],[\"的转换方法jsx\",{\"1\":{\"249\":1}}],[\"的挂载添加操作\",{\"1\":{\"273\":1}}],[\"的任务执行时间节点发生在\",{\"1\":{\"273\":1}}],[\"的循环本质上是自递归调用\",{\"1\":{\"1016\":1}}],[\"的循环\",{\"1\":{\"272\":1}}],[\"的$$typeof为原生组件类型\",{\"1\":{\"272\":1}}],[\"的根节点时也会执行\",{\"1\":{\"272\":1}}],[\"的其他顶点\",{\"1\":{\"266\":1}}],[\"的构造函数也会调用\",{\"1\":{\"843\":1}}],[\"的构造函数来创建\",{\"1\":{\"67\":1}}],[\"的构建\",{\"1\":{\"266\":1}}],[\"的思路\",{\"1\":{\"263\":1}}],[\"的话\",{\"1\":{\"259\":1}}],[\"的输出方法代码\",{\"1\":{\"250\":1}}],[\"的约定即传递\",{\"1\":{\"235\":1}}],[\"的data\",{\"1\":{\"234\":1}}],[\"的名\",{\"1\":{\"1013\":1}}],[\"的名字是不固定的\",{\"1\":{\"229\":1}}],[\"的名称\",{\"1\":{\"54\":1,\"747\":1}}],[\"的情况最为复杂\",{\"1\":{\"692\":1}}],[\"的情况下\",{\"1\":{\"272\":1}}],[\"的情况执行更新\",{\"1\":{\"272\":1}}],[\"的情况\",{\"0\":{\"220\":1},\"1\":{\"272\":3,\"676\":1}}],[\"的immediate\",{\"1\":{\"200\":1}}],[\"的当前值\",{\"1\":{\"192\":1}}],[\"的返回值状态取决于返回值的状态\",{\"1\":{\"1177\":1}}],[\"的返回值是\",{\"1\":{\"1174\":1}}],[\"的返回值为\",{\"1\":{\"273\":1}}],[\"的返回值将结束\",{\"1\":{\"272\":1}}],[\"的返回值\",{\"1\":{\"192\":1,\"272\":1,\"625\":1}}],[\"的父组件可以调用\",{\"1\":{\"191\":1}}],[\"的操作步骤\",{\"1\":{\"753\":1}}],[\"的操作实现\",{\"1\":{\"595\":1}}],[\"的操作均有效\",{\"1\":{\"479\":1}}],[\"的操作不奏效\",{\"1\":{\"479\":1}}],[\"的操作\",{\"1\":{\"184\":1}}],[\"的更新触发\",{\"1\":{\"796\":1}}],[\"的更新函数不存在\",{\"1\":{\"505\":1}}],[\"的更新粒度是组件级别的\",{\"1\":{\"257\":1}}],[\"的更新\",{\"1\":{\"174\":1,\"273\":1,\"480\":1}}],[\"的写法\",{\"1\":{\"160\":1,\"812\":1}}],[\"的作用域跟\",{\"1\":{\"1012\":1}}],[\"的作用\",{\"0\":{\"125\":1},\"1\":{\"161\":1,\"461\":1,\"759\":1}}],[\"的虚拟节点从创建到上树的过程\",{\"1\":{\"667\":1}}],[\"的虚拟\",{\"1\":{\"120\":1}}],[\"的键值对放进事件对象中\",{\"1\":{\"116\":1}}],[\"的实际开发中\",{\"1\":{\"634\":1}}],[\"的实际效果\",{\"1\":{\"262\":1}}],[\"的实质为\",{\"1\":{\"249\":1}}],[\"的实现中都可以使用\",{\"1\":{\"1339\":1}}],[\"的实现了\",{\"1\":{\"780\":1}}],[\"的实现原理就是递归的触发数组或对象的\",{\"1\":{\"627\":1}}],[\"的实现和\",{\"1\":{\"524\":1}}],[\"的实现在支持\",{\"1\":{\"103\":1}}],[\"的实现\",{\"1\":{\"103\":1,\"635\":1}}],[\"的实例对象都会继承\",{\"1\":{\"1402\":1}}],[\"的实例对象\",{\"1\":{\"537\":1,\"609\":1,\"615\":1,\"635\":1}}],[\"的实例\",{\"1\":{\"74\":2,\"605\":2}}],[\"的列表\",{\"1\":{\"96\":1}}],[\"的时代\",{\"1\":{\"1006\":1}}],[\"的时机有两处\",{\"1\":{\"843\":1}}],[\"的时候自动调用\",{\"1\":{\"1431\":1}}],[\"的时候都需要使用\",{\"1\":{\"103\":1}}],[\"的时候\",{\"1\":{\"92\":1,\"272\":1,\"273\":1,\"457\":1,\"656\":1,\"1403\":1}}],[\"的时间\",{\"1\":{\"48\":1}}],[\"的问题\",{\"1\":{\"89\":1,\"231\":1,\"439\":1,\"474\":1}}],[\"的区别是增加了判断\",{\"1\":{\"396\":1}}],[\"的区别\",{\"0\":{\"75\":1,\"257\":1,\"793\":1},\"1\":{\"1108\":1}}],[\"的值做比较\",{\"1\":{\"1269\":1}}],[\"的值指定为5px\",{\"1\":{\"1013\":1}}],[\"的值进行计算\",{\"1\":{\"197\":1}}],[\"的值没有改变\",{\"1\":{\"98\":1}}],[\"的值\",{\"1\":{\"71\":1,\"601\":1,\"636\":2,\"650\":2,\"657\":2,\"1108\":1,\"1163\":1,\"1364\":2}}],[\"的值的\",{\"1\":{\"54\":1}}],[\"的判断以及\",{\"1\":{\"67\":1}}],[\"的\",{\"0\":{\"17\":1,\"18\":1},\"1\":{\"26\":2,\"71\":1,\"85\":2,\"92\":1,\"119\":1,\"121\":1,\"161\":1,\"182\":1,\"184\":1,\"192\":2,\"213\":1,\"216\":1,\"237\":1,\"249\":2,\"257\":2,\"262\":1,\"266\":1,\"272\":3,\"273\":1,\"274\":2,\"278\":1,\"287\":1,\"323\":5,\"332\":1,\"341\":1,\"353\":1,\"358\":1,\"366\":1,\"451\":1,\"461\":1,\"465\":2,\"505\":1,\"516\":1,\"536\":2,\"537\":1,\"557\":1,\"560\":2,\"578\":3,\"602\":1,\"608\":1,\"625\":1,\"626\":1,\"628\":1,\"634\":1,\"635\":2,\"636\":1,\"639\":1,\"644\":1,\"692\":1,\"696\":1,\"752\":1,\"790\":1,\"841\":1,\"845\":1,\"863\":1,\"876\":1,\"908\":1,\"955\":1,\"966\":1,\"1005\":1,\"1111\":1,\"1115\":2,\"1206\":1,\"1279\":1,\"1283\":1,\"1370\":1,\"1381\":1,\"1406\":1}}],[\"则覆盖原属性为一个函数表达式\",{\"1\":{\"1429\":1}}],[\"则添加\",{\"1\":{\"1429\":1}}],[\"则忽略该变量声明\",{\"1\":{\"1423\":1}}],[\"则忽略该属性\",{\"1\":{\"1021\":1}}],[\"则在该变量对象以变量名建立一个属性\",{\"1\":{\"1423\":1}}],[\"则在该变量对象以函数名建立一个属性\",{\"1\":{\"1423\":1}}],[\"则在一个字符串中的指定位置从后向前搜索\",{\"1\":{\"1366\":1}}],[\"则对该值使用\",{\"1\":{\"1413\":3}}],[\"则对象中的属性\",{\"1\":{\"534\":1}}],[\"则改为调用对象自身的\",{\"1\":{\"1413\":1}}],[\"则转为数值\",{\"1\":{\"1413\":1}}],[\"则必须使用下面方式\",{\"1\":{\"1391\":1}}],[\"则必须加引号\",{\"1\":{\"1341\":1}}],[\"则要提取的子串包括\",{\"1\":{\"1376\":1}}],[\"则该参数规定的是从字符串的尾部开始算起的位置\",{\"1\":{\"1376\":1}}],[\"则该函数默认是getter\",{\"1\":{\"631\":1}}],[\"则认为两个元素相等\",{\"1\":{\"1364\":1}}],[\"则元素位置不变\",{\"1\":{\"1364\":1}}],[\"则元素会交换位置\",{\"1\":{\"1364\":1}}],[\"则默认使用\",{\"1\":{\"1362\":1}}],[\"则默认值是\",{\"1\":{\"1048\":1}}],[\"则从后往前计算\",{\"1\":{\"1359\":1}}],[\"则变量不会被声明提前\",{\"1\":{\"1349\":1}}],[\"则没有对应实参的形参将是\",{\"1\":{\"1344\":1}}],[\"则没有限制\",{\"1\":{\"1062\":1}}],[\"则与该\",{\"1\":{\"1269\":1}}],[\"则取值第二个\",{\"1\":{\"1263\":1}}],[\"则取值\",{\"1\":{\"1263\":1}}],[\"则再执行一次展平操作\",{\"1\":{\"1221\":1}}],[\"则返回其第一次出现的索引\",{\"1\":{\"1375\":1}}],[\"则返回其第一次出现的数组元素索引\",{\"1\":{\"1365\":1}}],[\"则返回\",{\"1\":{\"1201\":1,\"1202\":1,\"1438\":1}}],[\"则输入的内容\",{\"1\":{\"1151\":1}}],[\"则事件无触发\",{\"1\":{\"1129\":1}}],[\"则获取默认值\",{\"1\":{\"1106\":1}}],[\"则获取对象上面的get函数\",{\"1\":{\"631\":1}}],[\"则停止对应定时器\",{\"1\":{\"1063\":1}}],[\"则视频在页面加载时进行加载\",{\"1\":{\"1021\":1}}],[\"则视频在就绪后马上播放\",{\"1\":{\"1021\":1}}],[\"则当媒介文件完成播放后再次开始播放\",{\"1\":{\"1021\":1}}],[\"则向用户显示控件\",{\"1\":{\"1021\":1}}],[\"则允许一个以上的值\",{\"1\":{\"1019\":1}}],[\"则按照书写顺序\",{\"1\":{\"996\":1}}],[\"则以最近一级的有定位祖先元素为参考点移动位置\",{\"1\":{\"993\":1}}],[\"则以浏览器为准定位\",{\"1\":{\"993\":1}}],[\"则他们会按照属性值一行内显示并且顶端对齐排列\",{\"1\":{\"978\":1}}],[\"则此时\",{\"1\":{\"969\":1}}],[\"则整个表达式返回\",{\"1\":{\"1201\":1}}],[\"则整个\",{\"1\":{\"964\":1}}],[\"则整个回调函数仅在第一次\",{\"1\":{\"186\":1}}],[\"则还必须指定媒体类型\",{\"1\":{\"964\":2}}],[\"则换成\",{\"1\":{\"963\":1}}],[\"则换成了\",{\"1\":{\"588\":1}}],[\"则跳转至移动端页面\",{\"1\":{\"957\":1}}],[\"则判断下一位数值\",{\"1\":{\"932\":1}}],[\"则子元素继承父元素行高\",{\"1\":{\"931\":1}}],[\"则隐藏超出的内容\",{\"1\":{\"926\":1}}],[\"则this\",{\"1\":{\"823\":1}}],[\"则挂载对应组件\",{\"1\":{\"712\":1}}],[\"则到指定阶段时必定会调用\",{\"1\":{\"703\":1}}],[\"则通过\",{\"1\":{\"702\":1}}],[\"则说明是新项\",{\"1\":{\"683\":1,\"691\":1}}],[\"则属于新节点的指针范围内的子节点全部\",{\"1\":{\"676\":1}}],[\"则属于旧节点的指针范围内的子节点对象全部删除\",{\"1\":{\"676\":1}}],[\"则指针\",{\"1\":{\"661\":1}}],[\"则将\",{\"1\":{\"661\":1}}],[\"则将标签转为\",{\"1\":{\"123\":1}}],[\"则根据\",{\"1\":{\"649\":1}}],[\"则最终打印输出的\",{\"1\":{\"644\":1}}],[\"则直接对该值使用\",{\"1\":{\"1413\":1}}],[\"则直接返回\",{\"1\":{\"636\":1}}],[\"则直接重新执行回调\",{\"1\":{\"541\":1}}],[\"则调用\",{\"1\":{\"636\":1}}],[\"则加入这个dep实例\",{\"1\":{\"635\":1}}],[\"则表示开启深度监听\",{\"1\":{\"628\":1}}],[\"则自动执行一次\",{\"1\":{\"628\":1}}],[\"则自行执行一次\",{\"1\":{\"625\":1}}],[\"则会被新的引用覆盖掉\",{\"1\":{\"1423\":1}}],[\"则会被取消\",{\"1\":{\"763\":1}}],[\"则会忽略这\",{\"1\":{\"1415\":1}}],[\"则会输出默认的消息\",{\"1\":{\"1269\":1}}],[\"则会循环添加\",{\"1\":{\"1202\":1}}],[\"则会获取到真实值\",{\"1\":{\"1106\":1}}],[\"则会new\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"则会去调用该属性的\",{\"1\":{\"71\":1}}],[\"则为\",{\"1\":{\"601\":2}}],[\"则是样式属性书写错误\",{\"1\":{\"940\":1}}],[\"则是描述一个对象的形状\",{\"1\":{\"580\":1}}],[\"则是在触发\",{\"1\":{\"621\":1}}],[\"则是在\",{\"1\":{\"376\":1}}],[\"则需要宽高减去边框厚度\",{\"1\":{\"909\":1}}],[\"则需要引入\",{\"1\":{\"702\":1}}],[\"则需要使用类型声明的方式\",{\"1\":{\"587\":1}}],[\"则需要将\",{\"1\":{\"578\":1}}],[\"则需要<transition\",{\"1\":{\"508\":1}}],[\"则强制开启了深度监视\",{\"1\":{\"540\":1}}],[\"则无法正确获得oldvalue\",{\"1\":{\"540\":1}}],[\"则可以自定义渲染内容\",{\"1\":{\"534\":1}}],[\"则可以复用老节\",{\"1\":{\"354\":1}}],[\"则地址会被标记为不合法\",{\"1\":{\"439\":1}}],[\"则把路由收到的所有params参数通过props传给detail组件\",{\"1\":{\"431\":1}}],[\"则不做任何修改\",{\"1\":{\"1429\":1}}],[\"则不会添加\",{\"1\":{\"1098\":1}}],[\"则不会\",{\"1\":{\"1091\":1}}],[\"则不执行\",{\"1\":{\"1063\":1}}],[\"则不是新项目\",{\"1\":{\"683\":1,\"691\":1}}],[\"则不能使用\",{\"1\":{\"430\":1}}],[\"则不需要清除浮动\",{\"1\":{\"983\":1}}],[\"则不需要再继续执行\",{\"1\":{\"395\":1}}],[\"则不需要更新\",{\"1\":{\"333\":1}}],[\"则老fiber对应的dom节点需要移动\",{\"1\":{\"361\":1}}],[\"则进行节点移动的逻辑\",{\"1\":{\"354\":1}}],[\"则workinprogress赋值兄弟节点\",{\"1\":{\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"则错误会向最近的上层错误边界冒泡\",{\"1\":{\"242\":1}}],[\"则生成新的真实\",{\"1\":{\"161\":1,\"461\":1}}],[\"则报错\",{\"1\":{\"123\":2,\"1350\":1}}],[\"则组件不会触发\",{\"1\":{\"98\":1}}],[\"则\",{\"1\":{\"15\":1,\"71\":1,\"602\":1,\"966\":1,\"1277\":1,\"1420\":1}}],[\"超链接标签\",{\"0\":{\"1041\":1}}],[\"超级链接文本\",{\"1\":{\"1026\":1}}],[\"超越文本限制\",{\"1\":{\"1026\":1}}],[\"超文本的含义\",{\"1\":{\"1026\":1}}],[\"超文本传输协议\",{\"1\":{\"6\":1}}],[\"超出自动显示滚动条\",{\"1\":{\"914\":1}}],[\"超出的部分隐藏\",{\"1\":{\"914\":1}}],[\"超出部分隐藏\",{\"1\":{\"914\":1}}],[\"超过其指定高度及宽度时\",{\"1\":{\"914\":1}}],[\"超时时间\",{\"1\":{\"395\":1}}],[\"超时响应事件\",{\"1\":{\"15\":1}}],[\"超时设置\",{\"0\":{\"15\":1}}],[\"后边的去前边\",{\"1\":{\"1363\":1}}],[\"后自增\",{\"1\":{\"1258\":1}}],[\"后赋值参与运算\",{\"1\":{\"1258\":1}}],[\"后一个对象会覆盖掉前一个对象的重名属性\",{\"1\":{\"1184\":1}}],[\"后绑定先执行\",{\"1\":{\"1130\":1}}],[\"后缀结尾\",{\"1\":{\"1025\":1}}],[\"后缀加上\",{\"1\":{\"14\":1}}],[\"后有样式的原则\",{\"1\":{\"1001\":1}}],[\"后来者居上\",{\"1\":{\"996\":1}}],[\"后期学习\",{\"1\":{\"966\":1}}],[\"后期可以制作视差滚动效果\",{\"1\":{\"906\":1}}],[\"后期也可以返回一个\",{\"1\":{\"534\":1}}],[\"后写\",{\"1\":{\"873\":1}}],[\"后代选择\",{\"1\":{\"1290\":1}}],[\"后代选择器又称为包含选择器\",{\"1\":{\"870\":1}}],[\"后代选择器\",{\"0\":{\"870\":1},\"1\":{\"869\":1,\"873\":1,\"1287\":1}}],[\"后代元素触发时\",{\"1\":{\"1127\":1}}],[\"后代组件中的数据不会改变\",{\"1\":{\"517\":1}}],[\"后代组件可以订阅到\",{\"1\":{\"215\":1}}],[\"后台管理系统中根据后端数据动态生成导航菜单\",{\"1\":{\"739\":1}}],[\"后台节点创建\",{\"1\":{\"272\":1}}],[\"后就移动尾指针\",{\"1\":{\"678\":1}}],[\"后指针\",{\"1\":{\"676\":1}}],[\"后进先出\",{\"1\":{\"661\":1,\"1423\":1}}],[\"后入栈\",{\"1\":{\"635\":1}}],[\"后再执行\",{\"1\":{\"621\":1}}],[\"后其他声明会失效\",{\"1\":{\"583\":1}}],[\"后置守卫\",{\"1\":{\"437\":1}}],[\"后退\",{\"1\":{\"432\":1}}],[\"后端处理\",{\"1\":{\"430\":1}}],[\"后端路由\",{\"1\":{\"423\":1}}],[\"后\",{\"1\":{\"272\":1,\"283\":1,\"847\":1}}],[\"后续功能不会修改该对象中的属性\",{\"1\":{\"554\":1}}],[\"后续的虚拟\",{\"1\":{\"272\":1}}],[\"后续更新才触发的函数\",{\"1\":{\"200\":1}}],[\"后面的字符可以引用前面的表达式分组\",{\"1\":{\"1391\":1}}],[\"后面的盒子仍然以标准流的方式对待它\",{\"1\":{\"992\":1}}],[\"后面会覆盖前边\",{\"1\":{\"1129\":1}}],[\"后面会有render函数构建虚拟dom\",{\"1\":{\"694\":1}}],[\"后面通过css设置\",{\"1\":{\"1048\":1}}],[\"后面紧跟\",{\"1\":{\"1013\":1}}],[\"后面紧跟变量名和变量值\",{\"1\":{\"1011\":1}}],[\"后面紧跟类名\",{\"1\":{\"862\":1}}],[\"后面应用极其广泛\",{\"1\":{\"914\":1}}],[\"后面必须是\",{\"1\":{\"908\":1}}],[\"后面渲染前再映射\",{\"1\":{\"731\":1}}],[\"后面删除\",{\"1\":{\"682\":1}}],[\"后面新增\",{\"1\":{\"682\":1}}],[\"后面\",{\"1\":{\"682\":1}}],[\"后面再考虑实现优先队列\",{\"1\":{\"272\":1,\"395\":1}}],[\"后面数组中的函数必须返回一个字符串\",{\"1\":{\"42\":1}}],[\"后面添加的一些方法\",{\"1\":{\"75\":1}}],[\"后面添加\",{\"1\":{\"10\":1}}],[\"后若没有无响应数据返回\",{\"1\":{\"15\":1}}],[\"以方法的形式调用时\",{\"1\":{\"1446\":1}}],[\"以函数的形式调用时\",{\"1\":{\"1446\":1}}],[\"以构造函数调用\",{\"1\":{\"1438\":1}}],[\"以提示它为\",{\"1\":{\"1381\":1}}],[\"以提高并发性能\",{\"1\":{\"831\":1}}],[\"以介于\",{\"1\":{\"1370\":1}}],[\"以文档为准\",{\"1\":{\"1325\":1}}],[\"以对象形式传递\",{\"1\":{\"1308\":1}}],[\"以对象形式传入\",{\"1\":{\"811\":1}}],[\"以毫秒计\",{\"1\":{\"1063\":1}}],[\"以引用文件所在位置为参考基础\",{\"1\":{\"1045\":1}}],[\"以谁为基准点移动位置\",{\"1\":{\"999\":1}}],[\"以浏览器的可视窗口为参照点移动元素\",{\"1\":{\"994\":1,\"995\":1}}],[\"以适应不同终端\",{\"1\":{\"958\":1}}],[\"以使宽度和高度完全适应内容区域\",{\"1\":{\"954\":1}}],[\"以使背景图像完全覆盖背景区域\",{\"1\":{\"954\":1}}],[\"以使测试更轻松\",{\"1\":{\"50\":1}}],[\"以阿里巴巴矢量图库引用为例展示三种引用方式\",{\"1\":{\"917\":1}}],[\"以什么方式进行显示\",{\"1\":{\"875\":1}}],[\"以单一对象存储在\",{\"1\":{\"744\":1}}],[\"以此实现全尺寸属性的比例化\",{\"1\":{\"966\":1}}],[\"以此实现广度优先下最优时间复杂度的更新算法\",{\"1\":{\"702\":1}}],[\"以此将同步与异步操作分开维护\",{\"1\":{\"757\":1}}],[\"以此类推一直找到\",{\"1\":{\"1442\":1}}],[\"以此类推\",{\"1\":{\"10\":1,\"932\":1,\"1376\":2}}],[\"以便设计更灵活的匹配模式\",{\"1\":{\"1382\":1}}],[\"以便转译为普通字符使用\",{\"1\":{\"1381\":1}}],[\"以便于普通字符进行区别\",{\"1\":{\"1381\":1}}],[\"以便在浏览器中打印查看\",{\"1\":{\"644\":1}}],[\"以便我们能看到\",{\"1\":{\"272\":1}}],[\"以实现\",{\"1\":{\"628\":1}}],[\"以触发\",{\"1\":{\"626\":1}}],[\"以保证在其他闭包函数中对实例的正确引用\",{\"1\":{\"621\":1}}],[\"以上的版本浏览器中才会被支持\",{\"1\":{\"1452\":1}}],[\"以上的标准决定了\",{\"1\":{\"816\":1}}],[\"以上内容都会被保存在变量对象中\",{\"1\":{\"1424\":1}}],[\"以上三类代码\",{\"1\":{\"1034\":1}}],[\"以上效果\",{\"1\":{\"987\":1}}],[\"以上方法是让块级元素水平居中\",{\"1\":{\"970\":1}}],[\"以上均为移动端浏览器\",{\"1\":{\"943\":1}}],[\"以上条件在循环中按照\",{\"1\":{\"676\":1}}],[\"以上\",{\"1\":{\"676\":1}}],[\"以上返回值均为\",{\"1\":{\"558\":1}}],[\"以上组件为封装后可跟随鼠标移动更新鼠标位置信息文本的组件\",{\"1\":{\"228\":1}}],[\"以上组件实现的效果是\",{\"1\":{\"227\":1}}],[\"以其他方式实现的方案不记录在此\",{\"1\":{\"509\":1}}],[\"以后的setter更新\",{\"1\":{\"635\":1}}],[\"以后简称vc\",{\"1\":{\"489\":1}}],[\"以后数据的改变不会引起\",{\"1\":{\"474\":1}}],[\"以该组件为例\",{\"1\":{\"236\":1}}],[\"以官方文档的鼠标跟踪\",{\"1\":{\"226\":1}}],[\"以避免异步渲染可能存在的问题\",{\"1\":{\"169\":1}}],[\"以类式组件的创建流程为例\",{\"1\":{\"165\":1}}],[\"以组件作为更新单位\",{\"1\":{\"162\":1}}],[\"以下实例中\",{\"1\":{\"1350\":1}}],[\"以下不支持\",{\"1\":{\"1088\":2,\"1092\":1,\"1106\":1,\"1123\":1}}],[\"以下浏览器\",{\"1\":{\"1087\":1}}],[\"以下内容取自阿里巴巴矢量库使用帮助\",{\"1\":{\"917\":1}}],[\"以下称双端比较法\",{\"1\":{\"692\":1}}],[\"以下弹窗例子以\",{\"1\":{\"588\":1}}],[\"以下为\",{\"1\":{\"475\":1}}],[\"以下面这张节点图为例\",{\"1\":{\"358\":1}}],[\"以下是简化流程图\",{\"1\":{\"698\":1}}],[\"以下是vuecomponent关系图谱\",{\"1\":{\"489\":1}}],[\"以下是一个暴露响应式宽高数据和获取窗口宽高方法的\",{\"1\":{\"543\":1}}],[\"以下是一个实现了\",{\"1\":{\"262\":1}}],[\"以下是一个\",{\"1\":{\"239\":1,\"388\":1,\"822\":1}}],[\"以下是祖孙组件通信切换\",{\"1\":{\"192\":1}}],[\"以下是\",{\"1\":{\"160\":1,\"323\":2,\"542\":1,\"667\":1}}],[\"以下配置省略\",{\"1\":{\"28\":1}}],[\"以内联函数的方式定义\",{\"1\":{\"156\":1}}],[\"以\",{\"1\":{\"123\":1,\"442\":1,\"530\":3,\"534\":1,\"603\":1,\"702\":1,\"848\":1,\"966\":1}}],[\"以标签的语法解析\",{\"1\":{\"123\":1}}],[\"以及从e~z之间的任意字符\",{\"1\":{\"1382\":1}}],[\"以及字符串对象的\",{\"1\":{\"1391\":1}}],[\"以及字符串\",{\"1\":{\"1275\":1}}],[\"以及每个行模块中的列模块\",{\"1\":{\"1001\":1}}],[\"以及版面的布局和外观显示样式\",{\"1\":{\"854\":1}}],[\"以及一系列状态变化回调函数\",{\"1\":{\"839\":1}}],[\"以及缺省的遍历查找方法\",{\"1\":{\"692\":1}}],[\"以及标签堆栈和内容堆栈的数据变化进行\",{\"1\":{\"661\":1}}],[\"以及考虑数组的嵌套\",{\"1\":{\"658\":1}}],[\"以及更低版本浏览器的原因\",{\"1\":{\"593\":1}}],[\"以及后续路由跳转也有用到\",{\"1\":{\"427\":1}}],[\"以及剩余\",{\"1\":{\"358\":1}}],[\"以及其他杂牌浏览器\",{\"1\":{\"943\":1}}],[\"以及其他\",{\"1\":{\"176\":1}}],[\"以及\",{\"1\":{\"12\":1,\"779\":1,\"966\":1}}],[\"ln10\",{\"1\":{\"1369\":1}}],[\"ln2\",{\"1\":{\"1369\":1}}],[\"lh26\",{\"1\":{\"938\":1}}],[\"lvha\",{\"1\":{\"873\":1}}],[\"l\",{\"1\":{\"603\":2,\"604\":2,\"609\":2,\"610\":2,\"617\":2,\"1016\":1}}],[\"label>\",{\"1\":{\"1057\":1}}],[\"lang>\",{\"0\":{\"1033\":1}}],[\"languagepack\",{\"1\":{\"1031\":1}}],[\"language\",{\"1\":{\"1026\":1}}],[\"lang=\",{\"1\":{\"560\":3,\"582\":1,\"584\":1,\"588\":2}}],[\"large\",{\"1\":{\"1013\":2}}],[\"larger\",{\"1\":{\"392\":1}}],[\"latest\",{\"1\":{\"570\":2}}],[\"layout3\",{\"1\":{\"980\":1}}],[\"layout2\",{\"1\":{\"980\":1}}],[\"layout1\",{\"1\":{\"980\":1}}],[\"layoutmask\",{\"1\":{\"382\":1,\"385\":4}}],[\"layout\",{\"0\":{\"947\":1},\"1\":{\"371\":1,\"381\":1,\"383\":1,\"385\":1}}],[\"lastindexof\",{\"0\":{\"1366\":1},\"1\":{\"1375\":1}}],[\"lastelementchild\",{\"1\":{\"1087\":1}}],[\"lasteffect\",{\"1\":{\"373\":9,\"375\":8,\"385\":8}}],[\"lastchild\",{\"1\":{\"1087\":1}}],[\"lastname\",{\"1\":{\"539\":3,\"816\":3}}],[\"last\",{\"1\":{\"392\":4,\"1289\":2}}],[\"laststyle\",{\"1\":{\"322\":3,\"328\":3}}],[\"lastplacedindex\",{\"1\":{\"358\":1,\"361\":12}}],[\"lastprop\",{\"1\":{\"322\":7,\"328\":7}}],[\"lastprops\",{\"1\":{\"322\":7,\"328\":7}}],[\"lastpendingupdate\",{\"1\":{\"272\":3}}],[\"lastrenderedstate\",{\"1\":{\"315\":1,\"338\":5,\"339\":2,\"373\":5}}],[\"lastrenderedreducer\",{\"1\":{\"315\":1,\"338\":4,\"339\":2,\"373\":4}}],[\"lazily\",{\"1\":{\"270\":1,\"272\":1}}],[\"lazyelement\",{\"1\":{\"737\":2}}],[\"lazyload\",{\"1\":{\"730\":5,\"731\":1,\"737\":3}}],[\"lazy=true\",{\"1\":{\"632\":1,\"635\":1}}],[\"lazy\",{\"0\":{\"206\":1},\"1\":{\"206\":1,\"207\":4,\"208\":2,\"465\":1,\"630\":1,\"631\":2,\"632\":6,\"635\":6,\"636\":1,\"730\":2,\"737\":1}}],[\"ll\",{\"1\":{\"270\":1,\"272\":1}}],[\"loop\",{\"1\":{\"1021\":2}}],[\"loopscreen\",{\"1\":{\"1016\":2}}],[\"loopscreenarray\",{\"1\":{\"1016\":3}}],[\"lookup\",{\"0\":{\"650\":1},\"1\":{\"650\":1,\"651\":3,\"657\":3}}],[\"load\",{\"1\":{\"823\":1,\"1076\":1,\"1119\":1,\"1282\":1}}],[\"loader加载器\",{\"1\":{\"702\":1}}],[\"loader\",{\"1\":{\"701\":1}}],[\"loading\",{\"1\":{\"206\":1,\"814\":1,\"829\":2,\"840\":3}}],[\"lowercase\",{\"1\":{\"894\":1}}],[\"low\",{\"1\":{\"395\":2}}],[\"lowpriority\",{\"1\":{\"394\":1,\"395\":3}}],[\"localstorage\",{\"1\":{\"430\":1,\"436\":1,\"437\":1,\"730\":1,\"731\":1}}],[\"localhost\",{\"1\":{\"28\":4,\"69\":1,\"70\":1,\"72\":1,\"495\":1,\"721\":1}}],[\"location\",{\"0\":{\"1065\":1},\"1\":{\"28\":2,\"722\":2,\"728\":2,\"738\":2,\"1061\":1,\"1065\":3}}],[\"log10e\",{\"1\":{\"1369\":1}}],[\"log2e\",{\"1\":{\"1369\":1}}],[\"loginuseraction\",{\"1\":{\"731\":1}}],[\"loginuser\",{\"1\":{\"731\":2}}],[\"loginoutaction\",{\"1\":{\"731\":1}}],[\"loginout\",{\"1\":{\"731\":2}}],[\"login\",{\"1\":{\"712\":1,\"714\":2,\"719\":1,\"722\":1,\"723\":4,\"730\":3,\"731\":5,\"732\":1,\"734\":3,\"739\":4,\"1013\":1}}],[\"logger\",{\"1\":{\"272\":5,\"273\":3,\"318\":3,\"320\":3,\"325\":3,\"758\":1}}],[\"logerrortomyservice\",{\"1\":{\"242\":1}}],[\"logprops\",{\"1\":{\"239\":7,\"240\":3}}],[\"logo512\",{\"1\":{\"138\":1}}],[\"logo\",{\"1\":{\"138\":4,\"903\":1}}],[\"logo192\",{\"1\":{\"138\":1}}],[\"logs\",{\"1\":{\"28\":1}}],[\"log\",{\"1\":{\"9\":4,\"17\":2,\"19\":1,\"20\":2,\"21\":5,\"22\":1,\"28\":2,\"67\":1,\"69\":1,\"70\":9,\"72\":1,\"108\":1,\"109\":1,\"114\":3,\"149\":1,\"194\":1,\"197\":1,\"239\":4,\"248\":2,\"253\":1,\"269\":1,\"272\":1,\"301\":4,\"306\":1,\"320\":1,\"325\":1,\"328\":1,\"356\":1,\"359\":1,\"360\":3,\"367\":7,\"374\":3,\"377\":8,\"384\":1,\"388\":2,\"396\":3,\"434\":4,\"436\":2,\"437\":1,\"451\":2,\"497\":2,\"510\":1,\"513\":2,\"514\":1,\"515\":6,\"516\":4,\"517\":3,\"518\":1,\"521\":1,\"534\":1,\"540\":6,\"541\":1,\"583\":3,\"599\":2,\"601\":11,\"602\":6,\"604\":2,\"608\":2,\"609\":4,\"610\":6,\"613\":2,\"634\":5,\"635\":5,\"640\":1,\"641\":1,\"644\":1,\"661\":4,\"662\":1,\"668\":1,\"669\":1,\"675\":2,\"683\":5,\"688\":2,\"690\":2,\"691\":1,\"714\":1,\"721\":3,\"732\":1,\"749\":4,\"760\":1,\"764\":1,\"765\":1,\"767\":1,\"777\":4,\"797\":1,\"823\":2,\"827\":1,\"1129\":1,\"1155\":1,\"1160\":8,\"1162\":2,\"1164\":4,\"1165\":2,\"1169\":2,\"1173\":1,\"1174\":11,\"1178\":4,\"1181\":1,\"1189\":1,\"1194\":1,\"1195\":1,\"1206\":2,\"1207\":2,\"1214\":2,\"1215\":2,\"1216\":1,\"1217\":1,\"1221\":2,\"1224\":1,\"1229\":2,\"1230\":1,\"1237\":1,\"1258\":4,\"1265\":3,\"1268\":3,\"1269\":1,\"1274\":1,\"1275\":2,\"1276\":3,\"1347\":1,\"1349\":1,\"1370\":1,\"1385\":2,\"1390\":1,\"1391\":5,\"1405\":4,\"1407\":13,\"1433\":5,\"1453\":1,\"1456\":1,\"1458\":2,\"1460\":1,\"1461\":1}}],[\"lilei\",{\"1\":{\"1461\":1}}],[\"lihua\",{\"1\":{\"1461\":1}}],[\"lis\",{\"1\":{\"1456\":2}}],[\"list=\",{\"1\":{\"1019\":1}}],[\"list可在视图中实现缓存\",{\"1\":{\"815\":1}}],[\"liststate\",{\"1\":{\"150\":8}}],[\"list\",{\"1\":{\"103\":5,\"418\":1,\"424\":1,\"426\":1,\"731\":1,\"737\":3,\"815\":2,\"830\":2,\"1019\":2}}],[\"listenerwrapper\",{\"1\":{\"288\":2}}],[\"listeners\",{\"1\":{\"287\":1,\"290\":3,\"292\":3,\"295\":2,\"298\":3}}],[\"listener\",{\"1\":{\"286\":9,\"287\":1,\"290\":5,\"291\":2,\"295\":7,\"298\":3,\"299\":3,\"1155\":1}}],[\"listentonativeevent\",{\"1\":{\"286\":3}}],[\"listentoallsupportedevents\",{\"1\":{\"284\":1,\"286\":1}}],[\"listeningmarker\",{\"1\":{\"286\":3}}],[\"listen\",{\"1\":{\"19\":1,\"28\":1,\"823\":2}}],[\"live\",{\"1\":{\"1328\":1}}],[\"library\",{\"1\":{\"1279\":1}}],[\"librarydirectory\",{\"1\":{\"821\":1}}],[\"libraryname\",{\"1\":{\"821\":1}}],[\"li\",{\"1\":{\"666\":3,\"670\":6,\"675\":4,\"676\":20,\"685\":19,\"876\":1,\"1016\":3,\"1052\":1,\"1053\":1,\"1286\":2,\"1287\":2,\"1289\":10,\"1290\":7,\"1328\":1,\"1329\":1}}],[\"li>之间相当于一个容器\",{\"1\":{\"1052\":1}}],[\"li>\",{\"1\":{\"150\":1,\"353\":4,\"356\":5,\"359\":12,\"504\":2,\"640\":1,\"641\":2,\"644\":1,\"653\":2,\"661\":3,\"666\":3,\"827\":1,\"1320\":1}}],[\"lightblue\",{\"1\":{\"1014\":1}}],[\"lighter\",{\"1\":{\"884\":1}}],[\"light\",{\"1\":{\"111\":1,\"192\":4,\"217\":4}}],[\"lixianglong\",{\"1\":{\"103\":1}}],[\"linear\",{\"1\":{\"1000\":1,\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"line\",{\"0\":{\"893\":1},\"1\":{\"880\":1,\"887\":1,\"891\":1,\"898\":1,\"924\":1,\"927\":1,\"931\":1,\"938\":1,\"960\":1}}],[\"lin\",{\"1\":{\"103\":2}}],[\"link>实现路由跳转\",{\"1\":{\"432\":1}}],[\"link>\",{\"1\":{\"424\":1,\"426\":1,\"427\":2,\"429\":1,\"430\":1,\"432\":1,\"713\":1,\"804\":1,\"822\":1,\"823\":1}}],[\"link\",{\"1\":{\"26\":1,\"424\":1,\"426\":1,\"427\":4,\"429\":3,\"430\":3,\"432\":2,\"713\":1,\"822\":1,\"823\":1,\"873\":3,\"964\":2}}],[\"legend标题\",{\"1\":{\"1020\":1}}],[\"legend>\",{\"1\":{\"1020\":1}}],[\"legacy\",{\"1\":{\"749\":1}}],[\"less的循环本质上是自递归调用\",{\"1\":{\"1016\":1}}],[\"less\",{\"0\":{\"965\":1,\"1006\":1},\"1\":{\"962\":1,\"965\":2,\"966\":3,\"1004\":1,\"1005\":1,\"1007\":1,\"1009\":1,\"1011\":2,\"1012\":2,\"1013\":2,\"1014\":1,\"1015\":4,\"1016\":3,\"1017\":1}}],[\"less+rem+媒体查询布局\",{\"1\":{\"959\":1}}],[\"len\",{\"1\":{\"661\":3}}],[\"length\",{\"1\":{\"8\":1,\"70\":1,\"116\":1,\"272\":1,\"281\":1,\"282\":1,\"292\":1,\"295\":3,\"319\":1,\"328\":1,\"348\":1,\"349\":1,\"352\":1,\"357\":3,\"360\":1,\"361\":4,\"373\":2,\"374\":1,\"375\":1,\"385\":1,\"392\":8,\"396\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1,\"624\":1,\"626\":1,\"627\":2,\"634\":1,\"635\":4,\"646\":2,\"648\":2,\"655\":2,\"656\":3,\"661\":9,\"662\":3,\"674\":2,\"675\":3,\"683\":5,\"686\":2,\"689\":3,\"690\":3,\"691\":2,\"695\":2,\"731\":1,\"796\":1,\"842\":2,\"843\":2,\"895\":1,\"896\":1,\"908\":1,\"911\":1,\"924\":1,\"1016\":1,\"1067\":1,\"1173\":1,\"1195\":1,\"1352\":3,\"1376\":6,\"1405\":1,\"1415\":1,\"1456\":1}}],[\"leaving\",{\"1\":{\"631\":1}}],[\"leave\",{\"1\":{\"507\":3,\"562\":4}}],[\"leftindex\",{\"1\":{\"392\":5}}],[\"left\",{\"1\":{\"229\":1,\"392\":5,\"472\":1,\"890\":1,\"905\":2,\"954\":1,\"969\":1,\"970\":1,\"977\":1,\"984\":1,\"990\":1,\"994\":2,\"995\":1,\"1013\":1,\"1015\":2,\"1016\":2,\"1048\":1,\"1072\":1,\"1124\":2,\"1325\":2}}],[\"letter\",{\"0\":{\"896\":1},\"1\":{\"896\":2}}],[\"let\",{\"0\":{\"1158\":1},\"1\":{\"26\":1,\"67\":1,\"69\":4,\"70\":3,\"72\":4,\"201\":1,\"252\":3,\"271\":2,\"272\":12,\"273\":4,\"274\":4,\"281\":1,\"282\":1,\"286\":1,\"290\":1,\"292\":1,\"295\":3,\"298\":1,\"306\":2,\"315\":5,\"316\":6,\"317\":2,\"318\":1,\"319\":4,\"320\":3,\"322\":4,\"325\":3,\"326\":4,\"328\":5,\"329\":1,\"333\":1,\"338\":5,\"344\":1,\"348\":4,\"349\":8,\"351\":1,\"352\":5,\"353\":1,\"356\":1,\"357\":7,\"360\":4,\"361\":9,\"373\":8,\"374\":6,\"375\":12,\"385\":13,\"392\":2,\"395\":9,\"396\":6,\"468\":2,\"539\":2,\"557\":3,\"574\":1,\"582\":1,\"583\":1,\"586\":1,\"588\":2,\"591\":1,\"601\":1,\"602\":1,\"603\":3,\"604\":3,\"607\":1,\"609\":5,\"610\":4,\"613\":1,\"614\":1,\"616\":2,\"617\":2,\"624\":1,\"626\":4,\"627\":1,\"632\":2,\"634\":1,\"635\":6,\"647\":2,\"648\":1,\"649\":1,\"651\":2,\"654\":2,\"656\":2,\"657\":2,\"661\":3,\"662\":5,\"674\":1,\"675\":1,\"683\":12,\"686\":1,\"689\":1,\"690\":1,\"691\":11,\"695\":5,\"731\":1,\"737\":1,\"738\":1,\"767\":1,\"777\":1,\"796\":1,\"799\":1,\"823\":2,\"1160\":2,\"1161\":1,\"1162\":2,\"1169\":5,\"1173\":4,\"1174\":3,\"1178\":11,\"1190\":1,\"1195\":2,\"1206\":1,\"1207\":1,\"1214\":5,\"1215\":2,\"1216\":1,\"1217\":1,\"1228\":2,\"1230\":2,\"1275\":2,\"1458\":4,\"1460\":2,\"1461\":5}}],[\"level\",{\"1\":{\"21\":1}}],[\"响应函数将会按照函数绑定顺序执行\",{\"1\":{\"1130\":1}}],[\"响应用例\",{\"0\":{\"783\":1}}],[\"响应式屏幕样式方案由\",{\"1\":{\"966\":1}}],[\"响应式页面兼容移动端\",{\"0\":{\"958\":1},\"1\":{\"959\":1}}],[\"响应式更新\",{\"1\":{\"698\":1}}],[\"响应式数据\",{\"1\":{\"700\":2}}],[\"响应式数据声明\",{\"0\":{\"620\":1}}],[\"响应式数据劫持的核心函数\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"响应式数据判断\",{\"0\":{\"558\":1}}],[\"响应式数据转化\",{\"0\":{\"552\":1}}],[\"响应式\",{\"0\":{\"548\":1,\"549\":1,\"586\":1}}],[\"响应式原理修改数组方法\",{\"1\":{\"603\":1}}],[\"响应式原理\",{\"0\":{\"547\":1}}],[\"响应式依然是靠object\",{\"1\":{\"536\":1}}],[\"响应式的\",{\"1\":{\"511\":2,\"512\":1}}],[\"响应拦截器2\",{\"1\":{\"70\":1}}],[\"响应拦截器1\",{\"1\":{\"70\":1}}],[\"响应拦截器函数参数\",{\"1\":{\"66\":1}}],[\"响应拦截器先进先出\",{\"1\":{\"66\":1}}],[\"响应结果编码\",{\"1\":{\"53\":1}}],[\"响应结构\",{\"0\":{\"31\":1}}],[\"响应头信息\",{\"1\":{\"21\":1,\"34\":1}}],[\"响应状态字符串\",{\"1\":{\"21\":1,\"37\":1}}],[\"响应状态码是\",{\"1\":{\"59\":1}}],[\"响应状态码\",{\"1\":{\"21\":1,\"36\":1}}],[\"响应数据类型\",{\"1\":{\"17\":1}}],[\"响应体数据\",{\"1\":{\"33\":1}}],[\"响应体\",{\"1\":{\"9\":1,\"21\":1}}],[\"响应行\",{\"1\":{\"9\":1}}],[\"响应报文\",{\"0\":{\"8\":1}}],[\"s1\",{\"1\":{\"1392\":2}}],[\"sqrt\",{\"1\":{\"1370\":1}}],[\"sqrt2\",{\"1\":{\"1369\":1}}],[\"sqrt1\",{\"1\":{\"1369\":1}}],[\"square\",{\"1\":{\"1052\":1}}],[\"squashtokens\",{\"1\":{\"644\":2}}],[\"snake\",{\"1\":{\"1240\":1}}],[\"snabbdom\",{\"0\":{\"665\":1,\"667\":1},\"1\":{\"664\":1,\"665\":6,\"667\":1,\"668\":1,\"669\":1,\"673\":1,\"676\":1}}],[\"s5\",{\"1\":{\"1169\":2}}],[\"s4\",{\"1\":{\"1169\":2}}],[\"s3\",{\"1\":{\"1169\":2}}],[\"s2\",{\"1\":{\"1169\":2}}],[\"s>\",{\"1\":{\"1037\":1}}],[\"smoothing\",{\"1\":{\"918\":2}}],[\"small\",{\"1\":{\"886\":1}}],[\"smaller\",{\"1\":{\"392\":4}}],[\"ss\",{\"1\":{\"1376\":1}}],[\"ssr\",{\"1\":{\"696\":1,\"701\":1}}],[\"ssg\",{\"1\":{\"653\":2}}],[\"s+$\",{\"1\":{\"661\":1}}],[\"sfc\",{\"1\":{\"584\":1}}],[\"spped\",{\"1\":{\"1307\":4}}],[\"species\",{\"1\":{\"1171\":1}}],[\"speed为负\",{\"1\":{\"1072\":1}}],[\"speed为正\",{\"1\":{\"1072\":1}}],[\"speed\",{\"1\":{\"1072\":1,\"1303\":4,\"1304\":4,\"1307\":2,\"1308\":2}}],[\"sprites\",{\"1\":{\"916\":1}}],[\"spread\",{\"1\":{\"912\":2}}],[\"spinner\",{\"1\":{\"787\":2}}],[\"splice参数是splice\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"splice\",{\"0\":{\"1360\":1},\"1\":{\"603\":4,\"604\":3,\"609\":3,\"610\":3,\"614\":3,\"620\":1,\"635\":1,\"1360\":1}}],[\"split\",{\"1\":{\"539\":1,\"607\":1,\"609\":1,\"616\":1,\"626\":1,\"650\":1,\"657\":1,\"695\":2,\"1171\":2,\"1377\":1}}],[\"spacing\",{\"0\":{\"895\":1,\"896\":1},\"1\":{\"895\":2,\"896\":2}}],[\"space\",{\"0\":{\"898\":1},\"1\":{\"472\":1,\"898\":1,\"900\":3,\"926\":1,\"1000\":1}}],[\"spa\",{\"0\":{\"421\":1},\"1\":{\"696\":1,\"701\":1,\"702\":1}}],[\"span虚拟元素\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"span\",{\"1\":{\"248\":2,\"252\":1,\"270\":1,\"272\":2,\"342\":1,\"674\":2,\"675\":2,\"877\":2}}],[\"span>\",{\"1\":{\"248\":2,\"253\":1,\"269\":1,\"271\":1,\"272\":1,\"301\":1,\"588\":1,\"774\":1}}],[\"s\",{\"1\":{\"515\":1,\"516\":1,\"518\":1,\"520\":1,\"609\":2,\"615\":2,\"635\":2,\"662\":2,\"738\":1,\"877\":1,\"1169\":1,\"1202\":4,\"1217\":3,\"1381\":10,\"1382\":4,\"1384\":10,\"1385\":4,\"1386\":4,\"1388\":2,\"1389\":2,\"1390\":2,\"1391\":12}}],[\"swing\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"switch>\",{\"1\":{\"822\":1}}],[\"switchmap\",{\"1\":{\"788\":2}}],[\"switch\",{\"0\":{\"1269\":1},\"1\":{\"124\":1,\"272\":4,\"273\":1,\"274\":2,\"292\":1,\"318\":1,\"319\":2,\"320\":1,\"325\":1,\"326\":2,\"348\":2,\"349\":4,\"352\":2,\"357\":3,\"360\":1,\"361\":4,\"374\":1,\"375\":6,\"385\":7,\"395\":1,\"396\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"648\":1,\"649\":1,\"651\":1,\"656\":1,\"657\":1,\"709\":1,\"749\":1,\"776\":2,\"787\":1,\"815\":2,\"822\":2,\"840\":2,\"1154\":1,\"1269\":3}}],[\"swap\",{\"1\":{\"392\":2}}],[\"system\",{\"1\":{\"960\":1}}],[\"systems\",{\"1\":{\"395\":1}}],[\"sytle\",{\"1\":{\"887\":1}}],[\"syntaxerror\",{\"1\":{\"1420\":1}}],[\"syntheticbaseevent\",{\"1\":{\"293\":3}}],[\"syntheticeventctor\",{\"1\":{\"292\":3}}],[\"syntheticevent\",{\"0\":{\"293\":1},\"1\":{\"292\":1}}],[\"syntheticmouseevent\",{\"1\":{\"292\":2,\"293\":1}}],[\"sync等\",{\"1\":{\"625\":1}}],[\"sync=\",{\"1\":{\"512\":1}}],[\"sync\",{\"0\":{\"512\":1},\"1\":{\"511\":1,\"512\":1,\"628\":1}}],[\"symbol\",{\"0\":{\"920\":1,\"1167\":1,\"1222\":1},\"1\":{\"116\":1,\"917\":1,\"918\":1,\"920\":1,\"1167\":1,\"1168\":3,\"1169\":7,\"1170\":4,\"1171\":13,\"1173\":2,\"1209\":1,\"1222\":1,\"1275\":2}}],[\"slidetoggle\",{\"1\":{\"1304\":1}}],[\"slideup\",{\"1\":{\"1304\":1}}],[\"slidedown\",{\"1\":{\"1304\":1}}],[\"slice\",{\"0\":{\"1359\":1},\"1\":{\"281\":1,\"286\":1,\"289\":1,\"500\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"812\":1,\"909\":2,\"1376\":11}}],[\"slow\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"slots\",{\"1\":{\"535\":1}}],[\"slot插槽传数据\",{\"1\":{\"520\":1}}],[\"slot=\",{\"1\":{\"504\":1,\"520\":1}}],[\"slot>\",{\"1\":{\"504\":4,\"520\":1}}],[\"slot\",{\"1\":{\"229\":1,\"504\":2,\"520\":3,\"568\":2}}],[\"sin\",{\"1\":{\"1370\":1}}],[\"singledomdiff\",{\"1\":{\"363\":1}}],[\"singlediff\",{\"1\":{\"341\":1}}],[\"sign\",{\"1\":{\"1181\":1}}],[\"signal\",{\"1\":{\"841\":3}}],[\"simplified\",{\"1\":{\"1031\":1}}],[\"simpleeventpluginevents\",{\"1\":{\"281\":3}}],[\"simpleeventplugin\",{\"0\":{\"280\":1,\"292\":1},\"1\":{\"279\":3,\"290\":1}}],[\"sizing\",{\"1\":{\"973\":4}}],[\"size=12px\",{\"1\":{\"963\":1}}],[\"size\",{\"0\":{\"883\":1,\"954\":1},\"1\":{\"395\":1,\"857\":1,\"867\":1,\"883\":1,\"887\":3,\"918\":1,\"920\":1,\"954\":1,\"960\":1,\"966\":6,\"1013\":3,\"1015\":6,\"1016\":4,\"1178\":1,\"1179\":1,\"1296\":1}}],[\"siftup\",{\"1\":{\"392\":4}}],[\"siftdown\",{\"1\":{\"392\":4}}],[\"siblings\",{\"1\":{\"274\":2,\"326\":2,\"349\":2,\"375\":2,\"385\":2,\"1290\":2,\"1291\":2}}],[\"siblingfiber\",{\"1\":{\"273\":3,\"317\":3,\"360\":3,\"374\":3,\"396\":3}}],[\"sibling\",{\"1\":{\"270\":1,\"272\":4,\"273\":5,\"274\":12,\"317\":1,\"319\":3,\"320\":3,\"325\":3,\"326\":9,\"346\":1,\"348\":3,\"349\":10,\"352\":5,\"357\":7,\"360\":2,\"361\":9,\"374\":2,\"375\":12,\"385\":13,\"396\":2}}],[\"scalable\",{\"1\":{\"950\":1}}],[\"scalable=no\",{\"1\":{\"950\":1,\"960\":1}}],[\"scale\",{\"1\":{\"950\":3}}],[\"scale=1\",{\"1\":{\"950\":3,\"960\":3}}],[\"scanutil\",{\"1\":{\"646\":1,\"647\":2,\"654\":2,\"655\":1}}],[\"scan\",{\"1\":{\"646\":1,\"647\":2,\"654\":2,\"655\":1}}],[\"scanner\",{\"0\":{\"646\":1,\"655\":1},\"1\":{\"646\":3,\"647\":10,\"648\":2,\"649\":1,\"654\":9,\"655\":1,\"658\":1}}],[\"scss\",{\"1\":{\"573\":3,\"590\":3,\"1005\":2,\"1006\":1,\"1009\":1}}],[\"scoped\",{\"1\":{\"1012\":4}}],[\"scope\",{\"1\":{\"504\":2,\"591\":1,\"1423\":1}}],[\"scope=\",{\"1\":{\"504\":2}}],[\"school组件本质是一个名为vuecomponent的构造函数\",{\"1\":{\"489\":1}}],[\"school>\",{\"1\":{\"488\":1,\"489\":1}}],[\"school均可\",{\"1\":{\"488\":1}}],[\"school\",{\"1\":{\"414\":5,\"418\":1,\"436\":1,\"437\":1,\"488\":2,\"1191\":1}}],[\"schedulegc\",{\"1\":{\"842\":1,\"843\":6}}],[\"scheduleperformworkuntildeadline\",{\"1\":{\"395\":2}}],[\"schedulehostcallback\",{\"1\":{\"395\":5}}],[\"schedulecallback\",{\"1\":{\"272\":3,\"317\":2,\"360\":2,\"374\":3,\"384\":1,\"395\":2,\"396\":4}}],[\"scheduleupdateonfiber\",{\"1\":{\"272\":3,\"315\":2,\"317\":1,\"323\":1,\"338\":3,\"360\":1,\"373\":3,\"374\":1,\"396\":1}}],[\"schedulerpriorities\",{\"0\":{\"394\":1},\"1\":{\"394\":1,\"395\":1}}],[\"schedulerminheap\",{\"0\":{\"392\":1},\"1\":{\"392\":1,\"395\":1}}],[\"scheduler\",{\"0\":{\"387\":1,\"395\":1},\"1\":{\"249\":4,\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"392\":1,\"394\":1,\"395\":3,\"396\":1}}],[\"scrolltop\",{\"0\":{\"1114\":1},\"1\":{\"1115\":3,\"1124\":4,\"1325\":3}}],[\"scrollleft\",{\"0\":{\"1114\":1},\"1\":{\"1115\":1,\"1124\":2,\"1325\":1}}],[\"scrollwidth\",{\"0\":{\"1113\":1},\"1\":{\"1115\":1,\"1116\":1}}],[\"scroll\",{\"1\":{\"906\":1,\"908\":1,\"914\":1,\"985\":1}}],[\"scrollheight\",{\"0\":{\"1113\":1},\"1\":{\"96\":1,\"1115\":1}}],[\"screeny\",{\"1\":{\"1152\":1}}],[\"screenx\",{\"1\":{\"1152\":1}}],[\"screen\",{\"0\":{\"1068\":1},\"1\":{\"543\":4,\"964\":4,\"1016\":1}}],[\"script\",{\"1\":{\"26\":8,\"966\":1,\"1119\":1,\"1235\":2,\"1349\":1,\"1419\":1}}],[\"script>标签内都要加上type=\",{\"1\":{\"125\":1}}],[\"script>\",{\"1\":{\"9\":1,\"20\":1,\"22\":1,\"26\":3,\"69\":1,\"70\":1,\"72\":1,\"438\":1,\"448\":1,\"451\":1,\"454\":3,\"475\":1,\"497\":2,\"499\":1,\"504\":1,\"508\":1,\"510\":1,\"511\":4,\"512\":2,\"513\":2,\"514\":2,\"515\":6,\"516\":2,\"517\":3,\"518\":2,\"519\":1,\"520\":2,\"521\":2,\"534\":1,\"557\":1,\"560\":3,\"563\":1,\"582\":1,\"584\":1,\"1124\":1,\"1189\":2,\"1453\":1}}],[\"say\",{\"1\":{\"1433\":4}}],[\"sayhello\",{\"1\":{\"497\":2,\"534\":2}}],[\"safe\",{\"1\":{\"1230\":1}}],[\"safari\",{\"1\":{\"935\":1,\"1019\":1,\"1027\":1}}],[\"samsung\",{\"1\":{\"952\":1}}],[\"same\",{\"1\":{\"24\":1,\"787\":1}}],[\"sans\",{\"1\":{\"882\":1,\"960\":1}}],[\"sand\",{\"1\":{\"730\":2}}],[\"saga学习成本更低的异步中间件\",{\"1\":{\"780\":1}}],[\"saga不强迫捕获异常\",{\"1\":{\"779\":1}}],[\"saga作为\",{\"1\":{\"779\":1}}],[\"saga入口文件index\",{\"1\":{\"777\":1}}],[\"saga引入他的主要作用是方便测试\",{\"1\":{\"764\":1}}],[\"sagamiddleware\",{\"1\":{\"760\":3,\"773\":3}}],[\"saga算是redux\",{\"1\":{\"758\":1}}],[\"sagas文件\",{\"0\":{\"777\":1}}],[\"sagas\",{\"1\":{\"757\":1,\"760\":3,\"773\":1,\"777\":2,\"779\":1}}],[\"saga是用于代替redux\",{\"1\":{\"757\":1}}],[\"saga\",{\"0\":{\"757\":1},\"1\":{\"753\":1,\"759\":2,\"760\":1,\"762\":1,\"764\":2,\"765\":1,\"770\":1,\"771\":1,\"773\":1,\"777\":4,\"778\":1,\"779\":3,\"819\":2}}],[\"sass\",{\"0\":{\"573\":1,\"1005\":1},\"1\":{\"573\":2,\"590\":2,\"1004\":1,\"1005\":2,\"1006\":4,\"1007\":1,\"1009\":1,\"1010\":1,\"1011\":1,\"1012\":2,\"1013\":2,\"1014\":1,\"1015\":8,\"1016\":2,\"1017\":1}}],[\"save\",{\"1\":{\"784\":1,\"821\":1,\"822\":1}}],[\"savetaginput\",{\"1\":{\"505\":1}}],[\"savedcallback\",{\"1\":{\"201\":3}}],[\"saka10032\",{\"1\":{\"255\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":2,\"386\":1,\"397\":1,\"621\":1,\"628\":1,\"636\":1,\"658\":1,\"663\":1,\"692\":1}}],[\"svg>\",{\"1\":{\"920\":1}}],[\"svg\",{\"1\":{\"138\":1,\"918\":2,\"920\":2}}],[\"succeeded\",{\"1\":{\"776\":1,\"777\":1}}],[\"success\",{\"1\":{\"17\":1,\"755\":1,\"756\":1,\"786\":3,\"787\":3,\"829\":1,\"840\":4}}],[\"sun\",{\"1\":{\"515\":1,\"517\":1}}],[\"sunchild\",{\"1\":{\"515\":2,\"517\":2}}],[\"sunchild>\",{\"1\":{\"515\":1,\"517\":1}}],[\"subtring\",{\"1\":{\"1376\":1}}],[\"subtreehaseffects\",{\"1\":{\"274\":2,\"317\":2,\"360\":2,\"374\":2,\"384\":2,\"396\":2}}],[\"subtreeflags\",{\"1\":{\"270\":1,\"272\":2,\"273\":6,\"274\":2,\"317\":1,\"320\":6,\"325\":6,\"326\":1,\"346\":1,\"349\":1,\"360\":1,\"374\":2,\"375\":3,\"384\":2,\"385\":4,\"396\":2}}],[\"submit\",{\"1\":{\"1057\":1}}],[\"sub>下标文本标签\",{\"1\":{\"1039\":1}}],[\"sub\",{\"1\":{\"609\":2,\"615\":2,\"635\":4,\"924\":1}}],[\"substr\",{\"1\":{\"1376\":13}}],[\"substring\",{\"1\":{\"646\":3,\"647\":2,\"654\":2,\"655\":3,\"661\":1,\"662\":3,\"695\":1,\"1376\":22}}],[\"subs相同\",{\"1\":{\"635\":1}}],[\"subs\",{\"1\":{\"609\":5,\"615\":5,\"635\":7}}],[\"subscribes\",{\"1\":{\"609\":1,\"615\":1,\"635\":1}}],[\"subscribe\",{\"1\":{\"116\":1,\"749\":1}}],[\"subscriptions\",{\"1\":{\"116\":10,\"823\":2}}],[\"subject\",{\"1\":{\"414\":5,\"418\":1}}],[\"suspense>\",{\"1\":{\"207\":2,\"208\":1,\"568\":1,\"737\":1}}],[\"suspense\",{\"0\":{\"568\":1},\"1\":{\"206\":1,\"207\":4,\"208\":1,\"525\":1,\"534\":1,\"568\":1,\"737\":1}}],[\"sum或msg变化了\",{\"1\":{\"540\":1}}],[\"sum变化了\",{\"1\":{\"540\":1}}],[\"sum\",{\"1\":{\"194\":1,\"414\":5,\"418\":2,\"540\":2,\"541\":1,\"715\":3,\"1458\":2}}],[\"sup>上标文本标签\",{\"1\":{\"1039\":1}}],[\"suppresscontenteditablewarning\",{\"1\":{\"150\":1}}],[\"super\",{\"0\":{\"1434\":1},\"1\":{\"98\":1,\"99\":1,\"106\":1,\"110\":1,\"149\":1,\"242\":1,\"245\":1,\"774\":1,\"924\":1,\"1432\":1,\"1433\":1,\"1434\":3}}],[\"shim\",{\"1\":{\"593\":1}}],[\"shiftkey\",{\"1\":{\"1152\":1}}],[\"shift\",{\"0\":{\"1358\":1},\"1\":{\"70\":2,\"472\":1,\"603\":2,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"620\":1,\"939\":1,\"1152\":1}}],[\"shadow\",{\"0\":{\"912\":1,\"913\":1},\"1\":{\"912\":5,\"913\":5,\"1000\":2}}],[\"shallowequal\",{\"1\":{\"732\":2}}],[\"shallowreadonly\",{\"0\":{\"555\":1},\"1\":{\"555\":1}}],[\"shallowreactive\",{\"0\":{\"554\":1},\"1\":{\"554\":2}}],[\"shallowref\",{\"0\":{\"554\":1},\"1\":{\"554\":2}}],[\"shaking\",{\"1\":{\"524\":1}}],[\"sharedpropertydefinition\",{\"1\":{\"633\":6}}],[\"shared\",{\"1\":{\"249\":4,\"252\":2,\"271\":3,\"272\":9,\"273\":1,\"293\":2,\"306\":1,\"312\":1,\"315\":1,\"318\":1,\"319\":2,\"320\":1,\"325\":1,\"337\":1,\"338\":2,\"348\":2,\"352\":2,\"357\":2,\"361\":2,\"373\":2}}],[\"sharing\",{\"1\":{\"27\":1}}],[\"showing\",{\"1\":{\"787\":1}}],[\"showname\",{\"1\":{\"499\":2}}],[\"show=\",{\"1\":{\"457\":1,\"508\":1,\"588\":1}}],[\"show\",{\"0\":{\"458\":1},\"1\":{\"457\":2,\"458\":1,\"474\":1,\"787\":3,\"815\":6,\"1303\":1}}],[\"shouldcache\",{\"1\":{\"633\":4}}],[\"shouldcomponentupdate\",{\"0\":{\"98\":1},\"1\":{\"98\":2,\"167\":1,\"171\":1}}],[\"shouldyield\",{\"1\":{\"395\":1,\"396\":2}}],[\"shouldyieldtohost\",{\"1\":{\"395\":3}}],[\"shouldtrackssideeffects为false\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"shouldtrackssideeffects\",{\"1\":{\"272\":5,\"319\":5,\"348\":5,\"352\":6,\"357\":7,\"361\":9}}],[\"shouldsettextcontent\",{\"1\":{\"272\":3,\"273\":1,\"318\":2,\"327\":1}}],[\"shouldupdate\",{\"1\":{\"172\":2}}],[\"some\",{\"0\":{\"1199\":1},\"1\":{\"1196\":1,\"1199\":1}}],[\"somethinggoeswrong\",{\"1\":{\"830\":1}}],[\"somethingspecial\",{\"1\":{\"830\":2}}],[\"something\",{\"1\":{\"830\":1}}],[\"somemethod\",{\"1\":{\"517\":7}}],[\"sony\",{\"1\":{\"952\":1}}],[\"son\",{\"1\":{\"560\":3}}],[\"son组件\",{\"1\":{\"515\":1}}],[\"sortcomparer\",{\"1\":{\"816\":1}}],[\"sort相同\",{\"1\":{\"816\":1}}],[\"sortindex\",{\"1\":{\"392\":2,\"395\":1}}],[\"sort\",{\"0\":{\"1364\":1},\"1\":{\"392\":1,\"603\":2,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"620\":1,\"1364\":2,\"1405\":3}}],[\"sources\",{\"1\":{\"1155\":1}}],[\"sourcefiber\",{\"1\":{\"271\":3,\"316\":5}}],[\"sourcecode\",{\"1\":{\"248\":4,\"621\":1,\"628\":1,\"636\":1}}],[\"source\",{\"1\":{\"67\":5,\"252\":1,\"653\":1,\"909\":2}}],[\"socketpath\",{\"0\":{\"61\":1},\"1\":{\"61\":1}}],[\"solid\",{\"1\":{\"26\":1,\"139\":1,\"909\":3,\"1013\":1,\"1015\":4,\"1016\":3}}],[\"stick\",{\"1\":{\"1225\":1}}],[\"sticky\",{\"0\":{\"995\":1},\"1\":{\"989\":1,\"995\":3,\"999\":1}}],[\"stylus\",{\"0\":{\"1007\":1},\"1\":{\"1004\":1,\"1007\":2,\"1009\":1,\"1010\":1,\"1011\":2,\"1012\":2,\"1013\":2,\"1014\":1,\"1015\":2,\"1016\":2,\"1017\":1}}],[\"style属性\",{\"1\":{\"1048\":1}}],[\"style>\",{\"1\":{\"920\":1}}],[\"stylesheets\",{\"1\":{\"964\":2}}],[\"stylesheet\",{\"1\":{\"868\":2}}],[\"stylemodule\",{\"1\":{\"668\":2,\"669\":2}}],[\"styleupdates\",{\"1\":{\"322\":15,\"328\":15}}],[\"stylename\",{\"1\":{\"322\":14,\"328\":14}}],[\"styled\",{\"1\":{\"192\":1,\"217\":1}}],[\"style=\",{\"1\":{\"112\":1,\"192\":1,\"217\":1,\"227\":1,\"228\":1,\"229\":2,\"248\":2,\"253\":1,\"269\":1,\"271\":1,\"272\":1,\"301\":1,\"560\":1,\"789\":1,\"867\":1,\"1048\":1}}],[\"style\",{\"0\":{\"455\":1,\"885\":1},\"1\":{\"26\":1,\"139\":3,\"248\":2,\"252\":1,\"273\":3,\"322\":6,\"323\":1,\"328\":7,\"329\":1,\"330\":1,\"333\":1,\"455\":3,\"475\":2,\"515\":1,\"692\":2,\"702\":1,\"821\":1,\"867\":2,\"885\":2,\"887\":1,\"909\":2,\"918\":1,\"932\":1,\"1015\":1,\"1105\":3,\"1106\":2,\"1108\":7}}],[\"step\",{\"1\":{\"812\":1,\"813\":2,\"1019\":1}}],[\"student\",{\"1\":{\"1461\":2}}],[\"students\",{\"1\":{\"653\":3,\"657\":2}}],[\"stubbing\",{\"1\":{\"631\":1}}],[\"stoptag\",{\"1\":{\"646\":2,\"655\":2}}],[\"stop\",{\"1\":{\"471\":1,\"787\":1,\"842\":1,\"1306\":3,\"1376\":8}}],[\"stoppropagation\",{\"1\":{\"293\":3,\"471\":1,\"1331\":1}}],[\"store中读取任意数据\",{\"1\":{\"813\":1}}],[\"storescontext\",{\"1\":{\"807\":1,\"808\":2}}],[\"stores\",{\"1\":{\"807\":2}}],[\"store=\",{\"1\":{\"760\":1,\"773\":1,\"785\":1,\"810\":1}}],[\"store\",{\"0\":{\"731\":1,\"746\":1,\"802\":1,\"806\":1,\"811\":1},\"1\":{\"407\":5,\"418\":4,\"519\":2,\"731\":1,\"742\":2,\"744\":1,\"746\":5,\"747\":2,\"748\":1,\"749\":12,\"750\":2,\"753\":3,\"755\":3,\"759\":1,\"760\":2,\"767\":1,\"773\":2,\"785\":2,\"793\":2,\"809\":1,\"810\":3,\"811\":3,\"813\":1,\"816\":1,\"848\":2}}],[\"standard\",{\"1\":{\"756\":1}}],[\"stack\",{\"1\":{\"648\":7,\"1422\":1,\"1423\":1}}],[\"start到end的顺序始终是从左到右\",{\"1\":{\"1376\":1}}],[\"startswith\",{\"1\":{\"1202\":1}}],[\"startreg\",{\"1\":{\"661\":3,\"662\":4}}],[\"starttime\",{\"1\":{\"395\":12}}],[\"starttransition\",{\"1\":{\"208\":2}}],[\"start\",{\"1\":{\"137\":1,\"770\":1,\"820\":1,\"823\":3,\"1053\":1,\"1366\":3,\"1376\":20}}],[\"startoffset\",{\"1\":{\"96\":1}}],[\"startindex\",{\"1\":{\"96\":2}}],[\"statics\",{\"0\":{\"991\":1}}],[\"static\",{\"1\":{\"111\":1,\"149\":2,\"214\":1,\"217\":1,\"242\":3,\"609\":1,\"615\":1,\"635\":1,\"989\":1,\"991\":1,\"999\":1,\"1180\":1,\"1225\":1}}],[\"stateobservable<state>\",{\"1\":{\"781\":1}}],[\"state$\",{\"1\":{\"781\":1,\"788\":1}}],[\"statenode\",{\"1\":{\"270\":2,\"271\":2,\"272\":3,\"273\":4,\"274\":6,\"290\":3,\"291\":3,\"298\":3,\"299\":3,\"316\":2,\"320\":5,\"323\":2,\"325\":5,\"326\":7,\"346\":1,\"349\":10,\"374\":1,\"375\":10,\"385\":10,\"396\":1}}],[\"statevalue\",{\"1\":{\"185\":1,\"186\":2}}],[\"state\",{\"0\":{\"141\":1,\"179\":1,\"332\":1,\"409\":1,\"795\":1},\"1\":{\"84\":2,\"91\":1,\"92\":3,\"98\":5,\"99\":5,\"103\":9,\"106\":2,\"110\":3,\"142\":2,\"144\":1,\"145\":4,\"149\":1,\"150\":2,\"155\":1,\"156\":4,\"160\":6,\"162\":2,\"176\":1,\"179\":2,\"182\":1,\"186\":1,\"196\":1,\"200\":1,\"217\":3,\"242\":3,\"245\":2,\"257\":2,\"305\":3,\"329\":3,\"338\":2,\"339\":1,\"340\":1,\"366\":1,\"373\":2,\"407\":8,\"409\":1,\"410\":2,\"411\":3,\"412\":2,\"414\":1,\"418\":6,\"519\":5,\"596\":1,\"719\":1,\"722\":1,\"731\":5,\"732\":4,\"743\":1,\"744\":3,\"748\":2,\"749\":1,\"750\":2,\"752\":1,\"753\":1,\"759\":1,\"767\":4,\"774\":3,\"776\":9,\"777\":3,\"787\":3,\"789\":2,\"795\":1,\"796\":1,\"797\":1,\"811\":1,\"812\":6,\"813\":3,\"814\":7,\"815\":9,\"816\":11,\"820\":3,\"823\":10,\"840\":7,\"843\":1}}],[\"statustext\",{\"0\":{\"37\":1},\"1\":{\"9\":1,\"21\":1,\"69\":2,\"70\":1,\"72\":2}}],[\"status\",{\"0\":{\"36\":1},\"1\":{\"9\":3,\"15\":1,\"21\":1,\"59\":2,\"69\":5,\"70\":1,\"72\":5,\"814\":3,\"829\":5,\"840\":3,\"1173\":3,\"1207\":3}}],[\"stroke\",{\"1\":{\"918\":1}}],[\"strong>或者<b><\",{\"1\":{\"1037\":1}}],[\"strong\",{\"1\":{\"877\":1,\"1011\":3}}],[\"strictmode下组件会渲染两次\",{\"1\":{\"738\":1}}],[\"strictmode>\",{\"1\":{\"735\":2,\"803\":2}}],[\"strict\",{\"1\":{\"625\":1,\"631\":1,\"1453\":3}}],[\"string​​\",{\"1\":{\"1376\":1}}],[\"string+number=string\",{\"1\":{\"749\":2}}],[\"string\",{\"0\":{\"1246\":1,\"1249\":1,\"1372\":1},\"1\":{\"47\":1,\"149\":4,\"216\":1,\"272\":3,\"273\":2,\"319\":2,\"322\":2,\"327\":1,\"328\":2,\"348\":2,\"352\":2,\"357\":2,\"361\":3,\"498\":2,\"510\":1,\"512\":1,\"583\":3,\"587\":4,\"625\":3,\"633\":1,\"646\":1,\"655\":1,\"674\":1,\"686\":1,\"730\":3,\"739\":2,\"749\":3,\"816\":3,\"827\":2,\"897\":1,\"1172\":1,\"1241\":1,\"1249\":1,\"1271\":1,\"1339\":2,\"1371\":1,\"1373\":1,\"1376\":4,\"1410\":1,\"1413\":4,\"1415\":1,\"1440\":1}}],[\"stringify\",{\"1\":{\"26\":2,\"46\":1,\"451\":1,\"823\":1}}],[\"structure\",{\"1\":{\"160\":2,\"1028\":1}}],[\"stream\",{\"1\":{\"42\":1,\"47\":1,\"52\":1,\"781\":2,\"788\":1}}],[\"str\",{\"1\":{\"26\":4,\"272\":4,\"513\":2,\"586\":1,\"1161\":1,\"1171\":4,\"1202\":6,\"1215\":4,\"1216\":2}}],[\"src会push不到result里面\",{\"1\":{\"662\":1}}],[\"srcelement\",{\"1\":{\"288\":1}}],[\"src=\",{\"1\":{\"26\":1,\"229\":1,\"662\":1,\"920\":1,\"1021\":1,\"1044\":1,\"1045\":3,\"1189\":1}}],[\"src\",{\"0\":{\"333\":1,\"356\":1,\"359\":1,\"367\":1,\"377\":1},\"1\":{\"26\":2,\"138\":1,\"249\":10,\"269\":1,\"271\":3,\"272\":5,\"273\":7,\"281\":1,\"291\":1,\"292\":1,\"305\":1,\"306\":2,\"307\":2,\"308\":2,\"309\":2,\"310\":2,\"311\":2,\"312\":1,\"315\":2,\"316\":3,\"317\":3,\"318\":5,\"319\":3,\"320\":5,\"321\":2,\"322\":5,\"325\":5,\"326\":5,\"327\":4,\"328\":5,\"333\":1,\"334\":2,\"335\":2,\"336\":2,\"337\":1,\"338\":2,\"344\":1,\"345\":2,\"346\":2,\"348\":1,\"349\":5,\"351\":1,\"352\":3,\"356\":1,\"357\":3,\"359\":1,\"360\":4,\"361\":3,\"367\":1,\"368\":2,\"369\":2,\"370\":2,\"371\":2,\"372\":2,\"373\":2,\"374\":4,\"375\":5,\"377\":1,\"378\":2,\"379\":2,\"380\":2,\"381\":2,\"382\":2,\"383\":2,\"384\":2,\"385\":5,\"392\":1,\"394\":2,\"395\":3,\"396\":4,\"572\":1,\"573\":1,\"581\":1,\"692\":1,\"823\":3,\"918\":2,\"1021\":1,\"1044\":2,\"1192\":1}}],[\"seal\",{\"1\":{\"1408\":1}}],[\"seajs\",{\"1\":{\"1188\":1}}],[\"searchparams\",{\"1\":{\"721\":3}}],[\"search\",{\"1\":{\"266\":2,\"721\":2,\"722\":1,\"727\":1,\"1019\":1,\"1065\":1,\"1171\":2,\"1391\":1}}],[\"separate\",{\"1\":{\"1048\":1}}],[\"serif\",{\"1\":{\"960\":1}}],[\"services\",{\"1\":{\"731\":3,\"823\":1}}],[\"serve\",{\"1\":{\"493\":1,\"527\":1}}],[\"server\",{\"1\":{\"9\":1,\"19\":1,\"20\":2,\"21\":1,\"22\":1,\"26\":2,\"28\":2,\"531\":1,\"574\":2}}],[\"servlet\",{\"1\":{\"2\":1}}],[\"seen\",{\"1\":{\"627\":5}}],[\"seenobjects\",{\"1\":{\"627\":3}}],[\"segments\",{\"1\":{\"607\":2,\"609\":2,\"616\":2}}],[\"second\",{\"1\":{\"1264\":1}}],[\"section\",{\"1\":{\"675\":1,\"1020\":1}}],[\"sections\",{\"1\":{\"656\":6}}],[\"section>\",{\"1\":{\"207\":1}}],[\"secret\",{\"1\":{\"307\":1,\"308\":1,\"312\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1}}],[\"selected\",{\"1\":{\"1057\":2}}],[\"selectalltodos\",{\"1\":{\"816\":1}}],[\"selectall\",{\"1\":{\"816\":1}}],[\"selectid\",{\"1\":{\"816\":1}}],[\"selectlist\",{\"1\":{\"815\":2}}],[\"selectfilter\",{\"1\":{\"815\":2}}],[\"selecttodos\",{\"1\":{\"815\":2}}],[\"selector\",{\"0\":{\"815\":1},\"1\":{\"1290\":3,\"1328\":2,\"1331\":1}}],[\"select>\",{\"1\":{\"749\":1,\"1057\":1}}],[\"select\",{\"0\":{\"767\":1},\"1\":{\"749\":5,\"767\":1,\"777\":2,\"1057\":1}}],[\"selectdata\",{\"1\":{\"234\":3}}],[\"sel\",{\"1\":{\"666\":6,\"667\":1,\"670\":4,\"674\":8,\"675\":3,\"676\":1,\"683\":4,\"686\":6,\"687\":2,\"688\":2,\"689\":1,\"691\":2,\"692\":1}}],[\"self\",{\"1\":{\"252\":1,\"471\":1,\"1042\":1,\"1231\":3}}],[\"sex\",{\"1\":{\"149\":1,\"468\":4,\"640\":4}}],[\"setcaputre\",{\"1\":{\"1141\":1}}],[\"setcapture\",{\"0\":{\"1141\":1}}],[\"setcoords\",{\"1\":{\"112\":1}}],[\"setcount\",{\"1\":{\"100\":2,\"110\":2,\"182\":2}}],[\"setroutebefore\",{\"1\":{\"737\":3,\"740\":2}}],[\"setrout\",{\"1\":{\"732\":2}}],[\"setrequestheader\",{\"1\":{\"12\":1}}],[\"setitem\",{\"1\":{\"731\":1}}],[\"setinitialdomproperties\",{\"1\":{\"273\":2,\"322\":2,\"328\":2}}],[\"setinitialproperties\",{\"1\":{\"273\":3,\"321\":1,\"322\":1,\"327\":2,\"328\":1}}],[\"setinterval\",{\"1\":{\"201\":1,\"749\":1,\"1063\":1,\"1076\":1}}],[\"setsearchparams\",{\"1\":{\"721\":2}}],[\"setsum\",{\"1\":{\"715\":2}}],[\"setstatevalue\",{\"1\":{\"186\":1}}],[\"setstate\",{\"1\":{\"98\":1,\"99\":1,\"103\":4,\"110\":1,\"144\":1,\"145\":1,\"160\":1,\"167\":1,\"217\":1,\"234\":1,\"245\":1,\"596\":1,\"749\":1}}],[\"setvueval\",{\"1\":{\"695\":2}}],[\"setvalueforproperty\",{\"1\":{\"273\":2,\"322\":2,\"328\":3}}],[\"setvalueforstyles\",{\"1\":{\"273\":2,\"322\":2,\"328\":3}}],[\"set为空函数\",{\"1\":{\"633\":1}}],[\"set更新依赖\",{\"1\":{\"609\":1,\"610\":1,\"613\":1}}],[\"setprototypeof\",{\"0\":{\"1185\":1},\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"setprototypeof`\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"setup>\",{\"1\":{\"584\":2,\"587\":2}}],[\"setup\",{\"0\":{\"534\":1,\"535\":1},\"1\":{\"525\":1,\"534\":8,\"535\":1,\"539\":1,\"543\":2,\"557\":1,\"560\":2,\"584\":4,\"585\":4,\"586\":1,\"588\":2,\"823\":1}}],[\"setuptests\",{\"1\":{\"138\":1}}],[\"setname\",{\"1\":{\"498\":2}}],[\"setnumber\",{\"1\":{\"305\":2,\"329\":2,\"333\":2,\"339\":1,\"344\":3,\"351\":3,\"353\":3,\"356\":3,\"359\":3,\"367\":2,\"377\":2}}],[\"sety\",{\"1\":{\"227\":2,\"228\":2,\"229\":2}}],[\"setx\",{\"1\":{\"227\":2,\"228\":2,\"229\":2}}],[\"setxxx\",{\"1\":{\"180\":1,\"182\":2}}],[\"setter\",{\"0\":{\"601\":1},\"1\":{\"450\":1,\"593\":4,\"601\":5,\"602\":2,\"604\":2,\"605\":1,\"608\":2,\"609\":1,\"610\":1,\"613\":1,\"620\":1,\"621\":1,\"636\":2,\"792\":1}}],[\"settextcontent\",{\"1\":{\"273\":4,\"322\":4,\"328\":5}}],[\"settab\",{\"1\":{\"208\":2}}],[\"settimeout\",{\"1\":{\"204\":1,\"242\":1,\"407\":1,\"505\":4,\"557\":1,\"764\":1,\"765\":1,\"777\":2,\"812\":1,\"843\":1,\"1063\":1,\"1076\":1,\"1174\":3}}],[\"setthemeswitch\",{\"1\":{\"192\":2}}],[\"setdata\",{\"1\":{\"234\":2,\"596\":1}}],[\"setdebouncevalue\",{\"1\":{\"204\":2}}],[\"setdimensions\",{\"1\":{\"202\":2}}],[\"setb\",{\"1\":{\"194\":1,\"197\":2}}],[\"setattribute\",{\"1\":{\"1094\":1,\"1096\":1}}],[\"seta\",{\"1\":{\"194\":1,\"197\":2}}],[\"set\",{\"0\":{\"1178\":1,\"1407\":1},\"1\":{\"68\":1,\"103\":1,\"272\":1,\"278\":2,\"281\":1,\"282\":1,\"361\":2,\"450\":2,\"468\":1,\"536\":1,\"539\":1,\"548\":1,\"549\":2,\"557\":1,\"601\":7,\"602\":2,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1,\"626\":3,\"627\":1,\"632\":1,\"633\":4,\"634\":1,\"635\":3,\"683\":1,\"691\":1,\"694\":1,\"700\":1,\"787\":1,\"1172\":1,\"1178\":6,\"1179\":1,\"1180\":1,\"1224\":2,\"1275\":1,\"1407\":7,\"1433\":1}}],[\"setheader\",{\"1\":{\"12\":1,\"19\":2,\"27\":3}}],[\"sendajax\",{\"1\":{\"1207\":2}}],[\"sendevent\",{\"1\":{\"114\":2}}],[\"send\",{\"1\":{\"9\":1,\"11\":1,\"19\":1,\"26\":2,\"69\":1,\"72\":3,\"1207\":1}}],[\"seo\",{\"1\":{\"5\":1,\"1020\":1}}],[\"iife\",{\"0\":{\"1346\":1}}],[\"i+1\",{\"1\":{\"1016\":1}}],[\"i++进入死循环\",{\"1\":{\"1277\":1}}],[\"i++之后使用\",{\"1\":{\"1277\":1}}],[\"i++先赋值参与运算\",{\"1\":{\"1258\":1}}],[\"i++\",{\"1\":{\"281\":1,\"282\":1,\"295\":2,\"316\":3,\"349\":1,\"360\":1,\"373\":1,\"374\":1,\"375\":1,\"385\":1,\"396\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1,\"624\":1,\"656\":1,\"662\":1,\"674\":1,\"675\":1,\"683\":4,\"686\":1,\"689\":1,\"690\":1,\"691\":3,\"1258\":1,\"1277\":1,\"1456\":1,\"1458\":1}}],[\"ios\",{\"1\":{\"947\":1}}],[\"ioc\",{\"1\":{\"91\":1,\"92\":2}}],[\"ipad\",{\"1\":{\"952\":1}}],[\"ip\",{\"1\":{\"945\":1}}],[\"iphone6\",{\"1\":{\"952\":2}}],[\"iphone5\",{\"1\":{\"952\":1}}],[\"iphone4\",{\"1\":{\"952\":1}}],[\"iphone3g\",{\"1\":{\"952\":1}}],[\"iphone\",{\"1\":{\"944\":1}}],[\"i>\",{\"1\":{\"918\":1,\"919\":1,\"1037\":1}}],[\"ie10\",{\"1\":{\"1452\":1}}],[\"ie11\",{\"1\":{\"1064\":1}}],[\"ie9\",{\"1\":{\"1124\":1}}],[\"ie9+\",{\"1\":{\"920\":1}}],[\"ie6\",{\"1\":{\"985\":1}}],[\"ie6+\",{\"1\":{\"918\":1}}],[\"iefix\",{\"1\":{\"918\":1}}],[\"ie\",{\"0\":{\"1141\":1},\"1\":{\"909\":1,\"935\":1,\"995\":1,\"1027\":1,\"1064\":2,\"1102\":1,\"1106\":2,\"1141\":1,\"1281\":3}}],[\"ie5\",{\"1\":{\"884\":3}}],[\"ie8+\",{\"1\":{\"919\":1}}],[\"ie8\",{\"1\":{\"593\":1,\"1087\":2,\"1088\":2,\"1092\":2,\"1106\":1,\"1123\":1,\"1130\":2,\"1131\":2,\"1136\":1,\"1142\":1,\"1148\":1}}],[\"i911\",{\"1\":{\"512\":1}}],[\"iconfont\",{\"0\":{\"917\":1},\"1\":{\"918\":12,\"919\":1}}],[\"icon\",{\"1\":{\"138\":1,\"919\":2,\"920\":3}}],[\"i\",{\"1\":{\"114\":2,\"137\":1,\"192\":1,\"217\":1,\"248\":1,\"281\":3,\"282\":3,\"295\":10,\"316\":2,\"328\":5,\"349\":3,\"360\":4,\"373\":5,\"374\":4,\"375\":3,\"385\":3,\"392\":4,\"396\":4,\"424\":1,\"573\":1,\"578\":1,\"603\":3,\"604\":3,\"609\":3,\"610\":3,\"617\":3,\"624\":3,\"626\":3,\"627\":7,\"635\":6,\"656\":3,\"662\":6,\"665\":1,\"674\":6,\"675\":3,\"683\":14,\"686\":6,\"689\":3,\"690\":3,\"691\":11,\"695\":2,\"877\":1,\"1016\":4,\"1258\":2,\"1456\":7,\"1458\":2}}],[\"iterator\",{\"1\":{\"1171\":2,\"1172\":3,\"1173\":4,\"1174\":9,\"1275\":3}}],[\"item=>item\",{\"1\":{\"823\":1}}],[\"itemdata\",{\"1\":{\"651\":3}}],[\"items\",{\"1\":{\"220\":1}}],[\"item\",{\"0\":{\"1100\":1},\"1\":{\"70\":6,\"150\":7,\"160\":2,\"220\":4,\"424\":1,\"426\":1,\"460\":1,\"504\":6,\"635\":2,\"657\":3,\"662\":2,\"731\":6,\"747\":2,\"1100\":1,\"1178\":4,\"1221\":2,\"1276\":2}}],[\"italic\",{\"1\":{\"885\":1,\"887\":1}}],[\"it\",{\"1\":{\"270\":1,\"272\":1}}],[\"its\",{\"1\":{\"112\":1}}],[\"isinteger\",{\"1\":{\"1181\":1}}],[\"isidle\",{\"1\":{\"829\":1,\"832\":1}}],[\"isnan\",{\"1\":{\"1181\":1}}],[\"isconcatspreadable\",{\"1\":{\"1171\":2}}],[\"iscapturephase\",{\"1\":{\"290\":2,\"298\":2}}],[\"iscapturephaselistener\",{\"1\":{\"286\":6}}],[\"iscancel\",{\"1\":{\"67\":1}}],[\"isvalidtimeout\",{\"1\":{\"843\":1}}],[\"isextensible\",{\"1\":{\"1408\":1}}],[\"iserror\",{\"1\":{\"827\":2,\"829\":1}}],[\"iselementnode\",{\"1\":{\"695\":1}}],[\"isloading\",{\"1\":{\"787\":5,\"789\":3,\"827\":2,\"829\":3,\"845\":3,\"847\":1}}],[\"islogin\",{\"1\":{\"739\":1}}],[\"istextnode\",{\"1\":{\"695\":1}}],[\"istrue\",{\"1\":{\"508\":2}}],[\"issealed\",{\"1\":{\"1408\":1}}],[\"isserverrendering\",{\"1\":{\"631\":1,\"633\":1}}],[\"issuccess\",{\"1\":{\"829\":1}}],[\"isssr\",{\"1\":{\"631\":2}}],[\"isssr默认永久为false\",{\"1\":{\"631\":1}}],[\"isshow\",{\"1\":{\"567\":2}}],[\"isfinite\",{\"1\":{\"1181\":1}}],[\"isfetching\",{\"1\":{\"829\":3,\"843\":1}}],[\"isfsa\",{\"1\":{\"756\":2}}],[\"isfrozen\",{\"1\":{\"627\":1,\"1408\":1}}],[\"isf\",{\"1\":{\"627\":2}}],[\"iso\",{\"1\":{\"627\":2}}],[\"isbeingdestroyed\",{\"1\":{\"626\":1}}],[\"isplainobject\",{\"1\":{\"625\":3}}],[\"ispromise\",{\"1\":{\"756\":3}}],[\"isproxy\",{\"1\":{\"558\":1}}],[\"ispropagationstopped\",{\"1\":{\"293\":2,\"295\":2}}],[\"isreadonly\",{\"1\":{\"558\":1}}],[\"isreactive\",{\"1\":{\"558\":1}}],[\"isref\",{\"1\":{\"558\":1}}],[\"isrequired\",{\"1\":{\"149\":4}}],[\"isactive\",{\"1\":{\"714\":3}}],[\"isa\",{\"1\":{\"627\":3}}],[\"isauth\",{\"1\":{\"436\":1,\"437\":1}}],[\"isarray\",{\"1\":{\"272\":3,\"319\":3,\"348\":3,\"352\":3,\"357\":3,\"361\":3,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1,\"624\":1,\"627\":1,\"674\":1,\"675\":1,\"686\":1,\"689\":1}}],[\"is浅比较判断值是否改变\",{\"1\":{\"339\":1}}],[\"isdefaultprevented\",{\"1\":{\"293\":2}}],[\"isdirecttextchildren\",{\"1\":{\"272\":2,\"318\":2}}],[\"ishostparent\",{\"1\":{\"274\":3,\"326\":3,\"349\":3,\"375\":3,\"385\":3}}],[\"ishost\",{\"1\":{\"274\":3,\"326\":2,\"349\":2,\"375\":2,\"385\":2}}],[\"is\",{\"0\":{\"1183\":1},\"1\":{\"107\":1,\"112\":1,\"270\":1,\"272\":1,\"285\":1,\"286\":2,\"292\":2,\"295\":1,\"337\":1,\"338\":2,\"373\":3,\"392\":4,\"570\":1,\"1433\":1}}],[\"immutable\",{\"1\":{\"793\":1}}],[\"immediate\",{\"1\":{\"395\":2,\"451\":2,\"540\":4,\"625\":5,\"628\":2}}],[\"immediately\",{\"1\":{\"395\":1}}],[\"immediatepriority\",{\"1\":{\"394\":1,\"395\":3}}],[\"immer\",{\"1\":{\"103\":9,\"812\":1}}],[\"images\",{\"1\":{\"1045\":1}}],[\"imageurl\",{\"1\":{\"788\":2}}],[\"image\",{\"0\":{\"903\":1},\"1\":{\"129\":1,\"486\":1,\"903\":1,\"908\":1,\"909\":16,\"1057\":1}}],[\"important\",{\"1\":{\"918\":1,\"932\":1,\"1016\":1,\"1105\":1}}],[\"importfn\",{\"1\":{\"737\":2}}],[\"import\",{\"0\":{\"1017\":1,\"1229\":1},\"1\":{\"103\":1,\"112\":3,\"139\":1,\"145\":1,\"150\":5,\"155\":1,\"160\":1,\"182\":1,\"192\":1,\"197\":1,\"199\":1,\"201\":1,\"207\":6,\"208\":5,\"217\":1,\"237\":1,\"248\":2,\"249\":4,\"252\":2,\"269\":3,\"270\":3,\"271\":8,\"272\":22,\"273\":8,\"279\":1,\"280\":1,\"281\":1,\"286\":2,\"288\":3,\"291\":1,\"292\":3,\"293\":2,\"301\":1,\"305\":2,\"306\":1,\"308\":2,\"309\":1,\"311\":1,\"312\":1,\"315\":3,\"316\":1,\"317\":7,\"318\":6,\"319\":5,\"320\":4,\"321\":1,\"322\":3,\"325\":4,\"326\":3,\"327\":2,\"328\":3,\"329\":2,\"333\":2,\"335\":2,\"336\":1,\"338\":4,\"344\":2,\"348\":5,\"349\":3,\"351\":2,\"352\":5,\"353\":2,\"356\":2,\"357\":5,\"359\":2,\"360\":8,\"361\":5,\"367\":2,\"369\":2,\"370\":1,\"373\":6,\"374\":8,\"375\":4,\"377\":2,\"379\":2,\"380\":1,\"383\":2,\"384\":1,\"385\":4,\"395\":2,\"396\":8,\"407\":3,\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"424\":4,\"497\":1,\"499\":1,\"511\":2,\"512\":1,\"513\":1,\"514\":1,\"515\":2,\"516\":1,\"517\":2,\"518\":1,\"519\":4,\"520\":1,\"521\":1,\"539\":1,\"543\":1,\"557\":1,\"560\":4,\"568\":2,\"573\":1,\"586\":1,\"588\":3,\"602\":4,\"603\":5,\"604\":7,\"608\":1,\"609\":13,\"610\":8,\"613\":2,\"614\":1,\"616\":2,\"617\":5,\"618\":1,\"626\":1,\"631\":2,\"632\":1,\"634\":2,\"635\":3,\"640\":1,\"641\":1,\"647\":1,\"648\":2,\"651\":3,\"653\":3,\"654\":2,\"661\":1,\"668\":1,\"669\":1,\"674\":2,\"675\":4,\"683\":7,\"685\":2,\"686\":1,\"688\":3,\"690\":2,\"691\":2,\"694\":2,\"695\":1,\"709\":5,\"713\":1,\"715\":2,\"719\":1,\"721\":2,\"728\":1,\"730\":3,\"731\":10,\"732\":6,\"734\":3,\"735\":6,\"737\":3,\"738\":1,\"739\":3,\"740\":3,\"746\":1,\"749\":4,\"750\":1,\"755\":2,\"756\":1,\"760\":9,\"762\":1,\"770\":1,\"771\":1,\"773\":9,\"774\":5,\"776\":4,\"777\":8,\"785\":9,\"787\":1,\"788\":8,\"789\":8,\"795\":1,\"796\":1,\"797\":1,\"798\":1,\"802\":1,\"803\":1,\"804\":1,\"806\":1,\"807\":3,\"808\":3,\"810\":6,\"811\":3,\"812\":1,\"813\":2,\"816\":2,\"821\":2,\"822\":8,\"823\":12,\"826\":4,\"827\":2,\"1017\":4,\"1189\":2,\"1191\":4,\"1229\":2}}],[\"img\",{\"1\":{\"26\":1,\"788\":1}}],[\"in遍历这个对象\",{\"1\":{\"1274\":1}}],[\"inhertive\",{\"1\":{\"1225\":1}}],[\"inherit\",{\"1\":{\"886\":1,\"894\":1,\"895\":1,\"896\":1,\"897\":1,\"898\":1,\"924\":1}}],[\"infinity\",{\"1\":{\"1243\":1}}],[\"infinite\",{\"1\":{\"1016\":1}}],[\"info\",{\"1\":{\"625\":2,\"1407\":5}}],[\"inline\",{\"1\":{\"879\":2}}],[\"individual\",{\"1\":{\"830\":2}}],[\"indent\",{\"0\":{\"892\":1},\"1\":{\"273\":3,\"318\":3,\"320\":3,\"325\":3}}],[\"indeterminatecomponent\",{\"1\":{\"272\":1,\"318\":2,\"323\":1}}],[\"index是索引号\",{\"1\":{\"1284\":2}}],[\"indexpage\",{\"1\":{\"822\":4}}],[\"index属性\",{\"1\":{\"712\":1}}],[\"index映射表以查询乱序节点\",{\"1\":{\"692\":1}}],[\"indexinold\",{\"1\":{\"683\":4,\"691\":4}}],[\"index++\",{\"1\":{\"661\":1,\"1173\":1}}],[\"indexof\",{\"0\":{\"1365\":1},\"1\":{\"635\":1,\"646\":2,\"650\":1,\"655\":2,\"657\":1,\"695\":1,\"842\":2,\"843\":1,\"1375\":1}}],[\"index\",{\"0\":{\"307\":1,\"334\":1,\"368\":1,\"378\":1,\"653\":1,\"685\":1,\"773\":1,\"785\":1,\"996\":1},\"1\":{\"138\":3,\"150\":3,\"160\":2,\"161\":3,\"272\":5,\"305\":1,\"307\":1,\"312\":1,\"317\":1,\"319\":2,\"329\":1,\"333\":1,\"334\":1,\"348\":2,\"352\":2,\"357\":2,\"359\":1,\"360\":1,\"361\":4,\"367\":1,\"368\":1,\"374\":1,\"377\":1,\"378\":1,\"392\":17,\"396\":1,\"407\":1,\"424\":1,\"431\":1,\"437\":1,\"460\":2,\"461\":3,\"575\":1,\"635\":3,\"661\":10,\"662\":1,\"674\":1,\"675\":1,\"684\":1,\"694\":1,\"712\":1,\"730\":1,\"731\":2,\"734\":5,\"735\":1,\"739\":6,\"785\":1,\"810\":1,\"822\":1,\"823\":2,\"996\":3,\"1100\":1,\"1173\":2,\"1197\":2,\"1198\":1,\"1199\":1,\"1276\":2,\"1284\":2,\"1289\":2,\"1290\":2,\"1312\":1,\"1319\":4}}],[\"inyinhao\",{\"1\":{\"662\":4}}],[\"invalidatequeries\",{\"1\":{\"827\":1,\"836\":1}}],[\"invokewitherrorhandling\",{\"1\":{\"625\":1}}],[\"inversion\",{\"1\":{\"91\":1}}],[\"in循环的时候不会被读取\",{\"1\":{\"600\":1}}],[\"includes\",{\"1\":{\"1196\":1}}],[\"include\",{\"0\":{\"576\":1},\"1\":{\"576\":1,\"582\":1,\"1013\":2,\"1015\":1}}],[\"include=\",{\"1\":{\"433\":1}}],[\"incrementasync\",{\"1\":{\"418\":1,\"762\":3,\"763\":1,\"766\":1,\"767\":1,\"768\":2,\"774\":3,\"775\":1,\"777\":3,\"814\":4}}],[\"incrementaysnc\",{\"1\":{\"407\":1}}],[\"incrementwait\",{\"1\":{\"416\":2}}],[\"incrementodd\",{\"1\":{\"407\":1,\"416\":2,\"418\":1}}],[\"increment\",{\"1\":{\"407\":5,\"417\":2,\"418\":1,\"762\":1,\"768\":2,\"774\":5,\"775\":7,\"776\":2,\"777\":10,\"812\":3,\"813\":2}}],[\"incapturephase\",{\"1\":{\"292\":2,\"295\":4}}],[\"integer\",{\"1\":{\"395\":2,\"1230\":1}}],[\"internet\",{\"1\":{\"1019\":1}}],[\"internals\",{\"1\":{\"307\":1,\"308\":1,\"312\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1}}],[\"internalinstancehandle\",{\"1\":{\"297\":2,\"327\":3}}],[\"internalinstancekey\",{\"1\":{\"289\":3}}],[\"internalpropskey\",{\"1\":{\"289\":3}}],[\"internalroote\",{\"1\":{\"271\":2}}],[\"internalroot\",{\"1\":{\"269\":3,\"271\":2}}],[\"interface\",{\"1\":{\"578\":1,\"580\":3,\"583\":2,\"587\":1,\"588\":1,\"730\":1,\"816\":1}}],[\"inter\",{\"1\":{\"293\":3}}],[\"interval\",{\"1\":{\"201\":1}}],[\"interceptormanager\",{\"1\":{\"70\":4}}],[\"interceptors添加到axios函数身上\",{\"1\":{\"70\":1}}],[\"interceptors\",{\"0\":{\"66\":1},\"1\":{\"66\":2,\"70\":7,\"75\":1}}],[\"interceptor\",{\"1\":{\"29\":1}}],[\"init=0\",{\"1\":{\"749\":1}}],[\"initsidemenus\",{\"1\":{\"731\":2}}],[\"initstate\",{\"1\":{\"623\":1,\"703\":2}}],[\"initprovide\",{\"1\":{\"703\":1}}],[\"initinject\",{\"1\":{\"703\":1}}],[\"initial\",{\"1\":{\"897\":1,\"950\":2,\"960\":1,\"1225\":1}}],[\"initialisopen=\",{\"1\":{\"826\":1}}],[\"initialize\",{\"1\":{\"823\":1}}],[\"initialstate\",{\"1\":{\"338\":3,\"373\":3,\"776\":2,\"787\":2,\"812\":1,\"814\":1,\"816\":1,\"823\":1}}],[\"initialarg\",{\"1\":{\"306\":2,\"309\":2,\"315\":2,\"336\":4,\"338\":2,\"370\":4,\"373\":2,\"380\":4}}],[\"initialupdatequeue\",{\"1\":{\"271\":4,\"272\":1}}],[\"initialvalue\",{\"1\":{\"180\":1,\"186\":1}}],[\"initdata\",{\"1\":{\"694\":2}}],[\"initcomputed\",{\"0\":{\"631\":1},\"1\":{\"631\":1,\"633\":1,\"634\":4,\"635\":3,\"694\":1}}],[\"initwatch\",{\"0\":{\"624\":1},\"1\":{\"623\":1,\"624\":1,\"694\":2}}],[\"initvalue\",{\"1\":{\"409\":1,\"536\":1}}],[\"init\",{\"1\":{\"309\":2,\"336\":4,\"370\":4,\"380\":4,\"529\":1,\"668\":2,\"669\":2}}],[\"ins>或者<u><\",{\"1\":{\"1037\":1}}],[\"inset\",{\"1\":{\"909\":2,\"912\":2}}],[\"inserted\",{\"1\":{\"475\":3,\"561\":1,\"603\":5,\"604\":5,\"609\":5,\"610\":5,\"614\":5}}],[\"insertbefore\",{\"1\":{\"274\":1,\"326\":2,\"327\":2,\"349\":2,\"375\":2,\"385\":2,\"683\":5,\"691\":5,\"1094\":1}}],[\"insertorappendplacementnode\",{\"1\":{\"274\":6,\"326\":5,\"349\":5,\"375\":5,\"385\":5}}],[\"ins\",{\"1\":{\"877\":1}}],[\"inspect\",{\"1\":{\"493\":1}}],[\"instead\",{\"1\":{\"591\":1,\"787\":1}}],[\"installation\",{\"1\":{\"528\":1}}],[\"install\",{\"1\":{\"493\":1,\"500\":5,\"527\":1,\"529\":1,\"570\":1,\"784\":1,\"800\":1,\"821\":1,\"822\":1}}],[\"instanceof\",{\"1\":{\"675\":1,\"683\":1,\"688\":1,\"1171\":1,\"1395\":1,\"1461\":2}}],[\"instance\",{\"0\":{\"75\":1,\"107\":1},\"1\":{\"75\":1,\"105\":1,\"273\":4,\"290\":9,\"298\":7,\"320\":6,\"325\":6,\"326\":3,\"349\":3,\"375\":3,\"385\":3,\"1436\":1}}],[\"inst\",{\"1\":{\"291\":3,\"299\":2}}],[\"in\",{\"0\":{\"1274\":1,\"1401\":1},\"1\":{\"252\":1,\"272\":1,\"273\":1,\"293\":1,\"322\":6,\"328\":6,\"395\":1,\"460\":1,\"504\":2,\"524\":1,\"590\":1,\"591\":1,\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1,\"624\":1,\"631\":2,\"830\":1,\"831\":1,\"1016\":3,\"1031\":2,\"1168\":1,\"1274\":4,\"1275\":1,\"1401\":1,\"1403\":2,\"1404\":1,\"1460\":1,\"1461\":1}}],[\"inject\",{\"0\":{\"517\":1,\"560\":1},\"1\":{\"209\":1,\"517\":6,\"525\":1,\"560\":5,\"804\":3}}],[\"innerheight\",{\"1\":{\"1324\":1}}],[\"innerhtml\",{\"1\":{\"9\":1,\"26\":1,\"474\":1,\"641\":1,\"653\":1,\"683\":1,\"690\":1,\"1085\":2,\"1090\":1,\"1091\":4,\"1094\":2,\"1095\":1,\"1315\":1}}],[\"inner\",{\"0\":{\"1090\":1},\"1\":{\"1316\":1}}],[\"innerwidth\",{\"1\":{\"1062\":1,\"1324\":1}}],[\"innertext\",{\"1\":{\"497\":1,\"675\":1,\"683\":1,\"689\":1,\"690\":1,\"1090\":1,\"1091\":2,\"1129\":1}}],[\"innertext++\",{\"1\":{\"155\":1}}],[\"input=\",{\"1\":{\"511\":2,\"512\":1}}],[\"inputs\",{\"1\":{\"200\":1}}],[\"inputref\",{\"1\":{\"191\":5}}],[\"input<\",{\"1\":{\"189\":1}}],[\"inputel\",{\"1\":{\"189\":3}}],[\"input1\",{\"1\":{\"154\":2}}],[\"input\",{\"0\":{\"1019\":1},\"1\":{\"26\":4,\"465\":2,\"505\":1,\"511\":3,\"575\":1,\"588\":1,\"695\":2,\"873\":1,\"1057\":3,\"1330\":1}}],[\"idx\",{\"1\":{\"1405\":1}}],[\"ids\",{\"1\":{\"816\":1}}],[\"id不存在于已有depsid结构中时\",{\"1\":{\"635\":1}}],[\"id++\",{\"1\":{\"626\":1}}],[\"ideal\",{\"0\":{\"949\":1}}],[\"ide\",{\"1\":{\"584\":1}}],[\"idthis\",{\"1\":{\"429\":1,\"430\":1}}],[\"idle\",{\"1\":{\"395\":2,\"814\":1,\"829\":1,\"840\":2}}],[\"idlepriority\",{\"1\":{\"394\":1,\"395\":3}}],[\"id等\",{\"1\":{\"252\":1}}],[\"id\",{\"0\":{\"863\":1},\"1\":{\"20\":2,\"45\":1,\"116\":5,\"120\":1,\"150\":5,\"161\":1,\"201\":2,\"220\":1,\"234\":1,\"329\":2,\"330\":1,\"333\":2,\"392\":3,\"395\":1,\"427\":1,\"429\":1,\"430\":4,\"431\":3,\"432\":2,\"461\":1,\"505\":1,\"587\":1,\"626\":6,\"627\":1,\"632\":1,\"635\":9,\"700\":1,\"720\":2,\"721\":1,\"788\":2,\"789\":1,\"816\":5,\"827\":2,\"831\":2,\"832\":1,\"854\":1,\"860\":1,\"863\":10,\"864\":1,\"932\":2,\"937\":1,\"1085\":2,\"1092\":1,\"1286\":3,\"1460\":1,\"1461\":1}}],[\"id=666\",{\"1\":{\"429\":1}}],[\"id=\",{\"1\":{\"9\":2,\"26\":2,\"72\":2,\"301\":1,\"344\":2,\"351\":2,\"353\":2,\"356\":4,\"359\":2,\"448\":1,\"454\":3,\"475\":1,\"662\":1,\"1019\":1,\"1043\":1,\"1057\":2}}],[\"id=xxx\",{\"1\":{\"7\":1}}],[\"if=\",{\"1\":{\"457\":2,\"567\":1}}],[\"iframe\",{\"1\":{\"26\":1}}],[\"if\",{\"0\":{\"458\":1,\"1268\":1},\"1\":{\"9\":2,\"67\":1,\"69\":2,\"72\":4,\"98\":2,\"116\":3,\"124\":1,\"200\":1,\"201\":1,\"242\":1,\"245\":1,\"252\":3,\"270\":1,\"271\":2,\"272\":18,\"273\":11,\"274\":10,\"286\":3,\"290\":2,\"291\":2,\"292\":1,\"293\":3,\"295\":3,\"298\":2,\"299\":2,\"305\":1,\"306\":2,\"315\":6,\"316\":3,\"317\":3,\"318\":2,\"319\":13,\"320\":5,\"322\":22,\"325\":5,\"326\":12,\"328\":24,\"329\":2,\"333\":1,\"338\":7,\"348\":13,\"349\":14,\"352\":14,\"357\":25,\"360\":7,\"361\":35,\"373\":14,\"374\":11,\"375\":23,\"384\":4,\"385\":26,\"392\":7,\"395\":6,\"396\":11,\"407\":1,\"436\":3,\"437\":2,\"457\":5,\"458\":1,\"474\":1,\"601\":1,\"602\":4,\"603\":2,\"604\":5,\"607\":1,\"608\":1,\"609\":8,\"610\":4,\"613\":2,\"614\":1,\"615\":1,\"616\":2,\"617\":1,\"618\":2,\"624\":1,\"625\":4,\"626\":7,\"627\":4,\"631\":2,\"632\":3,\"633\":3,\"634\":3,\"635\":9,\"646\":1,\"647\":4,\"650\":1,\"654\":4,\"655\":1,\"657\":1,\"661\":7,\"662\":5,\"674\":5,\"675\":5,\"683\":20,\"686\":5,\"688\":3,\"689\":2,\"690\":4,\"691\":13,\"695\":9,\"712\":1,\"731\":4,\"737\":3,\"738\":5,\"739\":3,\"749\":1,\"755\":1,\"756\":2,\"816\":1,\"823\":2,\"827\":2,\"830\":1,\"842\":4,\"843\":7,\"1015\":8,\"1207\":2,\"1268\":4,\"1414\":1,\"1458\":4,\"1461\":2}}],[\"状态为成功\",{\"1\":{\"1177\":1}}],[\"状态表示网络请求正常获得结果\",{\"1\":{\"840\":1}}],[\"状态表示网络请求遇到了异常\",{\"1\":{\"840\":1}}],[\"状态表示\",{\"1\":{\"840\":1}}],[\"状态变化\",{\"0\":{\"840\":1}}],[\"状态变化处理\",{\"1\":{\"838\":1}}],[\"状态变动\",{\"1\":{\"732\":1}}],[\"状态值\",{\"0\":{\"829\":1,\"834\":1}}],[\"状态值发生变化时\",{\"1\":{\"186\":1}}],[\"状态转\",{\"1\":{\"753\":1}}],[\"状态管理\",{\"1\":{\"404\":1,\"752\":1}}],[\"状态更新之后\",{\"1\":{\"165\":1}}],[\"状态机\",{\"0\":{\"179\":1},\"1\":{\"142\":1}}],[\"状态的方法\",{\"1\":{\"84\":1}}],[\"状态\",{\"1\":{\"84\":1,\"103\":1,\"179\":1,\"840\":1}}],[\"状态字符串\",{\"1\":{\"9\":1}}],[\"状态码\",{\"1\":{\"9\":1}}],[\"状态4\",{\"1\":{\"9\":1}}],[\"状态0\",{\"1\":{\"9\":1}}],[\"判断一个变量是什么时\",{\"1\":{\"1428\":1}}],[\"判断一个对象是否被冻结\",{\"1\":{\"1408\":1}}],[\"判断一个对象是否可配置\",{\"1\":{\"1408\":1}}],[\"判断一个属性是不是对象自身上的属性\",{\"1\":{\"1274\":1}}],[\"判断对象是否可扩展\",{\"1\":{\"1408\":1}}],[\"判断引用类型\",{\"1\":{\"1395\":1}}],[\"判断值类型\",{\"1\":{\"1395\":1}}],[\"判断方式\",{\"0\":{\"1395\":1}}],[\"判断循环条件\",{\"1\":{\"1270\":1,\"1271\":1,\"1273\":1}}],[\"判断表达式的值\",{\"1\":{\"1263\":1}}],[\"判断字符的前面是否为某字符串\",{\"1\":{\"1216\":1}}],[\"判断为正数\",{\"1\":{\"1181\":1}}],[\"判断是否为该对象实例时\",{\"1\":{\"1171\":1}}],[\"判断是否捕获阶段\",{\"1\":{\"295\":1}}],[\"判断滚轮滚动方向\",{\"1\":{\"1146\":1}}],[\"判断指定的类名是否存在\",{\"1\":{\"1099\":1}}],[\"判断指针对应的对象的\",{\"1\":{\"676\":1}}],[\"判断属性节点是否存在\",{\"1\":{\"1096\":1}}],[\"判断speed正负值\",{\"1\":{\"1072\":1}}],[\"判断浏览器信息\",{\"1\":{\"1064\":1}}],[\"判断未登录跳转登录页\",{\"1\":{\"739\":1}}],[\"判断当前组件是否在<router>上下文中\",{\"1\":{\"724\":1}}],[\"判断当前路由是否需要进行权限控制\",{\"1\":{\"436\":1}}],[\"判断旧vnode有没有children\",{\"1\":{\"683\":1,\"690\":1}}],[\"判断新vnode有无text属性\",{\"1\":{\"683\":1,\"690\":1}}],[\"判断新旧vnode是否是同一个对象\",{\"1\":{\"683\":1,\"690\":1}}],[\"判断节点是否需要更新\",{\"1\":{\"676\":1}}],[\"判断oldvnode和newvnode是不是同一个节点\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"判断传入的第一个参数\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"判断传入参数\",{\"1\":{\"68\":1}}],[\"判断结束标签通过的语句中\",{\"1\":{\"661\":1}}],[\"判断开始标签通过的语句中\",{\"1\":{\"661\":1}}],[\"判断通过则将文本内容截取\",{\"1\":{\"661\":1}}],[\"判断通过则将标签截取\",{\"1\":{\"661\":1}}],[\"判断通过则将标签截取并推入到标签堆栈中\",{\"1\":{\"661\":1}}],[\"判断截取后标签与出栈标签是否相同\",{\"1\":{\"661\":1}}],[\"判断从\",{\"1\":{\"647\":1,\"654\":1}}],[\"判断出是属于\",{\"1\":{\"625\":1}}],[\"判断有没有要插入的新项\",{\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1}}],[\"判断执行更新\",{\"1\":{\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"判断老的\",{\"1\":{\"323\":1}}],[\"判断符合条件的\",{\"1\":{\"287\":1}}],[\"判断此fiber对应的节点是不是真实dom节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"判断上述几个条件\",{\"1\":{\"162\":1}}],[\"判断事件对象不存在立即返回\",{\"1\":{\"116\":1}}],[\"判断事件名称是否已建立模型\",{\"1\":{\"116\":1}}],[\"判断更新条件\",{\"1\":{\"92\":1}}],[\"判断条件\",{\"1\":{\"69\":1,\"72\":1}}],[\"判断请求是否取消\",{\"1\":{\"68\":1}}],[\"判断响应状态码\",{\"1\":{\"9\":1}}],[\"判断\",{\"1\":{\"9\":1,\"272\":1,\"273\":1,\"274\":1}}],[\"是用来检测属性是否为对象的自有属性\",{\"1\":{\"1402\":1}}],[\"是用户在表单元素输入的最大字符数\",{\"1\":{\"1057\":1}}],[\"是因为字符串底层也是以字符数组的形式保存的\",{\"1\":{\"1372\":1}}],[\"是函数对象\",{\"1\":{\"1344\":1}}],[\"是调用函数的意思\",{\"1\":{\"1344\":1}}],[\"是调整窗口大小加载事件\",{\"1\":{\"1062\":1}}],[\"是索引号\",{\"1\":{\"1319\":1}}],[\"是等页面文档\",{\"1\":{\"1282\":1}}],[\"是等页面内容全\",{\"1\":{\"1062\":1}}],[\"是官方主要更新维护的版本\",{\"1\":{\"1281\":1}}],[\"是循环条件判断\",{\"1\":{\"1277\":1}}],[\"是循环变量更新语句\",{\"1\":{\"1277\":1}}],[\"是引用数据类型\",{\"1\":{\"1241\":1}}],[\"是指引用前面表达式分组所匹配的文本\",{\"1\":{\"1391\":1}}],[\"是指混合使用大小写字母来构成变量和函数的名字\",{\"1\":{\"1240\":1}}],[\"是指用\",{\"1\":{\"861\":1}}],[\"是电脑程式编写时的一套命名规则\",{\"1\":{\"1240\":1}}],[\"是源程序的组成部分之一\",{\"1\":{\"1239\":1}}],[\"是静态的\",{\"1\":{\"1163\":1}}],[\"是绑定事件对象\",{\"1\":{\"1130\":1}}],[\"是可读写属性\",{\"1\":{\"1108\":1}}],[\"是个布尔值用于设置元素是否强制添加或者移除类\",{\"1\":{\"1102\":1}}],[\"是构成网页的最基本组成部分\",{\"1\":{\"1078\":1}}],[\"是窗口\",{\"1\":{\"1062\":1}}],[\"是并列的\",{\"1\":{\"1052\":1}}],[\"是<img>标签的必须属性\",{\"1\":{\"1044\":1}}],[\"是装内容的一个盒子\",{\"1\":{\"1038\":1}}],[\"是文档类型声明标签\",{\"1\":{\"1032\":1}}],[\"是国际最著名的标准化组织\",{\"1\":{\"1028\":1}}],[\"是国人开发的\",{\"1\":{\"818\":1}}],[\"是超文本标记语言\",{\"1\":{\"1026\":1}}],[\"是白色\",{\"1\":{\"1012\":1}}],[\"是父元素字体大小\",{\"1\":{\"963\":1}}],[\"是父级\",{\"1\":{\"871\":1}}],[\"是物理真实存在的\",{\"1\":{\"952\":1}}],[\"是网站的区域\",{\"1\":{\"948\":1}}],[\"是什么\",{\"0\":{\"1026\":1},\"1\":{\"919\":1}}],[\"是字体在网页端最原始的应用方式\",{\"1\":{\"918\":1}}],[\"是短竖线\",{\"1\":{\"909\":1}}],[\"是最理想的视口尺寸\",{\"1\":{\"949\":1}}],[\"是最典型的行内元素\",{\"1\":{\"877\":1}}],[\"是最典型的块元素\",{\"1\":{\"876\":1}}],[\"是最早的模板引擎库\",{\"1\":{\"639\":1}}],[\"是子级\",{\"1\":{\"871\":1}}],[\"是子组件传过来的数据\",{\"1\":{\"520\":1}}],[\"是在观察者观测到状态变化时\",{\"1\":{\"849\":1}}],[\"是在单文件组件\",{\"1\":{\"584\":1}}],[\"是键\",{\"1\":{\"816\":1}}],[\"是redux\",{\"1\":{\"781\":1}}],[\"是非常重用的方法\",{\"1\":{\"1392\":1}}],[\"是非常危险的\",{\"1\":{\"474\":1}}],[\"是非阻塞的\",{\"1\":{\"765\":1}}],[\"是自己当前的\",{\"1\":{\"759\":1}}],[\"是就\",{\"1\":{\"756\":1}}],[\"是的话执行action\",{\"1\":{\"756\":1}}],[\"是消息的载体\",{\"1\":{\"747\":1}}],[\"是原始路由配置数据\",{\"1\":{\"739\":1}}],[\"是为\",{\"1\":{\"724\":1}}],[\"是将\",{\"1\":{\"701\":1}}],[\"是同一节点\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"是dom节点\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"是dom节点还是虚拟节点\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"是data中数组的属性值\",{\"1\":{\"657\":1}}],[\"是这个节点的唯一标识\",{\"1\":{\"672\":1}}],[\"是著名的虚拟\",{\"1\":{\"665\":1}}],[\"是模板字符串的\",{\"1\":{\"644\":1}}],[\"是惰性取值的\",{\"1\":{\"636\":1}}],[\"是怎么解决的呢\",{\"1\":{\"634\":1}}],[\"是无法正确执行依赖收发的\",{\"1\":{\"634\":1}}],[\"是三大\",{\"1\":{\"630\":1}}],[\"是三种\",{\"1\":{\"628\":1,\"636\":1}}],[\"是实现\",{\"1\":{\"628\":1}}],[\"是object\",{\"1\":{\"627\":1}}],[\"是array\",{\"1\":{\"627\":1}}],[\"是出于数据外部的监听器\",{\"1\":{\"621\":1}}],[\"是响应式的\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"是嵌套对象\",{\"1\":{\"602\":1}}],[\"是只在\",{\"1\":{\"587\":1}}],[\"是围绕\",{\"1\":{\"585\":1}}],[\"是相同的\",{\"1\":{\"580\":1}}],[\"是所有\",{\"1\":{\"534\":1}}],[\"是使用的vite自身的模式\",{\"1\":{\"531\":1}}],[\"是改变原对象属性标签\",{\"1\":{\"524\":1}}],[\"是中央事件总线\",{\"1\":{\"518\":1}}],[\"是不能被自身修改的\",{\"1\":{\"498\":1}}],[\"是开发中最常用的写法\",{\"1\":{\"490\":1}}],[\"是vue\",{\"1\":{\"489\":1}}],[\"是当前操作的元素时才触发事件\",{\"1\":{\"471\":1}}],[\"是事件名\",{\"1\":{\"470\":1}}],[\"是产生新的对应数据\",{\"1\":{\"466\":2}}],[\"是动态\",{\"1\":{\"455\":1}}],[\"是替换当前历史记录\",{\"1\":{\"432\":1}}],[\"是追加历史记录\",{\"1\":{\"432\":1}}],[\"是否被按下\",{\"1\":{\"1152\":1}}],[\"是否在捕获阶段触发\",{\"1\":{\"1130\":1}}],[\"是否常用\",{\"1\":{\"999\":1}}],[\"是否脱标\",{\"1\":{\"999\":1}}],[\"是否占有位置\",{\"1\":{\"999\":1}}],[\"是否平铺\",{\"1\":{\"908\":1}}],[\"是否处于活跃状态\",{\"1\":{\"842\":1}}],[\"是否是\",{\"1\":{\"756\":1}}],[\"是否是捕获阶段\",{\"1\":{\"292\":1}}],[\"是否是捕获节点\",{\"1\":{\"286\":1}}],[\"是否服务端渲染\",{\"1\":{\"631\":1}}],[\"是否可以展开\",{\"1\":{\"1171\":1}}],[\"是否可以被枚举\",{\"1\":{\"600\":1}}],[\"是否可写\",{\"1\":{\"600\":1}}],[\"是否跳转到app\",{\"1\":{\"587\":1}}],[\"是否必传\",{\"1\":{\"587\":1}}],[\"是否存在\",{\"1\":{\"505\":1}}],[\"是否有更多的工作要做\",{\"1\":{\"395\":1}}],[\"是否有急切的更新\",{\"1\":{\"338\":1,\"373\":1}}],[\"是否不为\",{\"1\":{\"323\":1}}],[\"是否相同\",{\"1\":{\"323\":1}}],[\"是否已阻止继续传播\",{\"1\":{\"293\":1}}],[\"是否已阻止默认事件\",{\"1\":{\"293\":1}}],[\"是否跟踪副作用\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"是否为整数\",{\"1\":{\"1181\":1}}],[\"是否为有限数\",{\"1\":{\"1181\":1}}],[\"是否为空来判断给\",{\"1\":{\"323\":1}}],[\"是否为空且老\",{\"1\":{\"323\":1}}],[\"是否为\",{\"1\":{\"272\":1,\"628\":1,\"1181\":1}}],[\"是否直接设置文本节点\",{\"1\":{\"272\":1,\"318\":1}}],[\"是否发生变化\",{\"1\":{\"162\":4}}],[\"是页面上显示的current的fiber\",{\"1\":{\"272\":1,\"273\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"是有特殊含义的\",{\"1\":{\"270\":1}}],[\"是真正与所有节点相关联的节点属性\",{\"1\":{\"270\":1}}],[\"是基于单向\",{\"1\":{\"257\":1}}],[\"是没有问题的\",{\"1\":{\"161\":1,\"461\":1}}],[\"是虚拟\",{\"1\":{\"161\":1,\"461\":1}}],[\"是通过标签属性从组件外部向组件内部传递变化的数据\",{\"1\":{\"148\":1}}],[\"是通过装饰器模式\",{\"1\":{\"86\":1}}],[\"是组件对象最重要的属性\",{\"1\":{\"142\":1}}],[\"是\",{\"1\":{\"74\":2,\"100\":1,\"232\":1,\"423\":2,\"535\":1,\"593\":1,\"639\":1,\"665\":1,\"748\":1,\"817\":1,\"838\":1,\"843\":2,\"919\":1,\"924\":1,\"966\":1,\"985\":1,\"999\":2,\"1075\":1,\"1130\":1,\"1175\":1,\"1228\":1,\"1233\":1,\"1279\":1}}],[\"是即将与请求一起发送的\",{\"1\":{\"45\":1}}],[\"是即将被发送的自定义请求头\",{\"1\":{\"44\":1}}],[\"是利用\",{\"1\":{\"26\":1}}],[\"是一种接口\",{\"1\":{\"1172\":1}}],[\"是一种新型语言\",{\"1\":{\"1007\":1}}],[\"是一种架构思想\",{\"1\":{\"742\":1}}],[\"是一种能够将我们的组件\",{\"1\":{\"567\":1}}],[\"是一种数据结构\",{\"0\":{\"265\":1}}],[\"是一种基于\",{\"1\":{\"232\":1}}],[\"是一种在无需重新加载整个网页的情况下\",{\"1\":{\"2\":1}}],[\"是一个构造函数\",{\"1\":{\"1175\":1}}],[\"是一个相对单位\",{\"1\":{\"963\":1}}],[\"是一个容器及盒子\",{\"1\":{\"876\":1}}],[\"是一个纯函数\",{\"1\":{\"748\":1}}],[\"是一个中介\",{\"1\":{\"605\":1}}],[\"是一个宏任务\",{\"1\":{\"388\":1}}],[\"是一个执行单元\",{\"0\":{\"264\":1},\"1\":{\"264\":1}}],[\"是一个\",{\"1\":{\"248\":1,\"418\":1,\"1007\":1}}],[\"是一个可以在任何位置的有效\",{\"1\":{\"222\":1}}],[\"是一个负责\",{\"1\":{\"46\":1}}],[\"是一个非官方的跨域解决方案\",{\"1\":{\"26\":1}}],[\"是浏览器的一种安全策略\",{\"1\":{\"24\":1}}],[\"是xhr对象中的属性\",{\"1\":{\"9\":1}}],[\"0~999\",{\"1\":{\"1367\":1}}],[\"0~59\",{\"1\":{\"1367\":2}}],[\"0~23\",{\"1\":{\"1367\":1}}],[\"0~6\",{\"1\":{\"1367\":1}}],[\"0~1\",{\"1\":{\"908\":1,\"1367\":1,\"1370\":1}}],[\"00\",{\"1\":{\"1367\":3}}],[\"000\",{\"1\":{\"777\":1,\"1016\":3}}],[\"000000\",{\"1\":{\"192\":1,\"217\":1,\"1014\":2}}],[\"01234\",{\"1\":{\"1376\":3}}],[\"0123456789\",{\"1\":{\"1376\":15}}],[\"01\",{\"1\":{\"1367\":2}}],[\"0x\",{\"1\":{\"1181\":1,\"1252\":1}}],[\"0o\",{\"1\":{\"1181\":1}}],[\"0px\",{\"1\":{\"1016\":1}}],[\"07\",{\"1\":{\"631\":1}}],[\"05\",{\"1\":{\"631\":1}}],[\"0以上\",{\"1\":{\"527\":1}}],[\"0b\",{\"1\":{\"1181\":1,\"1252\":1}}],[\"0b111111111111111111111111111111\",{\"1\":{\"395\":1}}],[\"0b1000\",{\"1\":{\"371\":1,\"381\":1}}],[\"0b00000000000000010000000000\",{\"1\":{\"372\":1,\"382\":1}}],[\"0b00000000000000000000001000\",{\"1\":{\"345\":1,\"382\":1}}],[\"0b00000000000000000000000100\",{\"1\":{\"345\":1,\"382\":1}}],[\"0b00000000000000000000000001\",{\"1\":{\"382\":1}}],[\"0b00000000000000000000000000\",{\"1\":{\"345\":1,\"382\":1}}],[\"0b00000000000000000000000010\",{\"1\":{\"345\":1,\"382\":1}}],[\"0b0001\",{\"1\":{\"371\":1,\"381\":1}}],[\"0b0100\",{\"1\":{\"285\":1,\"371\":1,\"381\":1}}],[\"0冒泡\",{\"1\":{\"288\":1,\"292\":1}}],[\"02\",{\"1\":{\"103\":1}}],[\"0\",{\"1\":{\"9\":2,\"17\":2,\"20\":3,\"22\":2,\"26\":5,\"48\":1,\"60\":1,\"69\":1,\"110\":1,\"116\":1,\"145\":1,\"160\":1,\"169\":1,\"182\":1,\"194\":2,\"197\":2,\"227\":2,\"228\":2,\"229\":2,\"272\":3,\"281\":2,\"282\":1,\"286\":1,\"288\":1,\"292\":2,\"293\":2,\"295\":4,\"297\":1,\"305\":1,\"316\":3,\"319\":2,\"323\":1,\"328\":1,\"329\":1,\"333\":1,\"344\":2,\"348\":2,\"349\":1,\"351\":2,\"352\":2,\"353\":2,\"356\":2,\"357\":2,\"359\":2,\"360\":1,\"361\":3,\"373\":1,\"374\":1,\"375\":1,\"385\":1,\"392\":12,\"394\":1,\"396\":1,\"407\":1,\"500\":1,\"505\":1,\"516\":2,\"534\":1,\"539\":1,\"543\":2,\"561\":1,\"562\":2,\"603\":1,\"604\":1,\"609\":3,\"610\":1,\"615\":1,\"616\":1,\"617\":1,\"624\":1,\"626\":1,\"632\":1,\"634\":2,\"635\":5,\"646\":3,\"647\":2,\"648\":2,\"649\":1,\"651\":1,\"654\":2,\"655\":3,\"656\":2,\"657\":1,\"661\":5,\"662\":3,\"674\":1,\"675\":3,\"683\":5,\"686\":1,\"689\":3,\"690\":1,\"691\":4,\"695\":1,\"731\":3,\"749\":2,\"820\":1,\"842\":1,\"886\":1,\"889\":4,\"898\":3,\"908\":10,\"918\":1,\"920\":1,\"932\":18,\"950\":10,\"952\":12,\"960\":4,\"970\":2,\"971\":1,\"972\":2,\"982\":1,\"985\":1,\"996\":1,\"1015\":2,\"1016\":1,\"1048\":1,\"1100\":1,\"1124\":2,\"1173\":1,\"1181\":5,\"1183\":1,\"1195\":1,\"1250\":3,\"1251\":1,\"1252\":1,\"1256\":1,\"1260\":1,\"1263\":1,\"1264\":2,\"1268\":1,\"1269\":1,\"1271\":2,\"1272\":2,\"1275\":1,\"1289\":1,\"1290\":1,\"1307\":1,\"1364\":3,\"1366\":1,\"1369\":3,\"1376\":12,\"1381\":1,\"1382\":3,\"1384\":2,\"1385\":2,\"1405\":4,\"1413\":4,\"1414\":2,\"1456\":1,\"1458\":1,\"1461\":1}}],[\"n+\",{\"1\":{\"1384\":1}}],[\"n+1\",{\"1\":{\"156\":1}}],[\"npx\",{\"1\":{\"1192\":3}}],[\"npm\",{\"0\":{\"707\":1},\"1\":{\"136\":1,\"137\":2,\"424\":1,\"493\":2,\"527\":2,\"529\":3,\"570\":6,\"573\":1,\"578\":1,\"665\":2,\"784\":1,\"800\":1}}],[\"nth\",{\"1\":{\"1016\":3}}],[\"nbsp\",{\"1\":{\"749\":4}}],[\"nihao\",{\"1\":{\"721\":1}}],[\"n不是响应式数据\",{\"1\":{\"602\":1}}],[\"n\",{\"1\":{\"156\":3,\"602\":3,\"609\":1,\"610\":3,\"621\":1,\"626\":1,\"634\":1,\"635\":1,\"692\":1,\"1016\":4,\"1202\":1,\"1218\":1,\"1230\":3,\"1242\":1,\"1269\":2,\"1332\":1,\"1381\":1,\"1384\":11,\"1385\":9,\"1458\":19}}],[\"nul\",{\"1\":{\"1381\":1}}],[\"null\",{\"0\":{\"1244\":1},\"1\":{\"59\":1,\"72\":3,\"156\":1,\"189\":1,\"201\":2,\"202\":1,\"245\":1,\"248\":1,\"252\":2,\"270\":11,\"271\":4,\"272\":42,\"273\":10,\"274\":7,\"288\":1,\"289\":1,\"290\":2,\"291\":4,\"292\":1,\"298\":2,\"299\":4,\"306\":12,\"310\":1,\"315\":22,\"316\":7,\"317\":7,\"318\":6,\"319\":13,\"320\":6,\"322\":8,\"323\":2,\"325\":6,\"326\":11,\"328\":8,\"330\":1,\"338\":27,\"346\":10,\"348\":13,\"349\":17,\"352\":16,\"357\":28,\"360\":7,\"361\":39,\"373\":39,\"374\":9,\"375\":25,\"385\":26,\"392\":2,\"395\":8,\"396\":10,\"475\":2,\"609\":1,\"615\":1,\"631\":1,\"635\":1,\"662\":1,\"683\":5,\"691\":5,\"737\":1,\"738\":1,\"787\":3,\"1015\":1,\"1078\":2,\"1100\":1,\"1106\":2,\"1129\":1,\"1228\":3,\"1241\":1,\"1244\":2,\"1249\":3,\"1250\":1,\"1251\":1,\"1261\":1,\"1264\":2,\"1271\":1,\"1410\":1,\"1413\":2,\"1414\":1,\"1442\":1}}],[\"num++\",{\"1\":{\"1271\":1,\"1273\":1}}],[\"num1\",{\"1\":{\"582\":1}}],[\"num\",{\"1\":{\"407\":5,\"519\":3,\"1016\":5,\"1202\":7,\"1271\":3,\"1272\":5,\"1273\":3,\"1453\":1}}],[\"number700\",{\"1\":{\"884\":1}}],[\"number400\",{\"1\":{\"884\":1}}],[\"number>\",{\"1\":{\"586\":2}}],[\"number\",{\"0\":{\"1243\":1,\"1250\":1},\"1\":{\"149\":4,\"272\":2,\"273\":4,\"305\":2,\"318\":2,\"319\":1,\"320\":2,\"322\":2,\"325\":2,\"327\":1,\"328\":2,\"329\":3,\"333\":4,\"344\":4,\"348\":1,\"351\":4,\"352\":1,\"353\":4,\"356\":4,\"357\":1,\"359\":4,\"361\":2,\"367\":3,\"377\":4,\"465\":1,\"498\":1,\"582\":1,\"583\":2,\"587\":1,\"674\":1,\"686\":1,\"788\":1,\"814\":1,\"816\":1,\"884\":1,\"1019\":1,\"1063\":1,\"1181\":7,\"1230\":1,\"1241\":1,\"1243\":5,\"1250\":1,\"1256\":2,\"1257\":1,\"1261\":1,\"1271\":1,\"1312\":1,\"1339\":2,\"1371\":1,\"1410\":1,\"1413\":5,\"1414\":1,\"1415\":1,\"1417\":1,\"1440\":1}}],[\"nan\",{\"1\":{\"1181\":1,\"1183\":2,\"1243\":2,\"1250\":3,\"1251\":1,\"1261\":1,\"1271\":1,\"1376\":3,\"1413\":4}}],[\"nanoid\",{\"1\":{\"816\":2}}],[\"navigator\",{\"0\":{\"1064\":1},\"1\":{\"1061\":1,\"1064\":1}}],[\"navigate\",{\"1\":{\"709\":1,\"715\":1,\"719\":3,\"728\":2,\"730\":1,\"731\":2,\"737\":1,\"738\":3}}],[\"nav>a\",{\"1\":{\"873\":1}}],[\"nav\",{\"1\":{\"864\":2,\"873\":2}}],[\"navlink\",{\"1\":{\"822\":1,\"823\":1}}],[\"navlink添加end属性\",{\"1\":{\"714\":1}}],[\"navlink>\",{\"1\":{\"714\":2,\"822\":1,\"823\":1}}],[\"navlink默认类名是active\",{\"1\":{\"714\":1}}],[\"native=\",{\"1\":{\"515\":1}}],[\"native\",{\"1\":{\"515\":1,\"563\":1,\"707\":1,\"1440\":3}}],[\"nativeeventtype\",{\"1\":{\"290\":1,\"298\":1}}],[\"nativeeventtarget指的是原始事件源\",{\"1\":{\"295\":1}}],[\"nativeeventtarget\",{\"1\":{\"288\":2,\"290\":4,\"292\":3,\"293\":3,\"295\":2,\"297\":2}}],[\"nativeevent\",{\"1\":{\"288\":10,\"290\":7,\"292\":4,\"293\":7,\"295\":3,\"297\":3}}],[\"native编写原生应用\",{\"1\":{\"81\":1}}],[\"nameset\",{\"1\":{\"1407\":3}}],[\"namespace\",{\"1\":{\"820\":1,\"823\":2}}],[\"namespaced\",{\"1\":{\"418\":2}}],[\"nameget\",{\"1\":{\"1407\":2}}],[\"name和\",{\"1\":{\"649\":1}}],[\"namearr\",{\"1\":{\"539\":3}}],[\"name>\",{\"1\":{\"529\":2,\"1016\":2}}],[\"name\",{\"1\":{\"17\":1,\"19\":1,\"20\":2,\"22\":1,\"26\":4,\"28\":1,\"67\":2,\"103\":8,\"106\":4,\"149\":7,\"240\":3,\"360\":1,\"374\":1,\"396\":1,\"427\":3,\"430\":3,\"431\":1,\"432\":2,\"437\":1,\"448\":2,\"451\":1,\"466\":1,\"468\":1,\"498\":3,\"499\":4,\"505\":4,\"512\":1,\"515\":2,\"516\":4,\"517\":5,\"520\":2,\"534\":2,\"537\":1,\"540\":1,\"549\":1,\"553\":2,\"557\":1,\"560\":1,\"640\":5,\"641\":5,\"644\":1,\"647\":3,\"649\":2,\"650\":1,\"651\":1,\"653\":5,\"654\":2,\"657\":1,\"662\":4,\"695\":4,\"721\":2,\"730\":1,\"812\":1,\"814\":1,\"816\":1,\"823\":4,\"1057\":2,\"1063\":2,\"1085\":2,\"1092\":1,\"1096\":1,\"1106\":3,\"1160\":3,\"1162\":2,\"1173\":1,\"1214\":1,\"1217\":2,\"1224\":4,\"1228\":5,\"1274\":1,\"1341\":2,\"1407\":24,\"1433\":8,\"1436\":3,\"1460\":1,\"1461\":1}}],[\"name=zhangsan\",{\"1\":{\"722\":1}}],[\"name=nihao\",{\"1\":{\"721\":1}}],[\"name=\",{\"1\":{\"106\":1,\"504\":2,\"508\":1,\"515\":1,\"520\":1,\"950\":1,\"960\":1,\"1019\":1,\"1056\":1,\"1057\":2,\"1341\":1}}],[\"name=xxx\",{\"1\":{\"7\":1}}],[\"name=guigucontent\",{\"1\":{\"7\":1}}],[\"noconflict\",{\"1\":{\"1333\":2}}],[\"noetype\",{\"1\":{\"1078\":1}}],[\"nopermission\",{\"1\":{\"730\":1}}],[\"nopriority\",{\"1\":{\"394\":1,\"395\":2}}],[\"noop\",{\"1\":{\"631\":3,\"633\":6}}],[\"no\",{\"1\":{\"578\":3,\"591\":1,\"631\":1,\"829\":1,\"830\":1,\"904\":1,\"908\":1,\"950\":1,\"1016\":1}}],[\"none\",{\"1\":{\"474\":1,\"891\":1,\"894\":1,\"903\":1,\"909\":2,\"977\":1,\"1106\":1,\"1225\":1}}],[\"normalschedulepriority\",{\"1\":{\"396\":3}}],[\"normal\",{\"1\":{\"395\":2,\"884\":1,\"885\":2,\"887\":3,\"895\":1,\"896\":1,\"898\":1,\"899\":1,\"900\":1,\"918\":1,\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"normalpriority\",{\"1\":{\"394\":1,\"395\":3,\"396\":1}}],[\"note\",{\"1\":{\"952\":1}}],[\"notify通知到当前watcher实例引发更新\",{\"1\":{\"635\":1}}],[\"notify\",{\"1\":{\"608\":1,\"609\":2,\"610\":2,\"613\":1,\"614\":1,\"615\":1,\"635\":1,\"700\":1}}],[\"not\",{\"1\":{\"307\":1,\"308\":1,\"312\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1,\"730\":1,\"964\":5,\"1243\":1}}],[\"noflags\",{\"1\":{\"270\":3,\"272\":5,\"273\":2,\"274\":2,\"317\":3,\"320\":2,\"325\":2,\"345\":1,\"346\":2,\"360\":5,\"374\":7,\"382\":1,\"384\":4,\"396\":7}}],[\"nodelist\",{\"1\":{\"1172\":1,\"1275\":1}}],[\"nodevalue\",{\"1\":{\"1078\":1}}],[\"nodename\",{\"1\":{\"1078\":1}}],[\"nodeattrs\",{\"1\":{\"695\":2}}],[\"node2fragment\",{\"1\":{\"695\":3}}],[\"nodejs\",{\"1\":{\"103\":1,\"1188\":1}}],[\"node\",{\"0\":{\"1192\":1},\"1\":{\"29\":1,\"47\":1,\"60\":1,\"62\":1,\"249\":1,\"270\":1,\"271\":4,\"272\":1,\"273\":15,\"274\":20,\"289\":7,\"316\":10,\"320\":15,\"325\":15,\"326\":20,\"349\":20,\"375\":20,\"385\":20,\"392\":13,\"524\":1,\"576\":1,\"578\":1,\"695\":17,\"826\":1,\"1007\":2,\"1078\":1,\"1231\":1}}],[\"nowrap\",{\"1\":{\"898\":1,\"926\":1}}],[\"now\",{\"1\":{\"14\":1,\"107\":1,\"395\":1,\"816\":1,\"1367\":1}}],[\"nginx实现跨域的原理\",{\"1\":{\"28\":1}}],[\"nginx代理\",{\"1\":{\"28\":1}}],[\"nginx\",{\"1\":{\"28\":1}}],[\"nexus\",{\"1\":{\"952\":3}}],[\"nextall\",{\"1\":{\"1290\":2}}],[\"nextsibling\",{\"1\":{\"1088\":1}}],[\"nextstate\",{\"1\":{\"98\":2,\"272\":2,\"318\":2}}],[\"nextelementsibling\",{\"1\":{\"683\":1,\"691\":1,\"1088\":1}}],[\"nexttick\",{\"0\":{\"505\":1},\"1\":{\"505\":6}}],[\"nextdeps\",{\"1\":{\"373\":10}}],[\"nextoldfiber\",{\"1\":{\"357\":3,\"361\":3}}],[\"nextprop\",{\"1\":{\"273\":8,\"322\":22,\"328\":22}}],[\"nextprops\",{\"1\":{\"98\":2,\"272\":3,\"273\":4,\"318\":5,\"322\":9,\"328\":9}}],[\"nextchildren\",{\"1\":{\"272\":9,\"318\":11}}],[\"next\",{\"1\":{\"271\":4,\"272\":14,\"273\":3,\"306\":2,\"315\":8,\"316\":4,\"317\":3,\"323\":1,\"338\":9,\"360\":3,\"373\":15,\"374\":3,\"375\":4,\"385\":4,\"396\":3,\"436\":3,\"437\":3,\"438\":2,\"755\":2,\"756\":4,\"788\":2,\"1173\":5,\"1174\":8}}],[\"nesttokens\",{\"0\":{\"656\":1},\"1\":{\"644\":2,\"648\":13,\"654\":3,\"656\":1}}],[\"nestedtokens\",{\"1\":{\"656\":4}}],[\"nested\",{\"1\":{\"591\":1}}],[\"neither\",{\"1\":{\"392\":1}}],[\"nearestmountedancestor\",{\"1\":{\"349\":4,\"375\":4,\"385\":4}}],[\"needlogin\",{\"1\":{\"739\":2}}],[\"needed\",{\"1\":{\"270\":1,\"272\":1,\"570\":1}}],[\"need\",{\"1\":{\"270\":1,\"272\":1}}],[\"never\",{\"1\":{\"112\":1,\"270\":1,\"272\":1,\"395\":1}}],[\"net\",{\"1\":{\"96\":1,\"790\":1}}],[\"netscape\",{\"1\":{\"24\":1}}],[\"newobj\",{\"1\":{\"1460\":3,\"1461\":8}}],[\"newmenus\",{\"1\":{\"731\":2}}],[\"newch\",{\"1\":{\"683\":16,\"691\":16}}],[\"newchildren\",{\"1\":{\"272\":3,\"319\":3,\"348\":3,\"352\":3,\"354\":6,\"357\":6,\"358\":1,\"361\":8}}],[\"newchild\",{\"1\":{\"272\":18,\"319\":20,\"348\":20,\"352\":20,\"357\":26,\"361\":37}}],[\"newendvnode\",{\"1\":{\"683\":9,\"691\":9}}],[\"newendindex\",{\"1\":{\"683\":11,\"691\":11}}],[\"newend\",{\"0\":{\"678\":1,\"679\":1},\"1\":{\"678\":1}}],[\"newafter\",{\"1\":{\"676\":2}}],[\"newbefore\",{\"1\":{\"676\":2}}],[\"newvue简化流程图\",{\"1\":{\"698\":1}}],[\"newvue流程图\",{\"1\":{\"698\":1}}],[\"newval\",{\"1\":{\"694\":2,\"695\":3}}],[\"newvalue和oldvalue可以正常显示\",{\"1\":{\"451\":1}}],[\"newvalue\",{\"1\":{\"182\":2,\"451\":7,\"540\":12,\"557\":2,\"601\":7,\"602\":9,\"604\":5,\"608\":5,\"609\":5,\"610\":5,\"613\":5,\"626\":3}}],[\"newvnodeelm\",{\"1\":{\"675\":3,\"683\":3,\"688\":3}}],[\"newvnode\",{\"1\":{\"675\":4,\"682\":1,\"683\":15,\"688\":5,\"690\":10}}],[\"newvnode必须是vnode\",{\"1\":{\"675\":1}}],[\"newdepids\",{\"1\":{\"635\":9}}],[\"newdeps\",{\"1\":{\"635\":7}}],[\"newstartvnode\",{\"1\":{\"683\":13,\"691\":13}}],[\"newstartindex\",{\"1\":{\"683\":5,\"691\":5}}],[\"newstart++\",{\"1\":{\"677\":1}}],[\"newstart\",{\"0\":{\"677\":1,\"680\":1},\"1\":{\"680\":1}}],[\"newstate\",{\"1\":{\"272\":4,\"315\":5,\"323\":1,\"338\":5,\"373\":5,\"750\":1}}],[\"news\",{\"1\":{\"426\":4,\"427\":2,\"430\":2,\"433\":1}}],[\"newtask\",{\"1\":{\"395\":3}}],[\"newtext\",{\"1\":{\"273\":4,\"320\":2,\"325\":2,\"327\":2}}],[\"newidx++\",{\"1\":{\"357\":2,\"361\":3}}],[\"newidx\",{\"1\":{\"357\":8,\"361\":16}}],[\"newindex++\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1}}],[\"newindex\",{\"1\":{\"272\":8,\"319\":8,\"348\":8,\"352\":8,\"357\":4,\"361\":4}}],[\"newhook\",{\"1\":{\"315\":3,\"338\":3,\"373\":3}}],[\"newprops\",{\"1\":{\"273\":5,\"320\":7,\"321\":2,\"325\":7,\"326\":3,\"327\":5,\"349\":3,\"375\":3,\"385\":3}}],[\"newfiber\",{\"1\":{\"272\":13,\"319\":14,\"348\":14,\"352\":14,\"357\":22,\"361\":32}}],[\"new\",{\"1\":{\"9\":1,\"67\":2,\"69\":4,\"70\":4,\"71\":1,\"72\":7,\"114\":1,\"115\":2,\"134\":1,\"165\":1,\"202\":1,\"239\":2,\"269\":2,\"270\":2,\"271\":2,\"272\":2,\"281\":1,\"282\":1,\"284\":1,\"292\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":2,\"388\":1,\"395\":1,\"407\":2,\"418\":1,\"424\":2,\"427\":1,\"430\":1,\"439\":1,\"448\":1,\"454\":3,\"466\":1,\"475\":2,\"487\":1,\"489\":1,\"518\":2,\"519\":1,\"549\":1,\"602\":2,\"604\":4,\"608\":2,\"609\":4,\"610\":5,\"613\":1,\"617\":1,\"618\":2,\"625\":3,\"627\":1,\"631\":1,\"635\":2,\"647\":1,\"654\":1,\"661\":2,\"674\":3,\"683\":1,\"686\":3,\"691\":1,\"692\":1,\"694\":2,\"695\":2,\"698\":1,\"747\":1,\"764\":1,\"765\":1,\"777\":2,\"802\":1,\"807\":2,\"815\":2,\"826\":1,\"830\":1,\"837\":1,\"840\":1,\"841\":1,\"1178\":6,\"1206\":1,\"1207\":2,\"1224\":1,\"1269\":1,\"1274\":1,\"1341\":1,\"1343\":1,\"1353\":2,\"1367\":1,\"1381\":1,\"1397\":1,\"1431\":2,\"1433\":2,\"1436\":3}}],[\"f1\",{\"1\":{\"1456\":3}}],[\"f12or\",{\"1\":{\"940\":1}}],[\"f12\",{\"1\":{\"91\":2}}],[\"fff\",{\"1\":{\"960\":1,\"1016\":3}}],[\"ffffff\",{\"1\":{\"192\":1,\"217\":1}}],[\"ff0000\",{\"1\":{\"889\":1,\"1013\":1}}],[\"feature\",{\"1\":{\"964\":3}}],[\"features\",{\"1\":{\"811\":2,\"813\":1}}],[\"fetchtodos\",{\"1\":{\"845\":3}}],[\"fetchteams\",{\"1\":{\"831\":1}}],[\"fetchoptions\",{\"1\":{\"840\":2}}],[\"fetchprojects\",{\"1\":{\"831\":1}}],[\"fetchcount\",{\"1\":{\"814\":2}}],[\"fetching\",{\"1\":{\"787\":1,\"829\":1}}],[\"fetchwhiskiesepic\",{\"1\":{\"788\":2}}],[\"fetchwhiskiesfailure\",{\"1\":{\"786\":1,\"788\":2}}],[\"fetchwhiskiessuccess\",{\"1\":{\"786\":1,\"788\":2}}],[\"fetchwhiskies\",{\"1\":{\"786\":1,\"789\":4}}],[\"fetchuserbyid\",{\"1\":{\"831\":1}}],[\"fetchusers\",{\"1\":{\"831\":1}}],[\"fetchuser\",{\"1\":{\"777\":2}}],[\"fetchdata\",{\"1\":{\"756\":2,\"763\":1,\"764\":1,\"765\":1}}],[\"fetch\",{\"0\":{\"22\":1},\"1\":{\"22\":3,\"756\":1,\"771\":2,\"775\":1,\"776\":3,\"777\":3,\"786\":9,\"787\":8,\"788\":2,\"819\":1,\"840\":2,\"841\":1}}],[\"fs\",{\"1\":{\"574\":2}}],[\"fbind\",{\"1\":{\"500\":1}}],[\"flatmap\",{\"0\":{\"1221\":1},\"1\":{\"1221\":2}}],[\"flat\",{\"0\":{\"1221\":1},\"1\":{\"1221\":3}}],[\"flags\",{\"1\":{\"270\":1,\"272\":4,\"273\":1,\"274\":6,\"317\":1,\"319\":3,\"320\":2,\"323\":1,\"325\":2,\"326\":8,\"346\":1,\"348\":3,\"349\":8,\"352\":3,\"357\":3,\"360\":9,\"361\":4,\"373\":2,\"374\":10,\"375\":20,\"384\":2,\"385\":24,\"396\":10}}],[\"flag\",{\"1\":{\"144\":1,\"150\":3,\"373\":1,\"1173\":4}}],[\"floor\",{\"1\":{\"1370\":1}}],[\"float\",{\"1\":{\"977\":2,\"1000\":1}}],[\"flow\",{\"1\":{\"631\":2,\"799\":2}}],[\"flexible\",{\"1\":{\"966\":1}}],[\"flex\",{\"0\":{\"961\":1},\"1\":{\"959\":1,\"961\":1,\"962\":2}}],[\"flux\",{\"0\":{\"742\":1},\"1\":{\"741\":1,\"742\":2,\"756\":2}}],[\"flushwork\",{\"1\":{\"395\":4}}],[\"flushwork执行工作\",{\"1\":{\"395\":1}}],[\"flushpassiveeffect\",{\"1\":{\"374\":2,\"384\":1,\"396\":2}}],[\"f\",{\"1\":{\"359\":1,\"939\":1,\"1016\":1,\"1129\":2,\"1381\":1,\"1456\":2}}],[\"fps\",{\"1\":{\"260\":1}}],[\"front\",{\"1\":{\"574\":2,\"1217\":1}}],[\"fromentries\",{\"0\":{\"1218\":1}}],[\"from\",{\"0\":{\"1195\":1},\"1\":{\"103\":1,\"108\":1,\"112\":3,\"139\":1,\"145\":1,\"150\":3,\"155\":1,\"160\":1,\"182\":1,\"192\":1,\"197\":1,\"199\":1,\"201\":1,\"207\":2,\"208\":3,\"217\":1,\"237\":1,\"248\":2,\"249\":5,\"251\":1,\"252\":2,\"269\":3,\"270\":3,\"271\":8,\"272\":22,\"273\":8,\"279\":1,\"280\":1,\"281\":1,\"286\":2,\"288\":3,\"291\":1,\"292\":3,\"293\":2,\"301\":1,\"305\":2,\"306\":1,\"307\":1,\"308\":2,\"309\":1,\"311\":1,\"312\":1,\"315\":3,\"316\":1,\"317\":7,\"318\":6,\"319\":5,\"320\":4,\"321\":1,\"322\":3,\"325\":4,\"326\":3,\"327\":2,\"328\":3,\"329\":2,\"333\":2,\"334\":1,\"335\":2,\"336\":1,\"338\":4,\"344\":2,\"348\":5,\"349\":3,\"351\":2,\"352\":5,\"353\":2,\"356\":2,\"357\":5,\"359\":2,\"360\":8,\"361\":5,\"367\":2,\"368\":1,\"369\":2,\"370\":1,\"373\":6,\"374\":8,\"375\":4,\"377\":2,\"378\":1,\"379\":2,\"380\":1,\"383\":2,\"384\":1,\"385\":4,\"395\":2,\"396\":8,\"407\":3,\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"424\":4,\"436\":4,\"437\":2,\"438\":2,\"497\":1,\"499\":1,\"511\":2,\"512\":1,\"513\":1,\"514\":1,\"515\":2,\"516\":1,\"517\":2,\"518\":1,\"519\":4,\"520\":1,\"521\":1,\"539\":1,\"543\":1,\"557\":1,\"560\":4,\"562\":2,\"568\":1,\"586\":1,\"588\":3,\"602\":4,\"603\":6,\"604\":8,\"608\":1,\"609\":14,\"610\":9,\"613\":2,\"614\":2,\"616\":2,\"617\":5,\"618\":1,\"626\":1,\"631\":2,\"632\":1,\"634\":2,\"635\":3,\"640\":1,\"641\":1,\"647\":1,\"648\":2,\"651\":3,\"653\":2,\"654\":2,\"661\":1,\"668\":1,\"669\":1,\"674\":2,\"675\":4,\"683\":7,\"685\":2,\"686\":1,\"688\":3,\"690\":2,\"691\":2,\"694\":2,\"695\":3,\"709\":5,\"713\":1,\"715\":2,\"719\":1,\"721\":2,\"728\":1,\"730\":2,\"731\":7,\"732\":6,\"734\":3,\"735\":6,\"737\":3,\"738\":1,\"740\":3,\"746\":1,\"749\":4,\"750\":1,\"755\":2,\"756\":1,\"760\":9,\"762\":1,\"770\":1,\"771\":1,\"773\":9,\"774\":4,\"776\":4,\"777\":8,\"785\":8,\"787\":1,\"788\":4,\"789\":7,\"795\":1,\"796\":1,\"797\":1,\"798\":1,\"802\":1,\"803\":1,\"804\":1,\"806\":1,\"807\":3,\"808\":3,\"810\":5,\"811\":3,\"812\":1,\"813\":2,\"816\":2,\"822\":8,\"823\":11,\"826\":3,\"827\":2,\"842\":1,\"1016\":2,\"1189\":1,\"1191\":4,\"1195\":1}}],[\"frames\",{\"1\":{\"1231\":1}}],[\"frameinterval\",{\"1\":{\"395\":2}}],[\"fragment\",{\"0\":{\"566\":1},\"1\":{\"220\":1,\"525\":1,\"566\":1,\"675\":1,\"683\":3,\"689\":1,\"690\":3,\"695\":4,\"701\":2}}],[\"fragment>\",{\"1\":{\"218\":2,\"220\":2}}],[\"fragments\",{\"0\":{\"218\":1},\"1\":{\"218\":1,\"220\":1}}],[\"freeze\",{\"1\":{\"1408\":1}}],[\"free\",{\"1\":{\"270\":1,\"272\":1}}],[\"fn=\",{\"1\":{\"514\":1}}],[\"fn\",{\"1\":{\"200\":2,\"513\":2,\"514\":5,\"515\":2,\"516\":4,\"518\":4,\"737\":2,\"740\":1,\"765\":2,\"839\":1,\"1303\":4,\"1304\":4,\"1307\":6,\"1308\":2,\"1328\":2,\"1335\":1,\"1410\":1,\"1453\":1}}],[\"fib\",{\"1\":{\"1458\":6}}],[\"fiberflags\",{\"1\":{\"373\":4}}],[\"fiber复用\",{\"1\":{\"352\":1,\"357\":1,\"361\":1}}],[\"fiberhooks\",{\"1\":{\"323\":1}}],[\"fiberhook\",{\"1\":{\"323\":1}}],[\"fiber实例\",{\"1\":{\"289\":1}}],[\"fiberj节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"fiber类型\",{\"1\":{\"270\":2,\"272\":2}}],[\"fiberrootnode输出结果\",{\"1\":{\"269\":1}}],[\"fiberrootnode\",{\"0\":{\"269\":1},\"1\":{\"269\":4,\"270\":3,\"271\":4,\"272\":1,\"316\":1,\"374\":1,\"396\":1}}],[\"fibernode输出结果\",{\"1\":{\"270\":1}}],[\"fibernode\",{\"0\":{\"270\":1},\"1\":{\"268\":1,\"270\":5,\"271\":1,\"272\":2,\"319\":2,\"346\":1,\"348\":2,\"352\":2,\"357\":2,\"361\":2}}],[\"fiberchain\",{\"1\":{\"265\":1}}],[\"fiberunit\",{\"1\":{\"264\":1}}],[\"fiber\",{\"0\":{\"256\":1,\"263\":1,\"264\":1,\"265\":1,\"267\":1,\"268\":1},\"1\":{\"92\":2,\"162\":16,\"263\":3,\"264\":1,\"265\":1,\"266\":1,\"268\":1,\"270\":5,\"271\":5,\"272\":20,\"273\":3,\"274\":10,\"275\":1,\"277\":1,\"283\":1,\"287\":1,\"296\":6,\"297\":1,\"306\":1,\"313\":1,\"315\":2,\"316\":6,\"319\":2,\"323\":20,\"326\":8,\"330\":1,\"338\":4,\"348\":2,\"349\":8,\"352\":2,\"355\":1,\"357\":2,\"360\":13,\"361\":2,\"366\":1,\"373\":4,\"374\":13,\"375\":8,\"385\":8,\"396\":13}}],[\"fieldset>\",{\"1\":{\"1020\":1}}],[\"figure>\",{\"1\":{\"1020\":1}}],[\"fixed\",{\"0\":{\"994\":1},\"1\":{\"906\":1,\"908\":1,\"989\":1,\"994\":1,\"995\":2,\"999\":1,\"1225\":1}}],[\"firefox\",{\"1\":{\"935\":1,\"1019\":1,\"1027\":1}}],[\"fired\",{\"1\":{\"307\":1,\"308\":1,\"312\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1}}],[\"firstelementchild\",{\"1\":{\"1087\":2}}],[\"firsteffect\",{\"1\":{\"373\":2,\"375\":6,\"385\":6}}],[\"firstchild\",{\"1\":{\"695\":1,\"1087\":1}}],[\"firstname\",{\"1\":{\"539\":3,\"816\":3}}],[\"firstpersonname\",{\"1\":{\"418\":1}}],[\"firstpendingupdate\",{\"1\":{\"272\":2}}],[\"first\",{\"1\":{\"266\":2,\"315\":3,\"338\":3,\"373\":3,\"392\":4,\"590\":1,\"732\":1,\"1264\":2,\"1289\":2,\"1290\":3}}],[\"find\",{\"1\":{\"798\":1,\"1196\":1,\"1290\":2}}],[\"findindex\",{\"1\":{\"731\":1,\"1196\":1}}],[\"findparent\",{\"1\":{\"349\":3,\"375\":3,\"385\":3}}],[\"finally\",{\"1\":{\"395\":1,\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"finalizeinitialchildren\",{\"1\":{\"273\":3,\"320\":2,\"325\":2,\"327\":1}}],[\"finishes\",{\"1\":{\"787\":1}}],[\"finishedroot\",{\"1\":{\"349\":4,\"375\":7,\"385\":10}}],[\"finishedwork\",{\"1\":{\"274\":24,\"317\":8,\"326\":30,\"349\":30,\"360\":9,\"374\":11,\"375\":54,\"384\":9,\"385\":62,\"396\":12}}],[\"finishqueueingconcurrentupdates\",{\"1\":{\"316\":1,\"317\":2,\"323\":2,\"360\":2,\"374\":2,\"396\":2}}],[\"fill\",{\"1\":{\"920\":1}}],[\"filters\",{\"1\":{\"466\":1}}],[\"filter\",{\"0\":{\"1198\":1},\"1\":{\"159\":1,\"466\":1,\"500\":1,\"788\":1,\"796\":1,\"797\":1,\"815\":9,\"823\":1,\"842\":1,\"843\":1,\"1178\":2,\"1196\":1,\"1198\":1}}],[\"file\",{\"1\":{\"47\":1,\"590\":1,\"1014\":2,\"1057\":1}}],[\"faddto\",{\"1\":{\"1307\":1}}],[\"faddtoggle\",{\"1\":{\"1307\":1}}],[\"fadeout\",{\"1\":{\"1307\":1}}],[\"fadein\",{\"1\":{\"1307\":1}}],[\"fast\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"face\",{\"1\":{\"918\":2}}],[\"facebook\",{\"1\":{\"742\":1}}],[\"family\",{\"0\":{\"882\":1},\"1\":{\"882\":2,\"887\":3,\"918\":2,\"960\":1,\"1013\":1}}],[\"failed\",{\"1\":{\"814\":1,\"840\":1}}],[\"failure\",{\"1\":{\"776\":1,\"777\":1,\"786\":3,\"787\":2}}],[\"fancybutton>\",{\"1\":{\"237\":1}}],[\"fancybutton\",{\"1\":{\"236\":3,\"237\":2,\"239\":4}}],[\"fancyinput\",{\"1\":{\"191\":3}}],[\"fallback提供路由切换时的loading组件\",{\"1\":{\"737\":1}}],[\"fallback>\",{\"1\":{\"568\":1}}],[\"fallback\",{\"1\":{\"207\":1,\"568\":1}}],[\"fallback=\",{\"1\":{\"207\":2,\"208\":1,\"737\":1}}],[\"false选项\",{\"1\":{\"200\":1}}],[\"false\",{\"1\":{\"49\":1,\"98\":1,\"200\":1,\"242\":1,\"272\":1,\"286\":2,\"293\":2,\"319\":1,\"338\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1,\"373\":2,\"374\":2,\"384\":1,\"396\":2,\"454\":3,\"474\":1,\"540\":1,\"567\":1,\"588\":3,\"590\":1,\"600\":2,\"602\":1,\"603\":3,\"604\":3,\"609\":3,\"610\":3,\"614\":2,\"617\":1,\"626\":1,\"632\":2,\"633\":1,\"635\":1,\"636\":2,\"662\":1,\"712\":1,\"719\":1,\"723\":2,\"724\":1,\"787\":3,\"795\":3,\"823\":1,\"826\":1,\"837\":2,\"840\":1,\"964\":1,\"1015\":2,\"1089\":2,\"1099\":1,\"1102\":1,\"1130\":1,\"1136\":1,\"1140\":1,\"1147\":1,\"1148\":1,\"1173\":3,\"1199\":1,\"1201\":1,\"1251\":1,\"1259\":2,\"1261\":1,\"1263\":1,\"1264\":2,\"1271\":1,\"1331\":1,\"1332\":1,\"1401\":1,\"1402\":2,\"1405\":1,\"1413\":2}}],[\"favicon\",{\"1\":{\"138\":1}}],[\"fakeelement\",{\"1\":{\"115\":1}}],[\"fatherioc\",{\"1\":{\"92\":3}}],[\"father\",{\"1\":{\"92\":4}}],[\"func1\",{\"1\":{\"1274\":1}}],[\"function的\",{\"1\":{\"779\":1}}],[\"functionc\",{\"1\":{\"750\":1}}],[\"functioncomponent\",{\"1\":{\"301\":1,\"305\":1,\"318\":3,\"323\":3,\"325\":2,\"326\":2,\"329\":1,\"333\":1,\"344\":1,\"349\":2,\"351\":1,\"353\":1,\"356\":2,\"359\":2,\"360\":3,\"367\":2,\"374\":3,\"375\":4,\"377\":2,\"385\":5,\"396\":3}}],[\"functionb\",{\"1\":{\"750\":1}}],[\"functiona\",{\"1\":{\"750\":1}}],[\"functionthatreturnsfalse\",{\"1\":{\"293\":3}}],[\"functionthatreturnstrue\",{\"1\":{\"293\":3}}],[\"functions\",{\"0\":{\"108\":1},\"1\":{\"105\":1,\"830\":1}}],[\"function\",{\"1\":{\"9\":2,\"17\":3,\"20\":2,\"21\":1,\"22\":1,\"26\":4,\"42\":1,\"43\":1,\"46\":1,\"66\":4,\"67\":2,\"69\":5,\"70\":13,\"72\":10,\"100\":1,\"109\":1,\"111\":1,\"116\":1,\"124\":1,\"139\":1,\"149\":1,\"182\":1,\"189\":1,\"191\":1,\"192\":3,\"194\":1,\"197\":1,\"199\":1,\"201\":2,\"207\":2,\"208\":2,\"217\":1,\"220\":1,\"227\":2,\"228\":3,\"229\":4,\"230\":1,\"234\":3,\"236\":1,\"239\":2,\"240\":3,\"252\":4,\"269\":5,\"270\":5,\"271\":11,\"272\":35,\"273\":12,\"274\":11,\"281\":2,\"282\":2,\"284\":1,\"286\":5,\"288\":4,\"289\":4,\"290\":5,\"291\":1,\"292\":1,\"293\":4,\"295\":4,\"297\":2,\"298\":1,\"299\":1,\"301\":1,\"305\":1,\"306\":4,\"309\":2,\"315\":6,\"316\":5,\"317\":9,\"318\":6,\"319\":10,\"320\":5,\"321\":1,\"322\":3,\"325\":5,\"326\":8,\"327\":9,\"328\":5,\"329\":1,\"333\":1,\"336\":3,\"338\":11,\"344\":1,\"346\":1,\"347\":1,\"348\":10,\"349\":11,\"351\":1,\"352\":11,\"353\":1,\"356\":1,\"357\":13,\"359\":1,\"360\":13,\"361\":16,\"367\":1,\"370\":4,\"373\":18,\"374\":14,\"375\":21,\"377\":1,\"380\":5,\"383\":2,\"384\":1,\"385\":25,\"388\":2,\"392\":6,\"395\":11,\"396\":16,\"422\":1,\"423\":1,\"448\":1,\"498\":1,\"500\":1,\"543\":1,\"557\":1,\"588\":2,\"601\":1,\"602\":4,\"603\":1,\"604\":4,\"607\":1,\"608\":1,\"609\":7,\"610\":2,\"612\":1,\"613\":1,\"614\":1,\"615\":2,\"616\":1,\"618\":1,\"624\":1,\"625\":7,\"626\":3,\"627\":2,\"631\":4,\"632\":1,\"633\":6,\"634\":4,\"635\":4,\"647\":1,\"648\":1,\"654\":1,\"656\":1,\"657\":3,\"661\":1,\"662\":1,\"674\":1,\"675\":2,\"683\":4,\"686\":1,\"688\":1,\"689\":1,\"690\":1,\"691\":2,\"709\":1,\"713\":1,\"715\":1,\"721\":1,\"732\":1,\"735\":1,\"737\":3,\"738\":1,\"740\":1,\"749\":1,\"755\":3,\"756\":4,\"760\":1,\"762\":2,\"763\":1,\"764\":1,\"765\":1,\"767\":1,\"768\":1,\"770\":2,\"777\":5,\"779\":1,\"781\":1,\"787\":1,\"788\":1,\"799\":1,\"813\":1,\"822\":1,\"823\":1,\"826\":1,\"831\":2,\"1106\":1,\"1124\":1,\"1129\":1,\"1162\":1,\"1164\":1,\"1165\":2,\"1174\":5,\"1177\":2,\"1181\":1,\"1197\":1,\"1198\":1,\"1199\":1,\"1206\":1,\"1207\":2,\"1214\":1,\"1274\":2,\"1282\":2,\"1319\":2,\"1327\":2,\"1328\":5,\"1330\":1,\"1331\":1,\"1335\":1,\"1336\":1,\"1343\":2,\"1346\":1,\"1347\":1,\"1349\":3,\"1350\":1,\"1405\":2,\"1407\":2,\"1423\":1,\"1431\":1,\"1435\":1,\"1436\":1,\"1440\":3,\"1443\":1,\"1453\":2,\"1456\":2,\"1458\":4,\"1461\":1}}],[\"fun\",{\"1\":{\"1190\":1,\"1214\":2,\"1229\":1,\"1335\":2,\"1336\":2,\"1343\":1,\"1344\":2,\"1349\":1,\"1448\":2,\"1449\":2,\"1450\":2}}],[\"fullname\",{\"1\":{\"539\":2}}],[\"fulfilled\",{\"1\":{\"70\":4,\"814\":1}}],[\"four\",{\"1\":{\"1214\":2}}],[\"found\",{\"1\":{\"730\":1}}],[\"fontclass\",{\"1\":{\"919\":1}}],[\"font\",{\"0\":{\"882\":1,\"883\":1,\"884\":1,\"885\":1,\"886\":1,\"887\":1,\"919\":1},\"1\":{\"857\":1,\"867\":1,\"882\":2,\"883\":1,\"884\":1,\"885\":2,\"886\":3,\"887\":13,\"917\":1,\"918\":8,\"919\":2,\"920\":2,\"931\":1,\"960\":2,\"963\":1,\"966\":6,\"1000\":1,\"1013\":6,\"1016\":4,\"1296\":1}}],[\"fontsize\",{\"1\":{\"455\":1}}],[\"focus记住这个写法\",{\"1\":{\"873\":1}}],[\"focus\",{\"1\":{\"189\":1,\"191\":3,\"239\":1,\"505\":1,\"561\":2,\"873\":3}}],[\"footer\",{\"1\":{\"504\":1}}],[\"footer>\",{\"1\":{\"504\":1}}],[\"foo\",{\"1\":{\"107\":4,\"495\":1,\"521\":2,\"583\":3,\"586\":4,\"1405\":3}}],[\"following\",{\"1\":{\"831\":1}}],[\"follow\",{\"1\":{\"60\":2}}],[\"fork\",{\"0\":{\"765\":1},\"1\":{\"765\":3,\"768\":1,\"769\":1,\"777\":7}}],[\"forks\",{\"1\":{\"395\":2}}],[\"for=\",{\"1\":{\"460\":1,\"504\":2,\"1057\":1}}],[\"forward\",{\"1\":{\"432\":1,\"1067\":1}}],[\"forwardedref=\",{\"1\":{\"239\":1,\"240\":2}}],[\"forwardedref\",{\"1\":{\"239\":1}}],[\"forwardref定义组件时存在\",{\"1\":{\"238\":1}}],[\"forwardref\",{\"1\":{\"191\":2,\"237\":3,\"239\":2,\"240\":7}}],[\"forceupdate\",{\"1\":{\"167\":1}}],[\"foreground\",{\"1\":{\"192\":3,\"217\":3}}],[\"fore\",{\"1\":{\"103\":1}}],[\"foreach\",{\"0\":{\"1197\":1,\"1276\":1},\"1\":{\"70\":3,\"116\":1,\"202\":1,\"286\":1,\"361\":1,\"603\":1,\"604\":1,\"609\":2,\"610\":1,\"614\":1,\"615\":1,\"626\":1,\"635\":1,\"648\":1,\"649\":1,\"651\":2,\"657\":2,\"694\":2,\"695\":4,\"737\":1,\"823\":1,\"1196\":1,\"1197\":1,\"1276\":3,\"1405\":2}}],[\"for\",{\"0\":{\"1120\":1,\"1273\":1,\"1274\":1,\"1275\":1},\"1\":{\"29\":1,\"124\":1,\"252\":1,\"270\":1,\"272\":3,\"273\":1,\"281\":1,\"282\":1,\"293\":1,\"295\":3,\"319\":1,\"322\":6,\"328\":7,\"348\":1,\"349\":1,\"352\":1,\"357\":2,\"360\":1,\"361\":3,\"373\":1,\"374\":1,\"375\":1,\"385\":1,\"395\":1,\"396\":1,\"460\":2,\"474\":1,\"524\":1,\"591\":1,\"602\":1,\"603\":2,\"604\":2,\"607\":1,\"609\":3,\"610\":2,\"616\":1,\"617\":2,\"624\":2,\"625\":2,\"631\":1,\"656\":1,\"662\":1,\"674\":1,\"675\":1,\"683\":4,\"686\":1,\"689\":1,\"690\":1,\"691\":3,\"731\":1,\"1016\":6,\"1031\":1,\"1120\":2,\"1168\":1,\"1169\":4,\"1171\":1,\"1172\":1,\"1179\":1,\"1273\":5,\"1274\":5,\"1275\":6,\"1277\":1,\"1403\":2,\"1404\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1461\":1}}],[\"formcharcode\",{\"1\":{\"1373\":1}}],[\"form>\",{\"1\":{\"1056\":1}}],[\"formaction\",{\"1\":{\"1019\":2}}],[\"formatonsave\",{\"1\":{\"939\":1}}],[\"formatontype\",{\"1\":{\"939\":1}}],[\"format\",{\"1\":{\"830\":1,\"918\":4}}],[\"formatter\",{\"1\":{\"229\":1,\"1031\":1}}],[\"formdata\",{\"1\":{\"47\":1}}],[\"form\",{\"1\":{\"7\":1,\"12\":1,\"1056\":1}}],[\"f00\",{\"1\":{\"26\":1,\"1013\":2}}],[\"=锚定条件\",{\"1\":{\"1389\":1}}],[\"==锚定条件\",{\"1\":{\"1388\":1}}],[\"==true\",{\"1\":{\"1274\":1}}],[\"==>onbeforeunmount\",{\"1\":{\"542\":1}}],[\"==\",{\"1\":{\"72\":1,\"98\":2,\"201\":1,\"252\":2,\"271\":1,\"272\":5,\"273\":5,\"274\":8,\"290\":2,\"292\":1,\"295\":1,\"298\":2,\"306\":2,\"315\":5,\"316\":4,\"317\":5,\"319\":4,\"320\":4,\"322\":5,\"325\":4,\"326\":9,\"328\":5,\"338\":5,\"348\":4,\"349\":13,\"352\":5,\"357\":9,\"360\":7,\"361\":16,\"373\":7,\"374\":10,\"375\":22,\"384\":4,\"385\":23,\"392\":2,\"395\":2,\"396\":11,\"602\":2,\"604\":2,\"609\":3,\"616\":1,\"618\":2,\"633\":1,\"646\":1,\"647\":2,\"650\":2,\"654\":2,\"655\":1,\"657\":2,\"674\":1,\"675\":1,\"683\":3,\"686\":1,\"689\":1,\"690\":2,\"691\":1,\"738\":2,\"739\":1,\"749\":1,\"823\":1,\"842\":2,\"843\":2,\"880\":1,\"1015\":5,\"1093\":1,\"1115\":2,\"1261\":2,\"1388\":1,\"1458\":3}}],[\"====\",{\"1\":{\"760\":1,\"773\":1}}],[\"====2\",{\"1\":{\"760\":1,\"773\":1}}],[\"====1\",{\"1\":{\"760\":1,\"773\":1}}],[\"=====>onunmounted\",{\"1\":{\"542\":1}}],[\"=======>onupdated\",{\"1\":{\"542\":1}}],[\"===>onbeforemount\",{\"1\":{\"542\":1}}],[\"===>\",{\"1\":{\"502\":1,\"554\":2}}],[\"===\",{\"1\":{\"9\":1,\"69\":1,\"72\":1,\"116\":1,\"192\":1,\"208\":1,\"217\":1,\"271\":2,\"272\":15,\"273\":12,\"274\":6,\"290\":1,\"291\":2,\"298\":1,\"299\":2,\"305\":1,\"306\":1,\"315\":3,\"316\":3,\"317\":1,\"318\":1,\"319\":11,\"320\":5,\"322\":10,\"325\":5,\"326\":6,\"327\":2,\"328\":12,\"329\":2,\"333\":1,\"338\":4,\"344\":1,\"348\":11,\"349\":6,\"351\":1,\"352\":11,\"353\":1,\"356\":1,\"357\":20,\"359\":1,\"360\":4,\"361\":27,\"373\":9,\"374\":4,\"375\":8,\"385\":8,\"392\":2,\"395\":3,\"396\":4,\"436\":1,\"437\":1,\"601\":1,\"602\":2,\"604\":1,\"608\":1,\"609\":2,\"610\":1,\"613\":1,\"616\":1,\"625\":2,\"626\":1,\"627\":1,\"631\":1,\"632\":1,\"633\":1,\"635\":1,\"646\":1,\"647\":2,\"654\":2,\"655\":1,\"661\":2,\"662\":4,\"674\":4,\"675\":4,\"683\":13,\"686\":4,\"688\":2,\"689\":2,\"690\":1,\"691\":10,\"695\":3,\"715\":1,\"731\":2,\"738\":2,\"755\":1,\"756\":1,\"823\":2,\"826\":1,\"829\":5,\"830\":5,\"842\":2,\"1169\":2,\"1173\":1,\"1183\":1,\"1207\":1,\"1228\":2,\"1261\":1,\"1458\":2}}],[\"=>a\",{\"1\":{\"1376\":1}}],[\"=>\",{\"0\":{\"1163\":1},\"1\":{\"19\":2,\"20\":2,\"21\":1,\"22\":2,\"26\":2,\"69\":4,\"70\":5,\"72\":6,\"98\":2,\"99\":2,\"100\":1,\"103\":6,\"105\":2,\"106\":1,\"107\":1,\"108\":3,\"109\":1,\"110\":1,\"112\":4,\"113\":1,\"114\":2,\"116\":3,\"145\":1,\"150\":1,\"154\":1,\"155\":1,\"160\":2,\"182\":2,\"185\":2,\"189\":1,\"191\":2,\"192\":3,\"194\":1,\"197\":3,\"199\":1,\"200\":2,\"201\":3,\"202\":5,\"203\":2,\"204\":4,\"207\":4,\"208\":3,\"215\":1,\"217\":2,\"220\":1,\"225\":1,\"229\":1,\"230\":1,\"234\":5,\"237\":2,\"239\":1,\"277\":1,\"281\":1,\"286\":1,\"292\":2,\"301\":4,\"305\":2,\"329\":2,\"333\":1,\"344\":2,\"351\":2,\"353\":2,\"356\":2,\"359\":2,\"361\":1,\"367\":7,\"377\":7,\"407\":2,\"424\":1,\"436\":2,\"451\":1,\"472\":9,\"475\":1,\"499\":1,\"500\":1,\"505\":1,\"508\":1,\"518\":2,\"534\":2,\"539\":1,\"540\":10,\"541\":1,\"543\":1,\"557\":2,\"561\":2,\"568\":1,\"603\":1,\"604\":1,\"609\":3,\"610\":4,\"614\":1,\"615\":1,\"626\":1,\"634\":1,\"635\":2,\"648\":2,\"649\":2,\"650\":2,\"651\":4,\"657\":3,\"662\":1,\"674\":1,\"687\":1,\"694\":2,\"695\":7,\"714\":1,\"715\":1,\"719\":1,\"721\":2,\"728\":2,\"729\":3,\"730\":3,\"731\":20,\"732\":2,\"737\":1,\"738\":1,\"739\":4,\"749\":7,\"750\":1,\"755\":7,\"756\":5,\"764\":2,\"765\":2,\"767\":1,\"774\":3,\"775\":4,\"776\":2,\"777\":9,\"786\":3,\"788\":8,\"789\":4,\"796\":2,\"797\":3,\"798\":2,\"799\":1,\"808\":1,\"812\":3,\"813\":3,\"814\":5,\"815\":9,\"816\":3,\"820\":1,\"823\":11,\"827\":6,\"830\":1,\"831\":2,\"840\":3,\"842\":1,\"843\":2,\"1173\":1,\"1174\":3,\"1178\":2,\"1188\":3,\"1206\":1,\"1207\":2,\"1221\":1,\"1229\":3,\"1376\":13}}],[\"=\",{\"1\":{\"9\":6,\"13\":1,\"15\":1,\"20\":4,\"21\":1,\"22\":2,\"26\":13,\"65\":1,\"67\":4,\"69\":9,\"70\":11,\"72\":16,\"98\":1,\"99\":1,\"100\":1,\"103\":6,\"106\":2,\"107\":2,\"108\":2,\"109\":1,\"110\":2,\"111\":2,\"112\":5,\"113\":2,\"114\":2,\"115\":2,\"116\":6,\"120\":1,\"122\":1,\"145\":2,\"149\":6,\"150\":5,\"154\":2,\"155\":2,\"160\":2,\"180\":1,\"182\":1,\"186\":1,\"189\":2,\"191\":2,\"192\":5,\"194\":3,\"197\":3,\"199\":2,\"200\":2,\"201\":3,\"202\":4,\"203\":1,\"204\":3,\"207\":4,\"208\":3,\"212\":1,\"214\":2,\"217\":7,\"227\":2,\"228\":2,\"229\":3,\"233\":1,\"234\":3,\"237\":2,\"239\":2,\"240\":3,\"242\":1,\"245\":2,\"248\":7,\"252\":7,\"253\":1,\"269\":6,\"270\":19,\"271\":28,\"272\":101,\"273\":30,\"274\":27,\"281\":6,\"282\":2,\"284\":1,\"285\":1,\"286\":4,\"288\":4,\"289\":6,\"290\":9,\"291\":3,\"292\":6,\"293\":16,\"295\":10,\"297\":3,\"298\":7,\"299\":3,\"301\":6,\"305\":4,\"306\":19,\"309\":2,\"310\":1,\"311\":1,\"312\":1,\"315\":49,\"316\":24,\"317\":19,\"318\":16,\"319\":29,\"320\":19,\"322\":21,\"325\":19,\"326\":29,\"327\":1,\"328\":24,\"329\":6,\"333\":5,\"336\":3,\"337\":1,\"338\":61,\"344\":3,\"345\":5,\"346\":15,\"348\":29,\"349\":40,\"351\":3,\"352\":31,\"353\":3,\"356\":3,\"357\":46,\"359\":3,\"360\":25,\"361\":65,\"367\":3,\"370\":4,\"371\":3,\"372\":1,\"373\":87,\"374\":31,\"375\":59,\"377\":3,\"380\":5,\"381\":3,\"382\":8,\"383\":2,\"384\":7,\"385\":66,\"388\":5,\"391\":6,\"392\":27,\"394\":6,\"395\":39,\"396\":31,\"407\":6,\"409\":1,\"410\":1,\"411\":1,\"412\":1,\"418\":4,\"424\":1,\"436\":2,\"444\":1,\"446\":1,\"448\":1,\"454\":3,\"455\":2,\"468\":3,\"472\":1,\"475\":3,\"480\":1,\"487\":1,\"495\":2,\"499\":1,\"500\":1,\"513\":1,\"518\":2,\"521\":1,\"534\":3,\"536\":2,\"537\":1,\"539\":5,\"541\":2,\"543\":4,\"549\":1,\"553\":1,\"557\":4,\"560\":5,\"567\":1,\"568\":1,\"574\":1,\"578\":1,\"582\":2,\"583\":4,\"586\":3,\"587\":1,\"588\":4,\"599\":1,\"601\":6,\"602\":9,\"603\":11,\"604\":17,\"607\":8,\"608\":3,\"609\":39,\"610\":20,\"612\":1,\"613\":5,\"614\":9,\"615\":8,\"616\":12,\"617\":3,\"618\":2,\"624\":2,\"625\":9,\"626\":22,\"627\":8,\"630\":1,\"631\":7,\"632\":13,\"633\":7,\"634\":11,\"635\":44,\"636\":1,\"640\":3,\"641\":5,\"644\":2,\"646\":6,\"647\":4,\"648\":6,\"649\":1,\"650\":2,\"651\":2,\"653\":6,\"654\":4,\"655\":6,\"656\":8,\"657\":3,\"661\":20,\"662\":12,\"668\":2,\"669\":3,\"674\":4,\"675\":15,\"676\":6,\"683\":39,\"685\":8,\"686\":3,\"687\":1,\"688\":3,\"689\":7,\"690\":6,\"691\":30,\"694\":4,\"695\":26,\"715\":1,\"719\":2,\"720\":1,\"721\":3,\"722\":1,\"723\":1,\"728\":4,\"730\":5,\"731\":18,\"732\":4,\"734\":1,\"735\":1,\"737\":10,\"738\":9,\"739\":3,\"740\":1,\"746\":1,\"747\":1,\"749\":13,\"750\":2,\"753\":1,\"755\":3,\"756\":2,\"760\":2,\"764\":1,\"765\":1,\"767\":1,\"771\":1,\"773\":2,\"774\":3,\"775\":7,\"776\":5,\"777\":6,\"785\":3,\"786\":6,\"787\":2,\"788\":2,\"789\":4,\"795\":1,\"796\":1,\"798\":2,\"799\":6,\"802\":1,\"806\":1,\"807\":1,\"808\":2,\"810\":2,\"811\":1,\"812\":5,\"813\":2,\"814\":6,\"815\":6,\"816\":6,\"819\":1,\"820\":1,\"822\":1,\"823\":12,\"826\":1,\"827\":6,\"829\":1,\"830\":1,\"831\":4,\"832\":3,\"837\":1,\"840\":3,\"842\":2,\"843\":3,\"845\":3,\"965\":1,\"966\":5,\"1011\":1,\"1013\":2,\"1015\":5,\"1057\":1,\"1105\":1,\"1106\":1,\"1125\":1,\"1129\":3,\"1160\":4,\"1161\":1,\"1162\":3,\"1169\":5,\"1173\":7,\"1174\":3,\"1178\":11,\"1190\":1,\"1195\":2,\"1206\":2,\"1207\":3,\"1214\":5,\"1215\":4,\"1216\":2,\"1217\":2,\"1221\":4,\"1224\":8,\"1228\":3,\"1229\":2,\"1230\":2,\"1239\":1,\"1258\":4,\"1260\":10,\"1261\":1,\"1265\":3,\"1268\":2,\"1269\":4,\"1271\":1,\"1272\":1,\"1273\":1,\"1274\":4,\"1275\":1,\"1276\":1,\"1333\":1,\"1341\":1,\"1343\":1,\"1347\":1,\"1349\":2,\"1350\":1,\"1352\":1,\"1353\":4,\"1376\":15,\"1381\":10,\"1382\":14,\"1383\":2,\"1384\":19,\"1385\":6,\"1386\":7,\"1388\":4,\"1389\":4,\"1390\":4,\"1391\":17,\"1392\":3,\"1405\":4,\"1407\":10,\"1433\":7,\"1436\":3,\"1443\":2,\"1453\":1,\"1456\":2,\"1458\":7,\"1460\":4,\"1461\":9}}],[\"bc\",{\"1\":{\"1391\":2}}],[\"bc=45\",{\"1\":{\"1390\":2}}],[\"b=2\",{\"1\":{\"1265\":2}}],[\"b=200\",{\"1\":{\"11\":1}}],[\"b的值是7\",{\"1\":{\"1258\":1}}],[\"b的属性\",{\"1\":{\"604\":1}}],[\"b>\",{\"1\":{\"1037\":1}}],[\"bg\",{\"1\":{\"1012\":2}}],[\"bd\",{\"1\":{\"640\":1,\"641\":1,\"653\":1}}],[\"b和vm\",{\"1\":{\"635\":1}}],[\"b从$\",{\"1\":{\"609\":1,\"610\":1}}],[\"b是对象\",{\"1\":{\"604\":1}}],[\"birth\",{\"1\":{\"1433\":9}}],[\"bigint\",{\"0\":{\"1230\":1},\"1\":{\"1230\":4}}],[\"big5\",{\"1\":{\"1034\":1}}],[\"big\",{\"1\":{\"475\":2}}],[\"bigsum\",{\"1\":{\"415\":5,\"418\":2}}],[\"bit\",{\"1\":{\"395\":2}}],[\"bindactioncreators\",{\"1\":{\"789\":2}}],[\"bind=\",{\"1\":{\"515\":2}}],[\"binding\",{\"1\":{\"475\":3}}],[\"bindings\",{\"1\":{\"321\":1,\"322\":1,\"327\":1,\"328\":1}}],[\"bind\",{\"0\":{\"1450\":1},\"1\":{\"69\":1,\"70\":1,\"72\":1,\"74\":1,\"143\":1,\"245\":1,\"272\":1,\"288\":1,\"306\":1,\"315\":1,\"317\":1,\"338\":2,\"360\":1,\"373\":2,\"374\":1,\"396\":1,\"444\":1,\"446\":1,\"473\":1,\"474\":2,\"475\":2,\"608\":1,\"675\":1,\"685\":2,\"799\":1,\"1328\":1,\"1450\":2,\"1451\":2}}],[\"b2\",{\"1\":{\"353\":2,\"356\":2,\"359\":2}}],[\"behavior\",{\"1\":{\"1028\":1}}],[\"being\",{\"1\":{\"842\":1}}],[\"be\",{\"1\":{\"307\":1,\"308\":1,\"312\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1,\"590\":1,\"591\":1}}],[\"beforeunmount\",{\"1\":{\"542\":2,\"585\":1}}],[\"beforeupdate===>onbeforeupdate\",{\"1\":{\"542\":1}}],[\"beforeupdate\",{\"1\":{\"480\":1,\"585\":1,\"703\":1}}],[\"beforemount\",{\"1\":{\"479\":1,\"542\":1,\"585\":1}}],[\"beforerouteleave\",{\"1\":{\"438\":1}}],[\"beforerouteenter\",{\"1\":{\"438\":1}}],[\"beforeelm\",{\"1\":{\"683\":2,\"691\":2}}],[\"beforeelm为null则执行appendchild操作\",{\"1\":{\"683\":1,\"691\":1}}],[\"beforeenter\",{\"1\":{\"437\":2}}],[\"beforeeach\",{\"1\":{\"436\":2,\"733\":1}}],[\"beforedestroy改名为\",{\"1\":{\"542\":1}}],[\"beforedestroy\",{\"1\":{\"434\":1,\"481\":1,\"482\":2}}],[\"beforecreate===>setup\",{\"1\":{\"542\":1}}],[\"beforecreate\",{\"1\":{\"407\":1,\"424\":1,\"479\":1,\"518\":1,\"535\":1,\"584\":1,\"585\":2,\"703\":1}}],[\"beforechild\",{\"1\":{\"327\":2}}],[\"before\",{\"1\":{\"274\":10,\"326\":10,\"349\":10,\"375\":10,\"385\":10,\"985\":1,\"1321\":1}}],[\"beginworkresult\",{\"1\":{\"272\":1}}],[\"beginwork\",{\"0\":{\"272\":1},\"1\":{\"272\":16,\"273\":4,\"274\":1,\"317\":2,\"318\":2,\"323\":3,\"360\":2,\"366\":1,\"374\":2,\"396\":2}}],[\"because\",{\"1\":{\"270\":1,\"272\":1}}],[\"bfs\",{\"1\":{\"266\":1}}],[\"blink\",{\"1\":{\"1027\":2}}],[\"black\",{\"1\":{\"1012\":3,\"1014\":3}}],[\"blank\",{\"1\":{\"669\":1,\"1042\":1}}],[\"blur\",{\"1\":{\"912\":2,\"913\":2}}],[\"blur=\",{\"1\":{\"514\":1,\"518\":1}}],[\"blue\",{\"1\":{\"139\":1,\"560\":1,\"1012\":4,\"1015\":1}}],[\"block\",{\"1\":{\"475\":1,\"524\":1,\"879\":2,\"924\":1,\"985\":1,\"1009\":3}}],[\"blocking\",{\"1\":{\"395\":2}}],[\"blogpost\",{\"1\":{\"234\":1}}],[\"blogpostwithsubscription\",{\"1\":{\"234\":1}}],[\"blog\",{\"1\":{\"96\":1,\"631\":1,\"790\":1}}],[\"blob\",{\"1\":{\"47\":1,\"52\":1}}],[\"baidu\",{\"1\":{\"667\":3,\"668\":1,\"669\":1,\"1043\":1,\"1045\":3}}],[\"backup\",{\"1\":{\"646\":2,\"655\":2}}],[\"back\",{\"1\":{\"432\":1,\"1067\":1}}],[\"backgroundtask\",{\"1\":{\"770\":2}}],[\"background\",{\"0\":{\"902\":1,\"903\":1,\"904\":1,\"905\":1,\"906\":1,\"954\":1},\"1\":{\"192\":4,\"217\":4,\"770\":1,\"902\":1,\"903\":1,\"904\":1,\"905\":1,\"906\":1,\"907\":1,\"908\":7,\"916\":2,\"954\":1,\"960\":1,\"1000\":2,\"1012\":4,\"1014\":1,\"1015\":2,\"1016\":6}}],[\"babel\",{\"0\":{\"125\":1,\"248\":1,\"1192\":1},\"1\":{\"119\":1,\"125\":4,\"248\":11,\"249\":2,\"250\":1,\"779\":1,\"800\":4,\"821\":1,\"1192\":3}}],[\"baseuri\",{\"1\":{\"1081\":1}}],[\"baseurl\",{\"0\":{\"41\":1},\"1\":{\"20\":1,\"249\":1}}],[\"baseline\",{\"1\":{\"924\":3}}],[\"base\",{\"1\":{\"714\":2,\"1014\":2}}],[\"basestatereducer\",{\"1\":{\"332\":1,\"338\":3,\"339\":2,\"373\":3}}],[\"based\",{\"1\":{\"29\":1}}],[\"but\",{\"1\":{\"787\":1}}],[\"button\",{\"1\":{\"20\":1,\"22\":1,\"26\":1,\"91\":2,\"192\":1,\"197\":2,\"236\":3,\"237\":1,\"313\":1,\"323\":1,\"330\":1,\"339\":1,\"675\":1,\"1057\":1,\"1152\":1,\"1229\":1}}],[\"button>\",{\"1\":{\"9\":1,\"20\":3,\"22\":1,\"26\":1,\"72\":2,\"98\":1,\"99\":1,\"100\":1,\"109\":1,\"112\":1,\"114\":1,\"145\":1,\"155\":1,\"160\":1,\"182\":1,\"189\":1,\"192\":1,\"197\":2,\"217\":1,\"236\":1,\"237\":1,\"245\":1,\"305\":1,\"329\":1,\"333\":1,\"475\":1,\"560\":3,\"561\":1,\"567\":1,\"715\":1,\"749\":4,\"774\":4,\"789\":1,\"813\":2,\"823\":4,\"827\":1}}],[\"builder\",{\"1\":{\"814\":2}}],[\"build\",{\"1\":{\"575\":1,\"665\":1}}],[\"bundle\",{\"1\":{\"530\":1,\"1192\":2}}],[\"bug\",{\"1\":{\"365\":1,\"664\":1}}],[\"bubbleproperties\",{\"1\":{\"273\":5,\"320\":4,\"325\":5}}],[\"bubbling\",{\"0\":{\"109\":1},\"1\":{\"105\":1}}],[\"buffering\",{\"1\":{\"270\":1,\"272\":1}}],[\"bus\",{\"1\":{\"115\":4}}],[\"by\",{\"1\":{\"67\":1,\"112\":1,\"192\":1,\"217\":1,\"382\":1}}],[\"bread\",{\"1\":{\"900\":1}}],[\"breadth\",{\"1\":{\"266\":1}}],[\"breakpoints\",{\"1\":{\"1155\":1}}],[\"break\",{\"0\":{\"900\":1},\"1\":{\"28\":1,\"272\":2,\"273\":3,\"274\":4,\"292\":2,\"319\":2,\"320\":3,\"325\":4,\"326\":7,\"348\":2,\"349\":11,\"352\":2,\"357\":3,\"361\":3,\"375\":15,\"385\":15,\"395\":6,\"603\":2,\"604\":2,\"609\":2,\"610\":2,\"614\":2,\"648\":3,\"649\":4,\"651\":4,\"656\":2,\"657\":2,\"899\":1,\"900\":4,\"1000\":1,\"1269\":5,\"1276\":1,\"1277\":2}}],[\"brackets\",{\"1\":{\"46\":1}}],[\"browserify\",{\"1\":{\"1188\":1,\"1192\":3}}],[\"browsers\",{\"1\":{\"1019\":2}}],[\"browserrouter>\",{\"1\":{\"709\":1,\"735\":1}}],[\"browserrouter\",{\"1\":{\"709\":2,\"735\":1}}],[\"browser\",{\"1\":{\"29\":1,\"1019\":1,\"1031\":2,\"1059\":1,\"1233\":1}}],[\"bonjour\",{\"1\":{\"1264\":1}}],[\"bom\",{\"0\":{\"1059\":1,\"1060\":1},\"1\":{\"1059\":2,\"1233\":1,\"1340\":1,\"1379\":1}}],[\"both\",{\"1\":{\"984\":2,\"985\":3}}],[\"bottom\",{\"1\":{\"588\":1,\"826\":1,\"924\":4,\"969\":1,\"970\":1,\"971\":1,\"990\":1,\"995\":1}}],[\"bootstrap\",{\"1\":{\"959\":1}}],[\"boolean\",{\"0\":{\"1251\":1},\"1\":{\"558\":1,\"588\":3,\"625\":1,\"816\":1,\"1241\":1,\"1251\":1,\"1271\":1,\"1339\":1,\"1371\":1,\"1410\":1,\"1413\":2,\"1414\":1,\"1415\":1}}],[\"bolder\",{\"1\":{\"884\":1}}],[\"bold\",{\"1\":{\"884\":1,\"887\":1,\"1013\":1}}],[\"bound\",{\"1\":{\"799\":2}}],[\"box$\",{\"1\":{\"731\":1}}],[\"box\",{\"0\":{\"912\":1,\"973\":1},\"1\":{\"666\":2,\"730\":2,\"912\":1,\"927\":2,\"967\":1,\"973\":11,\"1000\":1,\"1009\":3,\"1015\":2,\"1016\":3}}],[\"borderleft\",{\"1\":{\"1308\":1}}],[\"borderwidth\",{\"1\":{\"1013\":3}}],[\"border\",{\"0\":{\"911\":1,\"973\":1},\"1\":{\"26\":1,\"139\":1,\"909\":30,\"911\":1,\"935\":5,\"968\":1,\"973\":7,\"1000\":2,\"1013\":1,\"1015\":6,\"1016\":3,\"1044\":1,\"1048\":2,\"1108\":1,\"1324\":2}}],[\"body\",{\"1\":{\"22\":1,\"26\":1,\"882\":1,\"883\":1,\"960\":1,\"1015\":1,\"1016\":1,\"1031\":1,\"1080\":1,\"1093\":3,\"1115\":3,\"1124\":3,\"1237\":1}}],[\"body><\",{\"1\":{\"1385\":3}}],[\"body>上\",{\"1\":{\"221\":1}}],[\"body>\",{\"1\":{\"20\":1,\"22\":1,\"26\":2,\"72\":1,\"448\":1,\"454\":2,\"1030\":1,\"1031\":1}}],[\"b\",{\"1\":{\"17\":2,\"21\":1,\"194\":4,\"197\":6,\"353\":4,\"356\":4,\"359\":4,\"392\":3,\"455\":2,\"519\":2,\"599\":3,\"600\":1,\"604\":9,\"609\":3,\"610\":4,\"621\":1,\"625\":1,\"626\":3,\"631\":1,\"633\":1,\"634\":7,\"635\":6,\"636\":2,\"650\":4,\"657\":1,\"675\":1,\"676\":10,\"683\":3,\"685\":6,\"691\":3,\"719\":1,\"722\":1,\"750\":1,\"816\":2,\"845\":1,\"877\":1,\"1010\":1,\"1016\":1,\"1031\":1,\"1160\":2,\"1181\":2,\"1195\":1,\"1258\":2,\"1260\":2,\"1265\":2,\"1275\":2,\"1364\":1,\"1381\":2,\"1382\":2,\"1391\":8,\"1405\":3,\"1458\":5}}],[\"btn即可运行\",{\"1\":{\"675\":1}}],[\"btn2\",{\"1\":{\"72\":2,\"685\":3}}],[\"btn1\",{\"1\":{\"72\":2,\"329\":1,\"333\":1}}],[\"btns\",{\"1\":{\"20\":3,\"21\":1}}],[\"btn\",{\"1\":{\"9\":4,\"17\":1,\"22\":2,\"588\":2,\"675\":3,\"685\":3,\"1229\":2}}],[\">标签分隔的代码块\",{\"1\":{\"1419\":1}}],[\">标签与子组件并不需要来自父组件的状态\",{\"1\":{\"91\":1}}],[\">选项3<\",{\"1\":{\"1057\":1}}],[\">选项2<\",{\"1\":{\"1057\":1}}],[\">选项1<\",{\"1\":{\"1057\":1}}],[\">xxx<\",{\"1\":{\"1057\":1}}],[\">hello\",{\"1\":{\"867\":1}}],[\">hello<\",{\"1\":{\"475\":1,\"497\":1}}],[\">router\",{\"1\":{\"823\":1}}],[\">编程式跳转<\",{\"1\":{\"823\":1}}],[\">跳转2<\",{\"1\":{\"823\":1}}],[\">跳转<\",{\"1\":{\"427\":3,\"429\":2,\"430\":2,\"822\":2,\"823\":1}}],[\">去⾸⻚<\",{\"1\":{\"804\":1}}],[\">网络请求<\",{\"1\":{\"774\":1}}],[\">异步<\",{\"1\":{\"774\":1,\"823\":1}}],[\">异步加<\",{\"1\":{\"749\":1}}],[\">同步\",{\"1\":{\"774\":1}}],[\">同步+1<\",{\"1\":{\"774\":1}}],[\">当前求和为奇数再加<\",{\"1\":{\"749\":1}}],[\">+<\",{\"1\":{\"749\":1}}],[\">4<\",{\"1\":{\"749\":1}}],[\">3<\",{\"1\":{\"749\":1}}],[\">2<\",{\"1\":{\"749\":1}}],[\">1<\",{\"1\":{\"749\":1}}],[\">goodsdetail\",{\"1\":{\"721\":1}}],[\">g<\",{\"1\":{\"359\":1}}],[\">sum点击变2<\",{\"1\":{\"715\":1}}],[\">send<\",{\"1\":{\"114\":1}}],[\">按钮<\",{\"1\":{\"713\":1}}],[\">要配合使用\",{\"1\":{\"712\":1}}],[\">与<route\",{\"1\":{\"712\":1}}],[\">百度<\",{\"1\":{\"667\":1,\"1043\":1}}],[\">占三位\",{\"1\":{\"661\":1}}],[\">的长度为\",{\"1\":{\"661\":1}}],[\">确定<\",{\"1\":{\"588\":1}}],[\">点击测试文本<\",{\"1\":{\"1118\":1}}],[\">点击按钮<\",{\"1\":{\"588\":1}}],[\">点点点<\",{\"1\":{\"9\":1}}],[\">关闭弹窗<\",{\"1\":{\"567\":1}}],[\">孙子组件\",{\"1\":{\"560\":1}}],[\">蓝<\",{\"1\":{\"560\":1}}],[\">黄<\",{\"1\":{\"560\":1}}],[\">红<\",{\"1\":{\"560\":1}}],[\">test<\",{\"1\":{\"508\":1}}],[\">插槽默认内容\",{\"1\":{\"504\":2}}],[\">哈哈哈<\",{\"1\":{\"475\":1}}],[\">news<\",{\"1\":{\"426\":1,\"432\":1}}],[\">>>\",{\"1\":{\"392\":2}}],[\">d2<\",{\"1\":{\"359\":1}}],[\">d<\",{\"1\":{\"359\":1}}],[\">e2<\",{\"1\":{\"359\":1}}],[\">e<\",{\"1\":{\"359\":1}}],[\">fetch\",{\"1\":{\"789\":1}}],[\">f<\",{\"1\":{\"359\":1}}],[\">focus\",{\"1\":{\"189\":1}}],[\">c2<\",{\"1\":{\"359\":1}}],[\">c<\",{\"1\":{\"353\":1,\"359\":1}}],[\">clicked\",{\"1\":{\"561\":1}}],[\">click\",{\"1\":{\"108\":1,\"182\":1,\"237\":1,\"245\":1}}],[\">world<\",{\"1\":{\"248\":2,\"253\":1,\"269\":1,\"271\":1,\"272\":1}}],[\">b\",{\"1\":{\"197\":1}}],[\">about\",{\"1\":{\"424\":1}}],[\">a2<\",{\"1\":{\"356\":1,\"359\":1}}],[\">a<\",{\"1\":{\"353\":1,\"356\":1,\"359\":1}}],[\">a\",{\"1\":{\"197\":1}}],[\">0<\",{\"1\":{\"155\":1}}],[\">计数按钮<\",{\"1\":{\"145\":1,\"155\":1,\"160\":1}}],[\">和<children>实际位于父组件树\",{\"1\":{\"92\":1}}],[\">取消请求<\",{\"1\":{\"72\":1}}],[\">发送请求<\",{\"1\":{\"72\":1}}],[\">\",{\"0\":{\"712\":2},\"1\":{\"26\":1,\"98\":1,\"99\":1,\"100\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":2,\"110\":2,\"111\":4,\"112\":2,\"150\":5,\"154\":3,\"160\":1,\"172\":15,\"189\":2,\"191\":2,\"192\":5,\"197\":1,\"207\":5,\"208\":5,\"213\":1,\"217\":5,\"218\":3,\"219\":1,\"220\":1,\"225\":1,\"227\":1,\"228\":3,\"229\":5,\"231\":2,\"234\":1,\"236\":1,\"237\":3,\"239\":2,\"240\":2,\"242\":1,\"270\":2,\"292\":1,\"301\":3,\"303\":2,\"305\":2,\"329\":2,\"333\":2,\"344\":3,\"351\":3,\"353\":5,\"356\":7,\"359\":5,\"367\":2,\"377\":2,\"392\":2,\"395\":1,\"427\":3,\"429\":2,\"430\":2,\"433\":1,\"448\":2,\"454\":3,\"475\":1,\"488\":1,\"493\":1,\"497\":1,\"499\":3,\"504\":14,\"510\":2,\"511\":8,\"512\":4,\"513\":4,\"514\":5,\"515\":12,\"516\":4,\"517\":4,\"518\":4,\"519\":1,\"520\":7,\"521\":3,\"557\":1,\"560\":7,\"563\":3,\"567\":3,\"568\":2,\"582\":1,\"585\":13,\"587\":2,\"588\":4,\"628\":2,\"635\":3,\"640\":2,\"641\":2,\"648\":1,\"653\":2,\"661\":4,\"662\":2,\"666\":1,\"675\":1,\"676\":3,\"689\":1,\"692\":1,\"708\":3,\"709\":8,\"712\":11,\"714\":1,\"715\":2,\"728\":1,\"730\":3,\"732\":1,\"734\":3,\"735\":1,\"737\":5,\"738\":1,\"749\":2,\"753\":4,\"760\":2,\"773\":2,\"774\":3,\"785\":2,\"788\":3,\"789\":3,\"803\":2,\"810\":2,\"813\":4,\"820\":1,\"822\":3,\"823\":2,\"826\":3,\"827\":3,\"868\":1,\"871\":1,\"918\":1,\"919\":1,\"920\":3,\"950\":1,\"960\":1,\"964\":1,\"1015\":1,\"1019\":7,\"1030\":2,\"1040\":1,\"1042\":1,\"1043\":3,\"1044\":1,\"1045\":3,\"1056\":1,\"1057\":2,\"1189\":1,\"1261\":1,\"1271\":1,\"1272\":1,\"1273\":1,\"1376\":34,\"1385\":4,\"1405\":4}}],[\">=\",{\"1\":{\"9\":1,\"59\":1,\"69\":1,\"72\":1,\"295\":1,\"395\":1,\"427\":1,\"429\":1,\"430\":1,\"646\":1,\"655\":1,\"683\":2,\"691\":2,\"1015\":1,\"1207\":1,\"1268\":2,\"1272\":1}}],[\"><td>\",{\"1\":{\"878\":1}}],[\"><input\",{\"1\":{\"878\":1}}],[\"><\",{\"1\":{\"9\":1,\"26\":3,\"139\":1,\"149\":1,\"454\":3,\"504\":1,\"510\":1,\"511\":2,\"512\":1,\"513\":1,\"514\":1,\"515\":2,\"520\":1,\"584\":1,\"588\":1,\"919\":1,\"920\":1,\"1021\":1,\"1189\":1}}],[\"<video\",{\"1\":{\"1021\":1}}],[\"<val\",{\"1\":{\"1016\":1}}],[\"<key\",{\"1\":{\"1016\":1}}],[\"<keep\",{\"1\":{\"433\":1}}],[\"<queryclientprovider\",{\"1\":{\"826\":1}}],[\"<whiskygrid\",{\"1\":{\"789\":1}}],[\"<whisky\",{\"1\":{\"789\":1}}],[\"<wrappedcomponent\",{\"1\":{\"234\":1,\"239\":1}}],[\"<em><\",{\"1\":{\"1037\":1}}],[\"<expression>\",{\"1\":{\"1016\":1}}],[\"<element\",{\"1\":{\"737\":1}}],[\"<errorboundary>\",{\"1\":{\"242\":1}}],[\"<nav>\",{\"1\":{\"1020\":1}}],[\"<navlink\",{\"1\":{\"714\":2,\"822\":1,\"823\":1}}],[\"<navlink>\",{\"0\":{\"714\":1}}],[\"<navigate>\",{\"0\":{\"715\":1}}],[\"<navigate\",{\"1\":{\"709\":1,\"715\":1,\"730\":2,\"737\":1,\"738\":1}}],[\"<address>\",{\"1\":{\"1215\":1}}],[\"<a>用于定义超链接\",{\"1\":{\"1041\":1}}],[\"<a>\",{\"0\":{\"1041\":1}}],[\"<aside>\",{\"1\":{\"1020\":1}}],[\"<article>\",{\"1\":{\"1020\":1}}],[\"<app\",{\"1\":{\"735\":1,\"760\":1,\"773\":1,\"785\":1,\"803\":1,\"810\":1}}],[\"<appraisal>\",{\"1\":{\"730\":1}}],[\"<about\",{\"1\":{\"708\":1}}],[\"<a\",{\"1\":{\"667\":1,\"1042\":1,\"1043\":3}}],[\"<anothercomponent\",{\"1\":{\"207\":1}}],[\"<option\",{\"1\":{\"749\":4,\"1019\":5,\"1057\":3}}],[\"<outlet>\",{\"0\":{\"716\":1}}],[\"<ol>标签用于定义有序列表\",{\"1\":{\"1053\":1}}],[\"<ol>\",{\"1\":{\"641\":1,\"653\":1}}],[\"<other\",{\"1\":{\"495\":1}}],[\"<othercomponent\",{\"1\":{\"207\":2}}],[\"<guard>\",{\"0\":{\"738\":1}}],[\"<guard\",{\"1\":{\"737\":1}}],[\"<goods\",{\"1\":{\"709\":1}}],[\"<grandson\",{\"1\":{\"515\":1,\"560\":1}}],[\"<glimmer\",{\"1\":{\"208\":1}}],[\"<use\",{\"1\":{\"920\":1}}],[\"<url>\",{\"1\":{\"495\":1}}],[\"<ul>标签表示\",{\"1\":{\"1052\":1}}],[\"<ul>\",{\"1\":{\"504\":2,\"640\":1,\"641\":1,\"644\":1,\"653\":1,\"661\":1,\"666\":1,\"827\":1}}],[\"<ul\",{\"1\":{\"150\":1,\"353\":2,\"356\":2,\"359\":2}}],[\"<route>可以嵌套使用\",{\"1\":{\"712\":1}}],[\"<route>相当于一个\",{\"1\":{\"712\":1}}],[\"<routes\",{\"0\":{\"712\":1},\"1\":{\"712\":1}}],[\"<routes>监听地址并查询匹配<route>元素以匹配组件\",{\"1\":{\"712\":1}}],[\"<routes>\",{\"1\":{\"709\":1,\"712\":1}}],[\"<route\",{\"0\":{\"712\":1},\"1\":{\"709\":4,\"712\":7,\"822\":2}}],[\"<router>\",{\"1\":{\"803\":1}}],[\"<router\",{\"1\":{\"424\":2,\"426\":1,\"427\":3,\"429\":2,\"430\":2,\"432\":1,\"433\":1,\"822\":1}}],[\"<reactquerydevtools\",{\"1\":{\"826\":1}}],[\"<react\",{\"1\":{\"218\":1,\"220\":2,\"735\":1,\"737\":1,\"803\":1}}],[\"<form\",{\"1\":{\"1056\":1}}],[\"<form>会把它范围内的表单元素信息提交给服务器\",{\"1\":{\"1056\":1}}],[\"<form>\",{\"0\":{\"1056\":1}}],[\"<footer>\",{\"1\":{\"1020\":1}}],[\"<footer>等组件\",{\"1\":{\"728\":1}}],[\"<fieldset>标签内包含<legend>标签和其他标签\",{\"1\":{\"1020\":1}}],[\"<fieldset>\",{\"1\":{\"1020\":2}}],[\"<figure><\",{\"1\":{\"1020\":1}}],[\"<functioncomponent\",{\"1\":{\"301\":1,\"305\":1,\"329\":1,\"333\":1,\"344\":1,\"351\":1,\"353\":1,\"356\":1,\"359\":1,\"367\":1,\"377\":1}}],[\"<fancybutton\",{\"1\":{\"237\":1}}],[\"<fancyinput\",{\"1\":{\"191\":1}}],[\"<<\",{\"1\":{\"285\":1}}],[\"<label\",{\"1\":{\"1057\":1}}],[\"<label>用于绑定一个表单元素\",{\"1\":{\"1057\":1}}],[\"<label>标签为\",{\"1\":{\"1057\":1}}],[\"<label>标签\",{\"1\":{\"1057\":1}}],[\"<legend>legend标题<\",{\"1\":{\"1020\":1}}],[\"<legend>内文本作为标题\",{\"1\":{\"1020\":1}}],[\"<login\",{\"1\":{\"712\":1,\"734\":1}}],[\"<logprops\",{\"1\":{\"239\":1,\"240\":2}}],[\"<link\",{\"1\":{\"713\":1,\"804\":1,\"822\":1,\"823\":1,\"868\":1,\"919\":1,\"964\":1}}],[\"<link>\",{\"0\":{\"713\":1}}],[\"<li\",{\"1\":{\"353\":4,\"356\":5,\"359\":12,\"504\":2,\"827\":1}}],[\"<li>abc<li>\",{\"1\":{\"1094\":1}}],[\"<li>a<\",{\"1\":{\"661\":1}}],[\"<li><\",{\"1\":{\"1052\":1,\"1320\":1}}],[\"<li>可乐<\",{\"1\":{\"666\":1}}],[\"<li>咖啡<\",{\"1\":{\"666\":1}}],[\"<li>牛奶<\",{\"1\":{\"666\":1}}],[\"<li>c<\",{\"1\":{\"661\":1}}],[\"<li>b<\",{\"1\":{\"661\":1}}],[\"<li>\",{\"1\":{\"150\":1,\"640\":1,\"641\":2,\"644\":1,\"653\":2}}],[\"<meta\",{\"0\":{\"1034\":1},\"1\":{\"950\":1,\"960\":1}}],[\"<module\",{\"1\":{\"730\":1}}],[\"<mouse>\",{\"1\":{\"230\":1}}],[\"<mouse\",{\"1\":{\"228\":1,\"229\":1,\"231\":1}}],[\"<my\",{\"1\":{\"563\":1}}],[\"<mywidget\",{\"1\":{\"242\":1}}],[\"<mycontext\",{\"1\":{\"192\":1,\"213\":1,\"215\":1}}],[\"<del><\",{\"1\":{\"1037\":1}}],[\"<demo1\",{\"1\":{\"826\":1}}],[\"<demo\",{\"1\":{\"712\":1}}],[\"<datalist\",{\"1\":{\"1019\":1}}],[\"<dataprovider\",{\"1\":{\"225\":1}}],[\"<dialog\",{\"1\":{\"588\":1}}],[\"<div>标签用来布局\",{\"1\":{\"1038\":1}}],[\"<div>和<span>没有语义\",{\"1\":{\"1038\":1}}],[\"<div>error<\",{\"1\":{\"827\":1}}],[\"<div>哈哈<\",{\"1\":{\"661\":1}}],[\"<div><div\",{\"1\":{\"737\":1}}],[\"<div><\",{\"1\":{\"521\":1}}],[\"<div>这是孙组件<\",{\"1\":{\"515\":1}}],[\"<div>html结构2<\",{\"1\":{\"504\":1}}],[\"<div>html结构1<\",{\"1\":{\"504\":1}}],[\"<div>html1结构1<\",{\"1\":{\"504\":1}}],[\"<div>hello<\",{\"1\":{\"497\":1}}],[\"<div>loading<\",{\"1\":{\"827\":1}}],[\"<div>loading\",{\"1\":{\"207\":2}}],[\"<div>sum\",{\"1\":{\"194\":3,\"197\":2}}],[\"<div>b\",{\"1\":{\"194\":1}}],[\"<div>a\",{\"1\":{\"194\":1}}],[\"<div>名字\",{\"1\":{\"149\":1}}],[\"<div>\",{\"0\":{\"1038\":1},\"1\":{\"106\":1,\"110\":1,\"111\":1,\"113\":1,\"145\":2,\"155\":1,\"160\":2,\"182\":1,\"207\":2,\"208\":1,\"231\":1,\"497\":1,\"504\":3,\"515\":3,\"516\":1,\"517\":1,\"518\":1,\"520\":1,\"560\":1,\"644\":1,\"661\":2,\"713\":1,\"721\":1,\"749\":1,\"804\":1,\"808\":1,\"823\":1,\"1019\":1}}],[\"<div\",{\"1\":{\"9\":1,\"108\":1,\"109\":1,\"112\":1,\"139\":1,\"150\":1,\"155\":1,\"160\":1,\"227\":1,\"228\":1,\"229\":1,\"344\":2,\"351\":1,\"367\":1,\"377\":1,\"448\":1,\"454\":6,\"475\":2,\"497\":1,\"499\":1,\"511\":2,\"512\":1,\"513\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"519\":1,\"520\":1,\"521\":1,\"567\":2,\"568\":1,\"588\":2,\"640\":2,\"641\":2,\"653\":2,\"666\":1,\"732\":1,\"774\":1,\"789\":2,\"813\":1,\"867\":1,\"1118\":1}}],[\"<dd>\",{\"1\":{\"220\":1}}],[\"<dt>\",{\"1\":{\"220\":1}}],[\"<dl><\",{\"1\":{\"1054\":1}}],[\"<dl>标签用于定义描述列表\",{\"1\":{\"1054\":1}}],[\"<dl>\",{\"1\":{\"220\":1}}],[\"<connectedapp\",{\"1\":{\"820\":1}}],[\"<component\",{\"1\":{\"728\":1}}],[\"<comments\",{\"1\":{\"208\":1}}],[\"<customer\",{\"1\":{\"709\":1}}],[\"<category>\",{\"1\":{\"504\":4}}],[\"<cat\",{\"1\":{\"229\":1,\"231\":1}}],[\"<childc\",{\"1\":{\"218\":1}}],[\"<childb\",{\"1\":{\"218\":1}}],[\"<childa\",{\"1\":{\"218\":1}}],[\"<child\",{\"1\":{\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"510\":1,\"568\":1}}],[\"<>占两位\",{\"1\":{\"661\":1,\"662\":1}}],[\"<>的长度为\",{\"1\":{\"661\":1}}],[\"<>\",{\"1\":{\"189\":1,\"192\":1,\"197\":1,\"217\":1,\"219\":1,\"228\":1,\"229\":1,\"715\":1,\"827\":1,\"1215\":1,\"1385\":1}}],[\"<id>\",{\"1\":{\"1215\":1}}],[\"<i\",{\"1\":{\"918\":1,\"919\":1}}],[\"<ins><\",{\"1\":{\"1037\":1}}],[\"<index\",{\"1\":{\"734\":1}}],[\"<input\",{\"1\":{\"26\":1,\"150\":1,\"154\":3,\"189\":1,\"191\":1,\"448\":1,\"511\":2,\"512\":1,\"513\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"557\":1,\"1019\":1,\"1057\":1}}],[\"<img>标签用于定义\",{\"1\":{\"1044\":1}}],[\"<img>\",{\"0\":{\"1044\":1}}],[\"<img\",{\"1\":{\"229\":1,\"878\":1,\"1044\":1}}],[\"<item\",{\"1\":{\"150\":1}}],[\"<host>\",{\"1\":{\"1215\":1}}],[\"<home\",{\"1\":{\"709\":1,\"712\":1}}],[\"<h6>\",{\"0\":{\"1035\":1},\"1\":{\"1035\":1}}],[\"<html>\",{\"1\":{\"1385\":1}}],[\"<html><\",{\"1\":{\"1031\":1}}],[\"<html><head><title><\",{\"1\":{\"1385\":3}}],[\"<html><head>\",{\"1\":{\"8\":1}}],[\"<html\",{\"0\":{\"1033\":1}}],[\"<hgroup>\",{\"1\":{\"1020\":2}}],[\"<head>标签内\",{\"1\":{\"1034\":1}}],[\"<head><\",{\"1\":{\"1030\":1,\"1031\":1}}],[\"<head>\",{\"1\":{\"1030\":2}}],[\"<header>\",{\"1\":{\"1020\":1}}],[\"<helloworld>\",{\"1\":{\"520\":1}}],[\"<helloworld><\",{\"1\":{\"516\":1,\"517\":1,\"518\":1,\"521\":1}}],[\"<helloworld\",{\"1\":{\"511\":2,\"512\":1,\"513\":1,\"514\":1,\"515\":1}}],[\"<hello\",{\"1\":{\"497\":1}}],[\"<hello><\",{\"1\":{\"487\":1}}],[\"<h4>\",{\"1\":{\"749\":1}}],[\"<h4>sum值为\",{\"1\":{\"715\":1}}],[\"<h2\",{\"1\":{\"721\":1}}],[\"<h2>子组件<\",{\"1\":{\"560\":1}}],[\"<h2>\",{\"1\":{\"520\":2}}],[\"<hashrouter>\",{\"0\":{\"711\":1}}],[\"<h3\",{\"1\":{\"560\":1,\"662\":1}}],[\"<h3>home标题<\",{\"1\":{\"715\":1}}],[\"<h3>哈哈哈哈你好<\",{\"1\":{\"661\":1}}],[\"<h3>加载中\",{\"1\":{\"568\":1}}],[\"<h3>我是一个标题<\",{\"1\":{\"666\":1}}],[\"<h3>我是一个弹窗<\",{\"1\":{\"567\":1}}],[\"<h3>我是app组件<\",{\"1\":{\"568\":1}}],[\"<h3>\",{\"1\":{\"557\":1}}],[\"<hr>\",{\"1\":{\"1020\":1}}],[\"<hr\",{\"1\":{\"560\":2,\"813\":1}}],[\"<h1\",{\"1\":{\"301\":1,\"508\":1}}],[\"<h1>title<\",{\"1\":{\"1391\":2}}],[\"<h1>title<h1>\",{\"1\":{\"1391\":1}}],[\"<h1>title<h1><p>text<p>\",{\"1\":{\"1391\":1}}],[\"<h1>about<\",{\"1\":{\"804\":1,\"808\":1}}],[\"<h1>fetching\",{\"1\":{\"789\":1}}],[\"<h1>我买了一个\",{\"1\":{\"644\":1}}],[\"<h1>父组件<\",{\"1\":{\"560\":1}}],[\"<h1>\",{\"0\":{\"1035\":1},\"1\":{\"248\":2,\"253\":1,\"269\":1,\"271\":1,\"272\":1,\"774\":1,\"789\":1,\"1035\":1}}],[\"<h1>caught\",{\"1\":{\"245\":1}}],[\"<h1>something\",{\"1\":{\"242\":1}}],[\"<h1>move\",{\"1\":{\"231\":1}}],[\"<h1>移动鼠标<\",{\"1\":{\"227\":1,\"228\":1,\"229\":1}}],[\"<h1>hello\",{\"1\":{\"122\":1,\"225\":1}}],[\"<th>标签表示\",{\"1\":{\"1048\":1}}],[\"<themedbutton\",{\"1\":{\"111\":1,\"192\":1,\"217\":1}}],[\"<themecontext\",{\"1\":{\"111\":1,\"192\":1,\"217\":1}}],[\"<tr><tr>标签用于定义表格中的行\",{\"1\":{\"1048\":1}}],[\"<transition\",{\"1\":{\"508\":1}}],[\"<table><table>是用于定义表格的标签\",{\"1\":{\"1048\":1}}],[\"<tabs\",{\"1\":{\"208\":1}}],[\"<title><\",{\"1\":{\"1030\":1,\"1031\":1}}],[\"<test2\",{\"1\":{\"712\":1}}],[\"<test1\",{\"1\":{\"712\":1}}],[\"<teleport\",{\"1\":{\"567\":1}}],[\"<template\",{\"1\":{\"504\":4,\"520\":1,\"568\":2}}],[\"<template>\",{\"1\":{\"424\":2,\"427\":1,\"429\":1,\"430\":1,\"475\":1,\"497\":2,\"499\":1,\"504\":6,\"508\":1,\"510\":1,\"511\":4,\"512\":2,\"513\":2,\"514\":2,\"515\":5,\"516\":2,\"517\":2,\"518\":2,\"519\":1,\"520\":2,\"521\":2,\"557\":1,\"560\":3,\"568\":1,\"584\":1,\"588\":2,\"595\":1}}],[\"<td><td>用于定义表格中的单元格\",{\"1\":{\"1048\":1}}],[\"<td>world<\",{\"1\":{\"219\":1}}],[\"<td>hello<\",{\"1\":{\"219\":1}}],[\"<tooltip\",{\"1\":{\"112\":1}}],[\"<toolbar\",{\"1\":{\"111\":1,\"192\":1,\"217\":1}}],[\"<strong><\",{\"1\":{\"1037\":1}}],[\"<style\",{\"1\":{\"920\":1}}],[\"<style>标签理论上可以放在\",{\"1\":{\"866\":1}}],[\"<svg\",{\"1\":{\"920\":1}}],[\"<switch>\",{\"1\":{\"822\":1}}],[\"<select>中至少包含一对<option>\",{\"1\":{\"1057\":1}}],[\"<select\",{\"1\":{\"749\":1,\"1057\":1}}],[\"<section>\",{\"1\":{\"207\":1,\"1020\":2}}],[\"<son\",{\"1\":{\"515\":1,\"560\":1}}],[\"<sub><\",{\"1\":{\"1039\":1}}],[\"<sub>\",{\"0\":{\"1039\":1}}],[\"<sup><\",{\"1\":{\"1039\":1}}],[\"<sup>\",{\"0\":{\"1039\":1}}],[\"<sunchild><\",{\"1\":{\"517\":1}}],[\"<sunchild\",{\"1\":{\"515\":1}}],[\"<suspense>\",{\"1\":{\"568\":1}}],[\"<suspense\",{\"1\":{\"207\":2,\"208\":1}}],[\"<slot\",{\"1\":{\"504\":3,\"520\":1}}],[\"<slot>插槽默认内容\",{\"1\":{\"504\":1}}],[\"<school\",{\"1\":{\"488\":1}}],[\"<school><\",{\"1\":{\"488\":1}}],[\"<script\",{\"1\":{\"26\":1,\"560\":3,\"582\":1,\"584\":3,\"587\":2,\"588\":2,\"920\":1,\"1189\":2}}],[\"<script><\",{\"1\":{\"125\":1}}],[\"<script>\",{\"1\":{\"9\":1,\"20\":1,\"22\":1,\"26\":2,\"69\":1,\"70\":1,\"72\":1,\"438\":1,\"448\":1,\"451\":1,\"454\":3,\"475\":1,\"497\":2,\"499\":1,\"504\":1,\"508\":1,\"510\":1,\"511\":4,\"512\":2,\"513\":2,\"514\":2,\"515\":6,\"516\":2,\"517\":3,\"518\":2,\"519\":1,\"520\":2,\"521\":2,\"534\":1,\"557\":1,\"563\":1,\"584\":3,\"588\":2,\"595\":2,\"1124\":1,\"1453\":1}}],[\"<span>标签用来布局\",{\"1\":{\"1038\":1}}],[\"<span>\",{\"0\":{\"1038\":1}}],[\"<span\",{\"1\":{\"301\":1,\"588\":1,\"774\":1}}],[\"<siblingb\",{\"1\":{\"110\":1}}],[\"<siblinga\",{\"1\":{\"110\":1}}],[\"<pre>\",{\"1\":{\"1020\":1}}],[\"<product\",{\"1\":{\"823\":1}}],[\"<provider\",{\"1\":{\"760\":1,\"773\":1,\"785\":1,\"803\":1,\"810\":1}}],[\"<project\",{\"1\":{\"529\":2}}],[\"<page404\",{\"1\":{\"734\":1}}],[\"<photos\",{\"1\":{\"208\":1}}],[\"<p>text<\",{\"1\":{\"1391\":1}}],[\"<p>text<p>\",{\"1\":{\"1391\":1}}],[\"<p>标签用于定义段落\",{\"1\":{\"1036\":1}}],[\"<p>标签主要用于存放文字\",{\"1\":{\"876\":1}}],[\"<p>home\",{\"1\":{\"804\":1,\"808\":1}}],[\"<p>current\",{\"1\":{\"804\":1,\"808\":1}}],[\"<p>年龄\",{\"1\":{\"640\":1}}],[\"<p>性别\",{\"1\":{\"640\":1}}],[\"<p>姓名\",{\"1\":{\"640\":1}}],[\"<p>当前颜色\",{\"1\":{\"560\":1}}],[\"<p>鼠标的位置是\",{\"1\":{\"230\":1}}],[\"<p>\",{\"1\":{\"227\":1,\"228\":1,\"448\":1,\"641\":1,\"653\":1}}],[\"<p>you\",{\"1\":{\"182\":1}}],[\"<p><正文文本\",{\"1\":{\"1020\":1}}],[\"<p><\",{\"1\":{\"26\":1}}],[\"<person\",{\"1\":{\"149\":1}}],[\"<portal>\",{\"1\":{\"112\":1}}],[\"<p\",{\"1\":{\"26\":2,\"150\":1,\"351\":1,\"356\":1}}],[\"<br>单标签\",{\"1\":{\"1036\":1}}],[\"<browserrouter>用于包裹整个应用\",{\"1\":{\"710\":1}}],[\"<browserrouter>\",{\"0\":{\"710\":1},\"1\":{\"709\":1,\"735\":1}}],[\"<br\",{\"1\":{\"92\":1,\"774\":1,\"1271\":1,\"1272\":1,\"1273\":1}}],[\"<body><\",{\"1\":{\"1030\":1,\"1031\":1}}],[\"<body>\",{\"1\":{\"20\":1,\"22\":1,\"26\":2,\"72\":1,\"448\":1,\"454\":2}}],[\"<button>hover\",{\"1\":{\"112\":1}}],[\"<button>click<\",{\"1\":{\"109\":1}}],[\"<button>jquery的jsonp<\",{\"1\":{\"26\":1}}],[\"<button>ajax请求<\",{\"1\":{\"22\":1}}],[\"<button>ajax<\",{\"1\":{\"20\":1}}],[\"<button>post<\",{\"1\":{\"20\":1}}],[\"<button>get<\",{\"1\":{\"20\":1}}],[\"<button\",{\"1\":{\"9\":1,\"72\":2,\"98\":1,\"99\":1,\"100\":1,\"111\":1,\"114\":1,\"145\":1,\"155\":1,\"160\":1,\"182\":1,\"189\":1,\"192\":1,\"197\":2,\"217\":1,\"236\":1,\"237\":1,\"245\":1,\"305\":1,\"329\":1,\"333\":1,\"475\":1,\"560\":3,\"561\":1,\"567\":1,\"715\":1,\"749\":4,\"774\":4,\"789\":1,\"813\":2,\"823\":4,\"827\":1}}],[\"<\",{\"0\":{\"1032\":1},\"1\":{\"9\":1,\"20\":2,\"22\":2,\"26\":4,\"59\":1,\"69\":2,\"70\":1,\"72\":3,\"98\":1,\"99\":1,\"100\":1,\"106\":1,\"109\":1,\"110\":1,\"111\":2,\"112\":3,\"113\":1,\"122\":1,\"145\":2,\"149\":1,\"150\":4,\"155\":1,\"160\":3,\"182\":1,\"189\":1,\"192\":3,\"194\":5,\"197\":5,\"207\":7,\"208\":2,\"215\":1,\"217\":3,\"218\":1,\"219\":1,\"220\":4,\"225\":1,\"227\":2,\"228\":3,\"229\":2,\"230\":2,\"231\":2,\"236\":1,\"237\":1,\"242\":2,\"245\":1,\"248\":2,\"253\":1,\"269\":1,\"271\":1,\"272\":2,\"281\":1,\"282\":1,\"301\":2,\"305\":1,\"316\":1,\"319\":1,\"328\":1,\"329\":1,\"333\":1,\"344\":2,\"348\":1,\"349\":1,\"351\":2,\"352\":1,\"353\":4,\"356\":6,\"357\":2,\"359\":4,\"360\":1,\"361\":4,\"367\":1,\"373\":2,\"374\":1,\"375\":1,\"377\":1,\"385\":1,\"392\":6,\"396\":1,\"424\":3,\"427\":4,\"429\":3,\"430\":3,\"433\":1,\"438\":1,\"448\":4,\"451\":1,\"454\":8,\"475\":3,\"497\":5,\"499\":5,\"504\":33,\"508\":3,\"510\":4,\"511\":14,\"512\":7,\"513\":7,\"514\":8,\"515\":23,\"516\":8,\"517\":9,\"518\":8,\"519\":3,\"520\":15,\"521\":7,\"534\":1,\"536\":1,\"557\":3,\"560\":9,\"561\":1,\"563\":3,\"567\":3,\"568\":6,\"582\":1,\"588\":3,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1,\"624\":1,\"635\":2,\"640\":6,\"641\":6,\"644\":4,\"653\":6,\"656\":1,\"661\":8,\"662\":1,\"666\":2,\"674\":1,\"675\":1,\"683\":1,\"686\":1,\"689\":1,\"690\":1,\"692\":1,\"695\":1,\"709\":2,\"712\":3,\"713\":1,\"714\":1,\"715\":2,\"721\":1,\"730\":1,\"732\":1,\"735\":2,\"737\":1,\"749\":4,\"760\":1,\"773\":1,\"774\":3,\"785\":1,\"789\":3,\"803\":3,\"804\":3,\"808\":3,\"810\":1,\"813\":3,\"822\":2,\"823\":2,\"826\":1,\"827\":4,\"867\":1,\"918\":1,\"920\":2,\"1015\":1,\"1019\":2,\"1020\":1,\"1032\":4,\"1040\":1,\"1042\":1,\"1056\":1,\"1057\":1,\"1124\":1,\"1173\":1,\"1181\":1,\"1189\":1,\"1261\":1,\"1376\":34,\"1385\":5,\"1391\":3,\"1453\":1,\"1456\":1,\"1458\":1}}],[\"<=th\",{\"1\":{\"1216\":1}}],[\"<=\",{\"1\":{\"9\":1,\"295\":2,\"683\":5,\"691\":5,\"1015\":1,\"1016\":2,\"1207\":1,\"1216\":1,\"1271\":1,\"1273\":1}}],[\"ggle\",{\"1\":{\"1384\":2}}],[\"gif\",{\"1\":{\"1045\":3}}],[\"github\",{\"1\":{\"255\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":2,\"386\":1,\"397\":1,\"621\":1,\"628\":1,\"636\":1,\"658\":1,\"663\":1,\"665\":1,\"692\":1,\"1017\":1}}],[\"gbk\",{\"1\":{\"1034\":1}}],[\"gb2312\",{\"1\":{\"1034\":1}}],[\"gb\",{\"1\":{\"882\":1}}],[\"gctimeout\",{\"1\":{\"843\":3}}],[\"galaxy\",{\"1\":{\"952\":1}}],[\"garbage\",{\"1\":{\"842\":1}}],[\"games=\",{\"1\":{\"504\":1}}],[\"games\",{\"1\":{\"504\":5}}],[\"guard\",{\"1\":{\"737\":2,\"738\":2}}],[\"guide\",{\"1\":{\"527\":1,\"528\":1}}],[\"gui\",{\"1\":{\"261\":1}}],[\"gradient\",{\"1\":{\"1000\":1}}],[\"grayscale\",{\"1\":{\"918\":1}}],[\"grandson\",{\"1\":{\"560\":3}}],[\"grandson组件\",{\"1\":{\"515\":1}}],[\"groove\",{\"1\":{\"909\":2}}],[\"group>\",{\"1\":{\"508\":1}}],[\"group\",{\"1\":{\"424\":1,\"426\":1,\"1215\":1}}],[\"gridright\",{\"1\":{\"964\":1}}],[\"gridmain\",{\"1\":{\"964\":1}}],[\"gridmenu\",{\"1\":{\"964\":1}}],[\"gridtemplatecolumns\",{\"1\":{\"789\":1}}],[\"grid\",{\"1\":{\"789\":1}}],[\"gen\",{\"1\":{\"1174\":4}}],[\"generic\",{\"1\":{\"1013\":1}}],[\"generator的调试环境比较糟糕\",{\"1\":{\"779\":1}}],[\"generator\",{\"1\":{\"765\":2,\"768\":1,\"1275\":1}}],[\"gender\",{\"1\":{\"468\":2,\"1160\":3,\"1214\":1,\"1341\":1}}],[\"get拿到值\",{\"1\":{\"1433\":1}}],[\"gethours\",{\"1\":{\"1367\":1}}],[\"gethostparentfiber\",{\"1\":{\"274\":2,\"326\":2,\"349\":2,\"375\":2,\"385\":2}}],[\"gethostsibling\",{\"1\":{\"274\":4,\"326\":3,\"349\":3,\"375\":3,\"385\":3}}],[\"getyear\",{\"1\":{\"1367\":1}}],[\"getmilliseconds\",{\"1\":{\"1367\":1}}],[\"getminutes\",{\"1\":{\"1367\":1}}],[\"getmonth\",{\"1\":{\"1367\":1}}],[\"getmutationcache\",{\"1\":{\"836\":1}}],[\"getownpropertydescriptor\",{\"1\":{\"1408\":1}}],[\"getownpropertydescriptors\",{\"0\":{\"1211\":1}}],[\"getownpropertynames\",{\"1\":{\"1405\":4}}],[\"getownpropertysymbols\",{\"1\":{\"116\":2}}],[\"getjoke\",{\"1\":{\"1207\":1}}],[\"getjson\",{\"1\":{\"26\":1,\"788\":1}}],[\"getquerycache\",{\"1\":{\"836\":1}}],[\"getprototypeof\",{\"1\":{\"1408\":1}}],[\"getprojectsbyuser\",{\"1\":{\"832\":1}}],[\"getproduct\",{\"1\":{\"823\":1}}],[\"getuserbyemail\",{\"1\":{\"832\":1}}],[\"getinitialstate\",{\"1\":{\"816\":1}}],[\"getitem\",{\"1\":{\"436\":1,\"437\":1,\"730\":1}}],[\"getdate\",{\"1\":{\"1367\":1}}],[\"getdataflows\",{\"1\":{\"799\":1}}],[\"getdatafromserver\",{\"1\":{\"799\":2}}],[\"getdata\",{\"1\":{\"799\":1}}],[\"getday\",{\"1\":{\"1269\":1,\"1367\":1}}],[\"getderivedstatefromerror\",{\"1\":{\"242\":3}}],[\"getderivedstatefromprops\",{\"1\":{\"171\":2,\"172\":2}}],[\"getattributenode\",{\"1\":{\"1096\":1}}],[\"getattribute\",{\"1\":{\"1094\":1,\"1096\":1}}],[\"getasynclist\",{\"1\":{\"755\":1}}],[\"getallresponseheaders\",{\"1\":{\"9\":1,\"69\":1,\"72\":1}}],[\"getweather\",{\"1\":{\"755\":1,\"756\":1}}],[\"getwh\",{\"1\":{\"543\":2}}],[\"getvueval\",{\"1\":{\"695\":3}}],[\"get收集依赖\",{\"1\":{\"609\":1,\"610\":1,\"613\":1}}],[\"gettime\",{\"1\":{\"1367\":1}}],[\"getter标记\",{\"1\":{\"635\":1}}],[\"getter\",{\"0\":{\"601\":1},\"1\":{\"450\":1,\"593\":3,\"601\":5,\"602\":2,\"604\":1,\"605\":5,\"608\":10,\"609\":1,\"610\":1,\"613\":1,\"620\":1,\"621\":1,\"628\":2,\"630\":1,\"631\":2,\"635\":3,\"636\":15,\"792\":1}}],[\"getters\",{\"0\":{\"412\":1},\"1\":{\"407\":2,\"412\":2,\"415\":1,\"418\":3,\"519\":1,\"626\":3,\"632\":2,\"635\":2}}],[\"gettag\",{\"1\":{\"360\":2,\"374\":2,\"396\":2}}],[\"getfoo\",{\"1\":{\"1405\":2}}],[\"getfullyear\",{\"1\":{\"1367\":2}}],[\"getflags\",{\"1\":{\"360\":2,\"374\":2,\"396\":2}}],[\"getfibercurrentpropsfromnode\",{\"1\":{\"289\":1,\"291\":2,\"299\":1}}],[\"getrootforupdatedfiber\",{\"1\":{\"316\":2}}],[\"getlistener\",{\"0\":{\"291\":1,\"299\":1},\"1\":{\"290\":1,\"291\":1,\"296\":1,\"298\":1,\"299\":1}}],[\"getcomputedstyle\",{\"1\":{\"1106\":3}}],[\"getcomments\",{\"1\":{\"234\":1}}],[\"getcurrenttime\",{\"1\":{\"395\":4}}],[\"getclosestinstancefromnode\",{\"1\":{\"288\":2,\"289\":1,\"297\":1}}],[\"geteventtarget\",{\"1\":{\"288\":5,\"290\":1,\"295\":1,\"297\":1}}],[\"getelementbytagname\",{\"1\":{\"1093\":1}}],[\"getelementbyid\",{\"1\":{\"9\":2,\"112\":1,\"269\":1,\"271\":1,\"272\":1,\"301\":1,\"305\":1,\"329\":1,\"333\":1,\"344\":1,\"351\":1,\"353\":1,\"356\":1,\"359\":1,\"367\":1,\"377\":1,\"641\":1,\"669\":1,\"675\":2,\"685\":3,\"735\":1,\"760\":1,\"773\":1,\"785\":1,\"803\":1,\"810\":1,\"1085\":1,\"1092\":1}}],[\"getelementsbyclassname\",{\"1\":{\"1092\":2}}],[\"getelementsbyname\",{\"1\":{\"1085\":1,\"1092\":1}}],[\"getelementsbytagname\",{\"1\":{\"20\":1,\"1085\":1,\"1092\":1}}],[\"getseconds\",{\"1\":{\"1367\":1}}],[\"getselectors\",{\"1\":{\"816\":1}}],[\"getscroll\",{\"1\":{\"1124\":2}}],[\"getstyle\",{\"1\":{\"1106\":1}}],[\"getstate\",{\"1\":{\"749\":2,\"755\":3,\"767\":1}}],[\"getstatefromupdate\",{\"1\":{\"272\":2}}],[\"getsidemenusaction\",{\"1\":{\"731\":3}}],[\"getsidemenus\",{\"1\":{\"731\":2}}],[\"getsnapshotbeforeupdate\",{\"1\":{\"171\":1}}],[\"getblogpost\",{\"1\":{\"234\":1}}],[\"get\",{\"0\":{\"14\":1,\"1407\":1},\"1\":{\"7\":1,\"9\":1,\"17\":1,\"20\":1,\"26\":1,\"30\":1,\"65\":1,\"67\":2,\"69\":1,\"70\":1,\"72\":1,\"75\":1,\"272\":1,\"292\":1,\"361\":2,\"450\":1,\"468\":1,\"536\":1,\"539\":1,\"548\":1,\"549\":2,\"557\":1,\"601\":7,\"602\":2,\"604\":1,\"607\":2,\"608\":7,\"609\":4,\"610\":1,\"613\":1,\"616\":3,\"626\":5,\"627\":1,\"631\":1,\"632\":8,\"633\":5,\"634\":1,\"635\":5,\"683\":1,\"691\":1,\"694\":1,\"700\":1,\"721\":1,\"755\":2,\"756\":2,\"774\":3,\"775\":1,\"777\":2,\"806\":1,\"827\":1,\"1056\":1,\"1179\":1,\"1180\":1,\"1207\":1,\"1224\":2,\"1284\":1,\"1407\":5,\"1433\":1}}],[\"go+gle\",{\"1\":{\"1384\":1}}],[\"goooooooogle\",{\"1\":{\"1384\":1}}],[\"gooooooogle\",{\"1\":{\"1384\":1}}],[\"goooooogle\",{\"1\":{\"1384\":1}}],[\"gooooogle\",{\"1\":{\"1384\":1}}],[\"goooogle\",{\"1\":{\"1384\":1}}],[\"gooogle\",{\"1\":{\"1384\":3}}],[\"google\",{\"1\":{\"1384\":1}}],[\"goodsdetail\",{\"1\":{\"721\":1}}],[\"goods\",{\"1\":{\"709\":4,\"721\":1}}],[\"gogle\",{\"1\":{\"1384\":2}}],[\"go3\",{\"1\":{\"823\":2}}],[\"go2\",{\"1\":{\"823\":2}}],[\"go\",{\"1\":{\"432\":1,\"823\":2,\"1067\":2,\"1384\":7}}],[\"gle\",{\"1\":{\"1384\":7}}],[\"glossary\",{\"1\":{\"220\":1}}],[\"globalthis\",{\"0\":{\"1231\":1},\"1\":{\"583\":2,\"1231\":4}}],[\"globals\",{\"1\":{\"578\":1}}],[\"globalproperties\",{\"1\":{\"561\":1}}],[\"global和标签选择器来声明全局样式\",{\"1\":{\"139\":1}}],[\"global\",{\"0\":{\"113\":1},\"1\":{\"105\":1,\"549\":2,\"581\":1,\"582\":1,\"583\":5,\"591\":5,\"1231\":2,\"1422\":1}}],[\"glimmer\",{\"1\":{\"208\":2}}],[\"g\",{\"1\":{\"137\":1,\"359\":1,\"493\":1,\"527\":1,\"1016\":1,\"1227\":1,\"1382\":11,\"1384\":9,\"1386\":1,\"1390\":1,\"1391\":3}}],[\"gzip\",{\"1\":{\"8\":1}}],[\"8也被称为万国码\",{\"1\":{\"1034\":1}}],[\"85\",{\"1\":{\"1178\":7}}],[\"853\",{\"1\":{\"952\":1}}],[\"85778\",{\"1\":{\"788\":1}}],[\"8d5l8fzk5b87iudi\",{\"1\":{\"919\":1,\"920\":1}}],[\"888888\",{\"1\":{\"1014\":2}}],[\"888\",{\"1\":{\"662\":1}}],[\"88\",{\"1\":{\"610\":1}}],[\"8\",{\"0\":{\"46\":1,\"113\":1,\"517\":1,\"769\":1,\"1039\":1,\"1165\":1,\"1231\":1,\"1362\":1},\"1\":{\"53\":1,\"174\":1,\"323\":1,\"371\":1,\"381\":1,\"474\":1,\"590\":1,\"1016\":4,\"1034\":1,\"1178\":3,\"1181\":1,\"1221\":1,\"1240\":1,\"1272\":1,\"1273\":1,\"1376\":4}}],[\"82\",{\"1\":{\"28\":1}}],[\"81服务\",{\"1\":{\"28\":1}}],[\"81\",{\"1\":{\"28\":1}}],[\"800px\",{\"1\":{\"1016\":1}}],[\"80\",{\"1\":{\"28\":2}}],[\"8content\",{\"1\":{\"8\":1}}],[\"834px\",{\"1\":{\"1016\":1}}],[\"83\",{\"1\":{\"7\":1}}],[\"odd\",{\"1\":{\"1289\":2}}],[\"ownkeys\",{\"1\":{\"1168\":1}}],[\"osx\",{\"1\":{\"918\":1}}],[\"over\",{\"1\":{\"1305\":2}}],[\"overline\",{\"1\":{\"891\":1}}],[\"overflow\",{\"0\":{\"897\":1},\"1\":{\"112\":1,\"897\":1,\"914\":3,\"920\":1,\"926\":2,\"927\":2,\"971\":1,\"985\":2,\"1000\":1}}],[\"oom\",{\"1\":{\"843\":1}}],[\"oop\",{\"1\":{\"793\":1}}],[\"oh\",{\"1\":{\"830\":1}}],[\"o\",{\"1\":{\"662\":3,\"676\":1,\"935\":2,\"1016\":1,\"1192\":2,\"1384\":1}}],[\"ol\",{\"1\":{\"876\":1,\"1053\":1}}],[\"ol>标签中输入其他标签或文字的做法是不被允许的\",{\"1\":{\"1053\":1}}],[\"ol>\",{\"1\":{\"641\":1,\"653\":1}}],[\"oldobj\",{\"1\":{\"1461\":7}}],[\"oldch\",{\"1\":{\"683\":17,\"691\":17}}],[\"oldendvnode\",{\"1\":{\"683\":11,\"691\":11}}],[\"oldendindex\",{\"1\":{\"683\":10,\"691\":10}}],[\"oldend\",{\"0\":{\"678\":1,\"680\":1},\"1\":{\"678\":1,\"682\":1}}],[\"oldstartvnode\",{\"1\":{\"683\":13,\"691\":13}}],[\"oldstartindex\",{\"1\":{\"683\":6,\"691\":6}}],[\"oldstart++\",{\"1\":{\"677\":1}}],[\"oldstart\",{\"0\":{\"677\":1,\"679\":1},\"1\":{\"680\":1,\"681\":2,\"682\":1}}],[\"oldafter\",{\"1\":{\"676\":2}}],[\"oldbefore\",{\"1\":{\"676\":2}}],[\"oldvnode和newvnode均有children\",{\"1\":{\"683\":1,\"690\":1}}],[\"oldvnodeelm\",{\"1\":{\"675\":4,\"683\":4,\"688\":4}}],[\"oldvnode\",{\"1\":{\"675\":9,\"682\":1,\"683\":16,\"688\":10,\"690\":6}}],[\"oldvnode必定为真实dom\",{\"1\":{\"675\":1}}],[\"oldvnode可以传入真实dom\",{\"1\":{\"675\":1}}],[\"oldval\",{\"1\":{\"609\":2,\"610\":6}}],[\"oldvalue\",{\"1\":{\"451\":7,\"540\":12,\"609\":2,\"616\":2,\"626\":2}}],[\"oldindex\",{\"1\":{\"361\":3}}],[\"oldfiber\",{\"1\":{\"354\":7,\"357\":13,\"358\":1,\"361\":14}}],[\"oldprops\",{\"1\":{\"320\":2,\"321\":2,\"325\":2,\"326\":2,\"327\":4,\"349\":2,\"375\":2,\"385\":2}}],[\"oldjsx\",{\"1\":{\"248\":1}}],[\"old\",{\"1\":{\"239\":2,\"625\":1}}],[\"outerheight\",{\"1\":{\"1324\":2}}],[\"outerhtml\",{\"1\":{\"1091\":4}}],[\"outerwidth\",{\"1\":{\"1324\":2}}],[\"outertext\",{\"1\":{\"1091\":3}}],[\"outer\",{\"0\":{\"1091\":1}}],[\"outset\",{\"1\":{\"909\":4,\"912\":1}}],[\"output\",{\"1\":{\"493\":1,\"661\":5}}],[\"out\",{\"1\":{\"395\":3,\"1305\":2}}],[\"otherapi\",{\"1\":{\"592\":1}}],[\"other\",{\"0\":{\"559\":1},\"1\":{\"270\":1,\"272\":1}}],[\"othercomponent\",{\"1\":{\"207\":6}}],[\"observable基础类型\",{\"1\":{\"788\":1}}],[\"observable<action>\",{\"1\":{\"781\":2}}],[\"observable的核心概念和基础模型\",{\"1\":{\"781\":1}}],[\"observable是基于\",{\"1\":{\"780\":1}}],[\"observable\",{\"0\":{\"780\":1},\"1\":{\"784\":1,\"785\":1,\"788\":6,\"790\":1,\"795\":2,\"802\":2,\"806\":2}}],[\"observearray\",{\"1\":{\"603\":3,\"604\":3,\"609\":3,\"610\":3,\"614\":1,\"617\":2}}],[\"observe\",{\"0\":{\"618\":1},\"1\":{\"202\":1,\"602\":5,\"603\":3,\"604\":9,\"608\":4,\"609\":11,\"610\":8,\"613\":4,\"617\":3,\"618\":1,\"620\":1,\"634\":3,\"635\":3,\"694\":3}}],[\"observetarget\",{\"1\":{\"202\":3}}],[\"observers\",{\"1\":{\"842\":11,\"843\":5}}],[\"observer实例对象并初始化value值\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"observer实例同时遍历key值进入definereactive的递归执行\",{\"1\":{\"602\":1,\"604\":1,\"608\":1,\"609\":1,\"610\":1,\"613\":1}}],[\"observer操作\",{\"1\":{\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"observer\",{\"0\":{\"114\":1,\"602\":1,\"617\":1},\"1\":{\"105\":1,\"598\":1,\"602\":7,\"603\":2,\"604\":8,\"605\":1,\"609\":6,\"610\":3,\"617\":2,\"618\":4,\"620\":3,\"621\":5,\"623\":1,\"627\":1,\"695\":1,\"790\":1,\"804\":2,\"808\":2,\"842\":10,\"843\":5}}],[\"ob\",{\"1\":{\"602\":13,\"603\":8,\"604\":18,\"609\":18,\"610\":10,\"612\":1,\"614\":6,\"617\":4,\"618\":9,\"621\":1,\"626\":1,\"627\":4}}],[\"objclone\",{\"1\":{\"823\":2}}],[\"obj=\",{\"1\":{\"511\":2,\"1341\":1}}],[\"obj\",{\"1\":{\"65\":1,\"451\":2,\"468\":4,\"511\":2,\"537\":1,\"599\":6,\"600\":2,\"601\":13,\"602\":8,\"604\":16,\"607\":5,\"609\":13,\"610\":10,\"612\":2,\"616\":5,\"625\":2,\"626\":4,\"731\":2,\"737\":15,\"823\":2,\"1072\":1,\"1106\":3,\"1131\":1,\"1160\":2,\"1162\":2,\"1173\":2,\"1185\":2,\"1195\":2,\"1217\":2,\"1274\":3,\"1341\":2,\"1347\":2,\"1405\":8,\"1406\":1,\"1460\":4,\"1461\":3}}],[\"object对象\",{\"0\":{\"1337\":1},\"1\":{\"1379\":1}}],[\"objectn\",{\"1\":{\"1332\":2}}],[\"object1\",{\"1\":{\"1332\":2}}],[\"objectis\",{\"0\":{\"337\":1},\"1\":{\"337\":3,\"338\":1,\"373\":1}}],[\"objects\",{\"1\":{\"270\":1,\"272\":1,\"549\":2,\"625\":1}}],[\"object\",{\"0\":{\"1183\":1,\"1184\":1,\"1185\":1,\"1209\":2,\"1210\":1,\"1211\":1,\"1212\":1,\"1218\":1,\"1247\":1},\"1\":{\"45\":1,\"47\":1,\"70\":1,\"116\":2,\"272\":2,\"319\":2,\"337\":1,\"348\":2,\"352\":2,\"357\":3,\"361\":4,\"450\":1,\"468\":2,\"548\":1,\"593\":2,\"597\":1,\"599\":3,\"600\":2,\"601\":3,\"602\":6,\"603\":2,\"604\":5,\"608\":1,\"609\":6,\"610\":3,\"612\":1,\"613\":1,\"614\":1,\"616\":1,\"617\":1,\"618\":1,\"620\":1,\"624\":1,\"625\":6,\"627\":3,\"631\":2,\"633\":2,\"636\":1,\"674\":2,\"686\":2,\"694\":3,\"721\":1,\"738\":1,\"739\":1,\"793\":1,\"1059\":1,\"1077\":1,\"1218\":1,\"1231\":1,\"1233\":2,\"1241\":2,\"1244\":1,\"1271\":1,\"1319\":1,\"1341\":1,\"1402\":4,\"1404\":1,\"1405\":5,\"1406\":1,\"1407\":7,\"1408\":11,\"1410\":1,\"1413\":1,\"1423\":2,\"1428\":1,\"1436\":1,\"1438\":3,\"1442\":2,\"1446\":1,\"1461\":1}}],[\"objtube的卢克儿\",{\"1\":{\"0\":1}}],[\"oftype\",{\"1\":{\"788\":1}}],[\"offsettop\",{\"1\":{\"1108\":1}}],[\"offsetleft\",{\"1\":{\"1108\":1}}],[\"offsetparent\",{\"1\":{\"1108\":1}}],[\"offsetheight\",{\"1\":{\"1108\":1}}],[\"offsetwidth\",{\"1\":{\"1108\":3,\"1116\":1}}],[\"offset\",{\"0\":{\"1108\":1},\"1\":{\"1108\":5,\"1139\":1,\"1325\":4}}],[\"off\",{\"0\":{\"1329\":1},\"1\":{\"112\":1,\"591\":1,\"1329\":4}}],[\"of\",{\"0\":{\"1275\":1},\"1\":{\"91\":1,\"270\":1,\"272\":1,\"392\":1,\"607\":1,\"609\":1,\"616\":1,\"646\":1,\"655\":1,\"731\":1,\"787\":1,\"788\":3,\"830\":2,\"1171\":1,\"1172\":1,\"1179\":1,\"1243\":1,\"1275\":5,\"1436\":1}}],[\"or\",{\"1\":{\"162\":1,\"307\":1,\"308\":1,\"312\":1,\"334\":1,\"335\":1,\"368\":1,\"369\":1,\"378\":1,\"379\":1,\"392\":1,\"439\":1,\"465\":1,\"591\":2,\"676\":3,\"950\":2,\"964\":1,\"1065\":1,\"1067\":1,\"1220\":1,\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1,\"1436\":1}}],[\"orient\",{\"1\":{\"927\":1}}],[\"orid\",{\"1\":{\"139\":1}}],[\"original\",{\"1\":{\"603\":2,\"604\":2,\"609\":2,\"610\":2,\"614\":2}}],[\"origin\",{\"1\":{\"19\":1,\"24\":1,\"27\":2}}],[\"org\",{\"1\":{\"79\":2,\"400\":2,\"492\":1,\"527\":1,\"528\":1,\"549\":2,\"631\":1,\"790\":1,\"1057\":1}}],[\"optional\",{\"1\":{\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"optionalremove\",{\"1\":{\"843\":2}}],[\"option>\",{\"1\":{\"749\":4,\"1057\":3}}],[\"options在handler为对象时取出并赋值\",{\"1\":{\"625\":1}}],[\"optionsapi\",{\"1\":{\"545\":2}}],[\"options\",{\"0\":{\"545\":1},\"1\":{\"30\":1,\"489\":1,\"625\":14,\"626\":4,\"632\":3,\"635\":3,\"694\":4,\"840\":1}}],[\"optimizedeps\",{\"0\":{\"576\":1,\"577\":1},\"1\":{\"576\":1}}],[\"opacity\",{\"1\":{\"562\":4,\"1307\":2}}],[\"opera\",{\"1\":{\"935\":1,\"1019\":1,\"1027\":1,\"1102\":1}}],[\"operator\",{\"1\":{\"788\":3}}],[\"operation\",{\"1\":{\"67\":1,\"631\":1}}],[\"opentype\",{\"1\":{\"918\":1}}],[\"open\",{\"1\":{\"9\":1,\"69\":1,\"72\":1,\"574\":1,\"1031\":2,\"1063\":2,\"1207\":1}}],[\"onkeyup\",{\"1\":{\"1150\":1}}],[\"onkeydown\",{\"0\":{\"1151\":1},\"1\":{\"1150\":1,\"1151\":3}}],[\"onwheel\",{\"1\":{\"1145\":1}}],[\"onfocus\",{\"1\":{\"1117\":1}}],[\"onfail\",{\"1\":{\"840\":1}}],[\"onload\",{\"1\":{\"1062\":6,\"1119\":1}}],[\"only\",{\"1\":{\"270\":1,\"272\":1,\"591\":1,\"625\":1,\"964\":7,\"1015\":2,\"1016\":1}}],[\"onpause\",{\"1\":{\"839\":1,\"840\":1}}],[\"onscroll\",{\"0\":{\"1121\":1},\"1\":{\"1124\":1}}],[\"onsettled\",{\"1\":{\"835\":1}}],[\"onsuccess\",{\"1\":{\"827\":1,\"835\":1,\"839\":1}}],[\"onroutebefore\",{\"1\":{\"739\":2,\"740\":2}}],[\"onresize\",{\"1\":{\"1062\":2}}],[\"onresize=\",{\"1\":{\"823\":1}}],[\"onrendertriggered\",{\"1\":{\"585\":1}}],[\"onrendertracked\",{\"1\":{\"585\":1}}],[\"onreadystatechange\",{\"1\":{\"9\":1,\"69\":1,\"72\":1,\"1207\":1}}],[\"ondrop\",{\"1\":{\"1142\":1}}],[\"ondragleave\",{\"1\":{\"1142\":1}}],[\"ondragover\",{\"1\":{\"1142\":1}}],[\"ondragenter\",{\"1\":{\"1142\":1}}],[\"ondragend\",{\"1\":{\"1142\":1}}],[\"ondragstart\",{\"1\":{\"1142\":1}}],[\"ondrag\",{\"0\":{\"1142\":1},\"1\":{\"1142\":3}}],[\"ondeactivated\",{\"1\":{\"585\":1}}],[\"ondownloadprogress\",{\"0\":{\"57\":1}}],[\"onactivated\",{\"1\":{\"585\":1}}],[\"onunmounted\",{\"1\":{\"585\":1}}],[\"onupdated\",{\"1\":{\"585\":1}}],[\"onuploadprogress\",{\"0\":{\"56\":1}}],[\"on=\",{\"1\":{\"515\":2}}],[\"on\",{\"0\":{\"514\":1,\"1328\":1},\"1\":{\"470\":1,\"473\":1,\"474\":1,\"514\":1,\"525\":1,\"563\":2,\"1130\":2,\"1131\":1,\"1328\":7,\"1329\":1,\"1330\":1,\"1331\":1}}],[\"onmutate\",{\"1\":{\"835\":1}}],[\"onmounted\",{\"1\":{\"585\":1}}],[\"onmousewheel\",{\"1\":{\"1145\":1}}],[\"onmousedown\",{\"1\":{\"1117\":1}}],[\"onmouseup\",{\"1\":{\"1117\":1}}],[\"onmouseout\",{\"1\":{\"1117\":1}}],[\"onmouseover\",{\"1\":{\"1117\":1}}],[\"onmouseenter\",{\"1\":{\"158\":1}}],[\"onmousemove=\",{\"1\":{\"227\":1,\"228\":1,\"229\":1}}],[\"onmousemove\",{\"1\":{\"158\":1,\"1117\":1}}],[\"onmessage\",{\"1\":{\"388\":3,\"395\":1}}],[\"ontap\",{\"1\":{\"588\":2}}],[\"ontabselect=\",{\"1\":{\"208\":1}}],[\"ontimeout\",{\"1\":{\"15\":1}}],[\"onbeforeunmount\",{\"1\":{\"585\":1}}],[\"onbeforeupdate\",{\"1\":{\"585\":1}}],[\"onbeforemount\",{\"1\":{\"585\":1}}],[\"onbuttonclick\",{\"1\":{\"189\":2}}],[\"onblur=\",{\"1\":{\"150\":1}}],[\"onblur\",{\"1\":{\"26\":1,\"1117\":1}}],[\"oncontinue\",{\"1\":{\"840\":1}}],[\"onconfirm\",{\"1\":{\"588\":2}}],[\"once\",{\"1\":{\"474\":2}}],[\"onchange=\",{\"1\":{\"150\":1}}],[\"onclickcapture=\",{\"1\":{\"301\":2}}],[\"onclickcapture\",{\"1\":{\"292\":2}}],[\"onclickcapture等\",{\"1\":{\"282\":1}}],[\"onclick=\",{\"1\":{\"98\":1,\"99\":1,\"100\":1,\"108\":2,\"109\":1,\"110\":1,\"114\":1,\"145\":1,\"150\":1,\"155\":1,\"160\":1,\"182\":1,\"189\":1,\"192\":1,\"197\":2,\"217\":1,\"245\":1,\"301\":2,\"305\":1,\"329\":1,\"333\":1,\"344\":2,\"351\":2,\"353\":2,\"356\":2,\"359\":2,\"367\":1,\"377\":1,\"715\":1,\"721\":1,\"749\":4,\"774\":4,\"789\":1,\"813\":2,\"823\":4,\"827\":1,\"1118\":1}}],[\"onclick\",{\"1\":{\"9\":1,\"20\":2,\"21\":1,\"22\":1,\"72\":2,\"108\":2,\"158\":1,\"277\":2,\"281\":2,\"282\":1,\"291\":1,\"292\":2,\"293\":1,\"299\":1,\"475\":2,\"675\":1,\"685\":2,\"1117\":1,\"1129\":1,\"1229\":1,\"1456\":1}}],[\"onerror\",{\"1\":{\"835\":1}}],[\"onerrorcaptured\",{\"1\":{\"585\":1}}],[\"one\",{\"1\":{\"70\":4,\"471\":2,\"714\":1,\"952\":1,\"1174\":2,\"1214\":2,\"1329\":1,\"1388\":2,\"1389\":3}}],[\"ok\",{\"1\":{\"8\":1,\"70\":1,\"586\":1}}],[\"d4e5f6\",{\"1\":{\"1391\":1}}],[\"d+\",{\"1\":{\"1383\":1,\"1391\":1}}],[\"dns\",{\"1\":{\"1066\":1}}],[\"dd\",{\"1\":{\"1054\":2,\"1381\":1}}],[\"dd>\",{\"1\":{\"220\":1}}],[\"dtd\",{\"1\":{\"1124\":2}}],[\"dt\",{\"1\":{\"1054\":2}}],[\"dt>\",{\"1\":{\"220\":1}}],[\"dpg\",{\"1\":{\"955\":1}}],[\"dpr\",{\"1\":{\"952\":1}}],[\"dva\",{\"0\":{\"818\":1,\"822\":1,\"823\":1},\"1\":{\"818\":2,\"819\":3,\"820\":2,\"822\":6,\"823\":8,\"850\":1}}],[\"dbres\",{\"1\":{\"634\":1,\"635\":1}}],[\"dfs\",{\"1\":{\"266\":1,\"272\":1}}],[\"d\",{\"1\":{\"248\":1,\"359\":2,\"573\":1,\"578\":1,\"581\":2,\"582\":2,\"583\":4,\"591\":3,\"626\":1,\"634\":3,\"635\":3,\"665\":1,\"675\":1,\"676\":2,\"685\":6,\"827\":3,\"1016\":1,\"1160\":2,\"1192\":1,\"1216\":1,\"1260\":2,\"1269\":2,\"1275\":2,\"1381\":2,\"1390\":1,\"1392\":1}}],[\"dl>里面只能包含<dt><dd>\",{\"1\":{\"1054\":1}}],[\"dl>\",{\"1\":{\"220\":1}}],[\"draggable\",{\"1\":{\"1142\":2}}],[\"draft\",{\"1\":{\"103\":7}}],[\"dropdown\",{\"1\":{\"112\":1}}],[\"dashed\",{\"1\":{\"909\":5}}],[\"dash\",{\"1\":{\"570\":1}}],[\"dark\",{\"1\":{\"111\":1,\"192\":3,\"217\":3}}],[\"date2\",{\"1\":{\"1165\":2}}],[\"date\",{\"0\":{\"1367\":1},\"1\":{\"14\":1,\"816\":1,\"1165\":2,\"1269\":1,\"1367\":12,\"1410\":1,\"1411\":1}}],[\"dataset\",{\"0\":{\"1103\":1},\"1\":{\"1103\":2}}],[\"datasource\",{\"1\":{\"234\":9}}],[\"datalist>\",{\"1\":{\"1019\":1}}],[\"datalist\",{\"1\":{\"1019\":2}}],[\"data<\",{\"1\":{\"789\":1}}],[\"data函数\",{\"1\":{\"489\":2}}],[\"data1\",{\"1\":{\"410\":1,\"411\":1}}],[\"datatype\",{\"1\":{\"17\":1,\"827\":2}}],[\"data\",{\"0\":{\"33\":1,\"47\":1,\"1312\":1},\"1\":{\"7\":1,\"17\":3,\"20\":2,\"21\":2,\"26\":9,\"30\":4,\"32\":1,\"42\":3,\"43\":3,\"69\":1,\"72\":1,\"108\":2,\"225\":2,\"234\":2,\"388\":2,\"410\":1,\"443\":2,\"446\":1,\"447\":2,\"448\":1,\"450\":1,\"451\":4,\"452\":1,\"454\":3,\"455\":1,\"467\":2,\"475\":1,\"479\":2,\"480\":1,\"481\":1,\"487\":2,\"499\":1,\"504\":2,\"508\":1,\"511\":2,\"512\":1,\"513\":2,\"514\":2,\"515\":2,\"516\":2,\"517\":4,\"518\":2,\"519\":6,\"520\":2,\"521\":2,\"525\":1,\"534\":1,\"545\":1,\"548\":1,\"549\":1,\"561\":1,\"593\":1,\"595\":2,\"596\":1,\"601\":2,\"602\":6,\"604\":3,\"607\":6,\"608\":3,\"609\":9,\"610\":3,\"613\":3,\"616\":6,\"620\":3,\"621\":1,\"623\":2,\"632\":6,\"634\":14,\"635\":19,\"639\":1,\"640\":2,\"641\":2,\"649\":2,\"650\":5,\"651\":5,\"653\":4,\"657\":9,\"658\":1,\"662\":2,\"663\":1,\"666\":1,\"667\":1,\"670\":1,\"674\":6,\"686\":4,\"687\":3,\"692\":2,\"694\":9,\"698\":1,\"700\":2,\"702\":1,\"703\":1,\"749\":8,\"777\":2,\"787\":2,\"788\":2,\"799\":3,\"814\":1,\"823\":1,\"827\":3,\"829\":2,\"830\":1,\"832\":2,\"840\":1,\"845\":3,\"847\":1,\"1048\":1,\"1103\":2,\"1312\":4,\"1407\":1}}],[\"dir\",{\"1\":{\"695\":3}}],[\"dirty\",{\"1\":{\"632\":8,\"633\":1,\"634\":1,\"635\":4,\"636\":2}}],[\"directly\",{\"1\":{\"591\":1}}],[\"directive\",{\"1\":{\"475\":3,\"500\":1,\"561\":3}}],[\"directives\",{\"1\":{\"475\":4}}],[\"dirname\",{\"1\":{\"572\":1}}],[\"dialog>\",{\"1\":{\"588\":1}}],[\"dialogvisible\",{\"1\":{\"588\":3}}],[\"dialog\",{\"1\":{\"567\":1,\"588\":6}}],[\"disc\",{\"1\":{\"1052\":1}}],[\"dist\",{\"1\":{\"249\":1,\"1192\":5}}],[\"display\",{\"1\":{\"474\":2,\"475\":1,\"789\":1,\"879\":3,\"914\":2,\"924\":1,\"927\":1,\"985\":2,\"1000\":2,\"1009\":3,\"1106\":1}}],[\"displayname\",{\"0\":{\"216\":1},\"1\":{\"86\":1,\"216\":1,\"240\":3}}],[\"dispatch=\",{\"1\":{\"823\":1}}],[\"dispatch无效\",{\"1\":{\"823\":1}}],[\"dispatchsetstate\",{\"1\":{\"338\":2,\"339\":1,\"373\":2}}],[\"dispatcher\",{\"1\":{\"309\":5,\"336\":6,\"370\":8,\"380\":10,\"742\":1}}],[\"dispatcheventforplugins\",{\"1\":{\"290\":2,\"295\":1}}],[\"dispatcheventforplugineventsystem\",{\"1\":{\"288\":2,\"290\":1,\"297\":1}}],[\"dispatchevent\",{\"1\":{\"114\":1,\"115\":2,\"277\":1,\"288\":2,\"297\":2}}],[\"dispatch\",{\"1\":{\"306\":4,\"315\":5,\"323\":1,\"338\":9,\"373\":9,\"410\":1,\"416\":1,\"418\":3,\"731\":10,\"748\":1,\"749\":4,\"755\":8,\"756\":6,\"766\":1,\"774\":3,\"781\":2,\"789\":2,\"790\":1,\"812\":2,\"813\":3,\"822\":1,\"823\":12,\"840\":6}}],[\"dispatchreduceraction\",{\"1\":{\"306\":3,\"315\":2,\"323\":1,\"338\":2,\"373\":2}}],[\"dispatchrequst\",{\"1\":{\"68\":1}}],[\"dispatchrequest\",{\"1\":{\"68\":1,\"69\":2,\"70\":2,\"72\":2}}],[\"dispatchlisteners\",{\"1\":{\"295\":7}}],[\"dispatchdiscreteevent\",{\"1\":{\"288\":2}}],[\"dispatchqueue\",{\"1\":{\"287\":1,\"290\":4,\"292\":3,\"294\":1,\"295\":6}}],[\"dimensions\",{\"1\":{\"202\":2}}],[\"didupdate\",{\"1\":{\"172\":2}}],[\"didmountref\",{\"1\":{\"200\":3}}],[\"didmount\",{\"1\":{\"172\":2}}],[\"diff执行步骤\",{\"1\":{\"675\":1}}],[\"diffproperties\",{\"1\":{\"321\":2,\"322\":1,\"327\":2,\"328\":1}}],[\"diff算法\",{\"1\":{\"272\":1,\"318\":1}}],[\"diff更新\",{\"1\":{\"161\":1}}],[\"diff\",{\"0\":{\"341\":1,\"342\":1,\"354\":1,\"671\":1,\"672\":1},\"1\":{\"161\":1,\"257\":3,\"272\":3,\"318\":1,\"319\":1,\"323\":2,\"341\":4,\"342\":3,\"348\":1,\"352\":1,\"354\":5,\"357\":1,\"358\":1,\"360\":1,\"361\":1,\"392\":3,\"461\":1,\"663\":1,\"664\":3,\"665\":1,\"671\":1,\"672\":4,\"673\":1,\"676\":2,\"683\":1,\"692\":1,\"702\":2,\"704\":1}}],[\"div+p\",{\"1\":{\"937\":1}}],[\"div3\",{\"1\":{\"454\":1}}],[\"div2\",{\"1\":{\"454\":1}}],[\"div1\",{\"1\":{\"454\":3}}],[\"div\",{\"1\":{\"96\":1,\"112\":1,\"126\":1,\"222\":1,\"269\":2,\"270\":3,\"271\":2,\"272\":3,\"284\":1,\"286\":1,\"292\":1,\"342\":1,\"497\":2,\"666\":1,\"674\":13,\"675\":1,\"686\":3,\"696\":1,\"876\":2,\"880\":1,\"937\":2,\"971\":4,\"1015\":5,\"1129\":1,\"1284\":2,\"1286\":2,\"1290\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1319\":1,\"1327\":1,\"1328\":2,\"1333\":1}}],[\"div>`\",{\"1\":{\"644\":1}}],[\"div>中的值不会正确变化\",{\"1\":{\"197\":1}}],[\"div>\",{\"1\":{\"9\":1,\"106\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"139\":1,\"145\":2,\"149\":1,\"150\":1,\"155\":2,\"160\":3,\"182\":1,\"194\":5,\"197\":1,\"207\":4,\"208\":1,\"227\":1,\"228\":1,\"229\":1,\"231\":1,\"344\":2,\"351\":1,\"367\":1,\"377\":1,\"448\":1,\"454\":6,\"475\":2,\"497\":3,\"499\":1,\"504\":6,\"511\":2,\"512\":1,\"513\":1,\"514\":1,\"515\":5,\"516\":2,\"517\":2,\"518\":2,\"519\":1,\"520\":2,\"521\":2,\"536\":1,\"560\":1,\"567\":2,\"568\":1,\"588\":2,\"640\":2,\"641\":2,\"644\":1,\"653\":2,\"661\":4,\"666\":1,\"713\":1,\"721\":1,\"732\":1,\"749\":1,\"774\":1,\"789\":2,\"804\":1,\"808\":1,\"813\":1,\"823\":1,\"827\":2,\"867\":1,\"1019\":1,\"1118\":1}}],[\"decoration\",{\"0\":{\"891\":1},\"1\":{\"1000\":1}}],[\"decorators\",{\"1\":{\"800\":2}}],[\"declare\",{\"1\":{\"583\":3}}],[\"declarations\",{\"1\":{\"591\":1}}],[\"declaration\",{\"1\":{\"581\":1}}],[\"decrement\",{\"1\":{\"407\":3,\"417\":2,\"418\":1,\"774\":3,\"775\":4,\"776\":2,\"777\":1,\"812\":2}}],[\"deepobj\",{\"1\":{\"1461\":1}}],[\"deepskyblue\",{\"1\":{\"1016\":3}}],[\"deepclone\",{\"1\":{\"823\":2}}],[\"deepcopy\",{\"1\":{\"732\":3,\"1461\":4}}],[\"deep进行判断\",{\"1\":{\"628\":1}}],[\"deep开启深度监听\",{\"1\":{\"626\":1}}],[\"deep为\",{\"1\":{\"626\":1}}],[\"deep\",{\"0\":{\"627\":1},\"1\":{\"451\":3,\"540\":4,\"618\":1,\"625\":1,\"626\":6,\"627\":6,\"628\":2,\"1332\":2}}],[\"deactivated\",{\"1\":{\"434\":2,\"585\":1}}],[\"descriptor四个属性\",{\"1\":{\"1407\":1}}],[\"descriptor\",{\"1\":{\"1407\":2}}],[\"description\",{\"0\":{\"1222\":1},\"1\":{\"220\":1,\"739\":1}}],[\"destroyed改名为\",{\"1\":{\"542\":1}}],[\"destroy\",{\"1\":{\"367\":3,\"373\":8,\"374\":1,\"375\":5,\"377\":3,\"385\":5,\"396\":1,\"692\":1}}],[\"dep依赖实例数组结构\",{\"1\":{\"635\":1}}],[\"dep实例中收集关联的watcher监听器实例存储为this\",{\"1\":{\"635\":1}}],[\"depids\",{\"1\":{\"635\":5}}],[\"depid去重set结构\",{\"1\":{\"635\":1}}],[\"depid\",{\"1\":{\"627\":3}}],[\"depend\",{\"1\":{\"609\":2,\"610\":2,\"613\":2,\"615\":1,\"634\":1,\"635\":5,\"636\":2,\"700\":1}}],[\"dependencies\",{\"1\":{\"282\":7}}],[\"dep\",{\"0\":{\"608\":1,\"615\":1},\"1\":{\"605\":6,\"608\":5,\"609\":20,\"610\":12,\"613\":7,\"614\":1,\"615\":6,\"616\":4,\"617\":4,\"621\":20,\"623\":1,\"626\":6,\"627\":2,\"628\":2,\"632\":3,\"634\":6,\"635\":23,\"636\":6,\"700\":1}}],[\"deps\",{\"1\":{\"370\":2,\"373\":14,\"380\":4,\"383\":4,\"626\":4,\"635\":12}}],[\"depth\",{\"1\":{\"266\":1}}],[\"debugger\",{\"1\":{\"252\":1,\"272\":1,\"779\":1,\"1155\":1}}],[\"debouncevalue\",{\"1\":{\"204\":2}}],[\"device\",{\"1\":{\"950\":1}}],[\"development\",{\"1\":{\"826\":1}}],[\"developer\",{\"1\":{\"549\":2,\"1057\":1}}],[\"devutils\",{\"1\":{\"731\":1,\"732\":1}}],[\"dev\",{\"0\":{\"251\":1},\"1\":{\"248\":1,\"249\":5,\"382\":1,\"482\":1,\"529\":1,\"531\":1,\"570\":1,\"574\":2}}],[\"devserver\",{\"1\":{\"136\":1,\"495\":2}}],[\"devtools\",{\"1\":{\"86\":1,\"216\":1,\"240\":2,\"593\":1,\"760\":1,\"773\":1,\"811\":2,\"826\":1,\"945\":1}}],[\"demo1\",{\"1\":{\"826\":2,\"827\":2}}],[\"demo\",{\"1\":{\"124\":1,\"139\":2,\"192\":1,\"197\":1,\"226\":1,\"239\":1,\"262\":1,\"427\":1,\"470\":2,\"557\":1,\"621\":1,\"628\":1,\"634\":2,\"635\":1,\"636\":1,\"658\":2,\"663\":2,\"692\":1,\"937\":1,\"1192\":1}}],[\"detail\",{\"1\":{\"114\":2,\"115\":2,\"427\":2,\"429\":3,\"430\":4,\"431\":2,\"1146\":1}}],[\"details\",{\"1\":{\"96\":1,\"790\":1}}],[\"defaulyroutes\",{\"1\":{\"731\":3}}],[\"defaultwidth\",{\"1\":{\"1016\":2}}],[\"defaultremvalue\",{\"1\":{\"1016\":2}}],[\"defaultoptions\",{\"1\":{\"837\":1}}],[\"default将路由的routerconfig配置出来\",{\"1\":{\"822\":1}}],[\"default>\",{\"1\":{\"568\":1}}],[\"defaultvalue\",{\"1\":{\"212\":3,\"215\":2}}],[\"defaultprops\",{\"1\":{\"149\":1}}],[\"default\",{\"1\":{\"28\":1,\"100\":1,\"112\":1,\"115\":1,\"145\":1,\"150\":2,\"155\":1,\"160\":1,\"192\":1,\"197\":1,\"201\":1,\"217\":1,\"239\":1,\"249\":1,\"272\":4,\"274\":1,\"291\":1,\"292\":1,\"299\":1,\"310\":1,\"311\":1,\"312\":1,\"318\":1,\"319\":2,\"326\":1,\"337\":1,\"348\":2,\"349\":2,\"352\":2,\"357\":3,\"360\":1,\"361\":3,\"374\":1,\"375\":2,\"385\":2,\"395\":1,\"396\":1,\"407\":1,\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"424\":1,\"427\":1,\"430\":1,\"434\":1,\"438\":1,\"439\":1,\"451\":1,\"475\":1,\"497\":2,\"498\":1,\"499\":1,\"500\":1,\"504\":1,\"508\":1,\"510\":2,\"511\":4,\"512\":3,\"513\":2,\"514\":2,\"515\":6,\"516\":2,\"517\":3,\"518\":2,\"519\":2,\"520\":2,\"521\":2,\"534\":1,\"539\":1,\"543\":1,\"557\":1,\"560\":3,\"563\":1,\"568\":1,\"590\":1,\"602\":2,\"603\":1,\"604\":2,\"607\":1,\"609\":5,\"610\":2,\"613\":1,\"615\":1,\"616\":1,\"617\":1,\"618\":1,\"626\":1,\"627\":1,\"632\":1,\"633\":1,\"635\":2,\"646\":1,\"647\":1,\"648\":3,\"649\":2,\"650\":1,\"651\":3,\"654\":1,\"655\":1,\"656\":2,\"657\":1,\"661\":1,\"662\":1,\"674\":2,\"675\":2,\"683\":3,\"686\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1,\"691\":1,\"694\":1,\"695\":1,\"709\":1,\"715\":1,\"721\":1,\"728\":1,\"730\":1,\"732\":1,\"735\":1,\"738\":1,\"740\":1,\"749\":4,\"755\":1,\"756\":1,\"774\":1,\"776\":5,\"777\":1,\"787\":2,\"789\":2,\"802\":1,\"812\":1,\"813\":1,\"815\":2,\"816\":1,\"822\":3,\"823\":11,\"826\":1,\"827\":1,\"840\":1,\"1031\":1,\"1190\":2,\"1191\":1,\"1269\":4}}],[\"defaults\",{\"1\":{\"20\":1,\"68\":1,\"75\":1}}],[\"def\",{\"1\":{\"602\":3,\"603\":4,\"604\":5,\"609\":5,\"610\":4,\"612\":1,\"614\":2,\"617\":2}}],[\"definition\",{\"1\":{\"581\":1}}],[\"definecomputed函数最后\",{\"1\":{\"636\":1}}],[\"definecomputed的实现\",{\"1\":{\"634\":1}}],[\"definecomputed\",{\"0\":{\"633\":1},\"1\":{\"631\":3,\"632\":1,\"633\":2}}],[\"defineconfig\",{\"1\":{\"249\":2,\"590\":1}}],[\"definereactive\",{\"0\":{\"613\":1},\"1\":{\"601\":3,\"602\":8,\"603\":3,\"604\":7,\"608\":3,\"609\":5,\"610\":6,\"613\":2,\"617\":3}}],[\"defineemits<\",{\"1\":{\"587\":1,\"588\":1}}],[\"defineemits\",{\"1\":{\"578\":1}}],[\"defineproperties\",{\"1\":{\"1407\":2,\"1408\":1}}],[\"defineproperty和proxy实现依赖收集与更新\",{\"1\":{\"792\":1}}],[\"defineproperty\",{\"1\":{\"103\":1,\"450\":1,\"468\":2,\"524\":3,\"536\":1,\"548\":2,\"550\":1,\"593\":2,\"597\":1,\"599\":3,\"600\":2,\"601\":3,\"602\":4,\"604\":2,\"608\":1,\"609\":2,\"610\":1,\"612\":1,\"613\":1,\"620\":3,\"633\":1,\"636\":1,\"694\":1,\"698\":1,\"700\":1,\"793\":1,\"1407\":3,\"1408\":1}}],[\"defineprops<props>\",{\"1\":{\"587\":1,\"588\":1}}],[\"defineprops<\",{\"1\":{\"587\":1}}],[\"defineprops\",{\"1\":{\"578\":1,\"587\":2}}],[\"defineasynccomponent\",{\"1\":{\"568\":2}}],[\"delegate\",{\"1\":{\"1328\":1}}],[\"deletion\",{\"1\":{\"355\":1}}],[\"deletions\",{\"1\":{\"319\":5,\"346\":1,\"348\":5,\"349\":5,\"352\":5,\"357\":5,\"360\":5,\"361\":5,\"374\":5,\"375\":5,\"385\":5,\"396\":5}}],[\"deleteremainingchildren\",{\"1\":{\"352\":3,\"353\":1,\"357\":4,\"361\":4}}],[\"deletedfiber\",{\"1\":{\"349\":7,\"375\":7,\"385\":7}}],[\"deletechild\",{\"1\":{\"319\":2,\"348\":2,\"352\":3,\"357\":4,\"361\":5}}],[\"deleteproperty\",{\"1\":{\"103\":1,\"549\":2}}],[\"delete\",{\"1\":{\"30\":1,\"75\":1,\"116\":2,\"329\":1,\"333\":1,\"361\":1,\"472\":1,\"737\":3,\"827\":2,\"1178\":1,\"1406\":3}}],[\"del>或者<s><\",{\"1\":{\"1037\":1}}],[\"del\",{\"1\":{\"150\":1,\"877\":1}}],[\"delay\",{\"1\":{\"17\":1,\"201\":6,\"204\":3,\"557\":2,\"758\":1,\"762\":1,\"764\":3,\"765\":2,\"777\":7,\"820\":1}}],[\"dot\",{\"1\":{\"1217\":1}}],[\"dotall\",{\"0\":{\"1217\":1}}],[\"dotask\",{\"1\":{\"798\":2}}],[\"dotted\",{\"1\":{\"909\":5}}],[\"down\",{\"1\":{\"472\":1,\"1015\":1}}],[\"don\",{\"1\":{\"382\":1}}],[\"done\",{\"1\":{\"103\":4,\"830\":3,\"1173\":4,\"1174\":1}}],[\"do\",{\"0\":{\"1272\":1},\"1\":{\"273\":1,\"307\":1,\"308\":1,\"312\":1,\"315\":1,\"317\":1,\"334\":1,\"335\":1,\"338\":1,\"360\":1,\"368\":1,\"369\":1,\"373\":1,\"374\":1,\"375\":2,\"378\":1,\"379\":1,\"385\":2,\"396\":1,\"1272\":3,\"1277\":1}}],[\"doublecounter\",{\"1\":{\"806\":1}}],[\"double\",{\"1\":{\"270\":1,\"272\":1,\"570\":1,\"909\":2}}],[\"dolist\",{\"1\":{\"150\":1}}],[\"docum\",{\"1\":{\"1124\":1}}],[\"documenturi\",{\"1\":{\"1081\":1}}],[\"documentelement\",{\"1\":{\"543\":2,\"1080\":1,\"1093\":1,\"1115\":1,\"1124\":3}}],[\"document\",{\"0\":{\"1079\":1},\"1\":{\"9\":2,\"20\":1,\"22\":1,\"26\":4,\"52\":1,\"72\":2,\"112\":2,\"114\":3,\"115\":1,\"269\":1,\"271\":1,\"272\":1,\"273\":2,\"297\":1,\"301\":1,\"305\":1,\"327\":2,\"329\":1,\"333\":1,\"344\":1,\"351\":1,\"353\":1,\"356\":1,\"359\":1,\"367\":1,\"377\":1,\"436\":2,\"543\":2,\"641\":1,\"653\":1,\"669\":1,\"675\":4,\"683\":1,\"685\":3,\"689\":2,\"690\":1,\"695\":2,\"735\":1,\"739\":1,\"760\":1,\"773\":1,\"785\":1,\"803\":1,\"810\":1,\"993\":1,\"1077\":1,\"1078\":1,\"1079\":2,\"1080\":4,\"1081\":4,\"1085\":1,\"1092\":2,\"1093\":4,\"1094\":1,\"1095\":2,\"1106\":1,\"1115\":1,\"1124\":4,\"1150\":1,\"1229\":1,\"1233\":1,\"1237\":1,\"1271\":1,\"1272\":2,\"1273\":1,\"1282\":1,\"1325\":1}}],[\"doc\",{\"1\":{\"1124\":1}}],[\"doctype\",{\"1\":{\"1032\":1}}],[\"doctype>不是一个\",{\"1\":{\"1032\":1}}],[\"doctype>声明位于文档中的最前面位置\",{\"1\":{\"1032\":1}}],[\"doctype>文档类型声明\",{\"1\":{\"1032\":1}}],[\"doctype>\",{\"0\":{\"1032\":1}}],[\"docx\",{\"1\":{\"862\":1}}],[\"docs\",{\"1\":{\"549\":2}}],[\"docschina\",{\"1\":{\"79\":1}}],[\"docontent\",{\"1\":{\"150\":1}}],[\"dom→jquery\",{\"1\":{\"1284\":1}}],[\"domcontentloaded\",{\"1\":{\"1282\":1}}],[\"dommousescroll\",{\"1\":{\"1145\":1}}],[\"domtokenlist\",{\"1\":{\"1097\":1}}],[\"dom上树\",{\"1\":{\"695\":1}}],[\"domstr\",{\"1\":{\"657\":8}}],[\"domstringmap\",{\"1\":{\"1103\":1}}],[\"domstring\",{\"1\":{\"649\":3,\"651\":8}}],[\"dom事件名\",{\"1\":{\"292\":1}}],[\"domele\",{\"1\":{\"1319\":3}}],[\"domelement\",{\"1\":{\"273\":12,\"297\":4,\"321\":2,\"322\":8,\"327\":11,\"328\":14}}],[\"domeventname\",{\"1\":{\"281\":5,\"286\":10,\"288\":8,\"290\":6,\"292\":5,\"295\":2,\"297\":2}}],[\"domeventproperties\",{\"0\":{\"281\":1},\"1\":{\"280\":1,\"292\":1}}],[\"domplugineventsystem\",{\"0\":{\"279\":1,\"286\":1,\"290\":1,\"295\":1},\"1\":{\"288\":1,\"290\":1,\"300\":1}}],[\"dompropertyoperations\",{\"1\":{\"273\":1,\"322\":1,\"328\":1}}],[\"dom容器\",{\"1\":{\"271\":1,\"272\":1}}],[\"domnode\",{\"1\":{\"222\":1,\"675\":4,\"689\":4}}],[\"dom\",{\"0\":{\"120\":2,\"649\":1,\"666\":2,\"675\":1,\"1077\":1,\"1284\":1},\"1\":{\"2\":1,\"109\":1,\"112\":2,\"114\":1,\"119\":2,\"120\":4,\"121\":1,\"123\":1,\"126\":5,\"133\":2,\"134\":4,\"138\":1,\"156\":1,\"158\":2,\"161\":14,\"165\":2,\"184\":2,\"187\":2,\"189\":1,\"191\":1,\"218\":1,\"221\":1,\"222\":2,\"223\":3,\"238\":1,\"249\":5,\"257\":1,\"266\":1,\"268\":1,\"269\":2,\"270\":2,\"271\":1,\"272\":12,\"273\":12,\"274\":5,\"277\":4,\"281\":1,\"291\":1,\"292\":1,\"296\":2,\"297\":1,\"301\":1,\"305\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":4,\"323\":1,\"325\":1,\"326\":1,\"327\":3,\"328\":4,\"329\":1,\"330\":3,\"333\":1,\"341\":2,\"344\":1,\"348\":1,\"349\":1,\"351\":1,\"352\":1,\"353\":1,\"356\":1,\"357\":1,\"359\":1,\"361\":1,\"365\":1,\"367\":1,\"375\":1,\"376\":3,\"377\":1,\"385\":1,\"403\":1,\"457\":3,\"461\":14,\"479\":4,\"480\":2,\"482\":1,\"497\":2,\"513\":2,\"524\":3,\"604\":1,\"638\":1,\"639\":1,\"644\":2,\"645\":1,\"649\":2,\"658\":2,\"663\":3,\"664\":3,\"665\":1,\"666\":6,\"667\":1,\"670\":1,\"671\":3,\"672\":1,\"673\":1,\"675\":3,\"681\":1,\"695\":4,\"696\":2,\"698\":4,\"701\":7,\"702\":7,\"704\":1,\"707\":2,\"709\":1,\"710\":1,\"713\":1,\"715\":1,\"719\":1,\"721\":1,\"728\":1,\"730\":1,\"732\":1,\"735\":3,\"737\":1,\"738\":1,\"740\":1,\"760\":1,\"773\":1,\"785\":1,\"788\":1,\"810\":1,\"1087\":1,\"1094\":1,\"1095\":1,\"1119\":1,\"1233\":1,\"1275\":1,\"1279\":3,\"1282\":1,\"1284\":4,\"1288\":1,\"1312\":1,\"1319\":1,\"1340\":1,\"1379\":1}}],[\"体积小\",{\"1\":{\"402\":1}}],[\"体\",{\"1\":{\"7\":1,\"8\":1,\"9\":1}}],[\"x61\",{\"1\":{\"1381\":1}}],[\"xdd\",{\"1\":{\"1381\":1}}],[\"x~y\",{\"1\":{\"1370\":1}}],[\"xperia\",{\"1\":{\"952\":1}}],[\"xlink\",{\"1\":{\"920\":1}}],[\"x33\",{\"1\":{\"918\":1}}],[\"x的参考属性\",{\"1\":{\"722\":1}}],[\"x2\",{\"1\":{\"541\":1}}],[\"x1\",{\"1\":{\"541\":1}}],[\"xss\",{\"1\":{\"474\":1}}],[\"xsrfheadername\",{\"0\":{\"55\":1}}],[\"xsrfcookiename\",{\"0\":{\"54\":1}}],[\"xsrf\",{\"1\":{\"29\":1,\"54\":2,\"55\":1}}],[\"xiangqing\",{\"1\":{\"427\":1,\"430\":3,\"431\":1,\"432\":2}}],[\"xxx调整到应用实例\",{\"1\":{\"561\":1}}],[\"xxxx<\",{\"1\":{\"1043\":1}}],[\"xxxxx\",{\"1\":{\"536\":1,\"1335\":1,\"1336\":1}}],[\"xxxxxx\",{\"1\":{\"497\":1}}],[\"xxxx\",{\"1\":{\"432\":2,\"444\":2,\"493\":1,\"561\":2,\"664\":1,\"1381\":2}}],[\"xxx为\",{\"1\":{\"153\":1}}],[\"xxx\",{\"1\":{\"144\":1,\"180\":1,\"409\":1,\"411\":1,\"412\":1,\"416\":1,\"432\":2,\"443\":2,\"446\":1,\"447\":2,\"455\":2,\"460\":1,\"466\":1,\"470\":3,\"474\":1,\"480\":1,\"487\":1,\"498\":1,\"499\":2,\"664\":1,\"712\":2,\"721\":1,\"823\":1,\"919\":1,\"920\":1,\"1189\":1,\"1319\":2,\"1352\":1,\"1381\":1,\"1443\":1}}],[\"xxx<\",{\"1\":{\"8\":1,\"1043\":1}}],[\"xx\",{\"1\":{\"120\":2,\"536\":3,\"582\":1,\"823\":4,\"1333\":1,\"1376\":1}}],[\"xhradapter\",{\"1\":{\"69\":2,\"72\":2}}],[\"xhr\",{\"1\":{\"9\":12,\"11\":1,\"12\":1,\"13\":1,\"15\":2,\"16\":1,\"69\":13,\"72\":14,\"1155\":1}}],[\"x\",{\"0\":{\"708\":1},\"1\":{\"7\":1,\"12\":1,\"44\":1,\"55\":1,\"107\":2,\"169\":1,\"227\":3,\"228\":3,\"229\":5,\"230\":1,\"391\":2,\"418\":1,\"474\":2,\"492\":1,\"534\":3,\"539\":1,\"540\":1,\"543\":1,\"560\":2,\"561\":2,\"570\":1,\"634\":1,\"635\":1,\"722\":1,\"723\":3,\"823\":1,\"842\":2,\"843\":2,\"904\":1,\"905\":5,\"908\":2,\"916\":2,\"1015\":3,\"1207\":9,\"1269\":5,\"1281\":3,\"1370\":26,\"1381\":2,\"1384\":6}}],[\"xmlhttprequest\",{\"1\":{\"3\":1,\"9\":1,\"35\":1,\"44\":1,\"69\":1,\"72\":1,\"1207\":1}}],[\"xml\",{\"1\":{\"1\":2,\"2\":1,\"3\":1,\"121\":3,\"122\":1,\"1031\":1}}],[\"tcp\",{\"1\":{\"1066\":1}}],[\"td\",{\"1\":{\"1048\":1}}],[\"td>\",{\"1\":{\"219\":2}}],[\"ttf\",{\"1\":{\"918\":1}}],[\"typicode\",{\"1\":{\"777\":2,\"827\":2}}],[\"typedarray\",{\"1\":{\"1172\":1}}],[\"type为字符串\",{\"1\":{\"272\":1}}],[\"typeof\",{\"1\":{\"272\":7,\"273\":4,\"319\":5,\"322\":4,\"327\":2,\"328\":4,\"338\":1,\"348\":5,\"352\":5,\"357\":6,\"360\":1,\"361\":9,\"373\":1,\"374\":1,\"395\":2,\"396\":1,\"602\":2,\"604\":2,\"609\":3,\"616\":1,\"618\":2,\"625\":1,\"626\":1,\"627\":1,\"631\":1,\"632\":1,\"633\":1,\"635\":1,\"674\":4,\"686\":4,\"721\":1,\"749\":3,\"755\":1,\"756\":1,\"1244\":1,\"1395\":1}}],[\"typescript\",{\"0\":{\"579\":1,\"591\":1},\"1\":{\"524\":2,\"578\":7,\"581\":2,\"582\":1,\"584\":1}}],[\"types\",{\"1\":{\"149\":2}}],[\"type=\",{\"1\":{\"26\":1,\"150\":1,\"189\":1,\"513\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"557\":1,\"920\":1,\"1057\":1,\"1189\":2}}],[\"type\",{\"0\":{\"343\":1,\"350\":1},\"1\":{\"7\":1,\"8\":1,\"12\":1,\"17\":1,\"162\":2,\"252\":6,\"270\":1,\"272\":19,\"273\":8,\"292\":1,\"293\":1,\"297\":2,\"305\":2,\"318\":4,\"319\":5,\"320\":6,\"321\":2,\"323\":1,\"325\":6,\"326\":3,\"327\":10,\"329\":2,\"346\":1,\"348\":5,\"349\":3,\"350\":1,\"352\":5,\"354\":1,\"355\":2,\"357\":8,\"358\":1,\"360\":4,\"361\":9,\"374\":4,\"375\":3,\"385\":3,\"396\":4,\"498\":1,\"510\":1,\"512\":1,\"578\":1,\"580\":3,\"581\":2,\"582\":1,\"625\":1,\"661\":1,\"731\":4,\"747\":2,\"749\":7,\"755\":2,\"756\":2,\"762\":1,\"766\":1,\"775\":4,\"776\":2,\"777\":8,\"786\":3,\"787\":1,\"820\":1,\"823\":8,\"827\":1,\"830\":2,\"840\":5,\"1019\":1,\"1052\":1,\"1053\":1,\"1057\":1,\"1243\":1,\"1330\":2}}],[\"tmp\",{\"1\":{\"635\":4}}],[\"t1\",{\"1\":{\"582\":2}}],[\"t\",{\"1\":{\"382\":1,\"685\":2,\"815\":8,\"919\":1,\"920\":1,\"1242\":1,\"1381\":1}}],[\"tan\",{\"1\":{\"1370\":1}}],[\"tahoma\",{\"1\":{\"882\":1}}],[\"tack\",{\"0\":{\"768\":1}}],[\"tackevery\",{\"0\":{\"762\":1}}],[\"take\",{\"1\":{\"768\":1,\"770\":3,\"777\":3}}],[\"takelatest\",{\"0\":{\"763\":1},\"1\":{\"758\":1,\"763\":1,\"768\":2,\"777\":3}}],[\"takeevery\",{\"1\":{\"758\":2,\"762\":2,\"763\":1,\"777\":3}}],[\"tail\",{\"1\":{\"646\":6,\"655\":6}}],[\"taskqueue\",{\"1\":{\"395\":7}}],[\"taskidcounter++\",{\"1\":{\"395\":1}}],[\"taskidcounter\",{\"1\":{\"395\":1}}],[\"task\",{\"1\":{\"392\":1,\"769\":2,\"770\":3}}],[\"tag和tagstack顶部相同\",{\"1\":{\"661\":1}}],[\"tagstack\",{\"1\":{\"661\":7,\"662\":1}}],[\"tag有多长\",{\"1\":{\"646\":1,\"655\":1}}],[\"tagname\",{\"1\":{\"272\":4,\"675\":1,\"683\":1,\"688\":1}}],[\"tagvalue\",{\"1\":{\"272\":2}}],[\"tag\",{\"1\":{\"270\":6,\"271\":1,\"272\":19,\"273\":8,\"274\":10,\"290\":2,\"298\":2,\"316\":2,\"318\":2,\"320\":3,\"322\":4,\"323\":1,\"325\":3,\"326\":9,\"328\":4,\"346\":3,\"349\":11,\"360\":4,\"361\":1,\"373\":3,\"374\":4,\"375\":15,\"385\":16,\"396\":4,\"646\":3,\"655\":3,\"661\":12,\"662\":5,\"702\":2,\"1031\":1}}],[\"target=\",{\"1\":{\"1042\":1}}],[\"target栈结构\",{\"1\":{\"634\":1}}],[\"target出栈\",{\"1\":{\"626\":1}}],[\"target入栈\",{\"1\":{\"626\":1}}],[\"targetstack\",{\"1\":{\"609\":3,\"615\":3,\"634\":5,\"635\":6}}],[\"target绑定了watcher实例时才会push进去\",{\"1\":{\"609\":1,\"615\":1,\"635\":1}}],[\"target必定是当前正处于实例化过程中的watcher\",{\"1\":{\"609\":1,\"616\":1,\"632\":1,\"635\":1}}],[\"targetfiber\",{\"1\":{\"290\":2,\"298\":3}}],[\"targetnode\",{\"1\":{\"289\":3}}],[\"targetinst\",{\"1\":{\"288\":2,\"289\":2,\"290\":6,\"292\":3,\"293\":4,\"295\":2,\"297\":2,\"298\":1}}],[\"targetcontainer\",{\"1\":{\"286\":4,\"288\":5,\"290\":6,\"292\":2,\"295\":2,\"297\":2}}],[\"target\",{\"1\":{\"225\":1,\"286\":7,\"288\":3,\"293\":1,\"297\":1,\"471\":1,\"495\":2,\"511\":2,\"512\":1,\"549\":6,\"609\":8,\"615\":8,\"621\":5,\"632\":1,\"633\":2,\"634\":6,\"635\":12,\"636\":1,\"669\":1,\"695\":1,\"1042\":1,\"1072\":1,\"1127\":1,\"1129\":1,\"1332\":2}}],[\"target可以得到发生事件的\",{\"1\":{\"158\":1}}],[\"table\",{\"1\":{\"985\":1,\"1048\":2}}],[\"tab\",{\"1\":{\"208\":5,\"472\":1,\"937\":2,\"938\":2}}],[\"tabs\",{\"1\":{\"208\":2}}],[\"title><\",{\"1\":{\"1385\":3}}],[\"title>\",{\"1\":{\"1030\":1,\"1031\":1}}],[\"title=你好\",{\"1\":{\"429\":1}}],[\"title2\",{\"1\":{\"344\":3}}],[\"title\",{\"1\":{\"344\":2,\"427\":1,\"429\":2,\"430\":5,\"431\":2,\"432\":2,\"436\":4,\"587\":3,\"739\":6,\"788\":2,\"795\":3,\"797\":1,\"827\":2,\"1013\":1,\"1031\":1,\"1044\":2,\"1080\":1}}],[\"title1\",{\"1\":{\"344\":1,\"351\":6}}],[\"tick\",{\"1\":{\"201\":2,\"505\":1}}],[\"timer属性\",{\"1\":{\"1073\":1}}],[\"timer\",{\"1\":{\"557\":3}}],[\"timeelapsed\",{\"1\":{\"395\":2}}],[\"times\",{\"1\":{\"395\":3,\"561\":1}}],[\"times<\",{\"1\":{\"182\":1}}],[\"timeout\",{\"0\":{\"48\":1},\"1\":{\"15\":1,\"32\":1,\"48\":1,\"204\":2,\"395\":17}}],[\"txt\",{\"1\":{\"138\":1}}],[\"tel\",{\"1\":{\"1019\":1}}],[\"teleport>\",{\"1\":{\"567\":1}}],[\"teleport\",{\"0\":{\"567\":1},\"1\":{\"525\":1,\"567\":1}}],[\"teams\",{\"1\":{\"831\":1}}],[\"teamsquery\",{\"1\":{\"831\":1}}],[\"teardown\",{\"1\":{\"625\":1,\"626\":1}}],[\"tempobj\",{\"1\":{\"1461\":4}}],[\"temp\",{\"1\":{\"601\":3,\"650\":2,\"657\":2,\"738\":3,\"1173\":3,\"1228\":4}}],[\"templateengine\",{\"1\":{\"653\":2}}],[\"templateengine对象\",{\"1\":{\"653\":1}}],[\"templatestring\",{\"1\":{\"661\":5}}],[\"templatestr\",{\"1\":{\"639\":1,\"640\":2,\"641\":2,\"644\":1,\"646\":8,\"647\":2,\"648\":1,\"653\":5,\"654\":2,\"655\":8}}],[\"template\",{\"1\":{\"457\":1,\"487\":1,\"525\":1,\"561\":1,\"570\":2,\"658\":1,\"660\":1,\"702\":1}}],[\"template>\",{\"1\":{\"424\":2,\"427\":1,\"429\":1,\"430\":1,\"475\":1,\"497\":2,\"499\":1,\"504\":10,\"508\":1,\"510\":1,\"511\":4,\"512\":2,\"513\":2,\"514\":2,\"515\":5,\"516\":2,\"517\":2,\"518\":2,\"519\":1,\"520\":3,\"521\":2,\"557\":1,\"560\":3,\"568\":3,\"588\":2}}],[\"tentime\",{\"1\":{\"407\":1}}],[\"technique\",{\"1\":{\"270\":1,\"272\":1}}],[\"terror>\",{\"1\":{\"840\":1}}],[\"terrychinaz\",{\"1\":{\"96\":1}}],[\"term\",{\"1\":{\"220\":1}}],[\"test2\",{\"1\":{\"712\":2}}],[\"test1\",{\"1\":{\"712\":2,\"799\":3}}],[\"test1和test2是二级路由\",{\"1\":{\"712\":1}}],[\"test\",{\"1\":{\"113\":1,\"124\":1,\"138\":1,\"427\":1,\"436\":1,\"527\":2,\"586\":1,\"625\":1,\"650\":4,\"657\":1,\"661\":4,\"662\":2,\"695\":1,\"713\":1,\"734\":1,\"739\":1,\"1190\":3,\"1191\":2,\"1347\":2,\"1391\":3,\"1392\":1}}],[\"textarea\",{\"1\":{\"1057\":1}}],[\"textcontent\",{\"1\":{\"361\":3,\"474\":1,\"695\":3}}],[\"textinputwithfocusbutton\",{\"1\":{\"189\":1}}],[\"text\",{\"0\":{\"463\":1,\"890\":1,\"891\":1,\"892\":1,\"894\":1,\"897\":1,\"913\":1,\"1084\":1,\"1316\":1},\"1\":{\"8\":1,\"26\":1,\"52\":1,\"125\":1,\"189\":1,\"474\":2,\"513\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"557\":1,\"647\":2,\"649\":2,\"651\":1,\"654\":1,\"657\":1,\"661\":2,\"666\":4,\"667\":1,\"670\":3,\"674\":2,\"675\":2,\"683\":4,\"687\":2,\"689\":2,\"690\":4,\"692\":1,\"695\":2,\"702\":1,\"816\":3,\"894\":1,\"897\":1,\"913\":1,\"918\":1,\"920\":1,\"924\":2,\"926\":1,\"927\":1,\"931\":1,\"970\":1,\"1000\":3,\"1013\":2,\"1019\":1,\"1026\":1,\"1057\":2,\"1316\":3}}],[\"ts文件\",{\"1\":{\"823\":1}}],[\"tsx\",{\"1\":{\"732\":1}}],[\"tsconfig\",{\"1\":{\"582\":1}}],[\"ts\",{\"1\":{\"89\":1,\"524\":1,\"560\":3,\"572\":1,\"573\":2,\"574\":2,\"576\":1,\"578\":3,\"581\":2,\"582\":5,\"583\":4,\"584\":1,\"588\":2,\"591\":3,\"665\":1,\"730\":1,\"731\":2,\"811\":1}}],[\"two\",{\"1\":{\"70\":4,\"270\":1,\"272\":1,\"382\":1,\"937\":1,\"1174\":2,\"1214\":2,\"1388\":3,\"1389\":2}}],[\"trunc\",{\"1\":{\"1181\":1}}],[\"true|false\",{\"1\":{\"1102\":1}}],[\"truetype\",{\"1\":{\"918\":1}}],[\"true\",{\"1\":{\"59\":1,\"62\":1,\"98\":2,\"103\":4,\"150\":4,\"200\":1,\"242\":1,\"252\":4,\"272\":1,\"274\":1,\"286\":3,\"293\":2,\"319\":1,\"326\":1,\"338\":1,\"348\":1,\"349\":1,\"352\":1,\"357\":1,\"361\":1,\"373\":2,\"374\":1,\"375\":1,\"384\":1,\"385\":1,\"395\":3,\"396\":1,\"418\":2,\"431\":1,\"451\":2,\"454\":1,\"474\":1,\"495\":2,\"498\":1,\"508\":1,\"540\":7,\"574\":1,\"578\":2,\"588\":1,\"601\":2,\"602\":6,\"604\":4,\"608\":2,\"609\":4,\"610\":2,\"612\":2,\"613\":2,\"625\":3,\"626\":2,\"627\":2,\"628\":4,\"630\":2,\"631\":2,\"632\":3,\"633\":3,\"635\":1,\"636\":2,\"666\":1,\"715\":1,\"724\":1,\"737\":1,\"738\":2,\"739\":1,\"756\":1,\"768\":1,\"770\":2,\"777\":1,\"787\":2,\"798\":1,\"811\":1,\"829\":2,\"830\":2,\"837\":1,\"842\":1,\"920\":1,\"939\":2,\"964\":3,\"1015\":1,\"1065\":1,\"1089\":2,\"1099\":1,\"1102\":1,\"1125\":1,\"1136\":1,\"1173\":3,\"1199\":1,\"1201\":1,\"1251\":2,\"1259\":3,\"1263\":1,\"1271\":1,\"1290\":1,\"1324\":2,\"1332\":2,\"1401\":1,\"1402\":2,\"1406\":1,\"1413\":3}}],[\"triangle\",{\"1\":{\"1015\":2}}],[\"trimend\",{\"0\":{\"1220\":1}}],[\"trimstart\",{\"0\":{\"1220\":1}}],[\"trim\",{\"1\":{\"662\":1,\"1202\":1}}],[\"triggerhandler\",{\"1\":{\"1330\":1}}],[\"trigger\",{\"1\":{\"557\":2,\"1330\":2}}],[\"traverse\",{\"1\":{\"626\":2,\"627\":6}}],[\"track\",{\"1\":{\"557\":2}}],[\"transparent\",{\"1\":{\"902\":1,\"1015\":12}}],[\"transpiled\",{\"1\":{\"631\":1}}],[\"transport\",{\"1\":{\"6\":1}}],[\"transformroutes\",{\"1\":{\"737\":4,\"740\":2}}],[\"transformresponse\",{\"0\":{\"43\":1},\"1\":{\"43\":1}}],[\"transformrequest\",{\"0\":{\"42\":1},\"1\":{\"42\":1,\"47\":1}}],[\"transform\",{\"0\":{\"894\":1},\"1\":{\"248\":5,\"894\":1}}],[\"transition>\",{\"1\":{\"508\":1}}],[\"transition\",{\"1\":{\"208\":1}}],[\"tree\",{\"1\":{\"255\":1,\"270\":1,\"272\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":2,\"386\":1,\"397\":1,\"524\":1,\"621\":1,\"628\":1,\"636\":1}}],[\"try\",{\"1\":{\"245\":2,\"395\":1,\"609\":1,\"616\":1,\"632\":1,\"635\":1,\"777\":1,\"1206\":2,\"1207\":1,\"1276\":1}}],[\"tosource\",{\"1\":{\"1370\":1}}],[\"tostringtag\",{\"1\":{\"1171\":1}}],[\"tostring\",{\"0\":{\"1410\":1},\"1\":{\"286\":1,\"289\":1,\"625\":1,\"738\":1,\"1171\":1,\"1249\":2,\"1410\":10,\"1411\":3,\"1413\":8,\"1417\":1}}],[\"toggleclass\",{\"1\":{\"1300\":1,\"1328\":1}}],[\"toggle\",{\"0\":{\"1102\":1},\"1\":{\"1102\":1,\"1303\":1}}],[\"toggletodo\",{\"1\":{\"816\":1}}],[\"toraw\",{\"0\":{\"556\":1},\"1\":{\"556\":1}}],[\"torefs\",{\"1\":{\"553\":2}}],[\"toref\",{\"0\":{\"553\":1},\"1\":{\"553\":2}}],[\"tom\",{\"1\":{\"549\":1,\"823\":1}}],[\"tomcat\",{\"1\":{\"28\":1}}],[\"to的对象写法\",{\"1\":{\"429\":1,\"430\":1}}],[\"to的字符串写法\",{\"1\":{\"429\":1,\"430\":1}}],[\"to=\",{\"1\":{\"424\":1,\"426\":1,\"427\":3,\"429\":2,\"430\":2,\"567\":1,\"709\":1,\"713\":1,\"714\":2,\"715\":1,\"730\":2,\"737\":1,\"738\":1,\"804\":1,\"822\":2,\"823\":2}}],[\"todoactions\",{\"1\":{\"816\":1}}],[\"todoadapter\",{\"1\":{\"816\":5}}],[\"todoentity\",{\"1\":{\"816\":1}}],[\"todoid\",{\"1\":{\"816\":3,\"830\":1}}],[\"todopayload\",{\"1\":{\"816\":1}}],[\"todoreducer\",{\"1\":{\"811\":2}}],[\"todosentity\",{\"1\":{\"816\":1}}],[\"todosslice\",{\"1\":{\"816\":3}}],[\"todostate\",{\"1\":{\"815\":4}}],[\"todoslice\",{\"1\":{\"811\":1}}],[\"todos\",{\"1\":{\"795\":1,\"796\":1,\"797\":1,\"798\":1,\"830\":7,\"845\":4,\"847\":1}}],[\"todo\",{\"1\":{\"306\":1,\"796\":2,\"797\":4,\"798\":2,\"811\":2,\"815\":9,\"816\":6,\"830\":6,\"845\":1}}],[\"todolist\",{\"1\":{\"103\":5,\"150\":5,\"815\":1}}],[\"touppercase\",{\"1\":{\"281\":1}}],[\"tolowercase\",{\"1\":{\"281\":1,\"675\":1,\"683\":1,\"688\":1}}],[\"to\",{\"1\":{\"270\":3,\"272\":3,\"430\":2,\"436\":7,\"437\":3,\"438\":2,\"507\":2,\"562\":4,\"631\":1,\"787\":3,\"788\":2,\"1016\":2}}],[\"toprimitive\",{\"1\":{\"1171\":1}}],[\"topleveleventstoreactnames\",{\"1\":{\"281\":2,\"292\":2}}],[\"top\",{\"1\":{\"229\":1,\"662\":1,\"905\":2,\"924\":4,\"969\":1,\"970\":1,\"971\":1,\"990\":1,\"995\":2,\"1013\":2,\"1072\":1,\"1124\":1,\"1207\":1,\"1325\":2}}],[\"toolkit仍是以\",{\"1\":{\"817\":1}}],[\"toolkit加入了\",{\"1\":{\"812\":1}}],[\"toolkit是目前\",{\"1\":{\"809\":1}}],[\"toolkit\",{\"0\":{\"809\":1},\"1\":{\"809\":2,\"811\":1,\"812\":1,\"813\":1,\"816\":1,\"850\":1}}],[\"tools\",{\"1\":{\"382\":1}}],[\"tooltip>\",{\"1\":{\"112\":1}}],[\"tooltip\",{\"1\":{\"112\":1}}],[\"toolbar\",{\"1\":{\"111\":1,\"192\":1,\"217\":1}}],[\"tokens数组中当前操作的tokens小数组\",{\"1\":{\"656\":1}}],[\"tokens打印输出效果\",{\"1\":{\"644\":1}}],[\"tokens\",{\"0\":{\"647\":1,\"648\":1},\"1\":{\"644\":9,\"645\":2,\"647\":10,\"648\":6,\"649\":5,\"651\":4,\"653\":2,\"654\":6,\"656\":3,\"657\":4,\"658\":7}}],[\"token\",{\"1\":{\"54\":2,\"55\":2,\"64\":1,\"67\":3,\"71\":4,\"644\":2,\"647\":2,\"648\":18,\"649\":6,\"650\":2,\"651\":7,\"654\":1,\"656\":6,\"657\":9,\"730\":3,\"731\":1}}],[\"three\",{\"1\":{\"1174\":2,\"1214\":2}}],[\"through\",{\"1\":{\"891\":1,\"1016\":2}}],[\"throttle\",{\"1\":{\"758\":1}}],[\"throw\",{\"1\":{\"69\":1,\"661\":1,\"674\":3,\"686\":3,\"815\":2,\"830\":1}}],[\"thrown\",{\"1\":{\"67\":3}}],[\"thml\",{\"1\":{\"1066\":1}}],[\"thunk等异步中间件解决了\",{\"1\":{\"825\":1}}],[\"thunk的方式书写\",{\"1\":{\"812\":1}}],[\"thunk的异步操作管理中间件\",{\"1\":{\"757\":1}}],[\"thunk这种异步中间件专门处理异步\",{\"1\":{\"780\":1}}],[\"thunk`进一步优化与完善\",{\"1\":{\"756\":1}}],[\"thunk适合简单\",{\"1\":{\"756\":1}}],[\"thunk\",{\"0\":{\"755\":1},\"1\":{\"755\":6,\"790\":1,\"814\":1}}],[\"those\",{\"1\":{\"392\":1}}],[\"thing\",{\"1\":{\"644\":2,\"653\":1}}],[\"things\",{\"1\":{\"270\":1,\"272\":1}}],[\"thisarg\",{\"1\":{\"1448\":2,\"1449\":2,\"1450\":2}}],[\"this→\",{\"1\":{\"1436\":1}}],[\"this\",{\"0\":{\"1446\":1,\"1447\":1},\"1\":{\"26\":1,\"68\":1,\"69\":1,\"70\":6,\"71\":7,\"72\":2,\"89\":1,\"98\":6,\"99\":4,\"106\":2,\"107\":2,\"108\":1,\"109\":1,\"110\":5,\"111\":1,\"114\":3,\"115\":4,\"116\":2,\"143\":3,\"144\":1,\"145\":5,\"149\":1,\"150\":6,\"154\":2,\"155\":4,\"159\":1,\"160\":6,\"214\":1,\"217\":5,\"222\":1,\"231\":1,\"239\":4,\"242\":3,\"245\":7,\"269\":2,\"270\":16,\"271\":3,\"272\":16,\"293\":13,\"346\":15,\"407\":1,\"411\":1,\"418\":4,\"424\":1,\"429\":1,\"430\":1,\"432\":5,\"451\":1,\"452\":2,\"470\":2,\"475\":2,\"480\":1,\"497\":3,\"499\":1,\"505\":2,\"510\":1,\"511\":2,\"512\":1,\"513\":1,\"514\":2,\"515\":7,\"516\":4,\"517\":6,\"518\":3,\"519\":1,\"521\":2,\"535\":1,\"596\":5,\"601\":3,\"602\":2,\"603\":6,\"604\":6,\"607\":10,\"609\":27,\"610\":7,\"614\":3,\"615\":5,\"616\":16,\"617\":4,\"625\":1,\"626\":38,\"632\":21,\"633\":2,\"634\":9,\"635\":62,\"636\":4,\"646\":17,\"655\":17,\"675\":1,\"685\":2,\"694\":13,\"695\":23,\"749\":10,\"774\":6,\"789\":1,\"799\":4,\"802\":1,\"804\":2,\"806\":2,\"822\":2,\"823\":9,\"840\":7,\"842\":12,\"843\":21,\"1130\":2,\"1131\":3,\"1163\":3,\"1173\":2,\"1224\":9,\"1231\":3,\"1274\":3,\"1291\":3,\"1294\":1,\"1295\":1,\"1296\":1,\"1328\":1,\"1405\":1,\"1407\":4,\"1423\":4,\"1424\":5,\"1433\":7,\"1434\":1,\"1436\":2,\"1437\":1,\"1446\":11,\"1448\":2,\"1449\":2,\"1450\":3,\"1451\":5,\"1454\":1}}],[\"that\",{\"1\":{\"112\":1,\"270\":3,\"272\":3,\"830\":1}}],[\"they\",{\"1\":{\"382\":1}}],[\"these\",{\"1\":{\"382\":1}}],[\"theme\",{\"1\":{\"192\":6,\"217\":8}}],[\"themeswitch\",{\"1\":{\"192\":2,\"217\":4}}],[\"themes\",{\"1\":{\"192\":3,\"217\":3}}],[\"theme=\",{\"1\":{\"111\":1}}],[\"themedbutton\",{\"1\":{\"111\":1,\"192\":1,\"217\":1}}],[\"themecontext\",{\"1\":{\"111\":3,\"192\":3,\"217\":3}}],[\"the\",{\"1\":{\"29\":1,\"67\":2,\"189\":1,\"231\":1,\"270\":2,\"272\":2,\"382\":1,\"392\":4,\"395\":1,\"590\":2,\"591\":1,\"787\":4,\"831\":1,\"842\":1}}],[\"then\",{\"1\":{\"20\":2,\"21\":1,\"22\":2,\"43\":1,\"66\":1,\"69\":3,\"70\":2,\"71\":2,\"72\":3,\"392\":1,\"731\":3,\"738\":1,\"755\":1,\"756\":5,\"787\":1,\"1177\":6,\"1229\":2}}],[\"then方法返回响应体\",{\"1\":{\"20\":2}}],[\"c++\",{\"1\":{\"1275\":1,\"1380\":1}}],[\"c=3\",{\"1\":{\"1265\":2}}],[\"c=300\",{\"1\":{\"11\":1}}],[\"circle\",{\"1\":{\"1052\":1}}],[\"citadel\",{\"1\":{\"788\":1}}],[\"c00\",{\"1\":{\"1011\":3}}],[\"ccssss\",{\"1\":{\"1007\":1}}],[\"cjk\",{\"1\":{\"900\":2}}],[\"cjs\",{\"1\":{\"578\":3}}],[\"c的\",{\"1\":{\"635\":1}}],[\"c从$\",{\"1\":{\"610\":1}}],[\"cb\",{\"1\":{\"607\":5,\"609\":5,\"616\":5,\"625\":6,\"626\":5,\"632\":4,\"635\":4}}],[\"c不是对象\",{\"1\":{\"604\":1}}],[\"ceil\",{\"1\":{\"1370\":1}}],[\"cellspacing\",{\"1\":{\"1048\":2}}],[\"cellpadding\",{\"1\":{\"1048\":2}}],[\"cert\",{\"1\":{\"574\":1}}],[\"center\",{\"1\":{\"504\":2,\"890\":1,\"954\":1,\"970\":1,\"1048\":1}}],[\"ctrlkey\",{\"1\":{\"1152\":1}}],[\"ctrl+0\",{\"1\":{\"940\":1}}],[\"ctrl+滚轮可以放大开发者工具代码大小\",{\"1\":{\"940\":1}}],[\"ctrl\",{\"1\":{\"472\":1,\"1031\":2,\"1040\":1,\"1152\":1}}],[\"cpu\",{\"1\":{\"263\":2}}],[\"cd=43\",{\"1\":{\"1390\":2}}],[\"cdn\",{\"1\":{\"639\":1,\"696\":1,\"701\":1}}],[\"cd\",{\"1\":{\"137\":1,\"527\":1,\"529\":1,\"570\":1}}],[\"cmd\",{\"1\":{\"137\":2,\"1188\":1}}],[\"cursor\",{\"1\":{\"1000\":1}}],[\"currenproductlist\",{\"1\":{\"823\":3}}],[\"currentstyle\",{\"1\":{\"1106\":2}}],[\"currentcolor\",{\"1\":{\"920\":1}}],[\"currenttime\",{\"1\":{\"395\":4}}],[\"currenttask\",{\"1\":{\"395\":10}}],[\"currenttarget\",{\"1\":{\"290\":2,\"295\":9}}],[\"currentfirstchild\",{\"1\":{\"319\":8,\"348\":8,\"352\":10,\"357\":12,\"361\":14}}],[\"currentfirstfiber为null\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"currentfirstfiber\",{\"1\":{\"272\":6,\"319\":1,\"348\":1,\"352\":1}}],[\"currenthook\",{\"1\":{\"315\":9,\"323\":2,\"338\":9,\"373\":11}}],[\"current设置以获得\",{\"1\":{\"309\":1}}],[\"currentlyrenderingfiber\",{\"1\":{\"306\":5,\"315\":7,\"338\":8,\"373\":12}}],[\"current一般来说指老fiber的第一个子fiber\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"current的hostrootfiber在构建过程中不作变化\",{\"1\":{\"272\":1,\"317\":1,\"360\":1,\"374\":1,\"396\":1}}],[\"current指向<button>节点\",{\"1\":{\"237\":1}}],[\"current\",{\"1\":{\"155\":1,\"189\":1,\"191\":2,\"196\":1,\"199\":2,\"200\":2,\"201\":2,\"202\":1,\"270\":3,\"271\":4,\"272\":36,\"273\":6,\"274\":2,\"306\":5,\"309\":1,\"310\":1,\"313\":1,\"315\":10,\"317\":7,\"318\":21,\"320\":6,\"323\":1,\"325\":6,\"326\":3,\"336\":1,\"338\":10,\"349\":3,\"357\":6,\"360\":7,\"361\":11,\"370\":1,\"373\":10,\"374\":9,\"375\":3,\"380\":1,\"384\":1,\"385\":8,\"396\":9,\"1286\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1328\":1}}],[\"cur\",{\"1\":{\"650\":2,\"657\":2}}],[\"customer\",{\"1\":{\"709\":4}}],[\"customevent\",{\"1\":{\"114\":2,\"115\":1}}],[\"customref\",{\"0\":{\"557\":1},\"1\":{\"557\":2}}],[\"cut\",{\"1\":{\"112\":1}}],[\"cnpm\",{\"1\":{\"821\":1,\"822\":1}}],[\"cn+3\",{\"1\":{\"574\":2}}],[\"cn\",{\"1\":{\"103\":1,\"400\":1,\"528\":2,\"549\":2,\"574\":4,\"790\":1,\"849\":1,\"1033\":1,\"1057\":2}}],[\"c1\",{\"1\":{\"97\":1}}],[\"c8\",{\"1\":{\"97\":1}}],[\"c7\",{\"1\":{\"97\":1}}],[\"c3\",{\"1\":{\"97\":2}}],[\"c2\",{\"1\":{\"97\":1,\"356\":2}}],[\"c6\",{\"1\":{\"97\":2}}],[\"csdn\",{\"1\":{\"96\":1,\"790\":1}}],[\"css3\",{\"1\":{\"961\":1,\"964\":1,\"973\":1,\"1000\":1}}],[\"css3新属性\",{\"1\":{\"933\":1}}],[\"css特性\",{\"0\":{\"929\":1},\"1\":{\"933\":1}}],[\"css技巧\",{\"0\":{\"915\":1},\"1\":{\"933\":1}}],[\"csstext\",{\"1\":{\"888\":1}}],[\"css属性\",{\"0\":{\"874\":1},\"1\":{\"933\":1}}],[\"css文件路径\",{\"1\":{\"868\":1}}],[\"css文件默认生成一张映射表\",{\"1\":{\"139\":1}}],[\"css基础\",{\"0\":{\"851\":1},\"1\":{\"933\":1}}],[\"csspropertyoperations\",{\"1\":{\"273\":1,\"322\":1,\"328\":1}}],[\"css形成样式隔离\",{\"1\":{\"139\":1}}],[\"cssmodule\",{\"0\":{\"139\":1},\"1\":{\"139\":1}}],[\"css\",{\"0\":{\"854\":1,\"855\":1,\"865\":1,\"921\":1,\"933\":1,\"938\":1,\"1000\":1,\"1104\":1,\"1293\":1},\"1\":{\"2\":1,\"77\":1,\"129\":1,\"138\":2,\"139\":6,\"150\":2,\"443\":1,\"474\":3,\"486\":1,\"487\":1,\"573\":1,\"590\":1,\"774\":1,\"785\":1,\"789\":1,\"810\":1,\"821\":1,\"823\":1,\"826\":1,\"854\":6,\"855\":1,\"861\":1,\"862\":1,\"863\":1,\"865\":2,\"866\":1,\"867\":3,\"868\":5,\"880\":1,\"882\":1,\"883\":1,\"884\":1,\"885\":1,\"912\":1,\"913\":1,\"919\":1,\"920\":2,\"933\":1,\"936\":1,\"938\":1,\"940\":3,\"964\":3,\"967\":2,\"968\":1,\"973\":1,\"974\":1,\"1003\":4,\"1004\":5,\"1005\":3,\"1006\":2,\"1007\":2,\"1011\":2,\"1012\":1,\"1013\":1,\"1017\":1,\"1028\":2,\"1031\":3,\"1052\":1,\"1057\":1,\"1062\":1,\"1092\":1,\"1097\":1,\"1105\":1,\"1282\":1,\"1291\":2,\"1293\":1,\"1294\":1,\"1295\":1,\"1296\":1}}],[\"clamp\",{\"1\":{\"927\":1}}],[\"class2\",{\"1\":{\"1098\":1,\"1101\":1}}],[\"class1\",{\"1\":{\"1098\":1,\"1101\":1}}],[\"classlist\",{\"0\":{\"1097\":1},\"1\":{\"1097\":1,\"1297\":1}}],[\"classa\",{\"1\":{\"1013\":1}}],[\"class>\",{\"1\":{\"789\":1}}],[\"classmodule\",{\"1\":{\"668\":2,\"669\":2}}],[\"classobj\",{\"1\":{\"454\":2}}],[\"class=\",{\"1\":{\"424\":2,\"426\":2,\"454\":3,\"511\":2,\"512\":2,\"513\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"519\":1,\"520\":1,\"521\":1,\"567\":2,\"568\":1,\"588\":3,\"640\":2,\"641\":2,\"653\":2,\"662\":1,\"666\":1,\"918\":1,\"919\":1,\"920\":1}}],[\"classic\",{\"1\":{\"248\":1}}],[\"class中即可使用this\",{\"1\":{\"217\":1}}],[\"classcontextapp\",{\"1\":{\"217\":2}}],[\"classname=\",{\"1\":{\"139\":1,\"150\":3,\"236\":1,\"237\":1,\"714\":1,\"732\":1,\"774\":2,\"813\":1}}],[\"classname\",{\"0\":{\"1301\":1},\"1\":{\"123\":1,\"1085\":1,\"1301\":1}}],[\"class\",{\"0\":{\"214\":1,\"454\":1,\"694\":1,\"919\":1,\"1430\":1},\"1\":{\"89\":1,\"98\":1,\"99\":1,\"106\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":1,\"111\":2,\"113\":2,\"114\":2,\"115\":2,\"123\":1,\"139\":2,\"145\":1,\"149\":2,\"150\":2,\"155\":1,\"160\":1,\"214\":2,\"217\":2,\"219\":1,\"231\":1,\"238\":2,\"239\":3,\"240\":1,\"242\":2,\"245\":1,\"274\":1,\"330\":1,\"365\":1,\"424\":1,\"455\":1,\"515\":1,\"602\":1,\"603\":1,\"604\":1,\"607\":1,\"609\":3,\"610\":1,\"615\":1,\"616\":1,\"617\":1,\"626\":1,\"632\":1,\"635\":2,\"646\":1,\"655\":1,\"662\":1,\"666\":1,\"692\":2,\"694\":1,\"695\":1,\"702\":1,\"749\":1,\"774\":1,\"789\":1,\"802\":1,\"804\":1,\"806\":1,\"823\":2,\"862\":2,\"863\":1,\"917\":1,\"919\":3,\"1013\":1,\"1085\":2,\"1092\":1,\"1096\":3,\"1099\":1,\"1102\":1,\"1173\":1,\"1224\":1,\"1286\":2,\"1290\":1,\"1431\":1,\"1433\":2,\"1452\":1}}],[\"cleanupdeps\",{\"1\":{\"635\":2}}],[\"clearfix\",{\"1\":{\"985\":6}}],[\"cleargctimeout\",{\"1\":{\"842\":1,\"843\":2}}],[\"clear\",{\"1\":{\"627\":1,\"635\":3,\"683\":1,\"691\":1,\"836\":1,\"984\":2,\"985\":3,\"1000\":1,\"1178\":1,\"1179\":1}}],[\"cleartimeout\",{\"1\":{\"204\":1,\"557\":1,\"843\":1}}],[\"clearinterval\",{\"1\":{\"201\":1,\"1063\":2}}],[\"close\",{\"1\":{\"563\":1,\"1063\":2}}],[\"close=\",{\"1\":{\"563\":1}}],[\"cloak\",{\"1\":{\"474\":4}}],[\"clonenode\",{\"1\":{\"1089\":1}}],[\"clone\",{\"1\":{\"319\":4,\"348\":4,\"352\":4,\"357\":4,\"361\":4}}],[\"climbstairs\",{\"1\":{\"1458\":3}}],[\"clip\",{\"1\":{\"897\":1}}],[\"cli版本在4\",{\"1\":{\"527\":1}}],[\"cli版本\",{\"1\":{\"527\":1}}],[\"cli为例进行记录\",{\"1\":{\"491\":1}}],[\"cli\",{\"0\":{\"527\":1},\"1\":{\"404\":1,\"492\":1,\"493\":2,\"527\":3,\"571\":1,\"702\":1,\"1192\":1}}],[\"clientleft\",{\"0\":{\"1110\":1}}],[\"clienttop\",{\"0\":{\"1110\":1}}],[\"client=\",{\"1\":{\"826\":1}}],[\"clientheight\",{\"0\":{\"1111\":1},\"1\":{\"543\":1,\"1115\":1}}],[\"clientwidth\",{\"0\":{\"1111\":1},\"1\":{\"543\":1,\"1115\":1,\"1116\":1}}],[\"clienty\",{\"0\":{\"1122\":1},\"1\":{\"227\":1,\"228\":1,\"229\":1,\"293\":1,\"1139\":1,\"1152\":1}}],[\"clientx\",{\"0\":{\"1122\":1},\"1\":{\"227\":1,\"228\":1,\"229\":1,\"293\":1,\"1139\":1,\"1152\":1}}],[\"client\",{\"1\":{\"29\":1,\"269\":1,\"271\":1,\"272\":2,\"273\":5,\"288\":1,\"291\":1,\"301\":1,\"305\":1,\"318\":1,\"320\":1,\"321\":1,\"322\":4,\"325\":1,\"326\":1,\"327\":3,\"328\":4,\"329\":1,\"333\":1,\"344\":1,\"349\":1,\"351\":1,\"353\":1,\"356\":1,\"359\":1,\"367\":1,\"375\":1,\"377\":1,\"385\":1,\"810\":1}}],[\"clickhandler\",{\"1\":{\"515\":2}}],[\"click=\",{\"1\":{\"470\":2,\"475\":1,\"499\":1,\"560\":3,\"561\":1,\"563\":1,\"567\":1,\"588\":2}}],[\"clicked\",{\"1\":{\"109\":1,\"182\":1}}],[\"click\",{\"1\":{\"17\":1,\"26\":1,\"281\":6,\"282\":2,\"288\":1,\"292\":4,\"293\":1,\"297\":1,\"471\":7,\"475\":1,\"515\":1,\"1076\":1,\"1327\":1,\"1328\":3,\"1329\":2,\"1330\":3}}],[\"c\",{\"1\":{\"67\":2,\"72\":2,\"154\":2,\"353\":1,\"356\":4,\"359\":2,\"574\":2,\"604\":4,\"607\":1,\"609\":2,\"610\":3,\"616\":1,\"625\":1,\"626\":2,\"631\":1,\"632\":1,\"633\":1,\"634\":3,\"635\":4,\"674\":12,\"676\":12,\"685\":6,\"686\":12,\"749\":2,\"750\":1,\"845\":1,\"1016\":1,\"1160\":2,\"1195\":1,\"1260\":2,\"1265\":2,\"1275\":3,\"1382\":3,\"1391\":7,\"1405\":3,\"1458\":4}}],[\"cratedtextnode\",{\"1\":{\"1094\":1}}],[\"creating\",{\"1\":{\"527\":1}}],[\"createattribute\",{\"1\":{\"1094\":2}}],[\"createasyncthunk\",{\"1\":{\"814\":2}}],[\"createhistory\",{\"1\":{\"822\":2,\"823\":3}}],[\"createhostrootfiber\",{\"1\":{\"270\":4,\"271\":2,\"272\":1}}],[\"createbrowserhistory\",{\"1\":{\"822\":1,\"823\":2}}],[\"createthunkmiddleware\",{\"1\":{\"755\":3}}],[\"createtextnode\",{\"1\":{\"273\":1,\"327\":1,\"1094\":1}}],[\"createtextinstance\",{\"1\":{\"273\":3,\"320\":2,\"325\":2,\"327\":1}}],[\"createselector\",{\"1\":{\"815\":2}}],[\"createslice\",{\"1\":{\"812\":3,\"814\":1,\"816\":2}}],[\"createsagamiddleware\",{\"1\":{\"760\":2,\"773\":2}}],[\"createstore\",{\"1\":{\"746\":2,\"749\":3,\"750\":3,\"755\":1,\"760\":2,\"773\":2,\"785\":2,\"809\":1,\"811\":2}}],[\"createsyntheticevent\",{\"1\":{\"293\":2}}],[\"creategetterinvoker\",{\"1\":{\"633\":3}}],[\"createwatcher\",{\"0\":{\"625\":1},\"1\":{\"624\":2,\"625\":3}}],[\"createworkinprogress\",{\"1\":{\"272\":4,\"317\":2,\"319\":2,\"323\":1,\"348\":2,\"352\":2,\"357\":2,\"360\":2,\"361\":2,\"374\":2,\"396\":2}}],[\"createfunctioncomponentupdatequeue\",{\"1\":{\"373\":2}}],[\"createfiberfromtypeandprops\",{\"1\":{\"272\":2}}],[\"createfiberfromtext\",{\"1\":{\"272\":3,\"319\":2,\"348\":2,\"352\":2,\"357\":2,\"361\":3}}],[\"createfiberfromelement\",{\"1\":{\"272\":4,\"319\":3,\"348\":3,\"352\":3,\"357\":4,\"361\":4}}],[\"createfiber\",{\"1\":{\"270\":2,\"272\":5}}],[\"createfiberroot\",{\"1\":{\"269\":4,\"270\":1,\"271\":3,\"272\":2}}],[\"createentityadapter<todopayload>\",{\"1\":{\"816\":1}}],[\"createentityadapter\",{\"1\":{\"816\":2}}],[\"createepicmiddleware\",{\"1\":{\"785\":2}}],[\"createeventlistenerwrapperwithpriority\",{\"1\":{\"286\":1,\"288\":1}}],[\"createelement生成真实\",{\"1\":{\"702\":1}}],[\"createelement\",{\"0\":{\"689\":1},\"1\":{\"26\":1,\"92\":1,\"112\":1,\"115\":1,\"120\":1,\"121\":1,\"248\":3,\"273\":1,\"297\":1,\"327\":1,\"675\":8,\"683\":10,\"688\":3,\"689\":3,\"690\":3,\"691\":4,\"1094\":2,\"1095\":1}}],[\"createinstance\",{\"1\":{\"273\":3,\"297\":1,\"320\":2,\"325\":2,\"327\":1}}],[\"createcomputedgetter\",{\"1\":{\"633\":5,\"634\":2}}],[\"createcontainer\",{\"1\":{\"269\":4,\"271\":3,\"272\":1,\"277\":1,\"284\":1}}],[\"createcontext\",{\"0\":{\"212\":1},\"1\":{\"111\":1,\"192\":3,\"212\":1,\"217\":2,\"807\":1}}],[\"createchild\",{\"1\":{\"272\":2,\"319\":2,\"348\":2,\"352\":2,\"357\":2,\"361\":2}}],[\"createchildreconciler\",{\"1\":{\"272\":4,\"319\":3,\"348\":3,\"352\":3,\"357\":3,\"361\":3}}],[\"createupdate\",{\"1\":{\"271\":3,\"272\":3}}],[\"createdtimestamp\",{\"1\":{\"816\":4}}],[\"createdocumentfragment\",{\"1\":{\"675\":1,\"683\":1,\"689\":1,\"690\":1,\"695\":1}}],[\"created=======>setup\",{\"1\":{\"542\":1}}],[\"createdispatchlistener\",{\"1\":{\"290\":2,\"298\":1}}],[\"created\",{\"1\":{\"270\":1,\"272\":10,\"319\":12,\"348\":12,\"352\":12,\"357\":15,\"361\":18,\"479\":1,\"585\":2,\"703\":1}}],[\"createreducer\",{\"1\":{\"812\":1}}],[\"createref\",{\"1\":{\"154\":2,\"155\":2,\"156\":1,\"190\":1,\"237\":2,\"239\":1}}],[\"createroot\",{\"1\":{\"269\":4,\"271\":3,\"272\":2,\"283\":1,\"284\":1,\"301\":2,\"305\":2,\"329\":2,\"333\":2,\"344\":2,\"351\":2,\"353\":2,\"356\":2,\"359\":2,\"367\":2,\"377\":2,\"810\":2}}],[\"createportal\",{\"1\":{\"112\":2,\"222\":2}}],[\"create\",{\"0\":{\"75\":1,\"1212\":1},\"1\":{\"65\":1,\"75\":1,\"136\":1,\"137\":2,\"229\":1,\"273\":1,\"370\":2,\"373\":12,\"374\":1,\"375\":3,\"380\":4,\"383\":4,\"385\":3,\"396\":1,\"493\":1,\"527\":2,\"570\":2,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"631\":1,\"692\":1,\"1405\":1,\"1408\":1}}],[\"cross\",{\"1\":{\"27\":1}}],[\"carname\",{\"1\":{\"1349\":4,\"1350\":4}}],[\"camel\",{\"1\":{\"1240\":1}}],[\"camelcase\",{\"1\":{\"475\":1,\"1240\":2}}],[\"cached\",{\"1\":{\"829\":1}}],[\"cachetime\",{\"1\":{\"829\":1,\"842\":1,\"843\":5}}],[\"cache\",{\"1\":{\"633\":2,\"829\":1,\"842\":1,\"843\":2}}],[\"ca\",{\"1\":{\"574\":2}}],[\"can\",{\"1\":{\"382\":1,\"591\":1}}],[\"cancelbubble\",{\"1\":{\"293\":1,\"1125\":1}}],[\"cancel\",{\"0\":{\"769\":1},\"1\":{\"64\":1,\"67\":9,\"71\":1,\"72\":9,\"758\":1,\"769\":1,\"770\":2,\"841\":3}}],[\"canceltoken构造函数\",{\"1\":{\"72\":1}}],[\"canceltoken\",{\"0\":{\"64\":1},\"1\":{\"67\":10,\"71\":3,\"72\":7,\"75\":1}}],[\"canceled\",{\"1\":{\"15\":1,\"67\":2}}],[\"capitalize\",{\"1\":{\"894\":1}}],[\"capitalizeevent\",{\"1\":{\"281\":2}}],[\"caps\",{\"1\":{\"886\":1}}],[\"capturename\",{\"1\":{\"290\":2,\"298\":2}}],[\"capture\",{\"1\":{\"282\":1,\"285\":1,\"286\":2,\"290\":1,\"292\":2,\"295\":1,\"298\":1,\"471\":1}}],[\"casesensitive\",{\"1\":{\"723\":1}}],[\"casesensitive>属性用于指定\",{\"1\":{\"712\":1}}],[\"case\",{\"1\":{\"272\":6,\"273\":3,\"274\":5,\"292\":1,\"318\":5,\"319\":2,\"320\":3,\"325\":4,\"326\":6,\"348\":2,\"349\":10,\"352\":2,\"357\":3,\"360\":4,\"361\":4,\"374\":4,\"375\":14,\"385\":16,\"395\":5,\"396\":4,\"472\":1,\"475\":1,\"603\":3,\"604\":3,\"609\":3,\"610\":3,\"614\":3,\"648\":2,\"649\":3,\"651\":3,\"656\":2,\"657\":3,\"749\":2,\"776\":5,\"787\":3,\"815\":6,\"840\":3,\"1240\":2,\"1269\":9}}],[\"call\",{\"0\":{\"764\":1,\"1448\":1},\"1\":{\"252\":2,\"293\":1,\"609\":1,\"616\":1,\"625\":1,\"626\":2,\"631\":1,\"632\":1,\"635\":1,\"738\":1,\"764\":2,\"765\":2,\"770\":2,\"771\":3,\"777\":5,\"820\":2,\"823\":5,\"1131\":2,\"1422\":1,\"1448\":2,\"1451\":4}}],[\"callback\",{\"0\":{\"108\":1},\"1\":{\"26\":3,\"105\":1,\"115\":4,\"116\":3,\"182\":2,\"201\":2,\"203\":2,\"272\":2,\"395\":11,\"466\":1,\"1131\":1}}],[\"callback=\",{\"1\":{\"26\":2}}],[\"category>\",{\"1\":{\"504\":4}}],[\"cat\",{\"1\":{\"229\":2,\"1228\":5}}],[\"catch语法直接捕获处理\",{\"1\":{\"779\":1}}],[\"catch\",{\"1\":{\"43\":1,\"66\":1,\"67\":1,\"245\":2,\"755\":1,\"777\":1,\"788\":2,\"1177\":1,\"1206\":2,\"1207\":1,\"1276\":1}}],[\"china\",{\"1\":{\"1160\":1,\"1214\":1,\"1460\":1,\"1461\":1}}],[\"chinese\",{\"1\":{\"1031\":1}}],[\"childnodes\",{\"1\":{\"695\":5,\"1087\":2}}],[\"childob通过observe嵌套执行\",{\"1\":{\"610\":1,\"613\":1}}],[\"childob\",{\"1\":{\"610\":4,\"613\":4}}],[\"child>\",{\"1\":{\"510\":1}}],[\"childtodelete\",{\"1\":{\"319\":3,\"348\":3,\"349\":2,\"352\":8,\"357\":8,\"361\":8,\"375\":2,\"385\":2}}],[\"childdeletion\",{\"1\":{\"319\":2,\"345\":1,\"348\":2,\"352\":2,\"357\":2,\"360\":2,\"361\":2,\"374\":2,\"382\":1,\"396\":2}}],[\"childcapture\",{\"1\":{\"292\":1,\"301\":2}}],[\"childc的dom元素\",{\"1\":{\"218\":1}}],[\"childbubble\",{\"1\":{\"301\":2}}],[\"childb\",{\"1\":{\"218\":1}}],[\"child\",{\"1\":{\"106\":1,\"107\":1,\"108\":2,\"109\":1,\"222\":2,\"270\":1,\"272\":17,\"273\":13,\"274\":12,\"318\":7,\"319\":8,\"320\":10,\"323\":2,\"325\":10,\"326\":10,\"327\":6,\"346\":1,\"347\":2,\"348\":9,\"349\":16,\"352\":12,\"357\":12,\"360\":6,\"361\":14,\"374\":6,\"375\":28,\"385\":35,\"392\":1,\"396\":6,\"510\":1,\"513\":5,\"515\":1,\"517\":1,\"568\":2,\"695\":3,\"1016\":3}}],[\"children直接消失\",{\"1\":{\"683\":1,\"690\":1}}],[\"children获取函数\",{\"1\":{\"230\":1}}],[\"children\",{\"1\":{\"87\":1,\"92\":4,\"112\":2,\"121\":1,\"222\":1,\"230\":2,\"236\":1,\"237\":1,\"242\":1,\"248\":2,\"249\":1,\"250\":1,\"252\":1,\"271\":2,\"272\":6,\"273\":5,\"306\":2,\"315\":2,\"318\":1,\"322\":4,\"323\":1,\"327\":2,\"328\":5,\"338\":2,\"373\":2,\"426\":2,\"427\":2,\"430\":2,\"661\":6,\"662\":1,\"663\":1,\"666\":2,\"670\":1,\"674\":7,\"675\":6,\"676\":8,\"683\":6,\"686\":5,\"687\":2,\"689\":6,\"690\":6,\"692\":2,\"702\":5,\"730\":4,\"731\":4,\"737\":3,\"1087\":1,\"1290\":2}}],[\"chdom\",{\"1\":{\"675\":2,\"689\":2}}],[\"ch\",{\"1\":{\"675\":3,\"689\":3}}],[\"charcodeat\",{\"1\":{\"1373\":1}}],[\"charat\",{\"1\":{\"1373\":1}}],[\"char\",{\"1\":{\"662\":3}}],[\"charset>\",{\"0\":{\"1034\":1}}],[\"charset\",{\"0\":{\"590\":1},\"1\":{\"28\":1,\"590\":4,\"1034\":1}}],[\"charset=utf\",{\"1\":{\"8\":1}}],[\"channel\",{\"1\":{\"388\":3,\"395\":3,\"758\":1}}],[\"changeorigin\",{\"1\":{\"495\":1}}],[\"change\",{\"1\":{\"382\":2,\"587\":1,\"742\":2,\"1162\":2}}],[\"changetheme\",{\"1\":{\"192\":5,\"217\":6}}],[\"chains\",{\"1\":{\"69\":3,\"70\":6}}],[\"chain\",{\"1\":{\"68\":2}}],[\"checksamevnode\",{\"1\":{\"683\":5,\"691\":5}}],[\"checkbox\",{\"0\":{\"465\":1},\"1\":{\"150\":1,\"1057\":3}}],[\"checked=\",{\"1\":{\"150\":1}}],[\"checked\",{\"0\":{\"1313\":1},\"1\":{\"150\":2,\"465\":2,\"1057\":3}}],[\"check\",{\"1\":{\"26\":2,\"625\":1}}],[\"chrome控制台\",{\"1\":{\"1376\":15}}],[\"chrome\",{\"0\":{\"940\":1},\"1\":{\"7\":1,\"935\":1,\"940\":1,\"945\":1,\"1019\":1,\"1027\":3,\"1115\":2,\"1141\":1}}],[\"cos\",{\"1\":{\"1370\":1}}],[\"cover\",{\"1\":{\"954\":2}}],[\"coding\",{\"1\":{\"936\":1}}],[\"code\",{\"1\":{\"248\":2,\"631\":1,\"653\":1,\"964\":1,\"1031\":1,\"1440\":3,\"1461\":2}}],[\"cor\",{\"1\":{\"1014\":1}}],[\"core\",{\"1\":{\"248\":3}}],[\"cors是通过设置一个响应头来告诉浏览器\",{\"1\":{\"27\":1}}],[\"cors是官方的跨域解决方案\",{\"1\":{\"27\":1}}],[\"cors\",{\"0\":{\"27\":1}}],[\"cols=\",{\"1\":{\"1057\":1}}],[\"colspan=\",{\"1\":{\"1050\":1}}],[\"collapse\",{\"1\":{\"909\":3,\"1048\":2}}],[\"collected\",{\"1\":{\"842\":1}}],[\"collector\",{\"1\":{\"648\":11,\"656\":5}}],[\"columns\",{\"1\":{\"219\":1}}],[\"color=\",{\"1\":{\"98\":1,\"99\":1,\"100\":1,\"475\":1}}],[\"color\",{\"0\":{\"889\":1,\"902\":1},\"1\":{\"98\":4,\"99\":1,\"100\":1,\"139\":1,\"192\":1,\"217\":1,\"248\":4,\"253\":1,\"269\":1,\"271\":1,\"272\":1,\"301\":1,\"329\":1,\"333\":1,\"475\":7,\"560\":13,\"857\":1,\"864\":4,\"867\":1,\"902\":1,\"908\":1,\"909\":5,\"912\":2,\"913\":2,\"920\":1,\"931\":1,\"960\":1,\"1000\":1,\"1010\":1,\"1011\":3,\"1012\":16,\"1013\":6,\"1014\":8,\"1015\":4,\"1016\":3,\"1291\":2,\"1294\":1,\"1295\":1,\"1296\":1}}],[\"color或state\",{\"1\":{\"98\":1}}],[\"coords=\",{\"1\":{\"112\":1}}],[\"coords\",{\"1\":{\"112\":2}}],[\"cookie\",{\"1\":{\"54\":2,\"1081\":1}}],[\"copy\",{\"1\":{\"103\":3}}],[\"com`\",{\"1\":{\"1215\":2}}],[\"combine\",{\"1\":{\"1214\":2}}],[\"combineepics\",{\"1\":{\"788\":2}}],[\"combinereducers\",{\"1\":{\"750\":3,\"753\":1,\"760\":1,\"773\":1,\"776\":2,\"811\":1}}],[\"comres执行\",{\"1\":{\"635\":1}}],[\"comres的\",{\"1\":{\"635\":3}}],[\"comres的变化\",{\"1\":{\"634\":1}}],[\"comres\",{\"1\":{\"634\":4,\"635\":5}}],[\"commonsjs\",{\"1\":{\"1188\":1}}],[\"common\",{\"1\":{\"1017\":1}}],[\"commitlayouteffectonfiber\",{\"1\":{\"385\":3}}],[\"commitlayouteffects\",{\"1\":{\"384\":2,\"385\":1,\"396\":2}}],[\"commitlayouteffect\",{\"1\":{\"376\":1}}],[\"commithooklayouteffects\",{\"1\":{\"385\":2}}],[\"commithookeffectlistmount\",{\"1\":{\"375\":2,\"385\":3}}],[\"commithookeffectlistunmount\",{\"1\":{\"375\":2,\"385\":3}}],[\"commithookpassivemounteffects\",{\"1\":{\"375\":2,\"385\":2}}],[\"commithookpassiveunmounteffects\",{\"1\":{\"375\":2,\"385\":2}}],[\"commitpassivemountonfiber\",{\"1\":{\"375\":3,\"385\":3}}],[\"commitpassivemounteffects\",{\"1\":{\"374\":2,\"375\":1,\"384\":1,\"385\":1,\"396\":2}}],[\"commitpassiveunmountonfiber\",{\"1\":{\"375\":3,\"385\":3}}],[\"commitpassiveunmounteffects\",{\"1\":{\"374\":2,\"375\":1,\"384\":1,\"385\":1,\"396\":2}}],[\"commitplacement\",{\"1\":{\"274\":3,\"326\":2,\"349\":2,\"375\":2,\"385\":2}}],[\"commitdeletioneffectsonfiber\",{\"1\":{\"349\":3,\"375\":3,\"385\":3}}],[\"commitdeletioneffects\",{\"1\":{\"349\":2,\"375\":2,\"385\":2}}],[\"commit\",{\"1\":{\"330\":1,\"376\":1,\"407\":4,\"410\":3,\"411\":2,\"417\":1,\"418\":3}}],[\"commitupdate\",{\"1\":{\"326\":2,\"327\":1,\"330\":2,\"349\":2,\"375\":2,\"385\":2}}],[\"commitreducerresult\",{\"1\":{\"330\":1}}],[\"commitreducer\",{\"0\":{\"324\":1,\"330\":1},\"1\":{\"303\":1,\"330\":1}}],[\"commitreconciliationeffects\",{\"1\":{\"274\":2,\"326\":5,\"349\":5,\"375\":5,\"385\":3}}],[\"commitroot\",{\"1\":{\"274\":2,\"317\":2,\"360\":2,\"374\":2,\"384\":1,\"396\":2}}],[\"commitmutationeffectsonfiber\",{\"1\":{\"274\":3,\"317\":2,\"326\":2,\"330\":1,\"349\":2,\"360\":2,\"374\":2,\"375\":2,\"384\":2,\"385\":2,\"396\":2}}],[\"commitwork\",{\"0\":{\"274\":1},\"1\":{\"274\":2,\"376\":1}}],[\"commentlist\",{\"1\":{\"234\":1}}],[\"commentlistwithsubscription\",{\"1\":{\"234\":1}}],[\"comments\",{\"1\":{\"208\":4}}],[\"com\",{\"1\":{\"255\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":2,\"386\":1,\"397\":1,\"621\":1,\"628\":1,\"636\":1,\"658\":1,\"663\":1,\"665\":1,\"667\":3,\"668\":1,\"669\":1,\"692\":1,\"777\":2,\"788\":1,\"827\":2,\"919\":1,\"920\":1,\"1043\":1,\"1057\":1}}],[\"compc\",{\"1\":{\"845\":1}}],[\"compb\",{\"1\":{\"845\":1}}],[\"compass\",{\"1\":{\"1005\":1}}],[\"compa\",{\"1\":{\"845\":1}}],[\"compat\",{\"1\":{\"784\":1}}],[\"compare\",{\"1\":{\"392\":6}}],[\"composewithdevtools\",{\"1\":{\"760\":2,\"773\":2}}],[\"compositionapi\",{\"1\":{\"546\":1,\"592\":1}}],[\"composition\",{\"0\":{\"533\":1,\"546\":1},\"1\":{\"525\":1,\"534\":1,\"542\":1,\"543\":1}}],[\"component=\",{\"1\":{\"708\":1,\"822\":2}}],[\"components\",{\"1\":{\"424\":2,\"425\":1,\"487\":1,\"497\":1,\"511\":4,\"512\":2,\"513\":2,\"514\":2,\"515\":3,\"516\":2,\"517\":3,\"518\":2,\"519\":1,\"520\":2,\"521\":2,\"560\":2,\"568\":1,\"740\":1,\"789\":1,\"823\":1,\"826\":1}}],[\"componentupdatequeue\",{\"1\":{\"373\":8}}],[\"componentdidcatch\",{\"1\":{\"242\":3}}],[\"componentdidupdate\",{\"1\":{\"167\":1,\"171\":1,\"186\":1,\"199\":1,\"239\":2,\"365\":1}}],[\"componentdidmount\",{\"1\":{\"107\":1,\"114\":1,\"167\":2,\"171\":2,\"173\":1,\"186\":2,\"203\":1,\"365\":1,\"749\":1}}],[\"componentwillupdate\",{\"1\":{\"167\":1}}],[\"componentwillunmount\",{\"1\":{\"114\":1,\"167\":2,\"171\":2,\"173\":1,\"186\":2,\"365\":1}}],[\"componentwillreceiveprops\",{\"1\":{\"167\":1}}],[\"componentwillmountcomponentwillreceivepropscomponentwillupdate\",{\"1\":{\"169\":1}}],[\"componentwillmount\",{\"1\":{\"167\":1,\"169\":1}}],[\"componentb\",{\"1\":{\"113\":1,\"114\":2}}],[\"componenta\",{\"1\":{\"113\":1,\"114\":2}}],[\"component\",{\"0\":{\"110\":1,\"145\":1,\"150\":1,\"155\":1},\"1\":{\"98\":1,\"105\":1,\"106\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":1,\"111\":2,\"113\":2,\"114\":2,\"121\":1,\"134\":1,\"145\":2,\"150\":4,\"155\":2,\"160\":2,\"214\":1,\"217\":3,\"219\":1,\"231\":1,\"239\":4,\"240\":4,\"242\":1,\"245\":1,\"306\":3,\"315\":3,\"318\":8,\"338\":3,\"373\":3,\"422\":1,\"423\":1,\"424\":2,\"426\":4,\"427\":5,\"429\":1,\"430\":6,\"431\":1,\"437\":1,\"439\":1,\"487\":1,\"561\":3,\"563\":1,\"624\":1,\"625\":2,\"631\":1,\"728\":1,\"737\":3,\"739\":4,\"749\":2,\"774\":2,\"789\":2,\"804\":1,\"808\":1,\"823\":4}}],[\"compiletext\",{\"1\":{\"695\":2}}],[\"compileelement\",{\"1\":{\"695\":3}}],[\"compiler\",{\"1\":{\"694\":1}}],[\"compileroptions\",{\"1\":{\"249\":1}}],[\"compile\",{\"0\":{\"695\":1,\"701\":1},\"1\":{\"524\":1,\"694\":2,\"695\":5,\"698\":1}}],[\"completed\",{\"1\":{\"795\":3,\"796\":1,\"797\":1,\"798\":2,\"815\":6,\"816\":3}}],[\"completedwork\",{\"1\":{\"273\":12,\"317\":8,\"320\":4,\"325\":4,\"360\":8,\"374\":8,\"396\":8}}],[\"completeunitofwork\",{\"1\":{\"273\":3,\"317\":2,\"360\":2,\"374\":2,\"396\":2}}],[\"complete\",{\"1\":{\"273\":1}}],[\"completeworkresult\",{\"1\":{\"273\":1}}],[\"completework\",{\"0\":{\"273\":1},\"1\":{\"272\":1,\"273\":7,\"274\":1,\"317\":2,\"320\":2,\"323\":1,\"325\":2,\"360\":2,\"374\":2,\"396\":2}}],[\"computed实现watcher与dep双向依赖\",{\"1\":{\"635\":1}}],[\"computed实际上就是通过\",{\"1\":{\"631\":1}}],[\"computed嵌套watcher引发的问题\",{\"1\":{\"634\":1}}],[\"computedgetter\",{\"1\":{\"633\":1,\"634\":1,\"635\":1}}],[\"computed传统写法\",{\"1\":{\"633\":1}}],[\"computedwatchers\",{\"1\":{\"631\":2,\"632\":1,\"633\":3,\"634\":3,\"636\":2}}],[\"computedwatcheroptions\",{\"1\":{\"630\":1,\"631\":2}}],[\"computed为组件中的\",{\"1\":{\"631\":1}}],[\"computed源码解析\",{\"0\":{\"629\":1}}],[\"computed函数\",{\"1\":{\"489\":2}}],[\"computed\",{\"0\":{\"450\":1,\"539\":1,\"796\":1},\"1\":{\"193\":1,\"414\":1,\"415\":1,\"450\":4,\"451\":3,\"452\":3,\"519\":2,\"534\":1,\"539\":4,\"541\":2,\"545\":1,\"618\":1,\"621\":3,\"623\":2,\"628\":1,\"630\":2,\"631\":6,\"632\":4,\"634\":14,\"635\":8,\"636\":20,\"694\":1,\"698\":1,\"700\":3,\"704\":1,\"796\":3,\"797\":1,\"806\":2}}],[\"comcookie\",{\"1\":{\"7\":1}}],[\"count+1\",{\"1\":{\"775\":1}}],[\"count++\",{\"1\":{\"145\":1,\"155\":1,\"160\":1,\"561\":1}}],[\"counterslice\",{\"1\":{\"811\":1,\"812\":3,\"813\":1,\"814\":1}}],[\"countersagas\",{\"1\":{\"777\":3}}],[\"counterreducer\",{\"1\":{\"811\":2}}],[\"counter++\",{\"1\":{\"802\":1,\"806\":1}}],[\"counter\",{\"1\":{\"760\":1,\"774\":4,\"775\":1,\"776\":6,\"777\":3,\"802\":1,\"804\":4,\"806\":2,\"808\":4,\"811\":2,\"812\":1,\"813\":1,\"814\":2}}],[\"counterbutton\",{\"1\":{\"98\":1,\"99\":1,\"100\":1}}],[\"countredux\",{\"1\":{\"749\":3}}],[\"countabout\",{\"1\":{\"418\":6}}],[\"count=\",{\"1\":{\"110\":1}}],[\"count\",{\"1\":{\"98\":8,\"99\":5,\"100\":4,\"110\":4,\"145\":5,\"155\":4,\"160\":5,\"182\":4,\"548\":1,\"561\":2,\"749\":5,\"774\":1,\"775\":1,\"788\":1,\"812\":4,\"813\":3,\"820\":1,\"823\":1}}],[\"count的值改变才需要更新\",{\"1\":{\"98\":1}}],[\"concat\",{\"0\":{\"1361\":1},\"1\":{\"1171\":1,\"1374\":1}}],[\"concurrentqueuesindex++\",{\"1\":{\"316\":3}}],[\"concurrentqueuesindex\",{\"1\":{\"316\":3}}],[\"concurrentqueues\",{\"1\":{\"316\":7,\"323\":2}}],[\"connect\",{\"1\":{\"753\":1,\"774\":2,\"789\":2,\"822\":1,\"823\":5,\"1164\":2}}],[\"con\",{\"1\":{\"641\":2}}],[\"configurestore\",{\"1\":{\"811\":3}}],[\"configurable\",{\"1\":{\"601\":1,\"602\":3,\"604\":2,\"608\":1,\"609\":2,\"610\":1,\"612\":1,\"613\":1,\"633\":1,\"1407\":1}}],[\"config\",{\"0\":{\"32\":1},\"1\":{\"30\":8,\"66\":5,\"68\":5,\"69\":12,\"70\":13,\"72\":14,\"75\":1,\"249\":3,\"252\":12,\"472\":1,\"561\":4,\"563\":1,\"572\":1,\"573\":2,\"574\":2,\"576\":1,\"578\":3,\"590\":1,\"828\":2,\"832\":1,\"833\":1,\"835\":1}}],[\"contains\",{\"0\":{\"1099\":1},\"1\":{\"1099\":1}}],[\"contain\",{\"1\":{\"954\":2}}],[\"containerinfo\",{\"1\":{\"269\":8,\"270\":5,\"271\":8,\"272\":3,\"274\":1,\"326\":1,\"349\":2,\"375\":2,\"385\":2}}],[\"containerdom\",{\"1\":{\"126\":1}}],[\"container\",{\"1\":{\"112\":1,\"222\":2,\"269\":2,\"271\":5,\"272\":3,\"284\":3,\"288\":3,\"301\":1,\"353\":2,\"356\":2,\"359\":2,\"669\":3,\"675\":4,\"685\":3,\"810\":2}}],[\"contant\",{\"1\":{\"731\":1}}],[\"continuationcallback\",{\"1\":{\"395\":3}}],[\"continue\",{\"1\":{\"272\":1,\"273\":1,\"274\":1,\"293\":1,\"319\":1,\"320\":1,\"322\":2,\"325\":1,\"326\":1,\"328\":2,\"348\":1,\"349\":1,\"352\":1,\"357\":1,\"361\":1,\"373\":1,\"375\":1,\"385\":1,\"840\":1,\"1277\":5}}],[\"context=require\",{\"1\":{\"823\":1}}],[\"context获取上下文对象\",{\"1\":{\"217\":1}}],[\"context对象\",{\"1\":{\"214\":1}}],[\"contextapp\",{\"1\":{\"192\":2}}],[\"contexttype\",{\"0\":{\"214\":1},\"1\":{\"111\":1,\"214\":2,\"217\":1}}],[\"context提供的上下文环境\",{\"1\":{\"111\":1}}],[\"context\",{\"0\":{\"111\":1,\"192\":1,\"209\":1,\"213\":1,\"215\":1,\"216\":1,\"807\":1},\"1\":{\"69\":2,\"70\":4,\"72\":2,\"105\":1,\"111\":1,\"162\":2,\"192\":7,\"209\":2,\"210\":3,\"212\":1,\"213\":2,\"214\":4,\"215\":2,\"216\":1,\"217\":2,\"407\":9,\"535\":1,\"807\":1,\"823\":2,\"1422\":2,\"1423\":2}}],[\"contentstack\",{\"1\":{\"661\":8,\"662\":1}}],[\"contentrect\",{\"1\":{\"202\":1}}],[\"contenteditable=\",{\"1\":{\"150\":1}}],[\"content=\",{\"1\":{\"150\":1,\"950\":1,\"960\":1}}],[\"content\",{\"1\":{\"8\":1,\"12\":1,\"112\":1,\"150\":1,\"272\":2,\"319\":2,\"348\":2,\"352\":2,\"357\":2,\"361\":2,\"588\":1,\"965\":1,\"968\":1,\"973\":3,\"985\":2,\"1000\":1,\"1014\":1}}],[\"controls\",{\"1\":{\"1021\":3}}],[\"controls=\",{\"1\":{\"1021\":1}}],[\"control\",{\"1\":{\"12\":1,\"19\":2,\"27\":3,\"91\":1}}],[\"consumer>\",{\"1\":{\"215\":2}}],[\"consumer\",{\"0\":{\"215\":1},\"1\":{\"215\":1}}],[\"console\",{\"1\":{\"9\":4,\"17\":2,\"19\":1,\"20\":2,\"21\":5,\"22\":1,\"67\":1,\"69\":1,\"70\":9,\"72\":1,\"108\":1,\"109\":1,\"114\":1,\"149\":1,\"194\":1,\"197\":2,\"239\":4,\"248\":2,\"253\":1,\"269\":1,\"272\":1,\"301\":4,\"306\":1,\"320\":1,\"325\":1,\"328\":1,\"356\":1,\"359\":1,\"360\":3,\"367\":7,\"374\":3,\"377\":8,\"384\":1,\"388\":2,\"396\":3,\"434\":4,\"436\":2,\"437\":1,\"451\":2,\"497\":2,\"510\":1,\"513\":2,\"514\":1,\"515\":6,\"516\":4,\"517\":3,\"518\":1,\"521\":1,\"534\":1,\"540\":6,\"541\":1,\"583\":3,\"599\":2,\"601\":11,\"602\":6,\"604\":2,\"608\":2,\"609\":4,\"610\":6,\"613\":2,\"634\":5,\"635\":5,\"640\":1,\"641\":1,\"644\":1,\"661\":4,\"662\":1,\"668\":1,\"669\":1,\"675\":2,\"683\":5,\"688\":2,\"690\":2,\"691\":1,\"714\":1,\"721\":3,\"732\":1,\"749\":4,\"760\":1,\"764\":1,\"765\":1,\"767\":1,\"777\":4,\"797\":1,\"823\":2,\"827\":1,\"1129\":1,\"1155\":2,\"1160\":8,\"1162\":2,\"1164\":4,\"1165\":2,\"1169\":2,\"1173\":1,\"1174\":11,\"1178\":4,\"1181\":1,\"1189\":1,\"1194\":1,\"1195\":1,\"1206\":2,\"1207\":2,\"1214\":2,\"1215\":2,\"1216\":1,\"1217\":1,\"1221\":2,\"1224\":1,\"1229\":2,\"1230\":1,\"1237\":1,\"1258\":4,\"1265\":3,\"1268\":3,\"1269\":1,\"1274\":1,\"1275\":2,\"1276\":3,\"1347\":1,\"1349\":1,\"1385\":2,\"1390\":1,\"1391\":5,\"1405\":4,\"1407\":13,\"1433\":5,\"1453\":1,\"1456\":1,\"1458\":2,\"1460\":1,\"1461\":1}}],[\"constructor\",{\"0\":{\"1440\":1},\"1\":{\"98\":1,\"99\":1,\"106\":1,\"110\":1,\"115\":1,\"149\":1,\"167\":1,\"171\":1,\"242\":1,\"245\":1,\"270\":1,\"272\":1,\"293\":1,\"602\":1,\"603\":1,\"604\":1,\"607\":1,\"608\":2,\"609\":3,\"610\":1,\"615\":1,\"616\":1,\"617\":1,\"626\":1,\"632\":1,\"635\":2,\"646\":1,\"655\":1,\"694\":1,\"695\":1,\"774\":1,\"1224\":1,\"1431\":2,\"1433\":2,\"1435\":1,\"1440\":5}}],[\"const\",{\"0\":{\"1159\":1},\"1\":{\"9\":3,\"20\":1,\"22\":1,\"26\":8,\"65\":1,\"67\":3,\"69\":2,\"70\":1,\"72\":4,\"100\":1,\"103\":6,\"106\":1,\"108\":1,\"111\":1,\"112\":5,\"116\":2,\"120\":1,\"149\":1,\"150\":4,\"180\":1,\"182\":1,\"189\":2,\"191\":1,\"192\":5,\"194\":3,\"197\":3,\"199\":1,\"200\":2,\"201\":1,\"202\":4,\"203\":1,\"204\":3,\"207\":4,\"208\":3,\"212\":1,\"214\":1,\"217\":4,\"227\":2,\"228\":2,\"229\":3,\"233\":1,\"234\":3,\"237\":2,\"239\":2,\"240\":2,\"248\":7,\"252\":2,\"253\":1,\"269\":4,\"270\":2,\"271\":13,\"272\":31,\"273\":14,\"274\":14,\"281\":5,\"282\":1,\"284\":1,\"285\":1,\"286\":2,\"288\":4,\"289\":4,\"290\":7,\"291\":3,\"292\":4,\"293\":5,\"295\":6,\"297\":3,\"298\":5,\"299\":3,\"301\":6,\"305\":4,\"306\":7,\"309\":2,\"310\":1,\"311\":1,\"312\":1,\"315\":18,\"316\":6,\"317\":9,\"318\":10,\"319\":12,\"320\":7,\"322\":7,\"325\":7,\"326\":17,\"327\":1,\"328\":9,\"329\":4,\"333\":3,\"336\":3,\"337\":1,\"338\":25,\"344\":2,\"345\":5,\"348\":12,\"349\":19,\"351\":2,\"352\":12,\"353\":2,\"356\":2,\"357\":18,\"359\":3,\"360\":11,\"361\":26,\"367\":3,\"370\":4,\"371\":3,\"372\":1,\"373\":34,\"374\":12,\"375\":29,\"377\":3,\"380\":5,\"381\":3,\"382\":8,\"383\":2,\"384\":3,\"385\":32,\"392\":12,\"394\":6,\"395\":16,\"396\":12,\"407\":4,\"409\":1,\"410\":1,\"411\":1,\"412\":1,\"418\":3,\"448\":1,\"487\":1,\"499\":1,\"513\":1,\"534\":3,\"536\":1,\"537\":1,\"539\":1,\"541\":2,\"543\":2,\"553\":1,\"560\":2,\"568\":1,\"586\":1,\"587\":1,\"588\":1,\"591\":1,\"599\":1,\"601\":1,\"602\":2,\"603\":6,\"604\":8,\"607\":2,\"608\":1,\"609\":14,\"610\":8,\"612\":1,\"613\":1,\"614\":6,\"615\":2,\"616\":3,\"624\":2,\"625\":3,\"626\":1,\"627\":5,\"630\":1,\"631\":6,\"633\":3,\"634\":4,\"635\":7,\"640\":3,\"641\":4,\"644\":2,\"646\":1,\"647\":1,\"648\":2,\"650\":1,\"653\":4,\"654\":1,\"655\":1,\"656\":3,\"657\":1,\"661\":13,\"662\":4,\"668\":2,\"669\":3,\"674\":3,\"675\":10,\"676\":6,\"683\":9,\"685\":6,\"686\":2,\"687\":1,\"688\":2,\"689\":4,\"690\":2,\"691\":5,\"694\":1,\"695\":9,\"715\":1,\"719\":2,\"721\":3,\"722\":1,\"723\":1,\"728\":4,\"730\":5,\"731\":15,\"732\":4,\"734\":1,\"735\":1,\"737\":4,\"738\":5,\"739\":2,\"740\":1,\"746\":1,\"747\":1,\"749\":8,\"750\":2,\"755\":2,\"756\":2,\"760\":2,\"764\":1,\"765\":1,\"771\":1,\"773\":2,\"774\":3,\"775\":7,\"776\":3,\"777\":5,\"785\":3,\"786\":6,\"787\":1,\"788\":2,\"789\":4,\"795\":1,\"798\":1,\"799\":1,\"807\":1,\"808\":2,\"810\":2,\"811\":1,\"812\":3,\"813\":2,\"814\":3,\"815\":6,\"816\":5,\"820\":1,\"822\":1,\"823\":11,\"826\":1,\"827\":5,\"830\":1,\"831\":4,\"832\":3,\"837\":1,\"845\":3,\"1160\":2,\"1162\":1,\"1173\":1,\"1206\":1,\"1207\":1,\"1215\":2,\"1216\":1,\"1217\":1,\"1221\":4,\"1224\":1,\"1228\":1,\"1229\":1,\"1433\":2,\"1460\":1,\"1461\":1}}],[\"头部标签\",{\"1\":{\"1031\":1}}],[\"头部\",{\"1\":{\"1020\":1}}],[\"头尾相连\",{\"1\":{\"271\":1}}],[\"头\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"51\":1,\"63\":2}}],[\"python\",{\"1\":{\"1275\":1,\"1380\":1}}],[\"pi\",{\"1\":{\"1369\":1,\"1370\":4}}],[\"pixels\",{\"1\":{\"1021\":2}}],[\"pink\",{\"1\":{\"857\":1}}],[\"px\",{\"1\":{\"883\":1,\"887\":1,\"892\":1,\"944\":1,\"952\":2,\"954\":1,\"963\":1,\"965\":2,\"966\":5,\"1016\":2,\"1110\":1,\"1111\":1}}],[\"pc端\",{\"1\":{\"404\":1}}],[\"pc\",{\"1\":{\"402\":1,\"947\":2,\"959\":1}}],[\"php\",{\"1\":{\"1380\":1}}],[\"phase\",{\"1\":{\"285\":1,\"286\":2,\"292\":2,\"295\":1}}],[\"photos\",{\"1\":{\"208\":4}}],[\"pem\",{\"1\":{\"574\":2}}],[\"peek\",{\"1\":{\"392\":2,\"395\":4,\"1031\":1}}],[\"permission\",{\"1\":{\"731\":1}}],[\"persisted\",{\"1\":{\"1119\":1}}],[\"persist\",{\"1\":{\"430\":1,\"519\":1}}],[\"person的job变化了\",{\"1\":{\"540\":3}}],[\"person变化了\",{\"1\":{\"540\":1}}],[\"personabout\",{\"1\":{\"418\":6}}],[\"person>\",{\"1\":{\"149\":1}}],[\"person\",{\"1\":{\"149\":6,\"418\":3,\"539\":6,\"540\":5,\"541\":1,\"553\":2,\"1224\":4,\"1274\":2,\"1433\":9,\"1436\":1}}],[\"perform\",{\"1\":{\"631\":1}}],[\"performworkuntildeadline\",{\"1\":{\"395\":3}}],[\"performance\",{\"1\":{\"395\":1}}],[\"performedwork\",{\"1\":{\"382\":1}}],[\"performconcurrentworkonroot\",{\"1\":{\"272\":2,\"274\":1,\"317\":2,\"360\":2,\"374\":2,\"396\":2}}],[\"performunitofwork\",{\"1\":{\"272\":3,\"273\":1,\"317\":2,\"323\":1,\"360\":2,\"374\":2,\"396\":3}}],[\"pendingqueue\",{\"1\":{\"272\":3,\"315\":3,\"338\":3,\"373\":3}}],[\"pending要指向最后一个更新\",{\"1\":{\"271\":1,\"272\":1}}],[\"pending存在\",{\"1\":{\"271\":1,\"272\":1}}],[\"pending不存在则直接将新的更新链表挂载上去\",{\"1\":{\"271\":1,\"272\":1}}],[\"pending\",{\"1\":{\"271\":7,\"272\":9,\"306\":1,\"315\":3,\"316\":6,\"323\":5,\"338\":4,\"373\":4,\"814\":1}}],[\"pending是一个循环链表\",{\"1\":{\"271\":1,\"272\":1}}],[\"pendingprops\",{\"1\":{\"270\":6,\"272\":18,\"273\":2,\"317\":1,\"318\":3,\"319\":2,\"320\":1,\"323\":1,\"325\":1,\"346\":3,\"348\":2,\"352\":2,\"357\":2,\"360\":1,\"361\":2,\"374\":1,\"396\":1}}],[\"plus\",{\"1\":{\"952\":1}}],[\"plugins\",{\"1\":{\"248\":2,\"249\":1,\"279\":1,\"578\":1,\"800\":1,\"823\":1}}],[\"plugin\",{\"1\":{\"248\":3,\"249\":1,\"578\":5,\"800\":2,\"821\":1}}],[\"placeholder\",{\"1\":{\"1019\":1}}],[\"placechild\",{\"1\":{\"272\":2,\"319\":2,\"348\":2,\"352\":2,\"357\":3,\"361\":4}}],[\"placesinglechild\",{\"1\":{\"272\":2,\"319\":3,\"348\":3,\"352\":3,\"357\":3,\"361\":3}}],[\"placement\",{\"1\":{\"272\":4,\"274\":3,\"319\":3,\"326\":4,\"345\":2,\"348\":3,\"349\":4,\"352\":3,\"357\":3,\"360\":2,\"361\":4,\"374\":2,\"375\":4,\"382\":3,\"385\":4,\"396\":2}}],[\"plain\",{\"1\":{\"45\":1,\"47\":1,\"625\":1}}],[\"pnpm\",{\"1\":{\"248\":1}}],[\"png\",{\"1\":{\"138\":2,\"920\":1}}],[\"print\",{\"1\":{\"964\":1}}],[\"printfinishedwork\",{\"1\":{\"360\":3,\"374\":3,\"384\":1,\"396\":3}}],[\"private\",{\"1\":{\"840\":1,\"843\":3}}],[\"prioritylevel\",{\"1\":{\"395\":4}}],[\"priority\",{\"1\":{\"395\":10}}],[\"preset\",{\"1\":{\"1192\":1}}],[\"presentation\",{\"1\":{\"1028\":1}}],[\"prestate\",{\"1\":{\"749\":4}}],[\"preload\",{\"1\":{\"1021\":2}}],[\"preloadedstate\",{\"1\":{\"811\":1}}],[\"prefetchquery\",{\"1\":{\"843\":1}}],[\"prefix\",{\"1\":{\"272\":2}}],[\"prettier\",{\"1\":{\"578\":9}}],[\"preprocessoroptions\",{\"1\":{\"573\":1,\"590\":1}}],[\"prepare\",{\"1\":{\"816\":1}}],[\"prepareupdate\",{\"1\":{\"320\":2,\"321\":1,\"325\":2,\"327\":1}}],[\"preparefreshstack\",{\"1\":{\"272\":2,\"317\":2,\"323\":2,\"360\":2,\"374\":2,\"396\":3}}],[\"pre\",{\"1\":{\"474\":1,\"898\":3,\"1020\":1}}],[\"precachefibernode\",{\"1\":{\"289\":1,\"297\":1,\"327\":2}}],[\"prevall\",{\"1\":{\"1290\":2}}],[\"preview\",{\"1\":{\"830\":3}}],[\"previouselementsibling\",{\"1\":{\"1088\":1}}],[\"previoussibling\",{\"1\":{\"1088\":1}}],[\"previous\",{\"1\":{\"788\":2}}],[\"previousnewfiber\",{\"1\":{\"272\":4,\"319\":4,\"348\":4,\"352\":4,\"357\":7,\"361\":10}}],[\"prevdeps\",{\"1\":{\"373\":6}}],[\"preventextensions\",{\"1\":{\"1408\":1}}],[\"prevent\",{\"1\":{\"471\":2}}],[\"preventdefault\",{\"1\":{\"293\":3,\"471\":1,\"1148\":1,\"1331\":1}}],[\"preveffect\",{\"1\":{\"373\":3}}],[\"prevstate\",{\"1\":{\"272\":3}}],[\"prevprops\",{\"1\":{\"199\":1,\"239\":4}}],[\"protected\",{\"1\":{\"840\":1,\"1290\":1}}],[\"proto\",{\"0\":{\"1212\":1,\"1439\":1},\"1\":{\"1435\":1,\"1438\":1,\"1439\":3,\"1442\":2}}],[\"prototype\",{\"0\":{\"1222\":1,\"1438\":1},\"1\":{\"68\":1,\"69\":2,\"70\":3,\"72\":2,\"74\":1,\"271\":2,\"293\":1,\"407\":1,\"424\":1,\"454\":3,\"500\":1,\"518\":2,\"561\":1,\"603\":2,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"625\":2,\"738\":1,\"1171\":1,\"1177\":2,\"1185\":1,\"1402\":1,\"1408\":1,\"1417\":1,\"1435\":2,\"1438\":2,\"1439\":3,\"1442\":1,\"1443\":2}}],[\"protocol\",{\"1\":{\"6\":1,\"1065\":1}}],[\"projects\",{\"1\":{\"831\":1,\"832\":2}}],[\"projectsquery\",{\"1\":{\"831\":1}}],[\"project\",{\"1\":{\"527\":1}}],[\"productlist=\",{\"1\":{\"823\":1}}],[\"productlist\",{\"1\":{\"823\":6}}],[\"product\",{\"1\":{\"822\":1,\"823\":7}}],[\"productpage\",{\"1\":{\"822\":3}}],[\"productiontip\",{\"1\":{\"454\":3,\"561\":1}}],[\"produce\",{\"1\":{\"103\":3}}],[\"process\",{\"1\":{\"826\":1}}],[\"processdispatchqueueitemsinorder\",{\"1\":{\"295\":2}}],[\"processdispatchqueue\",{\"1\":{\"294\":1,\"295\":3,\"300\":1}}],[\"processupdatequeue\",{\"1\":{\"272\":3,\"318\":2}}],[\"provideinject\",{\"1\":{\"560\":1}}],[\"provide`\",{\"1\":{\"560\":1}}],[\"provide\",{\"0\":{\"517\":1,\"560\":1},\"1\":{\"209\":1,\"517\":5,\"525\":1,\"560\":4}}],[\"provider>中嵌套组件的后代组件\",{\"1\":{\"215\":1}}],[\"provider>来开启订阅\",{\"1\":{\"212\":1}}],[\"provider><\",{\"1\":{\"212\":1,\"215\":1}}],[\"provider>\",{\"1\":{\"111\":1,\"192\":2,\"217\":1,\"760\":1,\"773\":1,\"785\":1,\"803\":1,\"810\":1}}],[\"provider\",{\"0\":{\"213\":1},\"1\":{\"111\":1,\"192\":1,\"212\":2,\"213\":4,\"217\":1,\"753\":1,\"760\":1,\"773\":1,\"785\":1,\"803\":1,\"810\":1}}],[\"proposal\",{\"1\":{\"800\":2}}],[\"propvalue\",{\"1\":{\"323\":1,\"328\":4}}],[\"propkey\",{\"1\":{\"273\":6,\"322\":23,\"323\":2,\"328\":27}}],[\"propname\",{\"1\":{\"252\":6,\"293\":4,\"1407\":2}}],[\"prop函数\",{\"1\":{\"231\":2}}],[\"prop需要注意函数\",{\"1\":{\"231\":1}}],[\"prop是因为这种特殊模式才被称为render\",{\"1\":{\"229\":1}}],[\"prop是一个告知组件其内部需要渲染什么内容的函数\",{\"1\":{\"229\":1}}],[\"prop属性接收一个函数\",{\"1\":{\"224\":1}}],[\"propertyname\",{\"1\":{\"1402\":3}}],[\"property\",{\"1\":{\"216\":1,\"586\":1,\"593\":4}}],[\"propertiesobject\",{\"0\":{\"1212\":1}}],[\"properties\",{\"1\":{\"147\":1}}],[\"proptypes\",{\"1\":{\"149\":12}}],[\"prop\",{\"0\":{\"1310\":1},\"1\":{\"86\":1,\"87\":2,\"149\":2,\"192\":1,\"229\":1,\"234\":2,\"273\":1,\"549\":6,\"1310\":2}}],[\"propsmodule\",{\"1\":{\"668\":2,\"669\":2}}],[\"props值为函数\",{\"1\":{\"431\":1}}],[\"props值为对象\",{\"1\":{\"431\":1}}],[\"props为布尔值\",{\"1\":{\"431\":1}}],[\"props实际上就是提供了组件插槽\",{\"1\":{\"229\":1}}],[\"props隔离了依赖\",{\"1\":{\"92\":1}}],[\"props的问题\",{\"1\":{\"89\":1}}],[\"props将要复用的状态逻辑代码封装到一个组件中\",{\"1\":{\"87\":1}}],[\"props\",{\"0\":{\"87\":1,\"106\":1,\"146\":1,\"224\":1,\"229\":1,\"431\":1,\"498\":1,\"510\":1,\"587\":1},\"1\":{\"84\":1,\"86\":3,\"91\":1,\"92\":3,\"98\":4,\"99\":4,\"100\":2,\"105\":1,\"106\":4,\"110\":2,\"121\":1,\"147\":2,\"148\":2,\"149\":10,\"150\":5,\"156\":3,\"162\":2,\"191\":1,\"192\":1,\"217\":1,\"220\":2,\"222\":1,\"229\":3,\"230\":3,\"234\":7,\"235\":1,\"236\":2,\"237\":3,\"238\":1,\"239\":10,\"240\":4,\"242\":3,\"245\":2,\"252\":7,\"257\":2,\"272\":5,\"273\":8,\"289\":2,\"291\":4,\"296\":1,\"297\":2,\"299\":4,\"306\":3,\"315\":3,\"318\":3,\"319\":1,\"322\":2,\"327\":8,\"328\":2,\"338\":3,\"348\":1,\"352\":1,\"357\":2,\"361\":2,\"373\":3,\"431\":3,\"498\":3,\"510\":3,\"511\":2,\"512\":1,\"515\":1,\"535\":2,\"584\":2,\"587\":5,\"588\":2,\"664\":1,\"667\":2,\"668\":1,\"669\":1,\"692\":1,\"700\":1,\"728\":2,\"752\":1,\"753\":2,\"774\":8,\"789\":1,\"804\":2,\"822\":2,\"823\":7}}],[\"proxy\",{\"0\":{\"63\":1},\"1\":{\"28\":3,\"61\":2,\"63\":2,\"103\":3,\"495\":2,\"524\":3,\"537\":3,\"549\":6,\"550\":1}}],[\"promise与\",{\"1\":{\"758\":1}}],[\"promise算是``redux\",{\"1\":{\"756\":1}}],[\"promisemiddleware\",{\"1\":{\"756\":1}}],[\"promise更适合输入输出操作\",{\"1\":{\"756\":1}}],[\"promise\",{\"0\":{\"756\":1,\"1175\":1,\"1225\":1,\"1226\":1},\"1\":{\"22\":1,\"29\":1,\"50\":1,\"59\":3,\"65\":1,\"66\":2,\"68\":4,\"69\":4,\"70\":10,\"71\":11,\"72\":4,\"159\":1,\"505\":2,\"534\":2,\"738\":1,\"739\":1,\"756\":3,\"764\":1,\"765\":2,\"770\":1,\"777\":2,\"828\":1,\"830\":1,\"835\":1,\"839\":1,\"840\":1,\"1175\":2,\"1176\":2,\"1177\":5,\"1205\":6,\"1206\":4,\"1207\":1,\"1225\":1,\"1226\":1,\"1229\":1}}],[\"pure\",{\"1\":{\"248\":4}}],[\"purecomponent即可\",{\"1\":{\"99\":1}}],[\"purecomponent\",{\"0\":{\"99\":1},\"1\":{\"99\":1}}],[\"public\",{\"1\":{\"138\":1}}],[\"publish\",{\"1\":{\"116\":1}}],[\"pushtarget\",{\"1\":{\"609\":3,\"615\":1,\"616\":2,\"625\":1,\"626\":1,\"632\":2,\"634\":1,\"635\":3}}],[\"pusheffect\",{\"1\":{\"373\":4}}],[\"push\",{\"0\":{\"1355\":1},\"1\":{\"70\":3,\"103\":1,\"290\":1,\"292\":1,\"298\":1,\"319\":1,\"322\":5,\"328\":5,\"348\":1,\"352\":1,\"357\":1,\"361\":1,\"392\":3,\"395\":2,\"432\":4,\"505\":4,\"603\":4,\"604\":3,\"609\":5,\"610\":4,\"614\":3,\"615\":2,\"620\":1,\"626\":1,\"634\":1,\"635\":3,\"647\":4,\"648\":3,\"654\":4,\"656\":3,\"661\":3,\"662\":4,\"674\":1,\"686\":1,\"715\":1,\"725\":2,\"731\":1,\"737\":1,\"822\":2,\"823\":3,\"842\":1}}],[\"put\",{\"0\":{\"766\":1},\"1\":{\"30\":1,\"42\":1,\"47\":1,\"75\":1,\"762\":1,\"766\":1,\"777\":10,\"820\":2,\"823\":6}}],[\"p\",{\"1\":{\"26\":3,\"91\":1,\"272\":1,\"674\":4,\"864\":2,\"876\":1,\"1014\":1,\"1016\":1,\"1106\":1,\"1177\":2,\"1206\":2,\"1226\":1,\"1286\":1,\"1329\":2,\"1330\":2,\"1406\":2}}],[\"p><\",{\"1\":{\"1020\":1}}],[\"p>\",{\"1\":{\"26\":3,\"150\":1,\"182\":1,\"227\":1,\"228\":1,\"230\":1,\"351\":1,\"356\":1,\"448\":1,\"560\":1,\"640\":3,\"641\":1,\"653\":1,\"804\":2,\"808\":2,\"1020\":1,\"1391\":2}}],[\"point\",{\"1\":{\"662\":5}}],[\"pow\",{\"1\":{\"395\":1,\"1194\":1,\"1370\":1}}],[\"poptarget\",{\"1\":{\"609\":3,\"615\":1,\"616\":2,\"625\":1,\"626\":1,\"632\":2,\"634\":1,\"635\":3}}],[\"pop\",{\"0\":{\"1356\":1},\"1\":{\"392\":3,\"395\":3,\"603\":2,\"604\":1,\"609\":2,\"610\":1,\"614\":1,\"615\":1,\"620\":1,\"634\":1,\"635\":1,\"648\":1,\"656\":1,\"661\":11,\"725\":1}}],[\"popup\",{\"1\":{\"112\":1}}],[\"port\",{\"1\":{\"574\":2,\"1065\":1,\"1164\":3}}],[\"port2收到来自port1的数据\",{\"1\":{\"388\":1}}],[\"port2\",{\"1\":{\"388\":4,\"395\":3}}],[\"port1收到来自port2的数据\",{\"1\":{\"388\":1}}],[\"port1\",{\"1\":{\"388\":4,\"395\":3}}],[\"portal>\",{\"1\":{\"112\":1}}],[\"portal\",{\"1\":{\"112\":6,\"221\":1,\"223\":2}}],[\"portals\",{\"0\":{\"112\":1,\"221\":1},\"1\":{\"105\":1,\"112\":2}}],[\"pool\",{\"1\":{\"270\":1,\"272\":1}}],[\"pooling\",{\"1\":{\"270\":1,\"272\":1}}],[\"pos指针继续右移\",{\"1\":{\"646\":1,\"655\":1}}],[\"pos\",{\"1\":{\"646\":9,\"655\":9}}],[\"position=\",{\"1\":{\"826\":1}}],[\"positions\",{\"1\":{\"392\":1}}],[\"position\",{\"0\":{\"905\":1,\"989\":1},\"1\":{\"229\":1,\"646\":1,\"655\":1,\"905\":1,\"908\":2,\"916\":2,\"991\":1,\"992\":1,\"993\":1,\"994\":1,\"995\":1,\"1000\":1,\"1013\":1,\"1325\":1}}],[\"poster\",{\"1\":{\"1021\":1}}],[\"postmessage\",{\"1\":{\"388\":3,\"395\":1}}],[\"posts\",{\"1\":{\"69\":1,\"70\":1,\"72\":1,\"827\":4}}],[\"post\",{\"0\":{\"11\":1},\"1\":{\"7\":1,\"20\":1,\"21\":1,\"22\":1,\"30\":1,\"42\":1,\"47\":1,\"65\":1,\"67\":1,\"75\":1,\"849\":1,\"1056\":1}}],[\"policy\",{\"1\":{\"24\":1}}],[\"padend\",{\"1\":{\"1202\":1}}],[\"padstart\",{\"1\":{\"1202\":1}}],[\"padding+border+width\",{\"1\":{\"1108\":1}}],[\"padding\",{\"0\":{\"969\":1},\"1\":{\"26\":1,\"968\":1,\"969\":12,\"970\":1,\"972\":1,\"973\":3,\"1000\":1,\"1013\":2,\"1015\":1,\"1108\":1,\"1116\":2,\"1324\":3}}],[\"pause\",{\"1\":{\"840\":1}}],[\"package\",{\"1\":{\"578\":1,\"800\":1}}],[\"packages\",{\"1\":{\"255\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":2,\"386\":1,\"392\":1,\"397\":1}}],[\"pageyoffset\",{\"1\":{\"1124\":2}}],[\"pagey\",{\"0\":{\"1123\":1}}],[\"pagexoffset\",{\"1\":{\"1124\":2}}],[\"pagex\",{\"0\":{\"1123\":1}}],[\"page404\",{\"1\":{\"734\":2,\"739\":1}}],[\"pagepermisson\",{\"1\":{\"731\":1}}],[\"page<\",{\"1\":{\"721\":1}}],[\"page\",{\"1\":{\"578\":1,\"588\":2,\"788\":2,\"1013\":1}}],[\"pageshow\",{\"1\":{\"1119\":2}}],[\"pages下所有model\",{\"1\":{\"823\":1}}],[\"pages\",{\"1\":{\"425\":1,\"823\":1}}],[\"payloadaction<string>\",{\"1\":{\"816\":2}}],[\"payloadaction<todopayload>\",{\"1\":{\"816\":1}}],[\"payloadaction\",{\"1\":{\"816\":1}}],[\"payload\",{\"1\":{\"271\":1,\"272\":4,\"329\":2,\"747\":2,\"755\":1,\"756\":7,\"781\":1,\"786\":2,\"787\":2,\"812\":4,\"814\":1,\"816\":4,\"823\":11}}],[\"pathrestype\",{\"1\":{\"738\":2}}],[\"pathres\",{\"1\":{\"738\":6}}],[\"pathrewrite\",{\"1\":{\"495\":1}}],[\"pathnamebase\",{\"1\":{\"723\":1}}],[\"pathname\",{\"1\":{\"722\":1,\"723\":1,\"738\":4,\"739\":2,\"823\":4,\"1065\":1}}],[\"path属性用于定义路径\",{\"1\":{\"712\":1}}],[\"path=\",{\"1\":{\"709\":4,\"712\":6,\"822\":2}}],[\"paths\",{\"1\":{\"249\":1}}],[\"path\",{\"1\":{\"249\":7,\"424\":2,\"426\":4,\"427\":5,\"429\":1,\"430\":6,\"431\":1,\"437\":1,\"439\":1,\"572\":1,\"626\":4,\"720\":1,\"723\":1,\"727\":1,\"730\":6,\"731\":1,\"734\":3,\"739\":4,\"847\":1}}],[\"pattern\",{\"0\":{\"114\":1},\"1\":{\"105\":1,\"723\":1,\"1019\":1}}],[\"patchrights\",{\"1\":{\"731\":2}}],[\"patch流程图二览\",{\"1\":{\"692\":1}}],[\"patch本项\",{\"1\":{\"683\":1,\"691\":1}}],[\"patchvnode\",{\"0\":{\"690\":1},\"1\":{\"683\":12,\"688\":3,\"690\":1,\"691\":7,\"692\":2}}],[\"patch\",{\"0\":{\"688\":1},\"1\":{\"30\":1,\"42\":1,\"47\":1,\"668\":1,\"669\":2,\"675\":8,\"677\":1,\"678\":1,\"683\":2,\"685\":5,\"688\":1,\"692\":2,\"698\":1,\"702\":1}}],[\"parallel\",{\"1\":{\"831\":1}}],[\"parameters\",{\"1\":{\"1063\":2}}],[\"param\",{\"1\":{\"270\":3,\"271\":2,\"272\":27,\"273\":6,\"274\":8,\"282\":2,\"286\":3,\"288\":8,\"289\":3,\"291\":2,\"292\":7,\"293\":5,\"295\":3,\"306\":4,\"315\":4,\"317\":3,\"318\":10,\"319\":6,\"320\":5,\"325\":5,\"326\":7,\"327\":3,\"338\":4,\"348\":6,\"349\":12,\"352\":6,\"357\":6,\"360\":3,\"361\":6,\"373\":8,\"374\":3,\"375\":12,\"385\":12,\"395\":3,\"396\":3,\"739\":2}}],[\"paramsserializer\",{\"0\":{\"46\":1},\"1\":{\"46\":2}}],[\"params\",{\"0\":{\"45\":1,\"430\":1},\"1\":{\"20\":2,\"21\":1,\"45\":2,\"46\":3,\"430\":10,\"431\":1,\"432\":2,\"720\":1,\"721\":2,\"723\":1,\"728\":2,\"755\":2,\"756\":4,\"1308\":2}}],[\"parsefloat\",{\"1\":{\"1181\":1,\"1250\":1}}],[\"parseint\",{\"1\":{\"1181\":1,\"1250\":1,\"1252\":1,\"1376\":2}}],[\"parseattrsstring\",{\"1\":{\"662\":2}}],[\"parsearray\",{\"0\":{\"651\":1},\"1\":{\"651\":5,\"657\":3}}],[\"parse函数\",{\"1\":{\"661\":1}}],[\"parsetemplatetotokens\",{\"0\":{\"654\":1},\"1\":{\"647\":4,\"648\":2,\"649\":1,\"653\":3,\"654\":1}}],[\"parsetemplate\",{\"1\":{\"644\":1}}],[\"parsepath\",{\"1\":{\"607\":3,\"609\":2,\"616\":2,\"626\":2}}],[\"parseroptions\",{\"1\":{\"578\":1}}],[\"parse\",{\"1\":{\"451\":1,\"661\":4,\"662\":1,\"823\":1}}],[\"parentelm\",{\"1\":{\"683\":7,\"691\":7}}],[\"parentnode\",{\"1\":{\"675\":2,\"683\":2,\"688\":2,\"1088\":1,\"1094\":1}}],[\"parent组件\",{\"1\":{\"515\":1}}],[\"parentindex\",{\"1\":{\"392\":4}}],[\"parentinstance\",{\"1\":{\"327\":2,\"347\":2}}],[\"parentbubble\",{\"1\":{\"301\":2}}],[\"parentcapture\",{\"1\":{\"292\":1,\"301\":2}}],[\"parentfiber\",{\"1\":{\"274\":7,\"326\":7,\"349\":10,\"375\":16,\"385\":19}}],[\"parent\",{\"0\":{\"110\":1},\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":2,\"109\":1,\"110\":1,\"112\":3,\"271\":5,\"273\":5,\"274\":16,\"316\":9,\"320\":3,\"325\":3,\"326\":16,\"327\":4,\"349\":25,\"375\":25,\"385\":25,\"392\":5,\"510\":1,\"1290\":2}}],[\"passiveeffect\",{\"1\":{\"373\":3,\"383\":1}}],[\"passive\",{\"1\":{\"371\":1,\"372\":1,\"373\":2,\"374\":3,\"375\":6,\"381\":1,\"382\":1,\"383\":2,\"384\":2,\"385\":6,\"396\":3,\"471\":1}}],[\"pass\",{\"1\":{\"28\":2}}],[\"password=admin\",{\"1\":{\"22\":1}}],[\"password\",{\"1\":{\"20\":1,\"21\":1,\"1057\":1,\"1164\":3}}],[\"行的任务叫做同步任务\",{\"1\":{\"1076\":1}}],[\"行为=行为动作\",{\"1\":{\"1028\":1}}],[\"行为写到\",{\"1\":{\"1028\":1}}],[\"行为相分离\",{\"1\":{\"1028\":1}}],[\"行为\",{\"1\":{\"1028\":1}}],[\"行间距=上间距+文本高度+下间距\",{\"1\":{\"893\":1}}],[\"行间距\",{\"0\":{\"893\":1}}],[\"行间距等\",{\"1\":{\"888\":1}}],[\"行高可以跟单位也可以不跟单位\",{\"1\":{\"931\":1}}],[\"行高的继承性\",{\"1\":{\"931\":1}}],[\"行高\",{\"1\":{\"878\":1,\"893\":1}}],[\"行内样式\",{\"1\":{\"932\":1}}],[\"行内样式表\",{\"0\":{\"867\":1},\"1\":{\"865\":1,\"868\":1}}],[\"行内\",{\"0\":{\"924\":1},\"1\":{\"1235\":1}}],[\"行内块\",{\"1\":{\"878\":1}}],[\"行内块元素转换\",{\"1\":{\"879\":1}}],[\"行内块元素\",{\"0\":{\"878\":1},\"1\":{\"878\":1,\"924\":1}}],[\"行内元素添加绝对或固定定位\",{\"1\":{\"998\":1}}],[\"行内元素同理\",{\"1\":{\"978\":1}}],[\"行内元素按照顺序\",{\"1\":{\"975\":1}}],[\"行内元素为了照顾兼容性\",{\"1\":{\"972\":1}}],[\"行内元素或行内块元素给其父元素添加\",{\"1\":{\"970\":1}}],[\"行内元素转换\",{\"1\":{\"879\":1}}],[\"行内元素特点\",{\"1\":{\"878\":2}}],[\"行内元素只能容纳文本或其他行内元素\",{\"1\":{\"877\":1}}],[\"行内元素\",{\"0\":{\"877\":1},\"1\":{\"878\":1}}],[\"行内式\",{\"1\":{\"865\":1}}],[\"行\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"927\":1}}],[\"描述字符范围\",{\"0\":{\"1382\":1}}],[\"描述功能\",{\"0\":{\"1381\":1}}],[\"描述每一个项目\",{\"1\":{\"1054\":1}}],[\"描述信息\",{\"1\":{\"769\":1,\"770\":1,\"771\":1}}],[\"描述具体的第三轮遍历\",{\"1\":{\"358\":1}}],[\"描述\",{\"0\":{\"142\":1,\"147\":1,\"152\":1},\"1\":{\"7\":1,\"8\":1,\"886\":1,\"894\":1,\"895\":1,\"896\":1,\"897\":1,\"898\":1,\"899\":1,\"900\":1,\"912\":1,\"913\":1,\"914\":1,\"924\":1,\"1021\":1,\"1048\":1,\"1057\":2,\"1065\":2,\"1067\":2,\"1094\":1,\"1152\":1,\"1171\":1,\"1286\":1,\"1287\":1,\"1289\":1,\"1290\":1,\"1367\":1,\"1369\":1,\"1370\":1,\"1376\":3,\"1381\":1,\"1384\":1}}],[\"h5\",{\"1\":{\"1312\":1}}],[\"hyper\",{\"1\":{\"1026\":1}}],[\"hypertext\",{\"1\":{\"6\":1}}],[\"h4>\",{\"1\":{\"715\":1,\"749\":1}}],[\"h2\",{\"1\":{\"675\":1}}],[\"h2>\",{\"1\":{\"508\":1,\"520\":2,\"560\":1,\"721\":1}}],[\"h3\",{\"1\":{\"666\":1,\"857\":1,\"1014\":1}}],[\"h3>\",{\"1\":{\"557\":1,\"560\":1,\"567\":1,\"568\":2,\"661\":1,\"666\":1,\"715\":1}}],[\"h函数必须传入3个参数\",{\"1\":{\"674\":1,\"686\":1}}],[\"h函数\",{\"1\":{\"660\":1}}],[\"hd\",{\"1\":{\"640\":1,\"641\":1,\"653\":1}}],[\"href=\",{\"1\":{\"667\":1,\"868\":1,\"919\":1,\"920\":1,\"964\":1,\"1042\":1,\"1043\":3}}],[\"href\",{\"1\":{\"444\":1,\"446\":2,\"664\":1,\"667\":2,\"668\":1,\"669\":1,\"692\":1,\"868\":1,\"1042\":2,\"1043\":1,\"1065\":1}}],[\"h\",{\"0\":{\"670\":1,\"674\":1,\"686\":1},\"1\":{\"407\":2,\"424\":2,\"515\":2,\"516\":1,\"518\":3,\"520\":1,\"534\":1,\"667\":2,\"668\":2,\"669\":2,\"670\":4,\"674\":30,\"675\":13,\"676\":26,\"685\":24,\"686\":5,\"692\":3,\"702\":1,\"912\":2,\"913\":2,\"1016\":1}}],[\"h1~h6\",{\"1\":{\"876\":2}}],[\"h1\",{\"1\":{\"248\":2,\"249\":1,\"252\":1,\"272\":1,\"534\":1,\"675\":1}}],[\"h1><p>text<\",{\"1\":{\"1391\":1}}],[\"h1>\",{\"1\":{\"122\":1,\"225\":1,\"227\":1,\"228\":1,\"229\":1,\"231\":1,\"242\":1,\"245\":1,\"248\":2,\"253\":1,\"269\":1,\"271\":1,\"272\":1,\"301\":1,\"560\":1,\"644\":1,\"774\":1,\"789\":2,\"804\":1,\"808\":1,\"1391\":1}}],[\"hadobservers\",{\"1\":{\"842\":1,\"843\":1}}],[\"handelfilterelement\",{\"1\":{\"731\":1,\"732\":3}}],[\"handelfilterrouter\",{\"1\":{\"731\":4}}],[\"handelend\",{\"1\":{\"731\":1,\"732\":3}}],[\"handlesidemenu\",{\"1\":{\"731\":2}}],[\"handleaddparams\",{\"1\":{\"721\":2}}],[\"handlenativeclickevent\",{\"1\":{\"563\":1}}],[\"handleinput\",{\"1\":{\"512\":2}}],[\"handleroutebefore=\",{\"1\":{\"737\":1}}],[\"handleroutebefore\",{\"1\":{\"737\":3,\"738\":3}}],[\"handler对应cb回调函数\",{\"1\":{\"625\":1}}],[\"handler取对象中的handler函数\",{\"1\":{\"625\":1}}],[\"handlerchange\",{\"1\":{\"511\":4}}],[\"handler\",{\"1\":{\"451\":6,\"607\":1,\"624\":5,\"625\":13,\"628\":9}}],[\"handlers\",{\"1\":{\"70\":4}}],[\"handlecomponentevent\",{\"1\":{\"563\":1}}],[\"handlechange\",{\"1\":{\"234\":3}}],[\"handleclick\",{\"1\":{\"108\":2,\"109\":2,\"113\":1,\"245\":4}}],[\"handlemousemove\",{\"1\":{\"227\":2,\"228\":3,\"229\":2}}],[\"handletabselect\",{\"1\":{\"208\":2}}],[\"handledata\",{\"1\":{\"150\":7}}],[\"handleevent\",{\"1\":{\"114\":3}}],[\"handle\",{\"1\":{\"26\":1,\"719\":1}}],[\"happy\",{\"1\":{\"631\":1}}],[\"halflength\",{\"1\":{\"392\":2}}],[\"hasclass\",{\"1\":{\"1290\":2}}],[\"hasinstance\",{\"1\":{\"1171\":1}}],[\"hasattribute\",{\"1\":{\"1096\":1}}],[\"has\",{\"1\":{\"627\":1,\"635\":3,\"1178\":3,\"1179\":1}}],[\"hash\",{\"1\":{\"439\":7,\"711\":1,\"722\":1,\"727\":1,\"1065\":1}}],[\"hasmorework\",{\"1\":{\"395\":3}}],[\"haseffect\",{\"1\":{\"371\":1,\"373\":1,\"375\":1,\"381\":1,\"383\":1,\"385\":1}}],[\"haseagerstate\",{\"1\":{\"315\":1,\"338\":3,\"373\":3}}],[\"haserror\",{\"1\":{\"242\":3}}],[\"hasvalidref\",{\"1\":{\"252\":2}}],[\"hasvalidkey\",{\"1\":{\"252\":2}}],[\"hasownproperty\",{\"0\":{\"1402\":1},\"1\":{\"252\":4,\"273\":1,\"293\":3,\"322\":8,\"328\":8,\"674\":2,\"686\":2,\"1274\":2,\"1402\":6,\"1403\":1}}],[\"hide\",{\"1\":{\"1303\":1}}],[\"hidden=\",{\"1\":{\"920\":1}}],[\"hidden\",{\"1\":{\"112\":1,\"909\":2,\"914\":4,\"920\":1,\"926\":1,\"927\":1,\"971\":1,\"985\":2,\"1057\":1}}],[\"hi\",{\"1\":{\"1264\":2}}],[\"highlight\",{\"1\":{\"1013\":2}}],[\"higherordercomponent\",{\"1\":{\"233\":1}}],[\"hiragino\",{\"1\":{\"882\":1}}],[\"history=\",{\"1\":{\"728\":1,\"822\":1}}],[\"history\",{\"0\":{\"440\":1,\"1067\":1},\"1\":{\"439\":2,\"822\":6,\"823\":9,\"1067\":3}}],[\"hey\",{\"1\":{\"1264\":2}}],[\"helvetica\",{\"1\":{\"960\":1}}],[\"hellosaga\",{\"1\":{\"760\":2}}],[\"hello你好\",{\"1\":{\"534\":1}}],[\"helloworld\",{\"1\":{\"511\":7,\"512\":5,\"513\":3,\"514\":3,\"515\":3,\"516\":3,\"517\":4,\"518\":3,\"520\":3,\"521\":4}}],[\"helloworld>\",{\"1\":{\"511\":2,\"512\":1,\"513\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1}}],[\"hello>\",{\"1\":{\"487\":1}}],[\"hello<span\",{\"1\":{\"248\":2,\"253\":1,\"269\":1,\"271\":1,\"272\":1}}],[\"hello\",{\"1\":{\"107\":2,\"137\":2,\"248\":2,\"272\":1,\"301\":1,\"427\":2,\"448\":1,\"497\":6,\"500\":2,\"508\":1,\"534\":1,\"557\":2,\"662\":1,\"760\":2,\"1328\":1,\"1347\":2}}],[\"herokuapp\",{\"1\":{\"788\":1}}],[\"heap\",{\"1\":{\"392\":27}}],[\"head><body><\",{\"1\":{\"1385\":3}}],[\"head>\",{\"1\":{\"1030\":1,\"1031\":1}}],[\"heads\",{\"1\":{\"1013\":2}}],[\"heading\",{\"1\":{\"849\":1}}],[\"header\",{\"1\":{\"63\":1,\"873\":1}}],[\"headers\",{\"0\":{\"34\":1,\"44\":1},\"1\":{\"12\":1,\"17\":1,\"19\":1,\"20\":2,\"21\":2,\"22\":1,\"27\":1,\"42\":1,\"44\":1,\"51\":1,\"69\":1,\"72\":1}}],[\"head\",{\"1\":{\"30\":1,\"1031\":1,\"1048\":1,\"1080\":1}}],[\"height\",{\"0\":{\"893\":1},\"1\":{\"227\":1,\"228\":1,\"229\":1,\"543\":2,\"732\":1,\"880\":2,\"887\":1,\"920\":1,\"924\":1,\"938\":1,\"960\":2,\"965\":1,\"969\":1,\"973\":3,\"985\":1,\"1000\":1,\"1015\":9,\"1016\":3,\"1021\":1,\"1044\":2,\"1072\":1,\"1324\":2}}],[\"how\",{\"1\":{\"1386\":3}}],[\"hola\",{\"1\":{\"1264\":1}}],[\"hover\",{\"1\":{\"873\":4,\"1305\":1}}],[\"hobbies\",{\"1\":{\"641\":5,\"653\":5}}],[\"homestore\",{\"1\":{\"803\":1,\"804\":2,\"806\":1,\"807\":3,\"808\":2}}],[\"homestore=\",{\"1\":{\"803\":1}}],[\"home是一级路由\",{\"1\":{\"712\":1}}],[\"home\",{\"1\":{\"424\":4,\"426\":3,\"427\":2,\"429\":3,\"430\":4,\"437\":3,\"511\":1,\"512\":1,\"517\":1,\"521\":1,\"709\":5,\"712\":4,\"714\":2,\"715\":1,\"730\":1,\"731\":2,\"807\":1}}],[\"hooklayout\",{\"1\":{\"383\":3,\"385\":3}}],[\"hookflags\",{\"1\":{\"373\":5,\"375\":4,\"385\":6}}],[\"hookpassive\",{\"1\":{\"373\":3,\"375\":3,\"383\":1,\"385\":3}}],[\"hookhaseffect\",{\"1\":{\"373\":3,\"375\":3,\"383\":1,\"385\":5}}],[\"hook环链\",{\"1\":{\"306\":1}}],[\"hook实现了祖孙组件通信\",{\"1\":{\"192\":1}}],[\"hook可以在函数组件中存储\",{\"1\":{\"188\":1}}],[\"hook看作如下三个函数与render\",{\"1\":{\"186\":1}}],[\"hook允许函数组件能执行副作用操作\",{\"1\":{\"184\":1}}],[\"hook\",{\"0\":{\"174\":1,\"179\":2,\"183\":2,\"187\":1,\"188\":2,\"191\":1,\"192\":2,\"193\":1,\"196\":1,\"198\":1,\"543\":1},\"1\":{\"107\":1,\"174\":1,\"176\":3,\"177\":2,\"178\":5,\"179\":1,\"198\":4,\"199\":1,\"204\":1,\"209\":1,\"246\":1,\"306\":7,\"313\":2,\"315\":11,\"323\":4,\"338\":15,\"365\":3,\"366\":3,\"373\":20,\"543\":2,\"708\":1}}],[\"hooksdispatcheronupdateindev\",{\"1\":{\"315\":2,\"338\":2,\"373\":2,\"383\":1}}],[\"hooksdispatcheronmountindev\",{\"1\":{\"306\":2,\"315\":2,\"338\":2,\"373\":2,\"383\":1}}],[\"hooks\",{\"0\":{\"88\":1,\"89\":1,\"303\":1,\"332\":1,\"364\":1,\"717\":1},\"1\":{\"84\":1,\"89\":1,\"303\":1,\"323\":2,\"543\":1,\"817\":1,\"824\":1}}],[\"hoc\",{\"0\":{\"86\":1},\"1\":{\"84\":1,\"86\":1,\"89\":1,\"232\":1,\"233\":1,\"234\":2,\"235\":3,\"728\":1}}],[\"hostname\",{\"1\":{\"1065\":1}}],[\"hostparent\",{\"1\":{\"349\":6,\"375\":6,\"385\":6}}],[\"hostinst\",{\"1\":{\"289\":3}}],[\"hostcontext\",{\"1\":{\"273\":1,\"327\":1}}],[\"hostcomponent\",{\"1\":{\"272\":5,\"273\":3,\"274\":5,\"290\":1,\"298\":1,\"318\":2,\"320\":3,\"325\":3,\"326\":6,\"330\":1,\"349\":8,\"360\":3,\"374\":3,\"375\":8,\"385\":8,\"396\":3}}],[\"hosttext\",{\"1\":{\"272\":4,\"273\":3,\"274\":3,\"318\":2,\"319\":2,\"320\":3,\"325\":3,\"326\":4,\"348\":2,\"349\":5,\"352\":2,\"357\":2,\"360\":3,\"361\":3,\"374\":3,\"375\":5,\"385\":5,\"396\":3}}],[\"hostroot存的是待渲染元素\",{\"1\":{\"270\":1,\"272\":1}}],[\"hostroot\",{\"1\":{\"270\":2,\"271\":2,\"272\":6,\"273\":2,\"274\":3,\"316\":3,\"318\":2,\"320\":2,\"323\":1,\"325\":2,\"326\":4,\"349\":5,\"360\":3,\"374\":3,\"375\":7,\"385\":8,\"396\":3}}],[\"hostroot指的是根节点div\",{\"1\":{\"270\":1,\"271\":1}}],[\"hostrootfiber\",{\"1\":{\"270\":1,\"271\":1,\"316\":1}}],[\"host\",{\"1\":{\"7\":1,\"28\":1,\"574\":2,\"1065\":1,\"1164\":3}}],[\"htm\",{\"1\":{\"1025\":1}}],[\"html中完整的表单通常由表单域\",{\"1\":{\"1055\":1}}],[\"html中创建\",{\"1\":{\"675\":1}}],[\"html5\",{\"1\":{\"1032\":1,\"1142\":1}}],[\"html5新特性\",{\"0\":{\"1018\":1},\"1\":{\"1058\":1}}],[\"html基础\",{\"0\":{\"1023\":1},\"1\":{\"1058\":1}}],[\"htmlelement\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"html>标签之前\",{\"1\":{\"1032\":1}}],[\"html>\",{\"1\":{\"8\":1,\"1030\":1,\"1031\":1,\"1032\":1,\"1385\":4}}],[\"html\",{\"0\":{\"853\":1,\"937\":1,\"1024\":1,\"1026\":1,\"1029\":1,\"1031\":1,\"1058\":1,\"1080\":1,\"1315\":1},\"1\":{\"8\":1,\"26\":2,\"77\":1,\"112\":1,\"122\":3,\"123\":4,\"129\":1,\"138\":1,\"442\":1,\"474\":7,\"486\":1,\"497\":1,\"502\":1,\"527\":1,\"528\":1,\"567\":1,\"575\":1,\"595\":1,\"666\":1,\"701\":1,\"853\":1,\"854\":4,\"855\":1,\"861\":1,\"863\":3,\"866\":2,\"868\":2,\"875\":1,\"898\":1,\"936\":1,\"940\":2,\"963\":3,\"966\":7,\"968\":2,\"1001\":1,\"1016\":1,\"1025\":4,\"1026\":1,\"1027\":1,\"1028\":2,\"1029\":5,\"1031\":10,\"1032\":2,\"1034\":1,\"1035\":1,\"1040\":2,\"1044\":1,\"1045\":3,\"1048\":1,\"1052\":1,\"1058\":1,\"1077\":1,\"1078\":1,\"1079\":1,\"1082\":1,\"1084\":2,\"1085\":1,\"1090\":1,\"1091\":2,\"1093\":2,\"1117\":1,\"1262\":1,\"1315\":2,\"1322\":1,\"1385\":1}}],[\"htc\",{\"1\":{\"952\":1}}],[\"httpsconfig\",{\"1\":{\"574\":2}}],[\"https\",{\"1\":{\"62\":1,\"79\":2,\"96\":1,\"249\":1,\"255\":1,\"275\":1,\"302\":1,\"331\":1,\"340\":1,\"363\":2,\"386\":1,\"397\":1,\"400\":2,\"492\":1,\"527\":1,\"528\":2,\"549\":2,\"574\":2,\"621\":1,\"628\":1,\"631\":1,\"636\":1,\"658\":1,\"663\":1,\"665\":1,\"667\":3,\"668\":1,\"669\":1,\"692\":1,\"777\":2,\"788\":1,\"790\":2,\"827\":2,\"849\":1,\"1043\":1,\"1057\":2,\"1207\":1}}],[\"httpsagent\",{\"0\":{\"62\":1}}],[\"httpagent\",{\"0\":{\"62\":1}}],[\"http\",{\"0\":{\"6\":1},\"1\":{\"7\":1,\"8\":1,\"9\":1,\"17\":1,\"20\":1,\"22\":1,\"26\":2,\"28\":2,\"29\":1,\"51\":1,\"55\":1,\"59\":1,\"62\":1,\"63\":1,\"68\":1,\"69\":1,\"70\":1,\"72\":1,\"103\":1,\"439\":1,\"495\":1,\"574\":1,\"721\":1,\"1066\":2}}],[\"不严谨之处\",{\"1\":{\"1452\":1}}],[\"不调用函数\",{\"1\":{\"1451\":1}}],[\"不建议使用\",{\"1\":{\"1422\":1}}],[\"不异步加载\",{\"1\":{\"1419\":1}}],[\"不\",{\"1\":{\"1413\":1}}],[\"不解释\",{\"1\":{\"1413\":1}}],[\"不混淆小数点和对象的点运算符\",{\"1\":{\"1413\":1}}],[\"不加括号\",{\"1\":{\"1413\":1}}],[\"不加粗是\",{\"1\":{\"887\":1}}],[\"不报错\",{\"1\":{\"1406\":1}}],[\"不仅能匹配出每个变量声明\",{\"1\":{\"1390\":1}}],[\"不强制要求遵守标识符命名规范\",{\"1\":{\"1341\":1}}],[\"不冲突属性会合并\",{\"1\":{\"1332\":1}}],[\"不必等到所有外部资源加载完成\",{\"1\":{\"1282\":1}}],[\"不必担心它的运行环境\",{\"1\":{\"1231\":1}}],[\"不兼容\",{\"1\":{\"1281\":2}}],[\"不全等\",{\"1\":{\"1261\":2}}],[\"不等于任何值\",{\"1\":{\"1261\":1}}],[\"不等于\",{\"1\":{\"1261\":1}}],[\"不方便维护\",{\"1\":{\"1235\":1}}],[\"不方便维护及扩展\",{\"1\":{\"1003\":1}}],[\"不像\",{\"1\":{\"1231\":1}}],[\"不占位\",{\"1\":{\"1225\":1}}],[\"不占有位置\",{\"1\":{\"999\":2}}],[\"不限成功失败\",{\"1\":{\"1225\":1}}],[\"不含边框\",{\"1\":{\"1116\":2}}],[\"不带\",{\"1\":{\"1110\":1}}],[\"不带有任何业务逻辑\",{\"1\":{\"752\":1}}],[\"不包括\",{\"1\":{\"1376\":1}}],[\"不包括自己本身\",{\"1\":{\"1290\":1}}],[\"不包括标签\",{\"1\":{\"1091\":1}}],[\"不包含结束索引\",{\"1\":{\"1359\":1}}],[\"不包含逻辑代码\",{\"1\":{\"581\":1}}],[\"不包含孙子组件\",{\"1\":{\"516\":1}}],[\"不包含任何破坏性改动\",{\"1\":{\"176\":1}}],[\"不马上执行\",{\"1\":{\"1063\":1}}],[\"不合并边框\",{\"1\":{\"1048\":1}}],[\"不写也会自动生成\",{\"1\":{\"1431\":1}}],[\"不写\",{\"1\":{\"1345\":1}}],[\"不写该属性\",{\"1\":{\"1048\":1}}],[\"不写element属性\",{\"1\":{\"712\":1}}],[\"不插入段落的间距\",{\"1\":{\"1036\":1}}],[\"不利于复用\",{\"1\":{\"1003\":1}}],[\"不利用代码压缩和优化\",{\"1\":{\"89\":1}}],[\"不随滚动条滚动\",{\"1\":{\"994\":1}}],[\"不脱标\",{\"1\":{\"992\":1}}],[\"不允许参数重名\",{\"1\":{\"1454\":1}}],[\"不允许删除变量或者对象或者函数\",{\"1\":{\"1454\":1}}],[\"不允许右侧有浮动元素\",{\"1\":{\"984\":1}}],[\"不允许左侧有浮动元素\",{\"1\":{\"984\":1}}],[\"不允许用户自行缩放\",{\"1\":{\"950\":1}}],[\"不受固定像素的限制\",{\"1\":{\"960\":1}}],[\"不超出则不显示\",{\"1\":{\"914\":1}}],[\"不显示超过对象尺寸的内容\",{\"1\":{\"914\":1}}],[\"不剪切内容也不添加滚动条\",{\"1\":{\"914\":1}}],[\"不量边框\",{\"1\":{\"909\":1}}],[\"不定义边框指定的一面\",{\"1\":{\"909\":1}}],[\"不常用\",{\"1\":{\"891\":1}}],[\"不倾斜是\",{\"1\":{\"887\":1}}],[\"不得重复\",{\"1\":{\"863\":1}}],[\"不添加可以获取\",{\"1\":{\"823\":1}}],[\"不存在变量提升\",{\"1\":{\"1158\":1}}],[\"不存在重复\",{\"1\":{\"816\":1}}],[\"不存在则将\",{\"1\":{\"71\":1}}],[\"不用获取可以直接使用\",{\"1\":{\"1079\":1}}],[\"不用等待2秒\",{\"1\":{\"765\":1}}],[\"不用指明监视哪个属性\",{\"1\":{\"541\":1}}],[\"不负责\",{\"1\":{\"752\":1}}],[\"不符合奇数要求\",{\"1\":{\"749\":1}}],[\"不影响原先的类名\",{\"1\":{\"1301\":1}}],[\"不影响原串\",{\"1\":{\"1202\":1}}],[\"不影响页面加载速度\",{\"1\":{\"1279\":1}}],[\"不影响作用域链\",{\"1\":{\"1158\":1}}],[\"不影响父盒子外面的其他盒子\",{\"1\":{\"984\":1}}],[\"不影响外部的值\",{\"1\":{\"748\":1}}],[\"不影响渲染进程渲染\",{\"1\":{\"259\":1}}],[\"不局限于\",{\"1\":{\"741\":1}}],[\"不想用懒加载的直接使用\",{\"1\":{\"739\":1}}],[\"不跨层级比较\",{\"1\":{\"692\":1}}],[\"不触发精细化比较\",{\"1\":{\"672\":1}}],[\"不循环\",{\"0\":{\"642\":1}}],[\"不过优点是简单和兼容\",{\"1\":{\"1006\":1}}],[\"不过因为本质上还是使用的字体\",{\"1\":{\"919\":1}}],[\"不过最终\",{\"1\":{\"841\":1}}],[\"不过每次请求时都为\",{\"1\":{\"829\":1}}],[\"不过与普通的\",{\"1\":{\"636\":1}}],[\"不过\",{\"1\":{\"618\":1}}],[\"不过多赘述\",{\"1\":{\"571\":1}}],[\"不就能完成在数据变化时更新页面了吗\",{\"1\":{\"604\":1}}],[\"不一定是定义该属性的对象\",{\"1\":{\"601\":1}}],[\"不一定能完成\",{\"1\":{\"452\":1}}],[\"不够\",{\"1\":{\"597\":1}}],[\"不声明且不带\",{\"1\":{\"583\":1}}],[\"不在继续查找\",{\"1\":{\"1199\":1}}],[\"不在\",{\"1\":{\"576\":1}}],[\"不希望数据被修改时\",{\"1\":{\"555\":1}}],[\"不进行跨层比较\",{\"1\":{\"672\":1}}],[\"不进行对象的响应式处理\",{\"1\":{\"554\":1}}],[\"不进入复用逻辑\",{\"1\":{\"92\":1}}],[\"不管该类名是否存在\",{\"1\":{\"1102\":1}}],[\"不管原先是什么模式的元素\",{\"1\":{\"978\":1}}],[\"不管父元素权重多高\",{\"1\":{\"932\":1}}],[\"不管超出内容否\",{\"1\":{\"914\":1}}],[\"不管是父子组件\",{\"1\":{\"518\":1}}],[\"不管组件嵌套多深都可以直接拿来用\",{\"1\":{\"517\":1}}],[\"不管你修改多少次数据\",{\"1\":{\"505\":1}}],[\"不管要不要重新执行\",{\"1\":{\"373\":1}}],[\"不止使用\",{\"1\":{\"505\":1}}],[\"不推荐使用\",{\"1\":{\"867\":1,\"1118\":1,\"1235\":1}}],[\"不推荐\",{\"1\":{\"472\":1}}],[\"不可枚举属性\",{\"1\":{\"1405\":1}}],[\"不可赋值\",{\"1\":{\"1108\":1}}],[\"不可以直接设置宽度高度\",{\"1\":{\"878\":1}}],[\"不可写的属性\",{\"1\":{\"600\":1}}],[\"不可删除的属性\",{\"1\":{\"468\":1}}],[\"不可修改\",{\"1\":{\"468\":1}}],[\"不可变数据操作\",{\"0\":{\"103\":1}}],[\"不破坏\",{\"1\":{\"457\":1}}],[\"不展示的\",{\"1\":{\"457\":2}}],[\"不具备缓存功能\",{\"1\":{\"450\":1}}],[\"不变时\",{\"1\":{\"450\":1}}],[\"不美观\",{\"1\":{\"439\":1}}],[\"不被销毁\",{\"1\":{\"433\":1}}],[\"不借助<router\",{\"1\":{\"432\":1}}],[\"不直接删除自己\",{\"1\":{\"349\":1,\"375\":1,\"385\":1}}],[\"不再进行以下步骤\",{\"1\":{\"1413\":1}}],[\"不再进行后续步骤\",{\"1\":{\"1413\":2}}],[\"不再更新\",{\"1\":{\"1281\":2}}],[\"不再需要明确地校验当前属性的状态\",{\"1\":{\"1228\":1}}],[\"不再需要引入redux\",{\"1\":{\"790\":1}}],[\"不再认为滚动条是\",{\"1\":{\"1115\":1}}],[\"不再受单色限制\",{\"1\":{\"920\":1}}],[\"不再占有原来的位置\",{\"1\":{\"914\":1}}],[\"不再描述源码\",{\"1\":{\"697\":1}}],[\"不再将html结构看做字符串\",{\"1\":{\"695\":1}}],[\"不再调用\",{\"1\":{\"636\":1}}],[\"不再由实例调用方法添加依赖\",{\"1\":{\"635\":1}}],[\"不再赘述\",{\"1\":{\"330\":1}}],[\"不再判断children\",{\"1\":{\"272\":1,\"318\":1}}],[\"不为null说明在头部执行新增插入\",{\"1\":{\"683\":1,\"691\":1}}],[\"不为\",{\"1\":{\"323\":1,\"330\":1,\"602\":1,\"604\":1,\"609\":1,\"618\":1}}],[\"不为空且\",{\"1\":{\"323\":1}}],[\"不为空\",{\"1\":{\"272\":1}}],[\"不需要再次循环\",{\"1\":{\"1288\":1}}],[\"不需要重写\",{\"1\":{\"1034\":1}}],[\"不需要重新渲染\",{\"1\":{\"162\":1}}],[\"不需要转换元素显示就可以直接给宽度和高度\",{\"1\":{\"978\":1}}],[\"不需要始终返回新数据\",{\"1\":{\"793\":1}}],[\"不需要\",{\"1\":{\"451\":2,\"536\":1,\"550\":1,\"1142\":1}}],[\"不需要添加flags\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"不接收\",{\"1\":{\"238\":1}}],[\"不关心数据的使用方式或原因\",{\"1\":{\"234\":1}}],[\"不会调用函数\",{\"1\":{\"1451\":1}}],[\"不会出现在文本框中\",{\"1\":{\"1151\":1}}],[\"不会冒泡\",{\"1\":{\"1126\":1}}],[\"不会报错而是返回\",{\"1\":{\"1352\":1}}],[\"不会报错\",{\"1\":{\"1101\":1,\"1349\":1}}],[\"不会导致页面全部重绘\",{\"1\":{\"1095\":1}}],[\"不会生成历史记录\",{\"1\":{\"1065\":1}}],[\"不会影响原变量\",{\"1\":{\"1249\":1}}],[\"不会影响其他的兄弟盒子\",{\"1\":{\"997\":1}}],[\"不会影响前面的标准流\",{\"1\":{\"980\":1}}],[\"不会占有位置\",{\"1\":{\"997\":1}}],[\"不会有缝隙\",{\"1\":{\"978\":1}}],[\"不会超过\",{\"1\":{\"973\":1}}],[\"不会撑开盒子大小\",{\"1\":{\"969\":1}}],[\"不会层叠\",{\"1\":{\"930\":1}}],[\"不会暂停\",{\"1\":{\"765\":1}}],[\"不会引起页面更新\",{\"1\":{\"556\":1}}],[\"不会\",{\"1\":{\"474\":2}}],[\"不会阻塞浏览器渲染\",{\"1\":{\"376\":1}}],[\"不会标记为紧急更新\",{\"1\":{\"208\":1}}],[\"不会自动刷新\",{\"0\":{\"14\":1}}],[\"不同类型数据互相运算\",{\"1\":{\"1414\":1}}],[\"不同类型的\",{\"1\":{\"272\":1}}],[\"不同编程语言对正则表达式语法的支持不尽相同\",{\"1\":{\"1380\":1}}],[\"不同于普通对象使用字符串作为属性名操作\",{\"1\":{\"1351\":1}}],[\"不同于原生\",{\"1\":{\"1282\":1}}],[\"不同时执行的代码\",{\"1\":{\"1269\":1}}],[\"不同浏览器实现\",{\"1\":{\"1233\":1}}],[\"不同浏览器的不同实现方式\",{\"1\":{\"1233\":1}}],[\"不同浏览器内容不同\",{\"1\":{\"1064\":1}}],[\"不同浏览器可能默认显示的字号大小不一致\",{\"1\":{\"883\":1}}],[\"不同屏幕下\",{\"1\":{\"966\":1}}],[\"不同函数分管不同属性最终合并\",{\"1\":{\"750\":1}}],[\"不同之处在于\",{\"1\":{\"636\":1}}],[\"不同则直接结束本轮循环\",{\"1\":{\"354\":1}}],[\"不同的命名空间\",{\"1\":{\"750\":1}}],[\"不同的\",{\"1\":{\"750\":1}}],[\"不同的老节点推入\",{\"1\":{\"355\":1}}],[\"不同的类型对应不同的元素\",{\"1\":{\"354\":1}}],[\"不同的是它会将符合条件的元素封装到一个数组中返回\",{\"1\":{\"1092\":1}}],[\"不同的是\",{\"1\":{\"196\":1,\"963\":1,\"1091\":1}}],[\"不同层级不对比\",{\"1\":{\"354\":1}}],[\"不同\",{\"0\":{\"343\":1,\"350\":1},\"1\":{\"343\":1,\"350\":1,\"355\":1,\"455\":1}}],[\"不同点在于接口中的所有方法和属性都是没有实值的\",{\"1\":{\"580\":1}}],[\"不同点\",{\"1\":{\"75\":1}}],[\"不要\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"不要拼接字符串\",{\"1\":{\"1095\":1}}],[\"不要设置上下内外边距\",{\"1\":{\"972\":1}}],[\"不要默认太小\",{\"1\":{\"883\":1}}],[\"不要使用纯数字\",{\"1\":{\"862\":1}}],[\"不要写\",{\"1\":{\"487\":1}}],[\"不要写引号\",{\"1\":{\"123\":1}}],[\"不要用\",{\"1\":{\"475\":1}}],[\"不要用在用户提交的内容上\",{\"1\":{\"474\":1}}],[\"不要用箭头函数\",{\"1\":{\"470\":1}}],[\"不要在\",{\"1\":{\"235\":1}}],[\"不要在其他\",{\"1\":{\"178\":1}}],[\"不要在循环\",{\"1\":{\"178\":1}}],[\"不能通过对象访问\",{\"1\":{\"1437\":1}}],[\"不能省略\",{\"1\":{\"1431\":1}}],[\"不能以数字开头\",{\"1\":{\"1240\":1}}],[\"不能与其他数据进行运算\",{\"1\":{\"1168\":1}}],[\"不能作为构造实例化对象\",{\"1\":{\"1163\":1}}],[\"不能绑定多个\",{\"1\":{\"1129\":1}}],[\"不能修改\",{\"1\":{\"1111\":1}}],[\"不能写\",{\"1\":{\"1106\":1}}],[\"不能写异步代码\",{\"1\":{\"411\":1}}],[\"不能使用未定义的变量\",{\"1\":{\"1454\":1}}],[\"不能使用\",{\"1\":{\"1163\":1}}],[\"不能使用回退按钮\",{\"1\":{\"1065\":1}}],[\"不能使用边偏移\",{\"1\":{\"999\":1}}],[\"不能换行\",{\"1\":{\"926\":1}}],[\"不能随意换位置\",{\"1\":{\"887\":1}}],[\"不能颠倒顺序\",{\"1\":{\"887\":1}}],[\"不能差异化选择\",{\"1\":{\"864\":1}}],[\"不能设计差异化样式\",{\"1\":{\"861\":1}}],[\"不能有mapdispatchtoprops\",{\"1\":{\"822\":1}}],[\"不能保证ids顺序\",{\"1\":{\"816\":1}}],[\"不能影响到store里的数据\",{\"1\":{\"732\":1}}],[\"不能是\",{\"1\":{\"1240\":1}}],[\"不能是一个\",{\"1\":{\"534\":1}}],[\"不能是path\",{\"1\":{\"430\":1}}],[\"不能直接修改父组件的数据\",{\"1\":{\"510\":1}}],[\"不能直接修改或更新\",{\"1\":{\"144\":1}}],[\"不能阻塞用户的交互\",{\"1\":{\"262\":1}}],[\"不能回退\",{\"1\":{\"5\":1}}],[\"不太相关的组件之间\",{\"1\":{\"105\":1}}],[\"不支持组件的\",{\"1\":{\"487\":1}}],[\"不支持动态切换\",{\"1\":{\"455\":1}}],[\"不支持\",{\"1\":{\"103\":1,\"593\":1,\"909\":1,\"995\":1,\"1087\":1,\"1130\":1,\"1148\":1}}],[\"不满足第\",{\"1\":{\"92\":1}}],[\"不使用任何\",{\"1\":{\"752\":1}}],[\"不使用脚手架时\",{\"1\":{\"488\":1}}],[\"不使用\",{\"1\":{\"87\":1}}],[\"不传递\",{\"1\":{\"86\":1}}],[\"不总是直接操作页面真实dom\",{\"1\":{\"82\":1}}],[\"不是函数名\",{\"1\":{\"1440\":1}}],[\"不是函数说明是一个对象\",{\"1\":{\"631\":1}}],[\"不是键值\",{\"1\":{\"1401\":1}}],[\"不是构造函数\",{\"1\":{\"1368\":1}}],[\"不是一定等于\",{\"1\":{\"952\":1}}],[\"不是所有浏览器都支持\",{\"1\":{\"897\":1}}],[\"不是则执行\",{\"1\":{\"756\":1}}],[\"不是服务端渲染\",{\"1\":{\"633\":1}}],[\"不是定义一个新类型\",{\"1\":{\"580\":1}}],[\"不是每个passive都会执行\",{\"1\":{\"373\":1}}],[\"不是同一个节点\",{\"1\":{\"675\":1,\"683\":1,\"688\":1}}],[\"不是同一个\",{\"1\":{\"366\":1}}],[\"不是要插入的节点\",{\"1\":{\"274\":1,\"326\":1,\"349\":1,\"375\":1,\"385\":1}}],[\"不是第一个newfiber\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"不是\",{\"1\":{\"74\":1,\"470\":1,\"1319\":1}}],[\"不返回状态码等\",{\"1\":{\"66\":1}}],[\"不重复添加\",{\"1\":{\"627\":1}}],[\"不重复\",{\"1\":{\"14\":1}}],[\"不友好\",{\"1\":{\"5\":1}}],[\"核心文件才几十\",{\"1\":{\"1279\":1}}],[\"核心概念\",{\"0\":{\"781\":1}}],[\"核心方法\",{\"1\":{\"695\":1}}],[\"核心逻辑\",{\"0\":{\"672\":1}}],[\"核心属性\",{\"0\":{\"140\":1,\"408\":1},\"1\":{\"246\":1}}],[\"核心库\",{\"1\":{\"119\":1}}],[\"核心3\",{\"1\":{\"70\":1}}],[\"核心2\",{\"1\":{\"70\":1}}],[\"核心1\",{\"1\":{\"70\":1}}],[\"核心是为了不让开发者直接触及到原始状态\",{\"1\":{\"103\":1}}],[\"核心是\",{\"1\":{\"3\":1}}],[\"核心\",{\"0\":{\"3\":1,\"761\":1,\"967\":1},\"1\":{\"71\":1,\"468\":1,\"605\":1,\"868\":1,\"1131\":1}}],[\"j\",{\"1\":{\"1016\":1,\"1258\":2}}],[\"jpeg\",{\"1\":{\"955\":2}}],[\"jpg\",{\"1\":{\"229\":1}}],[\"juejin\",{\"1\":{\"849\":1}}],[\"java\",{\"1\":{\"1275\":1,\"1380\":1,\"1436\":1}}],[\"javascript基础\",{\"0\":{\"1232\":1},\"1\":{\"1379\":1}}],[\"javascript\",{\"0\":{\"1378\":1,\"1379\":1},\"1\":{\"1\":2,\"2\":1,\"3\":1,\"77\":1,\"80\":1,\"121\":1,\"178\":2,\"401\":1,\"549\":2,\"564\":1,\"593\":1,\"625\":1,\"863\":1,\"1012\":1,\"1028\":2,\"1155\":2,\"1228\":1,\"1231\":1,\"1233\":5,\"1279\":1,\"1379\":1,\"1380\":2,\"1381\":4,\"1383\":1,\"1413\":2,\"1414\":1,\"1415\":1,\"1416\":1,\"1418\":1,\"1425\":1,\"1428\":1,\"1440\":4,\"1452\":2}}],[\"jack\",{\"1\":{\"823\":1}}],[\"jeff\",{\"1\":{\"823\":1}}],[\"jest\",{\"1\":{\"138\":1}}],[\"join\",{\"0\":{\"1362\":1},\"1\":{\"638\":1,\"797\":1,\"1362\":1}}],[\"job\",{\"1\":{\"540\":3,\"1217\":2}}],[\"jian\",{\"1\":{\"417\":3}}],[\"jia\",{\"1\":{\"417\":3}}],[\"jiawait\",{\"1\":{\"416\":3}}],[\"jiaodd\",{\"1\":{\"416\":3}}],[\"jquery→dom\",{\"1\":{\"1284\":1}}],[\"jquery\",{\"0\":{\"17\":1,\"1278\":1,\"1284\":1},\"1\":{\"26\":4,\"1192\":1,\"1279\":3,\"1282\":1,\"1283\":5,\"1284\":4,\"1293\":1,\"1301\":1,\"1319\":2,\"1333\":5,\"1379\":1}}],[\"jscript\",{\"1\":{\"1233\":1}}],[\"jsconfig\",{\"1\":{\"249\":1}}],[\"jsoo\",{\"1\":{\"1189\":2}}],[\"jsonplaceholder\",{\"1\":{\"777\":2,\"827\":2}}],[\"jsonp\",{\"0\":{\"26\":1},\"1\":{\"26\":4}}],[\"json\",{\"0\":{\"13\":1},\"1\":{\"2\":1,\"3\":2,\"13\":1,\"17\":1,\"22\":2,\"26\":3,\"29\":1,\"52\":2,\"138\":1,\"249\":1,\"451\":3,\"578\":1,\"582\":1,\"800\":1,\"823\":2}}],[\"js是单线程\",{\"0\":{\"1075\":1}}],[\"js$\",{\"1\":{\"823\":1}}],[\"js文件\",{\"0\":{\"786\":1,\"787\":1,\"788\":1},\"1\":{\"823\":1}}],[\"js入口组件\",{\"0\":{\"774\":1}}],[\"js入口文件\",{\"0\":{\"773\":1,\"785\":1},\"1\":{\"823\":1}}],[\"js中注册model\",{\"1\":{\"823\":1}}],[\"js中\",{\"1\":{\"779\":1,\"822\":2}}],[\"js中第二种生成方法\",{\"1\":{\"674\":1}}],[\"js中覆写resolve\",{\"1\":{\"249\":1}}],[\"jsx输出结果\",{\"1\":{\"254\":1}}],[\"jsx项目路径\",{\"1\":{\"249\":1}}],[\"jsxdev\",{\"1\":{\"249\":1,\"251\":1,\"252\":1}}],[\"jsxs\",{\"1\":{\"248\":2,\"249\":1}}],[\"jsx结构\",{\"0\":{\"247\":1}}],[\"jsx\",{\"0\":{\"121\":1,\"160\":1,\"251\":1,\"253\":1,\"305\":1,\"329\":1,\"333\":1,\"344\":1,\"351\":1,\"356\":1,\"359\":1,\"367\":1,\"377\":1},\"1\":{\"87\":2,\"89\":1,\"92\":1,\"119\":1,\"122\":1,\"125\":2,\"126\":1,\"136\":1,\"139\":2,\"159\":2,\"160\":1,\"229\":1,\"237\":2,\"248\":12,\"249\":8,\"250\":2,\"255\":1,\"269\":1,\"271\":1,\"272\":3,\"274\":1,\"296\":1,\"301\":1,\"305\":1,\"333\":1,\"344\":1,\"351\":1,\"356\":1,\"359\":1,\"367\":1,\"377\":1,\"709\":1,\"732\":1,\"735\":1,\"740\":1,\"749\":1,\"755\":1}}],[\"js\",{\"0\":{\"119\":1,\"251\":1,\"252\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"284\":1,\"285\":1,\"286\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"295\":1,\"297\":1,\"298\":1,\"299\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"315\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":1,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":1,\"338\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"349\":1,\"352\":1,\"357\":1,\"360\":1,\"361\":1,\"368\":1,\"369\":1,\"370\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1,\"392\":1,\"394\":1,\"395\":1,\"396\":1,\"612\":1,\"613\":1,\"614\":1,\"615\":1,\"616\":1,\"617\":1,\"618\":1,\"624\":1,\"625\":1,\"626\":1,\"627\":1,\"631\":1,\"632\":1,\"633\":1,\"653\":1,\"654\":1,\"655\":1,\"656\":1,\"657\":1,\"685\":1,\"686\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1,\"691\":1,\"811\":1,\"1233\":1},\"1\":{\"3\":1,\"26\":1,\"29\":1,\"60\":1,\"62\":1,\"103\":2,\"119\":4,\"120\":1,\"121\":2,\"122\":1,\"123\":3,\"125\":2,\"126\":1,\"128\":5,\"129\":1,\"130\":1,\"138\":5,\"241\":1,\"245\":1,\"248\":2,\"249\":1,\"252\":1,\"259\":3,\"261\":3,\"269\":3,\"286\":1,\"288\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"315\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":1,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":1,\"338\":1,\"345\":1,\"346\":1,\"349\":1,\"352\":1,\"353\":1,\"357\":2,\"360\":1,\"361\":1,\"368\":1,\"369\":1,\"370\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1,\"388\":1,\"392\":1,\"394\":1,\"395\":1,\"396\":1,\"407\":2,\"418\":1,\"424\":2,\"431\":1,\"437\":1,\"442\":1,\"443\":2,\"444\":1,\"485\":5,\"486\":2,\"493\":1,\"499\":2,\"518\":1,\"519\":1,\"524\":1,\"536\":1,\"578\":1,\"590\":1,\"597\":1,\"602\":8,\"603\":6,\"604\":10,\"607\":1,\"608\":2,\"609\":17,\"610\":10,\"612\":1,\"613\":3,\"614\":2,\"616\":3,\"617\":5,\"618\":1,\"621\":1,\"625\":1,\"626\":2,\"627\":1,\"631\":2,\"632\":2,\"634\":3,\"635\":4,\"644\":2,\"646\":1,\"647\":3,\"648\":5,\"649\":1,\"650\":1,\"651\":5,\"653\":3,\"654\":2,\"658\":2,\"661\":2,\"665\":1,\"666\":1,\"674\":5,\"675\":7,\"683\":9,\"684\":2,\"685\":2,\"686\":1,\"688\":3,\"690\":2,\"691\":2,\"694\":3,\"695\":2,\"735\":1,\"749\":3,\"755\":2,\"764\":1,\"775\":2,\"777\":3,\"790\":1,\"793\":1,\"823\":3,\"914\":1,\"920\":1,\"966\":2,\"1007\":1,\"1012\":1,\"1015\":2,\"1031\":2,\"1059\":1,\"1062\":1,\"1075\":1,\"1076\":2,\"1103\":1,\"1105\":3,\"1117\":1,\"1118\":1,\"1119\":2,\"1155\":1,\"1167\":1,\"1181\":1,\"1189\":1,\"1192\":8,\"1229\":1,\"1231\":1,\"1233\":2,\"1235\":3,\"1240\":2,\"1241\":1,\"1243\":1,\"1279\":1,\"1282\":3,\"1283\":1,\"1284\":1,\"1301\":1,\"1333\":2,\"1340\":1,\"1349\":1,\"1367\":1,\"1371\":1,\"1396\":1,\"1398\":1,\"1410\":1,\"1415\":1,\"1419\":3,\"1420\":3,\"1421\":1,\"1422\":2,\"1423\":3,\"1424\":1,\"1425\":2,\"1428\":1,\"1429\":2,\"1452\":2}}],[\"5px\",{\"1\":{\"969\":7,\"1013\":1,\"1015\":1}}],[\"5x\",{\"1\":{\"952\":1}}],[\"568\",{\"1\":{\"952\":1}}],[\"5c\",{\"1\":{\"952\":1}}],[\"5s\",{\"1\":{\"952\":1,\"1016\":1}}],[\"540px\",{\"1\":{\"1016\":1}}],[\"540\",{\"1\":{\"952\":1}}],[\"540x960\",{\"1\":{\"944\":1}}],[\"54\",{\"1\":{\"524\":1}}],[\"55\",{\"1\":{\"524\":1}}],[\"5ms\",{\"1\":{\"395\":1,\"396\":1}}],[\"50px\",{\"1\":{\"954\":2,\"965\":3,\"966\":3,\"971\":2,\"1015\":1,\"1016\":3}}],[\"50\",{\"1\":{\"96\":2,\"609\":1,\"911\":1,\"966\":1,\"994\":1,\"1014\":1}}],[\"500px\",{\"1\":{\"964\":2}}],[\"5000ms\",{\"1\":{\"395\":1}}],[\"5000\",{\"1\":{\"395\":1}}],[\"500\",{\"1\":{\"9\":1,\"557\":1}}],[\"5\",{\"0\":{\"36\":1,\"43\":1,\"110\":1,\"514\":1,\"708\":1,\"766\":1,\"1036\":1,\"1162\":1,\"1191\":1,\"1218\":1,\"1228\":1,\"1275\":1,\"1359\":1},\"1\":{\"2\":1,\"60\":1,\"92\":2,\"124\":1,\"162\":4,\"323\":1,\"394\":1,\"395\":1,\"410\":1,\"418\":1,\"424\":1,\"474\":1,\"489\":1,\"492\":1,\"527\":1,\"599\":3,\"600\":1,\"602\":1,\"609\":1,\"610\":2,\"634\":2,\"635\":2,\"822\":1,\"823\":2,\"830\":4,\"836\":1,\"898\":1,\"931\":2,\"937\":1,\"952\":7,\"960\":1,\"969\":1,\"1014\":1,\"1016\":5,\"1066\":1,\"1155\":1,\"1159\":1,\"1173\":1,\"1181\":1,\"1194\":1,\"1214\":1,\"1221\":1,\"1230\":1,\"1258\":2,\"1272\":1,\"1273\":1,\"1376\":27,\"1382\":1,\"1384\":1,\"1425\":1,\"1431\":1,\"1433\":1}}],[\"456\",{\"1\":{\"1383\":1}}],[\"45kg\",{\"1\":{\"1224\":1}}],[\"4表示从右开始数第4个\",{\"1\":{\"1376\":1}}],[\"434\",{\"1\":{\"1369\":1}}],[\"444\",{\"1\":{\"1174\":1}}],[\"443\",{\"1\":{\"574\":1}}],[\"4px\",{\"1\":{\"1013\":2}}],[\"42\",{\"1\":{\"966\":2}}],[\"4s\",{\"1\":{\"952\":1}}],[\"480px\",{\"1\":{\"1016\":1}}],[\"480\",{\"1\":{\"952\":3}}],[\"480x854\",{\"1\":{\"944\":1}}],[\"480x800\",{\"1\":{\"944\":1}}],[\"4k\",{\"1\":{\"944\":1}}],[\"414px\",{\"1\":{\"1016\":1}}],[\"414\",{\"1\":{\"952\":1,\"1369\":2}}],[\"411\",{\"1\":{\"952\":1}}],[\"41\",{\"1\":{\"524\":1}}],[\"4捕获\",{\"1\":{\"288\":1,\"292\":1}}],[\"4是捕获\",{\"1\":{\"286\":1}}],[\"40\",{\"1\":{\"1154\":1}}],[\"400\",{\"1\":{\"887\":1}}],[\"4000\",{\"1\":{\"495\":1}}],[\"401\",{\"1\":{\"9\":1}}],[\"403\",{\"1\":{\"9\":1}}],[\"404\",{\"1\":{\"9\":1,\"439\":1,\"733\":1,\"739\":2}}],[\"4\",{\"0\":{\"35\":1,\"42\":1,\"109\":1,\"267\":1,\"513\":1,\"740\":1,\"765\":1,\"1035\":1,\"1136\":1,\"1161\":1,\"1190\":1,\"1202\":1,\"1217\":1,\"1227\":1,\"1274\":1,\"1358\":1},\"1\":{\"2\":1,\"9\":3,\"19\":1,\"69\":1,\"72\":1,\"92\":1,\"124\":1,\"162\":3,\"288\":1,\"297\":1,\"323\":1,\"371\":1,\"381\":1,\"382\":1,\"385\":2,\"394\":1,\"410\":1,\"411\":1,\"418\":1,\"421\":1,\"424\":1,\"425\":1,\"439\":1,\"451\":2,\"455\":1,\"466\":1,\"474\":1,\"489\":1,\"497\":1,\"498\":1,\"500\":1,\"504\":1,\"609\":1,\"610\":1,\"634\":2,\"635\":2,\"676\":3,\"683\":1,\"691\":1,\"749\":1,\"822\":1,\"823\":2,\"854\":1,\"908\":1,\"932\":1,\"937\":1,\"952\":7,\"953\":1,\"969\":1,\"1066\":1,\"1085\":1,\"1138\":1,\"1155\":1,\"1158\":1,\"1159\":1,\"1160\":1,\"1163\":1,\"1164\":1,\"1165\":2,\"1168\":1,\"1173\":2,\"1178\":5,\"1180\":1,\"1181\":1,\"1206\":1,\"1207\":1,\"1214\":1,\"1221\":2,\"1260\":1,\"1261\":1,\"1262\":1,\"1270\":1,\"1271\":1,\"1272\":1,\"1273\":1,\"1276\":1,\"1344\":1,\"1376\":4,\"1381\":1,\"1382\":1,\"1384\":2,\"1385\":1,\"1391\":1,\"1425\":1,\"1431\":1,\"1435\":1,\"1438\":1,\"1452\":1}}],[\"34\",{\"1\":{\"1458\":2}}],[\"39\",{\"1\":{\"1154\":1}}],[\"38\",{\"1\":{\"1154\":1}}],[\"384\",{\"1\":{\"952\":1}}],[\"37\",{\"1\":{\"1154\":1}}],[\"375px\",{\"1\":{\"1016\":1}}],[\"375\",{\"1\":{\"952\":1}}],[\"333\",{\"1\":{\"1174\":2}}],[\"33\",{\"1\":{\"966\":1}}],[\"33px\",{\"1\":{\"966\":1}}],[\"3304\",{\"1\":{\"721\":1}}],[\"3d\",{\"1\":{\"909\":3}}],[\"3动态执行saga\",{\"1\":{\"760\":1,\"773\":1}}],[\"350\",{\"1\":{\"1142\":1}}],[\"35\",{\"1\":{\"634\":1}}],[\"32px\",{\"1\":{\"1016\":1}}],[\"320px\",{\"1\":{\"960\":1,\"966\":1,\"1016\":1}}],[\"320\",{\"1\":{\"952\":3,\"966\":2}}],[\"32\",{\"1\":{\"395\":1}}],[\"31\",{\"1\":{\"395\":1,\"634\":2}}],[\"3n\",{\"1\":{\"323\":1}}],[\"360px\",{\"1\":{\"1016\":1}}],[\"360\",{\"1\":{\"943\":1,\"952\":1}}],[\"36\",{\"1\":{\"286\":1,\"289\":1}}],[\"302\",{\"1\":{\"1369\":1}}],[\"30px\",{\"1\":{\"969\":1,\"1016\":1}}],[\"30\",{\"1\":{\"21\":1,\"395\":1,\"634\":2,\"635\":1,\"969\":1,\"1268\":3,\"1325\":1}}],[\"3000\",{\"1\":{\"69\":1,\"70\":1,\"72\":1,\"574\":1,\"1174\":1}}],[\"300\",{\"1\":{\"9\":1,\"17\":1,\"59\":1,\"69\":1,\"72\":1,\"96\":1,\"884\":1,\"1207\":1}}],[\"3\",{\"0\":{\"34\":1,\"41\":1,\"108\":1,\"229\":1,\"266\":1,\"512\":1,\"739\":1,\"764\":1,\"1034\":1,\"1135\":1,\"1160\":1,\"1185\":1,\"1189\":1,\"1196\":1,\"1207\":1,\"1216\":1,\"1222\":1,\"1226\":1,\"1251\":1,\"1273\":1,\"1357\":1,\"1378\":1},\"1\":{\"2\":1,\"5\":1,\"9\":2,\"26\":1,\"124\":2,\"161\":1,\"323\":1,\"329\":1,\"333\":1,\"394\":1,\"402\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":1,\"418\":1,\"421\":1,\"424\":1,\"425\":1,\"432\":1,\"439\":1,\"450\":1,\"451\":2,\"452\":1,\"454\":1,\"455\":1,\"457\":2,\"460\":1,\"461\":1,\"466\":1,\"474\":1,\"482\":1,\"487\":1,\"489\":1,\"497\":1,\"498\":1,\"504\":2,\"524\":1,\"561\":1,\"599\":3,\"600\":1,\"609\":2,\"610\":1,\"616\":1,\"621\":1,\"632\":1,\"634\":2,\"635\":3,\"648\":1,\"661\":3,\"674\":4,\"676\":3,\"683\":1,\"686\":2,\"691\":1,\"749\":1,\"822\":2,\"823\":2,\"836\":1,\"845\":1,\"847\":1,\"854\":1,\"865\":1,\"873\":1,\"908\":3,\"917\":1,\"937\":2,\"952\":6,\"953\":1,\"955\":1,\"969\":1,\"1055\":1,\"1062\":2,\"1066\":1,\"1076\":3,\"1078\":1,\"1085\":1,\"1093\":1,\"1124\":1,\"1126\":1,\"1130\":1,\"1132\":1,\"1138\":1,\"1146\":2,\"1155\":1,\"1158\":1,\"1159\":1,\"1160\":1,\"1161\":1,\"1163\":1,\"1164\":1,\"1165\":2,\"1166\":1,\"1168\":1,\"1173\":2,\"1177\":1,\"1178\":12,\"1180\":1,\"1181\":2,\"1187\":1,\"1191\":1,\"1192\":1,\"1195\":1,\"1206\":1,\"1214\":1,\"1221\":2,\"1260\":1,\"1261\":1,\"1271\":1,\"1272\":1,\"1273\":1,\"1275\":1,\"1276\":2,\"1281\":1,\"1328\":1,\"1344\":1,\"1369\":1,\"1373\":1,\"1376\":1,\"1381\":1,\"1382\":1,\"1384\":2,\"1391\":6,\"1408\":1,\"1413\":3,\"1422\":1,\"1423\":2,\"1425\":1,\"1428\":1,\"1429\":2,\"1431\":1,\"1435\":1,\"1438\":1,\"1446\":2,\"1451\":2,\"1452\":1,\"1458\":2}}],[\"2所在的位置是\",{\"1\":{\"1376\":3}}],[\"2em\",{\"1\":{\"1013\":2}}],[\"2rem\",{\"1\":{\"963\":1,\"966\":3}}],[\"2k\",{\"1\":{\"944\":1}}],[\"2px\",{\"1\":{\"918\":1,\"1013\":1}}],[\"2秒后打印saga\",{\"1\":{\"764\":1}}],[\"2n\",{\"1\":{\"323\":1}}],[\"26px\",{\"1\":{\"938\":1}}],[\"26\",{\"0\":{\"64\":1}}],[\"255\",{\"1\":{\"889\":1}}],[\"250ms\",{\"1\":{\"395\":1}}],[\"250\",{\"1\":{\"395\":1}}],[\"25\",{\"0\":{\"63\":1},\"1\":{\"103\":1,\"1194\":1}}],[\"240px\",{\"1\":{\"1016\":1}}],[\"24px\",{\"1\":{\"963\":1}}],[\"24\",{\"0\":{\"62\":1}}],[\"234\",{\"1\":{\"1376\":2}}],[\"23\",{\"0\":{\"61\":1}}],[\"222\",{\"1\":{\"1174\":2}}],[\"222222\",{\"1\":{\"192\":1,\"217\":1}}],[\"22\",{\"0\":{\"60\":1},\"1\":{\"1181\":1}}],[\"21\",{\"0\":{\"59\":1},\"1\":{\"966\":2}}],[\"2s\",{\"1\":{\"15\":1}}],[\"2xx\",{\"1\":{\"9\":1}}],[\"2021\",{\"1\":{\"1115\":1,\"1367\":1}}],[\"2022\",{\"1\":{\"103\":1}}],[\"2010\",{\"1\":{\"1007\":1}}],[\"2017\",{\"1\":{\"578\":1,\"631\":1}}],[\"20px\",{\"1\":{\"857\":1,\"867\":1,\"969\":3,\"1013\":3,\"1016\":3,\"1296\":1}}],[\"20\",{\"0\":{\"58\":1},\"1\":{\"634\":3,\"635\":3,\"776\":1,\"966\":1,\"969\":1,\"1214\":1,\"1268\":4,\"1460\":1,\"1461\":1}}],[\"2048content\",{\"1\":{\"8\":1}}],[\"2009\",{\"1\":{\"1006\":1}}],[\"2007\",{\"1\":{\"1005\":1}}],[\"200px\",{\"1\":{\"938\":1}}],[\"2000\",{\"1\":{\"15\":1,\"749\":1,\"764\":2,\"765\":1,\"777\":4,\"812\":1,\"1174\":1}}],[\"200\",{\"1\":{\"8\":1,\"9\":2,\"17\":2,\"21\":1,\"59\":1,\"69\":1,\"70\":1,\"72\":1,\"884\":1,\"1207\":1}}],[\"2\",{\"0\":{\"33\":1,\"40\":1,\"75\":1,\"107\":1,\"228\":1,\"265\":1,\"511\":1,\"605\":1,\"738\":1,\"763\":1,\"933\":1,\"1033\":1,\"1134\":1,\"1159\":1,\"1184\":1,\"1188\":1,\"1195\":1,\"1206\":1,\"1208\":1,\"1215\":1,\"1221\":1,\"1225\":1,\"1250\":1,\"1256\":1,\"1272\":1,\"1356\":1,\"1423\":1},\"1\":{\"2\":1,\"4\":1,\"5\":1,\"9\":2,\"21\":1,\"28\":1,\"124\":2,\"159\":1,\"161\":2,\"181\":2,\"272\":2,\"273\":1,\"285\":1,\"286\":1,\"289\":1,\"313\":1,\"317\":1,\"318\":1,\"320\":1,\"323\":1,\"325\":1,\"328\":1,\"360\":1,\"374\":1,\"391\":4,\"392\":1,\"394\":1,\"395\":1,\"396\":1,\"402\":1,\"403\":1,\"406\":1,\"407\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":1,\"418\":1,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":1,\"430\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":1,\"439\":1,\"443\":1,\"446\":1,\"447\":1,\"450\":3,\"451\":2,\"452\":2,\"454\":1,\"455\":1,\"457\":2,\"458\":1,\"460\":1,\"461\":2,\"465\":2,\"466\":2,\"467\":1,\"472\":2,\"474\":2,\"475\":3,\"482\":1,\"485\":1,\"486\":1,\"487\":3,\"488\":1,\"489\":2,\"497\":1,\"498\":1,\"500\":1,\"504\":2,\"519\":1,\"521\":1,\"524\":1,\"531\":1,\"560\":2,\"561\":1,\"600\":1,\"603\":2,\"604\":3,\"609\":4,\"610\":4,\"614\":1,\"616\":1,\"617\":1,\"621\":1,\"632\":1,\"634\":2,\"635\":5,\"648\":5,\"650\":1,\"651\":1,\"656\":2,\"657\":2,\"661\":2,\"662\":3,\"674\":1,\"676\":1,\"682\":1,\"683\":1,\"686\":1,\"691\":1,\"692\":1,\"695\":1,\"715\":1,\"719\":1,\"722\":1,\"749\":2,\"799\":1,\"806\":1,\"813\":1,\"821\":1,\"822\":2,\"823\":3,\"830\":1,\"835\":1,\"854\":1,\"862\":2,\"865\":1,\"868\":1,\"870\":3,\"871\":5,\"872\":2,\"873\":1,\"887\":1,\"917\":1,\"927\":3,\"932\":1,\"937\":1,\"952\":7,\"955\":1,\"959\":1,\"969\":1,\"970\":1,\"991\":1,\"994\":1,\"999\":1,\"1026\":1,\"1036\":2,\"1038\":1,\"1062\":2,\"1063\":1,\"1066\":1,\"1067\":2,\"1076\":2,\"1078\":1,\"1085\":1,\"1093\":1,\"1106\":1,\"1108\":1,\"1124\":1,\"1126\":1,\"1130\":2,\"1138\":1,\"1139\":1,\"1146\":1,\"1155\":1,\"1158\":1,\"1159\":1,\"1160\":2,\"1161\":1,\"1163\":2,\"1164\":2,\"1165\":2,\"1166\":1,\"1168\":1,\"1173\":2,\"1177\":2,\"1178\":9,\"1180\":1,\"1181\":3,\"1187\":1,\"1191\":1,\"1192\":1,\"1194\":1,\"1195\":1,\"1206\":1,\"1214\":1,\"1218\":1,\"1221\":4,\"1258\":2,\"1259\":2,\"1260\":6,\"1261\":1,\"1263\":1,\"1265\":1,\"1269\":3,\"1270\":1,\"1271\":1,\"1272\":1,\"1273\":1,\"1275\":1,\"1276\":2,\"1277\":1,\"1281\":1,\"1289\":2,\"1290\":2,\"1303\":1,\"1304\":1,\"1319\":1,\"1328\":1,\"1343\":1,\"1344\":1,\"1345\":1,\"1359\":1,\"1369\":7,\"1370\":4,\"1373\":1,\"1375\":1,\"1376\":17,\"1381\":1,\"1382\":1,\"1385\":2,\"1388\":1,\"1389\":1,\"1391\":12,\"1397\":1,\"1405\":4,\"1408\":1,\"1413\":5,\"1422\":1,\"1423\":3,\"1425\":1,\"1429\":1,\"1431\":1,\"1435\":1,\"1436\":1,\"1438\":1,\"1446\":3,\"1451\":2,\"1452\":1,\"1458\":7}}],[\"1所在的位置是\",{\"1\":{\"1376\":3}}],[\"1~31\",{\"1\":{\"1367\":1}}],[\"1js\",{\"1\":{\"1272\":1}}],[\"1或\",{\"1\":{\"1048\":1}}],[\"1em\",{\"1\":{\"920\":2}}],[\"1fr\",{\"1\":{\"789\":3}}],[\"1<\",{\"1\":{\"774\":1}}],[\"1s60\",{\"1\":{\"260\":1}}],[\"1970\",{\"1\":{\"1367\":2}}],[\"1995\",{\"1\":{\"1233\":1}}],[\"19\",{\"0\":{\"57\":1,\"1186\":1}}],[\"17\",{\"0\":{\"55\":1,\"1181\":1}}],[\"16px\",{\"1\":{\"883\":1,\"918\":1}}],[\"16ms\",{\"1\":{\"260\":2,\"262\":1}}],[\"16\",{\"0\":{\"54\":1,\"1180\":1},\"1\":{\"174\":1,\"259\":2,\"260\":1,\"1181\":1}}],[\"15em\",{\"1\":{\"920\":1}}],[\"15\",{\"0\":{\"53\":1,\"1179\":1},\"1\":{\"634\":1,\"635\":1,\"965\":1,\"966\":5,\"1376\":1}}],[\"141\",{\"1\":{\"1381\":1}}],[\"14159\",{\"1\":{\"1369\":1}}],[\"1440px\",{\"1\":{\"1016\":1}}],[\"14px\",{\"1\":{\"960\":1}}],[\"14\",{\"0\":{\"52\":1,\"1178\":1},\"1\":{\"640\":1,\"641\":1,\"653\":1,\"1274\":1}}],[\"133\",{\"1\":{\"524\":1}}],[\"13\",{\"0\":{\"51\":1,\"1175\":1},\"1\":{\"640\":1,\"641\":1,\"653\":1}}],[\"111\",{\"1\":{\"1014\":1,\"1174\":2}}],[\"118940398\",{\"1\":{\"790\":1}}],[\"112552673\",{\"1\":{\"96\":1}}],[\"11\",{\"0\":{\"49\":1,\"520\":1,\"1172\":1,\"1365\":1},\"1\":{\"474\":1,\"1433\":1}}],[\"120\",{\"1\":{\"1146\":2}}],[\"12px\",{\"1\":{\"1013\":1}}],[\"1242x2208\",{\"1\":{\"944\":1}}],[\"1234\",{\"1\":{\"1376\":4}}],[\"123456789\",{\"1\":{\"1376\":1}}],[\"12345678\",{\"1\":{\"1376\":1}}],[\"12345\",{\"1\":{\"45\":1,\"67\":3,\"1376\":2}}],[\"123\",{\"1\":{\"537\":1,\"586\":1,\"721\":2,\"1057\":1,\"1174\":1,\"1190\":1,\"1383\":1,\"1433\":1}}],[\"12\",{\"0\":{\"50\":1,\"521\":1,\"1174\":1,\"1366\":1},\"1\":{\"451\":1,\"474\":1,\"509\":1,\"640\":1,\"641\":1,\"653\":1,\"952\":1,\"1102\":1}}],[\"127\",{\"1\":{\"9\":1,\"17\":1,\"20\":1,\"22\":1,\"26\":2}}],[\"1px\",{\"1\":{\"26\":1,\"139\":1,\"952\":1,\"1016\":3}}],[\"1080px\",{\"1\":{\"1016\":1}}],[\"1080x1920\",{\"1\":{\"944\":1}}],[\"10px\",{\"1\":{\"935\":5,\"969\":5,\"995\":1,\"1013\":1,\"1015\":1}}],[\"1073741823ms\",{\"1\":{\"395\":1}}],[\"1073741823\",{\"1\":{\"395\":1}}],[\"1024px\",{\"1\":{\"1016\":1}}],[\"1024\",{\"1\":{\"372\":1,\"382\":1,\"952\":1}}],[\"10\",{\"0\":{\"48\":1,\"117\":1,\"519\":1,\"771\":1,\"1167\":1,\"1364\":1},\"1\":{\"21\":1,\"407\":1,\"418\":1,\"474\":1,\"601\":3,\"602\":1,\"609\":1,\"610\":1,\"634\":1,\"635\":1,\"650\":1,\"723\":3,\"900\":2,\"966\":1,\"969\":1,\"1014\":1,\"1016\":1,\"1271\":1,\"1272\":2,\"1273\":2,\"1325\":1,\"1353\":4,\"1369\":2,\"1413\":1,\"1453\":1,\"1458\":2}}],[\"100n\",{\"1\":{\"1230\":1}}],[\"100px\",{\"1\":{\"965\":1,\"1015\":8}}],[\"10000ms\",{\"1\":{\"395\":1}}],[\"10000\",{\"1\":{\"395\":1}}],[\"1000\",{\"1\":{\"260\":1,\"407\":1,\"762\":1,\"820\":1,\"1174\":1,\"1303\":1,\"1304\":1,\"1307\":2,\"1308\":1}}],[\"100vh\",{\"1\":{\"227\":1,\"228\":1,\"229\":1}}],[\"100\",{\"1\":{\"17\":1,\"20\":2,\"21\":1,\"96\":2,\"176\":1,\"799\":2,\"876\":1,\"878\":1,\"884\":1,\"889\":1,\"964\":3,\"966\":3,\"1016\":4,\"1268\":2}}],[\"18\",{\"0\":{\"56\":1,\"1182\":1},\"1\":{\"20\":2,\"149\":1,\"169\":1,\"448\":1,\"468\":1,\"534\":1,\"583\":2,\"1160\":1,\"1217\":1,\"1224\":1,\"1436\":1,\"1460\":1,\"1461\":1}}],[\"1\",{\"0\":{\"32\":1,\"39\":1,\"74\":1,\"106\":1,\"227\":1,\"264\":1,\"510\":1,\"598\":1,\"737\":1,\"762\":1,\"1032\":1,\"1058\":1,\"1133\":1,\"1158\":1,\"1183\":1,\"1187\":1,\"1194\":1,\"1204\":1,\"1205\":1,\"1214\":1,\"1220\":1,\"1224\":1,\"1249\":1,\"1255\":1,\"1271\":1,\"1355\":1,\"1422\":1},\"1\":{\"2\":1,\"4\":1,\"5\":1,\"7\":2,\"8\":2,\"9\":4,\"17\":1,\"20\":2,\"22\":1,\"26\":3,\"28\":1,\"69\":1,\"98\":2,\"99\":2,\"100\":2,\"110\":1,\"124\":3,\"145\":1,\"160\":1,\"161\":2,\"181\":1,\"182\":1,\"197\":2,\"260\":1,\"272\":2,\"281\":1,\"285\":1,\"295\":3,\"305\":1,\"317\":1,\"323\":1,\"328\":1,\"333\":1,\"344\":2,\"351\":2,\"353\":2,\"356\":2,\"359\":2,\"360\":1,\"367\":2,\"371\":1,\"374\":1,\"377\":2,\"381\":1,\"391\":5,\"392\":6,\"394\":1,\"395\":4,\"396\":1,\"402\":1,\"403\":1,\"406\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":1,\"418\":2,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":1,\"430\":2,\"432\":2,\"433\":1,\"434\":1,\"435\":1,\"439\":1,\"443\":1,\"446\":1,\"447\":1,\"450\":3,\"451\":3,\"452\":2,\"454\":1,\"455\":1,\"457\":2,\"458\":1,\"460\":1,\"461\":2,\"465\":2,\"466\":2,\"467\":1,\"472\":2,\"474\":2,\"475\":3,\"482\":1,\"485\":1,\"486\":1,\"487\":3,\"488\":1,\"489\":2,\"497\":1,\"498\":1,\"500\":1,\"504\":2,\"519\":1,\"524\":1,\"531\":1,\"534\":1,\"539\":1,\"562\":2,\"582\":1,\"583\":2,\"596\":1,\"603\":1,\"604\":2,\"609\":3,\"610\":3,\"616\":1,\"617\":1,\"621\":1,\"632\":1,\"634\":4,\"635\":8,\"647\":2,\"648\":1,\"649\":3,\"650\":1,\"651\":3,\"654\":2,\"656\":1,\"657\":7,\"661\":11,\"662\":3,\"674\":1,\"676\":1,\"682\":1,\"683\":5,\"686\":1,\"691\":5,\"695\":1,\"715\":2,\"719\":2,\"722\":1,\"723\":3,\"731\":3,\"738\":1,\"749\":5,\"775\":1,\"776\":3,\"799\":1,\"802\":1,\"806\":1,\"812\":2,\"813\":1,\"820\":1,\"821\":1,\"822\":2,\"823\":4,\"827\":1,\"830\":1,\"835\":1,\"842\":2,\"843\":1,\"847\":1,\"849\":1,\"854\":1,\"862\":2,\"864\":2,\"865\":1,\"868\":1,\"870\":3,\"871\":3,\"872\":2,\"873\":1,\"887\":1,\"894\":3,\"900\":1,\"917\":1,\"927\":2,\"931\":3,\"932\":4,\"937\":1,\"950\":4,\"952\":4,\"959\":1,\"960\":1,\"966\":4,\"969\":1,\"970\":1,\"985\":2,\"994\":1,\"996\":1,\"999\":1,\"1013\":2,\"1016\":4,\"1026\":1,\"1036\":2,\"1038\":1,\"1062\":2,\"1063\":1,\"1066\":1,\"1067\":2,\"1076\":2,\"1078\":1,\"1085\":1,\"1093\":1,\"1106\":1,\"1108\":1,\"1124\":1,\"1126\":1,\"1130\":2,\"1138\":1,\"1139\":1,\"1146\":1,\"1155\":1,\"1158\":1,\"1159\":1,\"1160\":2,\"1161\":1,\"1162\":1,\"1163\":2,\"1164\":2,\"1165\":2,\"1166\":1,\"1168\":1,\"1173\":2,\"1176\":1,\"1177\":1,\"1178\":19,\"1180\":1,\"1181\":4,\"1187\":1,\"1191\":1,\"1192\":1,\"1195\":1,\"1196\":1,\"1206\":1,\"1214\":1,\"1221\":2,\"1239\":1,\"1250\":1,\"1256\":2,\"1258\":2,\"1259\":2,\"1260\":2,\"1261\":1,\"1263\":2,\"1265\":1,\"1269\":3,\"1271\":2,\"1272\":1,\"1273\":2,\"1275\":1,\"1276\":2,\"1277\":1,\"1281\":1,\"1303\":1,\"1304\":1,\"1307\":1,\"1328\":1,\"1343\":1,\"1344\":1,\"1345\":1,\"1359\":1,\"1365\":1,\"1366\":1,\"1367\":5,\"1369\":2,\"1373\":1,\"1375\":2,\"1376\":24,\"1381\":1,\"1382\":2,\"1384\":3,\"1385\":6,\"1388\":1,\"1389\":1,\"1391\":11,\"1397\":1,\"1405\":5,\"1407\":1,\"1408\":1,\"1413\":6,\"1422\":1,\"1423\":3,\"1425\":1,\"1428\":1,\"1429\":1,\"1431\":1,\"1435\":1,\"1436\":1,\"1438\":1,\"1446\":2,\"1451\":2,\"1452\":1,\"1458\":12,\"1460\":1,\"1461\":2}}],[\"和函数结果一样\",{\"1\":{\"1410\":1}}],[\"和方法\",{\"1\":{\"1407\":1}}],[\"和提示信息\",{\"1\":{\"1055\":1}}],[\"和提交\",{\"1\":{\"272\":1,\"319\":1,\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"和<dd>\",{\"1\":{\"1054\":1}}],[\"和行为\",{\"1\":{\"1028\":1}}],[\"和框架之后有两种方案可选\",{\"1\":{\"966\":1}}],[\"和切割份数\",{\"1\":{\"966\":1}}],[\"和查看颜色\",{\"1\":{\"940\":1}}],[\"和文字垂直对齐\",{\"1\":{\"924\":1}}],[\"和相邻行内元素\",{\"1\":{\"878\":1}}],[\"和元素\",{\"1\":{\"872\":1}}],[\"和大括号中间保留空格\",{\"1\":{\"859\":1}}],[\"和请求对象绑定在一起\",{\"1\":{\"841\":1}}],[\"和修改\",{\"1\":{\"824\":1}}],[\"和react\",{\"1\":{\"823\":1}}],[\"和动作对象action\",{\"1\":{\"749\":1}}],[\"和接收到的\",{\"1\":{\"748\":1}}],[\"和细节\",{\"1\":{\"664\":1}}],[\"和嵌套生成函数\",{\"1\":{\"649\":1}}],[\"和set\",{\"1\":{\"633\":2}}],[\"和state\",{\"1\":{\"103\":1}}],[\"和回调函数\",{\"1\":{\"621\":1}}],[\"和从\",{\"1\":{\"586\":1}}],[\"和抛出事件\",{\"1\":{\"584\":1}}],[\"和配置\",{\"1\":{\"561\":1}}],[\"和异步组件的配合\",{\"1\":{\"534\":1}}],[\"和其他的\",{\"1\":{\"1333\":1}}],[\"和其他浏览器\",{\"1\":{\"1131\":1}}],[\"和其他\",{\"1\":{\"366\":1}}],[\"和多节点\",{\"1\":{\"341\":1}}],[\"和老虚拟\",{\"1\":{\"671\":1}}],[\"和老\",{\"1\":{\"323\":1}}],[\"和新\",{\"1\":{\"323\":1}}],[\"和当前\",{\"1\":{\"323\":1}}],[\"和原生事件的\",{\"1\":{\"293\":1}}],[\"和原生标签组件\",{\"1\":{\"272\":1}}],[\"和用户交互\",{\"1\":{\"165\":1}}],[\"和真实\",{\"0\":{\"120\":1}}],[\"和服务器交换使用\",{\"1\":{\"3\":1}}],[\"和\",{\"0\":{\"74\":1,\"1038\":1,\"1039\":1},\"1\":{\"1\":1,\"3\":1,\"42\":1,\"62\":1,\"98\":1,\"99\":1,\"184\":1,\"197\":1,\"273\":1,\"274\":2,\"323\":4,\"330\":1,\"332\":1,\"339\":2,\"354\":2,\"358\":1,\"365\":2,\"430\":1,\"432\":1,\"450\":1,\"451\":5,\"470\":1,\"472\":1,\"511\":1,\"515\":1,\"517\":1,\"549\":1,\"560\":2,\"580\":1,\"585\":1,\"595\":1,\"601\":2,\"621\":1,\"625\":1,\"628\":1,\"635\":1,\"636\":2,\"647\":1,\"648\":2,\"654\":1,\"656\":1,\"658\":1,\"664\":2,\"673\":1,\"675\":1,\"676\":1,\"692\":1,\"700\":1,\"702\":2,\"703\":2,\"704\":1,\"729\":1,\"731\":1,\"743\":1,\"792\":1,\"797\":1,\"812\":3,\"817\":1,\"819\":2,\"827\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":1,\"887\":1,\"900\":1,\"908\":1,\"916\":1,\"927\":2,\"973\":2,\"995\":1,\"1009\":1,\"1010\":1,\"1015\":1,\"1027\":1,\"1031\":1,\"1044\":1,\"1048\":1,\"1054\":1,\"1091\":1,\"1108\":1,\"1124\":1,\"1173\":1,\"1204\":1,\"1205\":1,\"1233\":1,\"1249\":3,\"1250\":1,\"1251\":2,\"1269\":1,\"1275\":2,\"1370\":2,\"1376\":5,\"1384\":1,\"1385\":2,\"1391\":3,\"1407\":1,\"1410\":4,\"1436\":1,\"1451\":2}}],[\"avtive\",{\"1\":{\"1428\":1}}],[\"avoid\",{\"1\":{\"270\":1,\"272\":1}}],[\"ao\",{\"1\":{\"1423\":1,\"1426\":1,\"1428\":1,\"1429\":5}}],[\"a的值是6\",{\"1\":{\"1258\":1}}],[\"a的数据修改不会生效\",{\"1\":{\"600\":1}}],[\"after\",{\"1\":{\"985\":5,\"1321\":1}}],[\"afterenter\",{\"1\":{\"437\":1}}],[\"aftereach\",{\"1\":{\"436\":2,\"733\":1}}],[\"aa11bb22c3\",{\"1\":{\"1391\":1}}],[\"aa11bb22c3d4e5f6\",{\"1\":{\"1391\":1}}],[\"aa\",{\"1\":{\"823\":1,\"1376\":1}}],[\"await\",{\"0\":{\"1204\":1,\"1206\":1},\"1\":{\"756\":1,\"799\":2,\"814\":1,\"1204\":1,\"1206\":5,\"1207\":1}}],[\"awesome\",{\"1\":{\"112\":1}}],[\"axga6sx\",{\"1\":{\"722\":1}}],[\"axios\",{\"0\":{\"18\":1,\"29\":1,\"73\":1,\"74\":2,\"75\":2},\"1\":{\"19\":2,\"20\":5,\"21\":2,\"30\":8,\"32\":1,\"35\":1,\"65\":1,\"66\":2,\"67\":7,\"68\":2,\"69\":6,\"70\":11,\"71\":1,\"72\":6,\"74\":9,\"75\":1,\"76\":1,\"404\":1,\"576\":1,\"755\":1,\"777\":4,\"827\":4}}],[\"a>\",{\"1\":{\"667\":1,\"1042\":1,\"1043\":4}}],[\"a从$\",{\"1\":{\"610\":1}}],[\"a不是对象\",{\"1\":{\"604\":1}}],[\"a是响应式对象数据\",{\"1\":{\"602\":1}}],[\"a仍然是undefined\",{\"1\":{\"601\":1}}],[\"audio\",{\"0\":{\"1022\":1}}],[\"augmentations\",{\"1\":{\"591\":1}}],[\"autoplay\",{\"1\":{\"1021\":3}}],[\"autofocus\",{\"1\":{\"1019\":1}}],[\"autocomplete\",{\"1\":{\"1019\":1}}],[\"auto\",{\"1\":{\"914\":1,\"960\":1,\"970\":2,\"985\":1,\"996\":1,\"1031\":1}}],[\"autorun\",{\"1\":{\"797\":2}}],[\"automatic\",{\"1\":{\"248\":2}}],[\"authorization头\",{\"1\":{\"51\":1}}],[\"authorization\",{\"1\":{\"51\":1,\"63\":2}}],[\"auth\",{\"0\":{\"51\":1},\"1\":{\"63\":1}}],[\"a=1\",{\"1\":{\"1265\":2}}],[\"a=100\",{\"1\":{\"11\":1}}],[\"a=\",{\"1\":{\"520\":1}}],[\"atan2\",{\"1\":{\"1370\":1}}],[\"atan\",{\"1\":{\"1370\":1}}],[\"attachevent\",{\"1\":{\"1130\":1}}],[\"attachment\",{\"0\":{\"906\":1},\"1\":{\"906\":1,\"908\":1}}],[\"attrname\",{\"1\":{\"695\":3}}],[\"attr\",{\"0\":{\"1083\":1,\"1311\":1},\"1\":{\"695\":3,\"702\":1,\"1072\":1,\"1311\":2}}],[\"attributes\",{\"1\":{\"695\":1,\"1096\":1}}],[\"attribute\",{\"1\":{\"584\":1}}],[\"attrsstring\",{\"1\":{\"662\":8}}],[\"attrs内容\",{\"1\":{\"662\":1}}],[\"attrs\",{\"0\":{\"662\":1},\"1\":{\"329\":4,\"333\":4,\"535\":1,\"662\":6,\"663\":2,\"702\":1}}],[\"at\",{\"1\":{\"270\":1,\"272\":1,\"919\":1,\"920\":1}}],[\"atguigu\",{\"1\":{\"7\":1,\"436\":1,\"437\":1}}],[\"alpha\",{\"1\":{\"908\":1}}],[\"altkey\",{\"1\":{\"1152\":1}}],[\"alt\",{\"1\":{\"472\":1,\"939\":1,\"1031\":1,\"1044\":2,\"1152\":1}}],[\"alternate\",{\"1\":{\"270\":1,\"272\":5,\"273\":2,\"274\":1,\"315\":1,\"317\":3,\"319\":1,\"323\":3,\"326\":1,\"338\":1,\"346\":1,\"348\":1,\"349\":1,\"352\":1,\"357\":3,\"360\":3,\"361\":4,\"373\":1,\"374\":3,\"375\":1,\"385\":3,\"396\":3}}],[\"alert\",{\"1\":{\"436\":1,\"437\":1,\"499\":1,\"500\":1,\"749\":1,\"1013\":3,\"1118\":1,\"1237\":1,\"1328\":1,\"1330\":1,\"1411\":1}}],[\"alicdn\",{\"1\":{\"919\":1,\"920\":1}}],[\"align\",{\"0\":{\"890\":1,\"924\":1},\"1\":{\"920\":1,\"924\":5,\"970\":1,\"1000\":2,\"1048\":2}}],[\"alive使用\",{\"1\":{\"434\":1}}],[\"alive>\",{\"1\":{\"433\":1}}],[\"alive\",{\"1\":{\"433\":1}}],[\"alias\",{\"1\":{\"249\":1,\"572\":2}}],[\"alias配置来实现路径劫持\",{\"1\":{\"249\":1}}],[\"also\",{\"1\":{\"270\":1,\"272\":1}}],[\"allsettled\",{\"0\":{\"1225\":1},\"1\":{\"1225\":1}}],[\"all相对应的\",{\"1\":{\"771\":1}}],[\"allnativeevents\",{\"1\":{\"278\":1,\"282\":2,\"286\":2}}],[\"allocating\",{\"1\":{\"270\":1,\"272\":1}}],[\"allows\",{\"1\":{\"270\":1,\"272\":1}}],[\"allow\",{\"1\":{\"12\":1,\"19\":2,\"27\":3}}],[\"all\",{\"0\":{\"771\":1,\"1226\":1},\"1\":{\"12\":1,\"19\":1,\"26\":2,\"75\":1,\"732\":1,\"777\":6,\"815\":2,\"900\":2,\"964\":1,\"1093\":1,\"1226\":1}}],[\"ab=21\",{\"1\":{\"1390\":2}}],[\"ab\",{\"1\":{\"1382\":1}}],[\"abg7\",{\"1\":{\"1382\":2}}],[\"abf1\",{\"1\":{\"1382\":2}}],[\"abe3\",{\"1\":{\"1382\":2}}],[\"abd6\",{\"1\":{\"1382\":2}}],[\"absloute\",{\"1\":{\"1225\":1}}],[\"abs\",{\"1\":{\"1181\":1,\"1370\":1}}],[\"absolute\",{\"0\":{\"993\":1},\"1\":{\"229\":1,\"989\":1,\"993\":1,\"999\":1,\"1013\":1}}],[\"abcbcacba\",{\"1\":{\"1391\":1}}],[\"abcdefghijklmn\",{\"1\":{\"1391\":1}}],[\"abcdez\",{\"1\":{\"1382\":1}}],[\"abc4\",{\"1\":{\"1382\":2}}],[\"abce\",{\"1\":{\"1382\":1}}],[\"abc\",{\"1\":{\"1043\":2,\"1057\":2,\"1169\":4,\"1382\":1,\"1383\":1,\"1391\":4,\"1392\":1}}],[\"aboutstore=\",{\"1\":{\"803\":1}}],[\"aboutstore\",{\"1\":{\"802\":2,\"803\":1,\"804\":2,\"807\":3,\"808\":2}}],[\"about\",{\"1\":{\"424\":5,\"426\":2,\"427\":2,\"430\":2,\"439\":2,\"708\":1,\"715\":1,\"804\":1,\"807\":1,\"808\":1}}],[\"abortcontroller\",{\"1\":{\"841\":13}}],[\"abort\",{\"1\":{\"16\":1,\"71\":2,\"72\":1,\"841\":2}}],[\"animal\",{\"1\":{\"1433\":6}}],[\"animate\",{\"0\":{\"1308\":1},\"1\":{\"1308\":1}}],[\"animation\",{\"1\":{\"1016\":1}}],[\"antialiased\",{\"1\":{\"918\":1}}],[\"antd\",{\"0\":{\"821\":1},\"1\":{\"731\":1,\"821\":2}}],[\"any>\",{\"1\":{\"842\":1,\"843\":1}}],[\"any\",{\"1\":{\"625\":3,\"633\":1,\"730\":2,\"731\":24,\"732\":1,\"842\":3,\"843\":3,\"1185\":1}}],[\"angular\",{\"1\":{\"403\":1}}],[\"an\",{\"1\":{\"245\":1,\"787\":1,\"830\":2}}],[\"anothercomponent\",{\"1\":{\"207\":2}}],[\"and|not|only\",{\"1\":{\"964\":2}}],[\"android\",{\"1\":{\"944\":1,\"947\":1}}],[\"and\",{\"1\":{\"1\":1,\"29\":1,\"382\":1,\"787\":1,\"964\":6,\"1015\":2,\"1016\":1}}],[\"amd\",{\"1\":{\"1188\":1}}],[\"amount\",{\"1\":{\"814\":2}}],[\"ambient\",{\"1\":{\"591\":1}}],[\"am\",{\"1\":{\"192\":1,\"217\":1}}],[\"acos\",{\"1\":{\"1370\":1}}],[\"activated\",{\"1\":{\"434\":2,\"585\":1}}],[\"activexobject\",{\"1\":{\"1064\":1}}],[\"active+随机hash生成的样式名\",{\"1\":{\"139\":1}}],[\"active\",{\"1\":{\"139\":3,\"424\":3,\"426\":2,\"507\":2,\"626\":2,\"815\":2,\"873\":2,\"1423\":1}}],[\"action=\",{\"1\":{\"1056\":1}}],[\"action<tdata\",{\"1\":{\"840\":1}}],[\"action$\",{\"1\":{\"781\":1,\"788\":2}}],[\"actions引发状态更新\",{\"1\":{\"813\":1}}],[\"actions文件\",{\"0\":{\"775\":1}}],[\"actions\",{\"0\":{\"410\":1,\"786\":1,\"798\":1,\"799\":1,\"812\":1},\"1\":{\"407\":2,\"410\":2,\"411\":1,\"416\":1,\"418\":2,\"519\":1,\"743\":1,\"750\":1,\"753\":1,\"755\":1,\"756\":1,\"774\":2,\"775\":2,\"776\":1,\"777\":1,\"787\":1,\"788\":1,\"789\":1,\"799\":1,\"812\":3,\"816\":1}}],[\"action\",{\"0\":{\"747\":1},\"1\":{\"305\":2,\"306\":2,\"315\":5,\"323\":1,\"329\":3,\"338\":12,\"373\":12,\"410\":1,\"411\":1,\"731\":1,\"742\":2,\"747\":5,\"748\":3,\"749\":3,\"753\":1,\"754\":2,\"755\":4,\"756\":14,\"758\":1,\"759\":3,\"766\":1,\"767\":1,\"768\":2,\"776\":4,\"777\":1,\"779\":1,\"780\":2,\"781\":3,\"786\":1,\"787\":5,\"788\":2,\"790\":3,\"798\":2,\"799\":1,\"802\":2,\"806\":2,\"812\":1,\"814\":2,\"816\":7,\"820\":1,\"823\":5,\"840\":7}}],[\"acc\",{\"1\":{\"650\":2,\"657\":2}}],[\"accumulatesinglephaselisteners\",{\"0\":{\"298\":1},\"1\":{\"287\":1,\"290\":1,\"292\":1,\"296\":1,\"298\":1}}],[\"access\",{\"1\":{\"12\":1,\"19\":2,\"27\":3,\"28\":2}}],[\"a+b\",{\"1\":{\"124\":1}}],[\"ascii\",{\"1\":{\"1381\":5,\"1382\":1}}],[\"asin\",{\"1\":{\"1370\":1}}],[\"assets\",{\"1\":{\"573\":1}}],[\"assign\",{\"0\":{\"1184\":1},\"1\":{\"272\":3,\"293\":3,\"1065\":1}}],[\"assigned\",{\"1\":{\"103\":1}}],[\"asyncpro\",{\"1\":{\"823\":1}}],[\"asyncfun\",{\"1\":{\"823\":2}}],[\"asyncincrement\",{\"1\":{\"812\":1,\"813\":2}}],[\"async\",{\"0\":{\"1204\":1,\"1205\":1},\"1\":{\"534\":1,\"756\":1,\"768\":2,\"775\":3,\"777\":3,\"799\":2,\"814\":1,\"830\":1,\"1204\":1,\"1205\":2,\"1206\":2,\"1207\":1}}],[\"asynchronous\",{\"1\":{\"1\":1}}],[\"as\",{\"1\":{\"272\":1,\"279\":1,\"280\":1,\"292\":1,\"305\":1,\"308\":1,\"312\":1,\"329\":1,\"333\":1,\"335\":1,\"344\":1,\"351\":1,\"353\":1,\"356\":1,\"359\":1,\"367\":1,\"369\":1,\"373\":3,\"375\":2,\"377\":1,\"379\":1,\"383\":5,\"385\":3,\"395\":1,\"396\":1,\"749\":1,\"787\":1,\"822\":1,\"823\":2,\"827\":2,\"1189\":1,\"1191\":3}}],[\"ast树初步结果\",{\"1\":{\"661\":1}}],[\"ast抽象语法树\",{\"0\":{\"659\":1},\"1\":{\"660\":1}}],[\"ast\",{\"0\":{\"661\":1},\"1\":{\"248\":1,\"249\":2,\"250\":1,\"660\":4,\"661\":4,\"662\":1,\"663\":4,\"702\":1,\"704\":1}}],[\"astexplorer可以把\",{\"1\":{\"248\":1}}],[\"aria\",{\"1\":{\"920\":1}}],[\"arial\",{\"1\":{\"882\":1,\"1013\":1}}],[\"arity\",{\"1\":{\"631\":1}}],[\"arehookinputsequal\",{\"1\":{\"373\":2}}],[\"are\",{\"1\":{\"270\":1,\"272\":1,\"830\":1,\"1386\":2}}],[\"around\",{\"1\":{\"231\":1}}],[\"arr2\",{\"1\":{\"1178\":6,\"1353\":1}}],[\"arrobj\",{\"1\":{\"454\":2}}],[\"arr\",{\"1\":{\"124\":1,\"603\":3,\"604\":3,\"609\":3,\"610\":3,\"617\":3,\"634\":2,\"635\":6,\"640\":3,\"641\":3,\"644\":2,\"661\":6,\"823\":2,\"1160\":2,\"1178\":8,\"1195\":2,\"1197\":2,\"1198\":1,\"1199\":1,\"1221\":4,\"1275\":3,\"1276\":2,\"1352\":1,\"1353\":3,\"1405\":2,\"1461\":1}}],[\"array<router>\",{\"1\":{\"730\":2}}],[\"arrayprototype\",{\"1\":{\"603\":3,\"604\":3,\"609\":3,\"610\":3,\"614\":3}}],[\"arraymethods\",{\"1\":{\"603\":5,\"604\":4,\"609\":4,\"610\":5,\"614\":2,\"617\":2}}],[\"array\",{\"0\":{\"614\":1,\"1195\":1,\"1351\":1},\"1\":{\"603\":6,\"604\":5,\"609\":5,\"610\":5,\"614\":3,\"617\":2,\"624\":1,\"627\":1,\"674\":1,\"675\":1,\"686\":1,\"689\":1,\"695\":2,\"788\":1,\"1171\":1,\"1172\":1,\"1195\":1,\"1197\":1,\"1198\":1,\"1199\":1,\"1276\":2,\"1353\":2,\"1405\":2,\"1440\":1,\"1461\":1}}],[\"arrayformat\",{\"1\":{\"46\":1}}],[\"arraybufferview\",{\"1\":{\"47\":1}}],[\"arraybuffer\",{\"1\":{\"42\":1,\"47\":1,\"52\":1}}],[\"arg2\",{\"1\":{\"1448\":2,\"1450\":2}}],[\"arg1\",{\"1\":{\"1448\":2,\"1450\":2}}],[\"argu\",{\"1\":{\"1016\":3}}],[\"arguments→\",{\"1\":{\"1426\":1}}],[\"arguments\",{\"1\":{\"603\":3,\"604\":3,\"609\":3,\"610\":3,\"614\":3,\"674\":1,\"686\":1,\"1016\":2,\"1163\":1,\"1165\":2,\"1172\":1,\"1275\":1,\"1423\":3,\"1424\":1}}],[\"argsarray\",{\"1\":{\"1449\":2}}],[\"args\",{\"1\":{\"631\":1,\"1165\":2,\"1214\":2}}],[\"arg\",{\"1\":{\"116\":2}}],[\"article\",{\"1\":{\"96\":1,\"790\":1}}],[\"adventurer\",{\"1\":{\"1228\":5}}],[\"address\",{\"1\":{\"1160\":3,\"1214\":1,\"1460\":1,\"1461\":1}}],[\"addevnetlistener\",{\"1\":{\"1130\":1}}],[\"addeventbubblelistener\",{\"1\":{\"286\":2}}],[\"addeventcapturelistener\",{\"1\":{\"286\":2}}],[\"addeventlistener\",{\"1\":{\"114\":1,\"115\":2,\"286\":2,\"695\":1,\"1062\":1,\"1130\":2,\"1136\":1,\"1145\":1,\"1148\":1}}],[\"addasync\",{\"1\":{\"823\":2}}],[\"addafter1second\",{\"1\":{\"820\":1}}],[\"addobserver\",{\"1\":{\"842\":3}}],[\"addobj\",{\"1\":{\"454\":2}}],[\"addone\",{\"1\":{\"816\":1}}],[\"addclass\",{\"1\":{\"1298\":1}}],[\"addcase\",{\"1\":{\"814\":3}}],[\"addchangelistener\",{\"1\":{\"234\":1}}],[\"add4\",{\"1\":{\"749\":2}}],[\"add3\",{\"1\":{\"749\":2}}],[\"add2\",{\"1\":{\"749\":4}}],[\"add1\",{\"1\":{\"749\":6}}],[\"adddep\",{\"1\":{\"626\":1,\"635\":3}}],[\"addsub实例方法\",{\"1\":{\"635\":1}}],[\"addsub\",{\"1\":{\"609\":2,\"615\":2,\"626\":1,\"635\":3}}],[\"additionaldata\",{\"1\":{\"573\":1}}],[\"addpersonwang\",{\"1\":{\"418\":1}}],[\"addtodo\",{\"1\":{\"816\":1}}],[\"addtodolist\",{\"1\":{\"103\":2}}],[\"addtrappedeventlistener\",{\"1\":{\"286\":2}}],[\"add\",{\"0\":{\"1098\":1},\"1\":{\"145\":2,\"155\":2,\"160\":2,\"282\":1,\"305\":2,\"329\":2,\"382\":1,\"418\":1,\"627\":1,\"635\":1,\"636\":1,\"747\":1,\"788\":4,\"802\":1,\"806\":1,\"809\":1,\"820\":2,\"823\":2,\"1098\":1,\"1178\":1}}],[\"adapter\",{\"0\":{\"50\":1},\"1\":{\"68\":2}}],[\"admin\",{\"1\":{\"20\":2,\"21\":2}}],[\"apiopen\",{\"1\":{\"1207\":1}}],[\"api\",{\"0\":{\"211\":1,\"533\":2,\"544\":1,\"545\":1,\"546\":1,\"552\":1,\"559\":1,\"561\":1,\"761\":1,\"1285\":1},\"1\":{\"84\":1,\"100\":1,\"107\":1,\"114\":1,\"120\":1,\"174\":1,\"191\":1,\"192\":1,\"214\":1,\"221\":1,\"262\":2,\"365\":1,\"388\":1,\"468\":1,\"495\":2,\"522\":1,\"525\":2,\"534\":2,\"542\":1,\"543\":1,\"561\":5,\"584\":2,\"585\":2,\"596\":2,\"623\":2,\"626\":1,\"705\":2,\"707\":1,\"752\":1,\"753\":1,\"756\":1,\"771\":1,\"809\":1,\"818\":1,\"823\":2,\"827\":1,\"841\":1,\"849\":1,\"1207\":1}}],[\"apis的代理配置\",{\"1\":{\"28\":1}}],[\"apis\",{\"1\":{\"28\":3}}],[\"app=dva\",{\"1\":{\"823\":1}}],[\"appwithprovider\",{\"1\":{\"785\":2}}],[\"appraisal>\",{\"1\":{\"730\":1}}],[\"appraisal\",{\"1\":{\"730\":1}}],[\"apple\",{\"1\":{\"960\":1}}],[\"applymiddleware\",{\"1\":{\"755\":2,\"760\":2,\"773\":2,\"785\":2,\"811\":1}}],[\"apply\",{\"0\":{\"1449\":1},\"1\":{\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"614\":1,\"1449\":2,\"1451\":4}}],[\"application\",{\"1\":{\"7\":1,\"12\":1,\"103\":1}}],[\"appear>\",{\"1\":{\"508\":1}}],[\"appear属性\",{\"1\":{\"508\":1}}],[\"appendallchildren\",{\"1\":{\"273\":2,\"320\":2,\"325\":2}}],[\"appendinitialchild\",{\"1\":{\"273\":3,\"320\":2,\"325\":2,\"327\":1}}],[\"append\",{\"1\":{\"273\":1,\"274\":2,\"676\":1,\"1321\":1}}],[\"appendchild\",{\"1\":{\"26\":1,\"112\":1,\"273\":1,\"274\":1,\"326\":2,\"327\":3,\"349\":2,\"375\":2,\"385\":2,\"675\":1,\"683\":2,\"689\":1,\"690\":2,\"695\":3,\"1094\":1,\"1321\":1}}],[\"app\",{\"0\":{\"774\":1},\"1\":{\"19\":2,\"26\":2,\"103\":2,\"111\":1,\"136\":1,\"137\":2,\"138\":6,\"149\":1,\"194\":1,\"214\":1,\"407\":2,\"424\":2,\"439\":2,\"448\":4,\"454\":6,\"475\":1,\"487\":2,\"518\":2,\"521\":1,\"529\":1,\"561\":8,\"568\":1,\"570\":3,\"641\":1,\"653\":1,\"732\":4,\"735\":5,\"740\":3,\"760\":2,\"773\":2,\"774\":4,\"785\":2,\"789\":3,\"810\":3,\"811\":1,\"813\":3,\"816\":1,\"820\":4,\"822\":3,\"823\":12,\"826\":3,\"831\":2,\"1192\":2}}],[\"age1\",{\"1\":{\"1433\":1}}],[\"age=18\",{\"1\":{\"722\":1}}],[\"age\",{\"1\":{\"20\":2,\"149\":6,\"448\":2,\"451\":1,\"468\":1,\"498\":2,\"534\":2,\"541\":1,\"583\":6,\"640\":4,\"641\":3,\"653\":3,\"776\":1,\"1160\":3,\"1214\":1,\"1217\":2,\"1224\":11,\"1274\":1,\"1341\":1,\"1433\":6,\"1436\":1,\"1460\":2,\"1461\":2}}],[\"agent\",{\"1\":{\"7\":1}}],[\"a\",{\"1\":{\"17\":2,\"21\":1,\"113\":2,\"124\":1,\"159\":4,\"161\":1,\"194\":4,\"197\":8,\"234\":1,\"270\":3,\"272\":3,\"353\":1,\"356\":2,\"359\":2,\"392\":3,\"431\":1,\"455\":2,\"461\":1,\"519\":2,\"520\":1,\"527\":1,\"596\":5,\"599\":3,\"600\":1,\"601\":11,\"602\":8,\"604\":4,\"609\":1,\"610\":3,\"621\":1,\"626\":3,\"631\":1,\"633\":1,\"634\":4,\"635\":3,\"636\":2,\"650\":4,\"657\":1,\"661\":3,\"662\":1,\"667\":2,\"668\":1,\"669\":1,\"675\":1,\"676\":12,\"683\":3,\"685\":6,\"691\":3,\"719\":1,\"722\":1,\"740\":2,\"750\":2,\"787\":1,\"816\":2,\"830\":3,\"845\":1,\"873\":11,\"877\":1,\"891\":1,\"908\":1,\"1010\":1,\"1016\":1,\"1094\":2,\"1160\":2,\"1181\":2,\"1195\":1,\"1239\":1,\"1243\":1,\"1258\":2,\"1260\":2,\"1265\":2,\"1268\":7,\"1275\":6,\"1364\":1,\"1376\":47,\"1381\":5,\"1382\":10,\"1384\":9,\"1385\":4,\"1386\":3,\"1388\":1,\"1389\":1,\"1390\":2,\"1391\":6,\"1392\":1,\"1405\":3,\"1458\":4}}],[\"ajax模块\",{\"1\":{\"788\":1}}],[\"ajax\",{\"0\":{\"1\":1,\"9\":1,\"14\":1,\"17\":1,\"18\":1,\"76\":1,\"1207\":1},\"1\":{\"2\":2,\"3\":2,\"17\":1,\"71\":1,\"76\":1,\"173\":1,\"184\":1,\"410\":1,\"421\":1,\"452\":1,\"482\":1,\"788\":3,\"1279\":1}}],[\"干就完事了\",{\"1\":{\"0\":1}}],[\"kb\",{\"1\":{\"1279\":1}}],[\"k=v\",{\"1\":{\"662\":3}}],[\"know\",{\"1\":{\"270\":1,\"272\":1}}],[\"k+1\",{\"1\":{\"266\":1}}],[\"keframes\",{\"1\":{\"1016\":1}}],[\"kebab\",{\"1\":{\"472\":1,\"475\":1}}],[\"keep\",{\"1\":{\"433\":1,\"900\":1}}],[\"keepalive\",{\"1\":{\"62\":1}}],[\"keymap\",{\"1\":{\"683\":4,\"691\":4}}],[\"key不能直接绑定在vm实例上\",{\"1\":{\"631\":1}}],[\"key不同\",{\"1\":{\"348\":1,\"352\":1,\"357\":1,\"361\":1}}],[\"key值为\",{\"1\":{\"602\":1,\"603\":1,\"604\":1,\"609\":1,\"610\":1,\"617\":1}}],[\"keyword\",{\"1\":{\"557\":5}}],[\"keyname\",{\"1\":{\"472\":1}}],[\"keycodes\",{\"1\":{\"472\":1,\"563\":1}}],[\"keycode\",{\"1\":{\"472\":2,\"525\":1,\"563\":1,\"1153\":2,\"1154\":1}}],[\"key和type都相同\",{\"1\":{\"357\":1,\"361\":1}}],[\"key相同但是类型不同\",{\"1\":{\"352\":1,\"357\":1,\"361\":1}}],[\"key相同且元素类型相同\",{\"1\":{\"352\":1,\"357\":1,\"361\":1}}],[\"key=>app\",{\"1\":{\"823\":1}}],[\"key=>context\",{\"1\":{\"823\":1}}],[\"key=\",{\"1\":{\"150\":1,\"160\":1,\"220\":1,\"344\":2,\"351\":2,\"353\":6,\"356\":8,\"359\":14,\"460\":1,\"504\":2,\"789\":1,\"827\":1,\"1044\":1}}],[\"key=value\",{\"1\":{\"10\":2}}],[\"key+hash\",{\"1\":{\"139\":1}}],[\"key\",{\"0\":{\"161\":1,\"220\":1,\"343\":1,\"350\":1,\"461\":1,\"1153\":1},\"1\":{\"70\":3,\"116\":2,\"123\":1,\"139\":1,\"142\":1,\"161\":8,\"220\":1,\"252\":8,\"270\":6,\"272\":11,\"319\":4,\"323\":1,\"343\":1,\"346\":3,\"348\":4,\"350\":1,\"352\":4,\"354\":3,\"355\":2,\"357\":8,\"358\":2,\"361\":14,\"422\":2,\"455\":1,\"460\":1,\"461\":8,\"468\":1,\"472\":1,\"574\":2,\"601\":4,\"602\":14,\"603\":2,\"604\":9,\"607\":2,\"608\":5,\"609\":11,\"610\":7,\"612\":2,\"613\":5,\"616\":2,\"617\":2,\"624\":4,\"626\":2,\"631\":5,\"632\":2,\"633\":6,\"634\":2,\"636\":2,\"650\":8,\"657\":8,\"672\":3,\"675\":2,\"676\":21,\"681\":1,\"683\":9,\"685\":19,\"687\":2,\"688\":2,\"691\":7,\"692\":3,\"694\":7,\"702\":1,\"721\":2,\"722\":1,\"731\":3,\"811\":1,\"823\":2,\"843\":1,\"848\":1,\"1153\":2,\"1312\":2,\"1460\":3,\"1461\":9}}],[\"keyset\",{\"1\":{\"683\":1,\"691\":1}}],[\"keys\",{\"0\":{\"1209\":1},\"1\":{\"70\":1,\"627\":5,\"650\":2,\"657\":2,\"694\":2,\"823\":1,\"830\":1,\"1274\":6,\"1404\":1,\"1406\":1}}],[\"koi8\",{\"1\":{\"28\":1}}],[\"k\",{\"1\":{\"0\":1,\"266\":1,\"662\":3,\"695\":5,\"1016\":1,\"1349\":1}}],[\"+0\",{\"1\":{\"1183\":1,\"1413\":1}}],[\"++j\",{\"1\":{\"1258\":1}}],[\"++i\",{\"1\":{\"1258\":1}}],[\"++newstartindex\",{\"1\":{\"683\":4,\"691\":4}}],[\"++oldstartindex\",{\"1\":{\"683\":3,\"691\":3}}],[\"++this\",{\"1\":{\"646\":1,\"655\":1}}],[\"++visitcount\",{\"1\":{\"634\":1,\"635\":1}}],[\"++\",{\"1\":{\"596\":2}}],[\"+=\",{\"1\":{\"272\":2,\"318\":1,\"328\":1,\"407\":1,\"646\":1,\"649\":1,\"651\":4,\"655\":1,\"657\":4,\"661\":3,\"662\":1,\"814\":1,\"1094\":1,\"1260\":2}}],[\"+\",{\"0\":{\"1255\":1},\"1\":{\"0\":1,\"10\":1,\"69\":1,\"72\":1,\"98\":1,\"99\":1,\"100\":1,\"108\":1,\"110\":1,\"121\":1,\"136\":3,\"145\":1,\"160\":1,\"182\":1,\"194\":1,\"197\":3,\"273\":2,\"281\":1,\"282\":1,\"286\":1,\"289\":2,\"290\":1,\"298\":1,\"305\":1,\"318\":1,\"320\":1,\"322\":2,\"325\":1,\"328\":3,\"329\":1,\"333\":1,\"344\":2,\"351\":2,\"353\":2,\"356\":2,\"359\":2,\"361\":1,\"367\":1,\"377\":1,\"388\":2,\"391\":3,\"392\":2,\"395\":1,\"412\":1,\"514\":1,\"519\":1,\"539\":4,\"596\":1,\"634\":4,\"635\":4,\"657\":1,\"661\":7,\"662\":6,\"683\":2,\"691\":2,\"731\":1,\"749\":1,\"776\":1,\"799\":1,\"812\":1,\"815\":2,\"819\":2,\"820\":1,\"829\":1,\"873\":1,\"884\":3,\"937\":1,\"939\":2,\"962\":2,\"966\":2,\"973\":2,\"1013\":1,\"1014\":2,\"1016\":2,\"1031\":2,\"1040\":1,\"1181\":1,\"1230\":1,\"1257\":1,\"1258\":2,\"1262\":2,\"1271\":1,\"1272\":1,\"1273\":1,\"1370\":1,\"1374\":1,\"1385\":2,\"1391\":1,\"1397\":1,\"1405\":2,\"1414\":2,\"1433\":2,\"1458\":5}}],[\"善用ctrl\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
